if (typeof Opal === 'undefined' && typeof module === 'object' && module.exports) {
  Opal = require('opal-runtime').Opal;
}

if (typeof Opal === 'undefined') {
(function(undefined) {
  // @note
  //   A few conventions for the documentation of this file:
  //   1. Always use "//" (in contrast with "/**/")
  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)
  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to
  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.
  //   4. `nil` and `null` being unambiguous refer to the respective
  //      objects/values in Ruby and JavaScript
  //   5. This is still WIP :) so please give feedback and suggestions on how
  //      to improve or for alternative solutions
  //
  //   The way the code is digested before going through Yardoc is a secret kept
  //   in the docs repo (https://github.com/opal/docs/tree/master).

  var global_object = this, console;

  // Detect the global object
  if (typeof(global) !== 'undefined') { global_object = global; }
  if (typeof(window) !== 'undefined') { global_object = window; }

  // Setup a dummy console object if missing
  if (typeof(global_object.console) === 'object') {
    console = global_object.console;
  } else if (global_object.console == null) {
    console = global_object.console = {};
  } else {
    console = {};
  }

  if (!('log' in console)) { console.log = function () {}; }
  if (!('warn' in console)) { console.warn = console.log; }

  if (typeof(this.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return this.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // Constructor for instances of BasicObject
  function BasicObject_alloc(){}

  // Constructor for instances of Object
  function Object_alloc(){}

  // Constructor for instances of Class
  function Class_alloc(){}

  // Constructor for instances of Module
  function Module_alloc(){}

  // Constructor for instances of NilClass (nil)
  function NilClass_alloc(){}

  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // All bridged classes - keep track to donate methods from Object
  var BridgedClasses = {};

  // This is a useful reference to global object inside ruby files
  Opal.global = global_object;
  global_object.Opal = Opal;

  // Configure runtime behavior with regards to require and unsupported fearures
  Opal.config = {
    missing_require_severity: 'error',        // error, warning, ignore
    unsupported_features_severity: 'warning', // error, warning, ignore
    enable_stack_trace: true                  // true, false
  }

  // Minify common function calls
  var $hasOwn = Object.hasOwnProperty;
  var $slice  = Opal.slice = Array.prototype.slice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  Opal.uid = function() {
    unique_id += 2;
    return unique_id;
  };

  // Retrieve or assign the id of an object
  Opal.id = function(obj) {
    if (obj.$$is_number) return (obj * 2)+1;
    return obj.$$id || (obj.$$id = Opal.uid());
  };

  // Globals table
  Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and phantom for examples)
  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // @private
  // Pops an exception from the stack and updates `$!`.
  Opal.pop_exception = function() {
    Opal.gvars["!"] = Opal.exceptions.pop() || nil;
  }

  // Inspect any kind of object, including non Ruby ones
  Opal.inspect = function(obj) {
    if (obj === undefined) {
      return "undefined";
    }
    else if (obj === null) {
      return "null";
    }
    else if (!obj.$$class) {
      return obj.toString();
    }
    else {
      return obj.$inspect();
    }
  }


  // Truth
  // -----

  Opal.truthy = function(val) {
    return (val !== nil && val != null && (!val.$$is_boolean || val == true));
  };

  Opal.falsy = function(val) {
    return (val === nil || val == null || (val.$$is_boolean && val == false))
  };


  // Constants
  // ---------
  //
  // For future reference:
  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)
  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)
  //
  // Legend of MRI concepts/names:
  // - constant reference (cref): the module/class that acts as a namespace
  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside
  //            `module A; module B::C; end; end` is `[B::C, A]`

  // Get the cosntant in the scope of the current cref
  function const_get_name(cref, name) {
    if (cref) return cref.$$const[name];
  }

  // Walk up the nesting array looking for the constant
  function const_lookup_nesting(nesting, name) {
    var i, ii, result, constant;

    if (nesting.length === 0) return;

    // If the nesting is not empty the constant is looked up in its elements
    // and in order. The ancestors of those elements are ignored.
    for (i = 0, ii = nesting.length; i < ii; i++) {
      constant = nesting[i].$$const[name];
      if (constant != null) return constant;
    }
  }

  // Walk up the ancestors chain looking for the constant
  function const_lookup_ancestors(cref, name) {
    var i, ii, result, ancestors;

    if (cref == null) return;

    ancestors = Opal.ancestors(cref);

    for (i = 0, ii = ancestors.length; i < ii; i++) {
      if (ancestors[i].$$const && $hasOwn.call(ancestors[i].$$const, name)) {
        return ancestors[i].$$const[name];
      }
    }
  }

  // Walk up Object's ancestors chain looking for the constant,
  // but only if cref is missing or a module.
  function const_lookup_Object(cref, name) {
    if (cref == null || cref.$$is_module) {
      return const_lookup_ancestors(_Object, name);
    }
  }

  // Call const_missing if nothing else worked
  function const_missing(cref, name, skip_missing) {
    if (!skip_missing) {
      return (cref || _Object).$const_missing(name);
    }
  }

  // Look for the constant just in the current cref or call `#const_missing`
  Opal.const_get_local = function(cref, name, skip_missing) {
    var result;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_a_module) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    result = const_get_name(cref, name);              if (result != null) return result;
    result = const_missing(cref, name, skip_missing); if (result != null) return result;
  }

  // Look for the constant relative to a cref or call `#const_missing` (when the
  // constant is prefixed by `::`).
  Opal.const_get_qualified = function(cref, name, skip_missing) {
    var result, cache, cached, current_version = Opal.const_cache_version;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_a_module) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    if ((cache = cref.$$const_cache) == null) {
      cache = cref.$$const_cache = Object.create(null);
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null);
      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Initialize the top level constant cache generation counter
  Opal.const_cache_version = 1;

  // Look for the constant in the open using the current nesting and the nearest
  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).
  Opal.const_get_relative = function(nesting, name, skip_missing) {
    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;

    if ((cache = nesting.$$const_cache) == null) {
      cache = nesting.$$const_cache = Object.create(null);
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_nesting(nesting, name))     != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null) ||
      ((result = const_lookup_Object(cref, name))         != null);

      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Register the constant on a cref and opportunistically set the name of
  // unnamed classes/modules.
  Opal.const_set = function(cref, name, value) {
    if (cref == null || cref === '::') cref = _Object;

    if (value.$$is_a_module) {
      if (value.$$name == null || value.$$name === nil) value.$$name = name;
      if (value.$$base_module == null) value.$$base_module = cref;
    }

    cref.$$const = (cref.$$const || Object.create(null));
    cref.$$const[name] = value;

    Opal.const_cache_version++;

    // Expose top level constants onto the Opal object
    if (cref === _Object) Opal[name] = value;

    return value;
  };

  // Get all the constants reachable from a given cref, by default will include
  // inherited constants.
  Opal.constants = function(cref, inherit) {
    if (inherit == null) inherit = true;

    var module, modules = [cref], module_constants, i, ii, constants = {}, constant;

    if (inherit) modules = modules.concat(Opal.ancestors(cref));
    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));

    for (i = 0, ii = modules.length; i < ii; i++) {
      module = modules[i];

      // Don not show Objects constants unless we're querying Object itself
      if (cref !== _Object && module == _Object) break;

      for (constant in module.$$const) {
        constants[constant] = true;
      }
    }

    return Object.keys(constants);
  };

  // Remove a constant from a cref.
  Opal.const_remove = function(cref, name) {
    Opal.const_cache_version++;

    if (cref.$$const[name] != null) {
      var old = cref.$$const[name];
      delete cref.$$const[name];
      return old;
    }

    if (cref.$$autoload != null && cref.$$autoload[name] != null) {
      delete cref.$$autoload[name];
      return nil;
    }

    throw Opal.NameError.$new("constant "+cref+"::"+cref.$name()+" not defined");
  };


  // Modules & Classes
  // -----------------

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one
  // was not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `base` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `base` is an object (not a class/module), we simple get its class and
  // use that as the base instead.
  //
  // @param base        [Object] where the class is being created
  // @param superclass  [Class,null] superclass of the new class (may be null)
  // @param id          [String] the name of the class to be created
  // @param constructor [JS.Function] function to use as constructor
  //
  // @return new [Class]  or existing ruby class
  //
  Opal.klass = function(base, superclass, name, constructor) {
    var klass, bridged, alloc;

    if (base == null) {
      base = _Object;
    }

    // If base is an object, use its class
    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    // If the superclass is a function then we're bridging a native JS class
    if (typeof(superclass) === 'function') {
      bridged = superclass;
      superclass = _Object;
    }

    // Try to find the class in the current scope
    klass = const_get_name(base, name);

    // If the class exists in the scope, then we must use that
    if (klass) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(name + " is not a class");
      }

      // Make sure existing class has same superclass
      if (superclass && klass.$$super !== superclass) {
        throw Opal.TypeError.$new("superclass mismatch for class " + name);
      }

      return klass;
    }

    // Class doesnt exist, create a new one with given superclass...

    // Not specifying a superclass means we can assume it to be Object
    if (superclass == null) {
      superclass = _Object;
    }

    // If bridged the JS class will also be the alloc function
    alloc = bridged || Opal.boot_class_alloc(name, constructor, superclass);

    // Create the class object (instance of Class)
    klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    // @property $$super the superclass, doesn't get changed by module inclusions
    klass.$$super = superclass;

    // @property $$parent direct parent class
    //                    starts with the superclass, after klass inclusion is
    //                    the last included klass
    klass.$$parent = superclass;

    Opal.const_set(base, name, klass);

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    base[name] = klass;

    if (bridged) {
      Opal.bridge(klass, alloc);
    }
    else {
      // Call .inherited() hook with new class on the superclass
      if (superclass.$inherited) {
        superclass.$inherited(klass);
      }
    }

    return klass;
  };

  // Boot a base class (makes instances).
  //
  // @param name [String,null] the class name
  // @param constructor [JS.Function] the class' instances constructor/alloc function
  // @param superclass  [Class,null] the superclass object
  // @return [JS.Function] the consturctor holding the prototype for the class' instances
  Opal.boot_class_alloc = function(name, constructor, superclass) {
    if (superclass) {
      var alloc_proxy = function() {};
      alloc_proxy.prototype = superclass.$$proto || superclass.prototype;
      constructor.prototype = new alloc_proxy();
    }

    if (name) {
      constructor.displayName = name+'_alloc';
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  };

  Opal.setup_module_or_class = function(module) {
    // @property $$id Each class/module is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    module.$$id = Opal.uid();

    // @property $$is_a_module Will be true for Module and its subclasses
    //                         instances (namely: Class).
    module.$$is_a_module = true;

    // @property $$inc included modules
    module.$$inc = [];

    // initialize the name with nil
    module.$$name = nil;

    // Initialize the constants table
    module.$$const = Object.create(null);

    // @property $$cvars class variables defined in the current module
    module.$$cvars = Object.create(null);
  }



  // Adds common/required properties to class object (as in `Class.new`)
  //
  // @param name  [String,null] The name of the class
  //
  // @param alloc [JS.Function] The constructor of the class' instances
  //
  // @param superclass_name [String,null]
  //   The name of the super class, this is
  //   usefule to build the `.displayName` of the singleton class
  //
  // @param superclass_alloc [JS.Function]
  //   The constructor of the superclass from which the singleton_class is
  //   derived.
  //
  // @return [Class]
  Opal.setup_class_object = function(name, alloc, superclass_name, superclass_alloc) {
    // Grab the superclass prototype and use it to build an intermediary object
    // in the prototype chain.
    var superclass_alloc_proxy = function() {};
        superclass_alloc_proxy.prototype = superclass_alloc.prototype;
        superclass_alloc_proxy.displayName = superclass_name;

    var singleton_class_alloc = function() {}
        singleton_class_alloc.prototype = new superclass_alloc_proxy();

    // The built class is the only instance of its singleton_class
    var klass = new singleton_class_alloc();

    Opal.setup_module_or_class(klass);

    // @property $$alloc This is the constructor of instances of the current
    //                   class. Its prototype will be used for method lookup
    klass.$$alloc = alloc;

    klass.$$name = name || nil;

    // Set a displayName for the singleton_class
    singleton_class_alloc.displayName = "#<Class:"+(name || ("#<Class:"+klass.$$id+">"))+">";

    // @property $$proto This is the prototype on which methods will be defined
    klass.$$proto = alloc.prototype;

    // @property $$proto.$$class Make available to instances a reference to the
    //                           class they belong to.
    klass.$$proto.$$class = klass;

    // @property constructor keeps a ref to the constructor, but apparently the
    //                       constructor is already set on:
    //
    //                          `var klass = new constructor` is called.
    //
    //                       Maybe there are some browsers not abiding (IE6?)
    klass.constructor = singleton_class_alloc;

    // @property $$is_class Clearly mark this as a class
    klass.$$is_class = true;

    // @property $$class Classes are instances of the class Class
    klass.$$class    = Class;

    return klass;
  };

  // Define new module (or return existing module). The given `base` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the base is a ruby
  // object then that objects real ruby class is used (e.g. if the base is the
  // main object, then the top level `Object` class is used as the base).
  //
  // If a module of the given name is already defined in the base, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the base, then an error is
  // generated instead (cannot have a class and module of same name in same base).
  //
  // Otherwise, a new module is created in the base with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  base [Module, Class] class or module this definition is inside
  // @param  id   [String] the name of the new (or existing) module
  //
  // @return [Module]
  Opal.module = function(base, name) {
    var module;

    if (base == null) {
      base = _Object;
    }

    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    module = const_get_name(base, name);
    if (module == null && base === _Object) module = const_lookup_ancestors(_Object, name);

    if (module) {
      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(name + " is not a module");
      }
    }
    else {
      module = Opal.module_allocate(Module);
      Opal.const_set(base, name, module);
    }

    return module;
  };

  // The implementation for Module#initialize
  // @param module [Module]
  // @param block [Proc,nil]
  // @return nil
  Opal.module_initialize = function(module, block) {
    if (block !== nil) {
      var block_self = block.$$s;
      block.$$s = null;
      block.call(module);
      block.$$s = block_self;
    }
    return nil;
  };

  // Internal function to create a new module instance. This simply sets up
  // the prototype hierarchy and method tables.
  //
  Opal.module_allocate = function(superclass) {
    var mtor = function() {};
    mtor.prototype = superclass.$$alloc.prototype;

    var module_constructor = function() {};
    module_constructor.prototype = new mtor();

    var module = new module_constructor();
    var module_prototype = {};

    Opal.setup_module_or_class(module);

    // initialize dependency tracking
    module.$$included_in = [];

    // Set the display name of the singleton prototype holder
    module_constructor.displayName = "#<Class:#<Module:"+module.$$id+">>"

    // @property $$proto This is the prototype on which methods will be defined
    module.$$proto = module_prototype;

    // @property constructor
    //   keeps a ref to the constructor, but apparently the
    //   constructor is already set on:
    //
    //      `var module = new constructor` is called.
    //
    //   Maybe there are some browsers not abiding (IE6?)
    module.constructor = module_constructor;

    // @property $$is_module Clearly mark this as a module
    module.$$is_module = true;
    module.$$class     = Module;

    // @property $$super
    //   the superclass, doesn't get changed by module inclusions
    module.$$super = superclass;

    // @property $$parent
    //   direct parent class or module
    //   starts with the superclass, after module inclusion is
    //   the last included module
    module.$$parent = superclass;

    return module;
  };

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param object [Object] the ruby object
  // @return [Class] the singleton class for object
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.$$is_class || object.$$is_module) {
      return Opal.build_class_singleton_class(object);
    }

    return Opal.build_object_singleton_class(object);
  };

  // Build the singleton class for an existing class. Class object are built
  // with their singleton class already in the prototype chain and inheriting
  // from their superclass object (up to `Class` itself).
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param klass [Class]
  // @return [Class]
  Opal.build_class_singleton_class = function(object) {
    var alloc, superclass, klass;

    if (object.$$meta) {
      return object.$$meta;
    }

    // The constructor and prototype of the singleton_class instances is the
    // current class constructor and prototype.
    alloc = object.constructor;

    // The singleton_class superclass is the singleton_class of its superclass;
    // but BasicObject has no superclass (its `$$super` is null), thus we
    // fallback on `Class`.
    superclass = object === BasicObject ? Class : Opal.build_class_singleton_class(object.$$super);

    klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);
    klass.$$super  = superclass;
    klass.$$parent = superclass;

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param object [Object]
  // @return [Class]
  Opal.build_object_singleton_class = function(object) {
    var superclass = object.$$class,
        name = "#<Class:#<" + superclass.$$name + ":" + superclass.$$id + ">>";

    var alloc = Opal.boot_class_alloc(name, function(){}, superclass)
    var klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    klass.$$super  = superclass;
    klass.$$parent = superclass;
    klass.$$class  = superclass.$$class;
    klass.$$proto  = object;

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Returns an object containing all pairs of names/values
  // for all class variables defined in provided +module+
  // and its ancestors.
  //
  // @param module [Module]
  // @return [Object]
  Opal.class_variables = function(module) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length,
        result = {};

    for (i = length - 1; i >= 0; i--) {
      var ancestor = ancestors[i];

      for (var cvar in ancestor.$$cvars) {
        result[cvar] = ancestor.$$cvars[cvar];
      }
    }

    return result;
  }

  // Sets class variable with specified +name+ to +value+
  // in provided +module+
  //
  // @param module [Module]
  // @param name [String]
  // @param value [Object]
  Opal.class_variable_set = function(module, name, value) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length;

    for (i = length - 2; i >= 0; i--) {
      var ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$cvars, name)) {
        ancestor.$$cvars[name] = value;
        return value;
      }
    }

    module.$$cvars[name] = value;

    return value;
  }

  // Bridges a single method.
  //
  // @param target [JS::Function] the constructor of the bridged class
  // @param from [Module] the module/class we are importing the method from
  // @param name [String] the method name in JS land (i.e. starting with $)
  // @param body [JS::Function] the body of the method
  Opal.bridge_method = function(target_constructor, from, name, body) {
    var ancestors, i, ancestor, length;

    ancestors = target_constructor.$$bridge.$ancestors();

    // order important here, we have to check for method presence in
    // ancestors from the bridged class to the last ancestor
    for (i = 0, length = ancestors.length; i < length; i++) {
      ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$proto, name) &&
          ancestor.$$proto[name] &&
          !ancestor.$$proto[name].$$donated &&
          !ancestor.$$proto[name].$$stub &&
          ancestor !== from) {
        break;
      }

      if (ancestor === from) {
        target_constructor.prototype[name] = body
        break;
      }
    }
  };

  // Bridges from *donator* to a *target*.
  //
  // @param target [Module] the potentially associated with bridged classes module
  // @param donator [Module] the module/class source of the methods that should be bridged
  Opal.bridge_methods = function(target, donator) {
    var i,
        bridged = BridgedClasses[target.$__id__()],
        donator_id = donator.$__id__();

    if (bridged) {
      BridgedClasses[donator_id] = bridged.slice();

      for (i = bridged.length - 1; i >= 0; i--) {
        Opal_bridge_methods_to_constructor(bridged[i], donator)
      }
    }
  };

  // Actually bridge methods to the bridged (shared) prototype.
  function Opal_bridge_methods_to_constructor(target_constructor, donator) {
    var i,
        method,
        methods = donator.$instance_methods();

    for (i = methods.length - 1; i >= 0; i--) {
      method = '$' + methods[i];
      Opal.bridge_method(target_constructor, donator, method, donator.$$proto[method]);
    }
  }

  // Associate the target as a bridged class for the current "donator"
  function Opal_add_bridged_constructor(target_constructor, donator) {
    var donator_id = donator.$__id__();

    if (!BridgedClasses[donator_id]) {
      BridgedClasses[donator_id] = [];
    }
    BridgedClasses[donator_id].push(target_constructor);
  }

  // Walks the dependency tree detecting the presence of the base among its
  // own dependencies.
  //
  // @param [Integer] base_id The id of the base module (eg. the "includer")
  // @param [Array<Module>] deps The array of dependencies (eg. the included module, included.$$deps)
  // @param [String] prop The property that holds dependencies (eg. "$$deps")
  // @param [JS::Object] seen A JS object holding the cache of already visited objects
  // @return [Boolean] true if a cyclic dependency is present
  Opal.has_cyclic_dep = function has_cyclic_dep(base_id, deps, prop, seen) {
    var i, dep_id, dep;

    for (i = deps.length - 1; i >= 0; i--) {
      dep = deps[i];
      dep_id = dep.$$id;

      if (seen[dep_id]) {
        continue;
      }
      seen[dep_id] = true;

      if (dep_id === base_id) {
        return true;
      }

      if (has_cyclic_dep(base_id, dep[prop], prop, seen)) {
        return true;
      }
    }

    return false;
  }

  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param module [Module] the module to include
  // @param includer [Module] the target class to include module into
  // @return [null]
  Opal.append_features = function(module, includer) {
    var iclass, donator, prototype, methods, id, i;

    // check if this module is already included in the class
    for (i = includer.$$inc.length - 1; i >= 0; i--) {
      if (includer.$$inc[i] === module) {
        return;
      }
    }

    // Check that the base module is not also a dependency, classes can't be
    // dependencies so we have a special case for them.
    if (!includer.$$is_class && Opal.has_cyclic_dep(includer.$$id, [module], '$$inc', {})) {
      throw Opal.ArgumentError.$new('cyclic include detected')
    }

    Opal.const_cache_version++;
    includer.$$inc.push(module);
    module.$$included_in.push(includer);
    Opal.bridge_methods(includer, module);

    // iclass
    iclass = {
      $$name:   module.$$name,
      $$proto:  module.$$proto,
      $$parent: includer.$$parent,
      $$module: module,
      $$iclass: true
    };

    includer.$$parent = iclass;

    methods = module.$instance_methods();

    for (i = methods.length - 1; i >= 0; i--) {
      Opal.update_includer(module, includer, '$' + methods[i])
    }
  };

  // Table that holds all methods that have been defined on all objects
  // It is used for defining method stubs for new coming native classes
  Opal.stubs = {};

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for th new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param klass       [Class] the Ruby class to bridge
  // @param constructor [JS.Function] native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(klass, constructor) {
    if (constructor.$$bridge) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    Opal.stub_subscribers.push(constructor.prototype);

    // Populate constructor with previously stored stubs
    for (var method_name in Opal.stubs) {
      if (!(method_name in constructor.prototype)) {
        constructor.prototype[method_name] = Opal.stub_for(method_name);
      }
    }

    constructor.prototype.$$class = klass;
    constructor.$$bridge          = klass;

    var ancestors = klass.$ancestors();

    // order important here, we have to bridge from the last ancestor to the
    // bridged class
    for (var i = ancestors.length - 1; i >= 0; i--) {
      Opal_add_bridged_constructor(constructor, ancestors[i]);
      Opal_bridge_methods_to_constructor(constructor, ancestors[i]);
    }

    for (var name in BasicObject_alloc.prototype) {
      var method = BasicObject_alloc.prototype[method];

      if (method && method.$$stub && !(name in constructor.prototype)) {
        constructor.prototype[name] = method;
      }
    }

    return klass;
  };

  // Update `jsid` method cache of all classes / modules including `module`.
  Opal.update_includer = function(module, includer, jsid) {
    var dest, current, body,
        klass_includees, j, jj, current_owner_index, module_index;

    body    = module.$$proto[jsid];
    dest    = includer.$$proto;
    current = dest[jsid];

    if (dest.hasOwnProperty(jsid) && !current.$$donated && !current.$$stub) {
      // target class has already defined the same method name - do nothing
    }
    else if (dest.hasOwnProperty(jsid) && !current.$$stub) {
      // target class includes another module that has defined this method
      klass_includees = includer.$$inc;

      for (j = 0, jj = klass_includees.length; j < jj; j++) {
        if (klass_includees[j] === current.$$donated) {
          current_owner_index = j;
        }
        if (klass_includees[j] === module) {
          module_index = j;
        }
      }

      // only redefine method on class if the module was included AFTER
      // the module which defined the current method body. Also make sure
      // a module can overwrite a method it defined before
      if (current_owner_index <= module_index) {
        dest[jsid] = body;
        dest[jsid].$$donated = module;
      }
    }
    else {
      // neither a class, or module included by class, has defined method
      dest[jsid] = body;
      dest[jsid].$$donated = module;
    }

    // if the includer is a module, recursively update all of its includres.
    if (includer.$$included_in) {
      Opal.update_includers(includer, jsid);
    }
  };

  // Update `jsid` method cache of all classes / modules including `module`.
  Opal.update_includers = function(module, jsid) {
    var i, ii, includee, included_in;

    included_in = module.$$included_in;

    if (!included_in) {
      return;
    }

    for (i = 0, ii = included_in.length; i < ii; i++) {
      includee = included_in[i];
      Opal.update_includer(module, includee, jsid);
    }
  };

  // The Array of ancestors for a given module/class
  Opal.ancestors = function(module_or_class) {
    var parent = module_or_class,
        result = [],
        modules, i, ii, j, jj;

    while (parent) {
      result.push(parent);
      for (i = parent.$$inc.length-1; i >= 0; i--) {
        modules = Opal.ancestors(parent.$$inc[i]);

        for(j = 0, jj = modules.length; j < jj; j++) {
          result.push(modules[j]);
        }
      }

      // only the actual singleton class gets included in its ancestry
      // after that, traverse the normal class hierarchy
      if (parent.$$is_singleton && parent.$$singleton_of.$$is_module) {
        parent = parent.$$singleton_of.$$super;
      }
      else {
        parent = parent.$$is_class ? parent.$$super : null;
      }
    }

    return result;
  };


  // Method Missing
  // --------------

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs(["$foo", "$bar", "$baz="]);
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param stubs [Array] an array of method stubs to add
  // @return [undefined]
  Opal.add_stubs = function(stubs) {
    var subscriber, subscribers = Opal.stub_subscribers,
        i, ilength = stubs.length,
        j, jlength = subscribers.length,
        method_name, stub,
        opal_stubs = Opal.stubs;

    for (i = 0; i < ilength; i++) {
      method_name = stubs[i];

      if(!opal_stubs.hasOwnProperty(method_name)) {
        // Save method name to populate other subscribers with this stub
        opal_stubs[method_name] = true;
        stub = Opal.stub_for(method_name);

        for (j = 0; j < jlength; j++) {
          subscriber = subscribers[j];

          if (!(method_name in subscriber)) {
            subscriber[method_name] = stub;
          }
        }
      }
    }
  };

  // Keep a list of prototypes that want method_missing stubs to be added.
  //
  // @default [Prototype List] BasicObject_alloc.prototype
  //
  Opal.stub_subscribers = [BasicObject_alloc.prototype];

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param prototype [Prototype] the target prototype
  // @param stub [String] stub name to add (e.g. "$foo")
  // @return [undefined]
  Opal.add_stub_for = function(prototype, stub) {
    var method_missing_stub = Opal.stub_for(stub);
    prototype[stub] = method_missing_stub;
  };

  // Generate the method_missing stub for a given method name.
  //
  // @param method_name [String] The js-name of the method to stub (e.g. "$foo")
  // @return [undefined]
  Opal.stub_for = function(method_name) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      var args_ary = new Array(arguments.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }

      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  };


  // Methods
  // -------

  // Arity count error dispatcher for methods
  //
  // @param actual [Fixnum] number of arguments given to method
  // @param expected [Fixnum] expected number of arguments
  // @param object [Object] owner of the method +meth+
  // @param meth [String] method name that got wrong number of arguments
  // @raise [ArgumentError]
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_class || object.$$is_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');
  };

  // Arity count error dispatcher for blocks
  //
  // @param actual [Fixnum] number of arguments given to block
  // @param expected [Fixnum] expected number of arguments
  // @param context [Object] context of the block definition
  // @raise [ArgumentError]
  Opal.block_ac = function(actual, expected, context) {
    var inspect = "`block in " + context + "'";

    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');
  };

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, mid, current_func, defcheck, defs) {
    var dispatcher, super_method;

    if (defs) {
      if (obj.$$is_class || obj.$$is_module) {
        dispatcher = defs.$$super;
      }
      else {
        dispatcher = obj.$$class.$$proto;
      }
    }
    else {
      dispatcher = Opal.find_obj_super_dispatcher(obj, mid, current_func);
    }

    super_method = dispatcher['$' + mid];

    if (!defcheck && super_method.$$stub && Opal.Kernel.$method_missing === obj.$method_missing) {
      // method_missing hasn't been explicitly defined
      throw Opal.NoMethodError.$new('super: no superclass method `'+mid+"' for "+obj, mid);
    }

    return super_method;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {
    var call_jsid = jsid;

    if (!current_func) {
      throw Opal.RuntimeError.$new("super called outside of method");
    }

    if (implicit && current_func.$$define_meth) {
      throw Opal.RuntimeError.$new("implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly");
    }

    if (current_func.$$def) {
      call_jsid = current_func.$$jsid;
    }

    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);
  };

  Opal.find_obj_super_dispatcher = function(obj, mid, current_func) {
    var klass = obj.$$meta || obj.$$class;

    // first we need to find the class/module current_func is located on
    klass = Opal.find_owning_class(klass, current_func);

    if (!klass) {
      throw new Error("could not find current class for super()");
    }

    return Opal.find_super_func(klass, '$' + mid, current_func);
  };

  Opal.find_owning_class = function(klass, current_func) {
    var owner = current_func.$$owner;

    while (klass) {
      // repeating for readability

      if (klass.$$iclass && klass.$$module === current_func.$$donated) {
        // this klass was the last one the module donated to
        // case is also hit with multiple module includes
        break;
      }
      else if (klass.$$iclass && klass.$$module === owner) {
        // module has donated to other classes but klass isn't one of those
        break;
      }
      else if (owner.$$is_singleton && klass === owner.$$singleton_of.$$class) {
        // cases like stdlib `Singleton::included` that use a singleton of a singleton
        break;
      }
      else if (klass === owner) {
        // no modules, pure class inheritance
        break;
      }

      klass = klass.$$parent;
    }

    return klass;
  };

  Opal.find_super_func = function(owning_klass, jsid, current_func) {
    var klass = owning_klass.$$parent;

    // now we can find the super
    while (klass) {
      var working = klass.$$proto[jsid];

      if (working && working !== current_func) {
        // ok
        break;
      }

      klass = klass.$$parent;
    }

    return klass.$$proto;
  };

  // Used to return as an expression. Sometimes, we can't simply return from
  // a javascript function as if we were a method, as the return is used as
  // an expression, or even inside a block which must "return" to the outer
  // method. This helper simply throws an error which is then caught by the
  // method. This approach is expensive, so it is only used when absolutely
  // needed.
  //
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // Used to break out of a block.
  Opal.brk = function(val, breaker) {
    breaker.$v = val;
    throw breaker;
  };

  // Builds a new unique breaker, this is to avoid multiple nested breaks to get
  // in the way of each other.
  Opal.new_brk = function() {
    return new Error('unexpected break');
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    var has_mlhs = block.$$has_top_level_mlhs_arg,
        has_trailing_comma = block.$$has_trailing_comma_in_args;

    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {
      arg = Opal.to_ary(arg);
    }

    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      var args_ary = new Array(args.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

      return block.apply(null, args_ary);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate === Opal.JS.Error) {
        return candidate;
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (object.$$meta === klass || object.$$class === klass) {
      return true;
    }

    if (object.$$is_number && klass.$$is_number_class) {
      return true;
    }

    var i, length, ancestors = Opal.ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    return false;
  };

  // Helpers for extracting kwsplats
  // Used for: { **h }
  Opal.to_hash = function(value) {
    if (value.$$is_hash) {
      return value;
    }
    else if (value['$respond_to?']('to_hash', true)) {
      var hash = value.$to_hash();
      if (hash.$$is_hash) {
        return hash;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
      }
    }
    else {
      throw Opal.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
    }
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array.
  // So if we get an Array subclass, extract the wrapped JS array from it

  // Used for: a, b = something (no splat)
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for: a, b = *something (with splat)
  Opal.to_a = function(value) {
    if (value.$$is_array) {
      // A splatted array must be copied
      return value.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for extracting keyword arguments from arguments passed to
  // JS function. If provided +arguments+ list doesn't have a Hash
  // as a last item, returns a blank Hash.
  //
  // @param parameters [Array]
  // @return [Hash]
  //
  Opal.extract_kwargs = function(parameters) {
    var kwargs = parameters[parameters.length - 1];
    if (kwargs != null && kwargs['$respond_to?']('to_hash', true)) {
      Array.prototype.splice.call(parameters, parameters.length - 1, 1);
      return kwargs.$to_hash();
    }
    else {
      return Opal.hash2([], {});
    }
  }

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key       = null,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  // Calls passed method on a ruby object with arguments and block:
  //
  // Can take a method or a method name.
  //
  // 1. When method name gets passed it invokes it by its name
  //    and calls 'method_missing' when object doesn't have this method.
  //    Used internally by Opal to invoke method that takes a block or a splat.
  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'
  //    because it doesn't know the name of the actual method.
  //    Used internally by Opal to invoke 'super'.
  //
  // @example
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')                    # => 4
  //   Opal.send(my_array, my_array.$length)            # => 4
  //
  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]
  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]
  //
  // @param recv [Object] ruby object
  // @param method [Function, String] method body or name of the method
  // @param args [Array] arguments that will be passed to the method call
  // @param block [Function] ruby block
  // @return [Object] returning value of the method call
  Opal.send = function(recv, method, args, block) {
    var body = (typeof(method) === 'string') ? recv['$'+method] : method;

    if (body != null) {
      body.$$p = block;
      return body.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [method].concat(args));
  }

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param obj  [Object, Class] the actual obj to define method for
  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')
  // @param body [JS.Function] the literal JavaScript function used as method
  // @return [null]
  //
  Opal.def = function(obj, jsid, body) {
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    if (!obj.$$eval && (obj.$$is_class || obj.$$is_module)) {
      Opal.defn(obj, jsid, body);
    }
    else {
      Opal.defs(obj, jsid, body);
    }
  };

  // Define method on a module or class (see Opal.def).
  Opal.defn = function(obj, jsid, body) {
    obj.$$proto[jsid] = body;
    // for super dispatcher, etc.
    body.$$owner = obj;

    // is it a module?
    if (obj.$$is_module) {
      Opal.update_includers(obj, jsid);

      if (obj.$$module_function) {
        Opal.defs(obj, jsid, body);
      }
    }

    // is it a bridged class?
    var bridged = obj.$__id__ && !obj.$__id__.$$stub && BridgedClasses[obj.$__id__()];
    if (bridged) {
      for (var i = bridged.length - 1; i >= 0; i--) {
        Opal.bridge_method(bridged[i], obj, jsid, body);
      }
    }

    // method_added/singleton_method_added hooks
    var singleton_of = obj.$$singleton_of;
    if (obj.$method_added && !obj.$method_added.$$stub && !singleton_of) {
      obj.$method_added(jsid.substr(1));
    }
    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(jsid.substr(1));
    }

    return nil;
  };

  // Define a singleton method on the given object (see Opal.def).
  Opal.defs = function(obj, jsid, body) {
    Opal.defn(Opal.get_singleton_class(obj), jsid, body)
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    // TODO: remove from BridgedClasses as well

    if (!$hasOwn.call(obj.$$proto, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.$$proto[jsid];

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_removed && !obj.$$proto.$singleton_method_removed.$$stub) {
        obj.$$proto.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.$$proto[jsid] || obj.$$proto[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.$$proto, jsid);

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_undefined && !obj.$$proto.$singleton_method_undefined.$$stub) {
        obj.$$proto.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body   = obj.$$proto['$' + old],
        alias;

    // When running inside #instance_eval the alias refers to class methods.
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (typeof(body) !== "function" || body.$$stub) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (typeof(body) !== "function" || body.$$stub) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    // If the body is itself an alias use the original body
    // to keep the max depth at 1.
    if (body.$$alias_of) body = body.$$alias_of;

    // We need a wrapper because otherwise method $$owner and other properties
    // would be ovrewritten on the original body.
    alias = function() {
      var block = alias.$$p, args, i, ii;

      args = new Array(arguments.length);
      for(i = 0, ii = arguments.length; i < ii; i++) {
        args[i] = arguments[i];
      }

      if (block != null) { alias.$$p = null }

      return Opal.send(this, body, args, block);
    };

    // Try to make the browser pick the right name
    alias.displayName       = name;
    alias.length            = body.length;
    alias.$$arity           = body.$$arity;
    alias.$$parameters      = body.$$parameters;
    alias.$$source_location = body.$$source_location;
    alias.$$alias_of        = body;
    alias.$$alias_name      = name;

    Opal.defn(obj, id, alias);

    return obj;
  };

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.$$proto[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };


  // Hashes
  // ------

  Opal.hash_init = function(hash) {
    hash.$$smap = Object.create(null);
    hash.$$map  = Object.create(null);
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.$$none = from_hash.$$none;
    to_hash.$$proc = from_hash.$$proc;

    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {
      key = keys[i];

      if (key.$$is_string) {
        value = smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!$hasOwn.call(hash.$$smap, key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash, bucket, last_bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if (!$hasOwn.call(hash.$$map, key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if ($hasOwn.call(hash.$$smap, key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash, bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if ($hasOwn.call(hash.$$map, key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value;

    if (key.$$is_string) {
      if (!$hasOwn.call(hash.$$smap, key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        if (keys[i] === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!$hasOwn.call(hash.$$map, key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!$hasOwn.call(hash.$$map, key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash.$$alloc();
    Opal.hash_init(hash);

    if (arguments_length === 1 && arguments[0].$$is_array) {
      args = arguments[0];
      length = args.length;

      for (i = 0; i < length; i++) {
        if (args[i].length !== 2) {
          throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
        }

        key = args[i][0];
        value = args[i][1];

        Opal.hash_put(hash, key, value);
      }

      return hash;
    }

    if (arguments_length === 1) {
      args = arguments[0];
      for (key in args) {
        if ($hasOwn.call(args, key)) {
          value = args[key];

          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // A faster Hash creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function.
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash.$$alloc();

    hash.$$smap = smap;
    hash.$$map  = Object.create(null);
    hash.$$keys = keys;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range.$$alloc();
        range.begin   = first;
        range.end     = last;
        range.excl    = exc;

    return range;
  };

  // Get the ivar name for a given name.
  // Mostly adds a trailing $ to reserved names.
  //
  Opal.ivar = function(name) {
    if (
        // properties
        name === "constructor" ||
        name === "displayName" ||
        name === "__count__" ||
        name === "__noSuchMethod__" ||
        name === "__parent__" ||
        name === "__proto__" ||

        // methods
        name === "hasOwnProperty" ||
        name === "valueOf"
       )
    {
      return name + "$";
    }

    return name;
  };


  // Regexps
  // -------

  // Escape Regexp special chars letting the resulting string be used to build
  // a new Regexp.
  //
  Opal.escape_regexp = function(str) {
    return str.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
              .replace(/[\n]/g, '\\n')
              .replace(/[\r]/g, '\\r')
              .replace(/[\f]/g, '\\f')
              .replace(/[\t]/g, '\\t');
  }


  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.'
  Opal.require_table   = {'corelib/runtime': true};

  Opal.normalize = function(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  };

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = Opal.normalize(paths[i]);

      if (Opal.require_table[path]) {
        return;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  };

  Opal.load = function(path) {
    path = Opal.normalize(path);

    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      module(Opal);
    }
    else {
      var severity = Opal.config.missing_require_severity;
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        Opal.LoadError ? Opal.LoadError.$new(message) : function(){throw message}();
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  };

  Opal.require = function(path) {
    path = Opal.normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load(path);
  };


  // Initialization
  // --------------

  // Constructors for *instances* of core objects
  Opal.boot_class_alloc('BasicObject', BasicObject_alloc);
  Opal.boot_class_alloc('Object',      Object_alloc,       BasicObject_alloc);
  Opal.boot_class_alloc('Module',      Module_alloc,       Object_alloc);
  Opal.boot_class_alloc('Class',       Class_alloc,        Module_alloc);

  // Constructors for *classes* of core objects
  Opal.BasicObject = BasicObject = Opal.setup_class_object('BasicObject', BasicObject_alloc, 'Class',       Class_alloc);
  Opal.Object      = _Object     = Opal.setup_class_object('Object',      Object_alloc,      'BasicObject', BasicObject.constructor);
  Opal.Module      = Module      = Opal.setup_class_object('Module',      Module_alloc,      'Object',      _Object.constructor);
  Opal.Class       = Class       = Opal.setup_class_object('Class',       Class_alloc,       'Module',      Module.constructor);

  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic
  BasicObject.$$const["BasicObject"] = BasicObject;

  // Assign basic constants
  Opal.const_set(_Object, "BasicObject",  BasicObject);
  Opal.const_set(_Object, "Object",       _Object);
  Opal.const_set(_Object, "Module",       Module);
  Opal.const_set(_Object, "Class",        Class);


  // Fix booted classes to use their metaclass
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;

  // Fix superclasses of booted classes
  BasicObject.$$super = null;
  _Object.$$super     = BasicObject;
  Module.$$super      = _Object;
  Class.$$super       = Module;

  BasicObject.$$parent = null;
  _Object.$$parent     = BasicObject;
  Module.$$parent      = _Object;
  Class.$$parent       = Module;

  // Forward .toString() to #to_s
  _Object.$$proto.toString = function() {
    return this.$to_s();
  };

  // Make Kernel#require immediately available as it's needed to require all the
  // other corelib files.
  _Object.$$proto.$require = Opal.require;

  // Instantiate the top object
  Opal.top = new _Object.$$alloc();

  // Nil
  Opal.klass(_Object, _Object, 'NilClass', NilClass_alloc);
  nil = Opal.nil = new NilClass_alloc();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };
  Opal.breaker  = new Error('unexpected break (old)');
  Opal.returner = new Error('unexpected return');

  TypeError.$$super = Error;
}).call(this);
Opal.loaded(["corelib/runtime"]);
/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/helpers"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$coerce_to!', '$!=', '$[]', '$upcase']);
  return (function($base, $parent_nesting) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Opal_bridge_1, TMP_Opal_type_error_2, TMP_Opal_coerce_to_3, TMP_Opal_coerce_to$B_4, TMP_Opal_coerce_to$q_5, TMP_Opal_try_convert_6, TMP_Opal_compare_7, TMP_Opal_destructure_8, TMP_Opal_respond_to$q_9, TMP_Opal_inspect_obj_10, TMP_Opal_instance_variable_name$B_11, TMP_Opal_class_variable_name$B_12, TMP_Opal_const_name$B_13, TMP_Opal_pristine_14;

    
    Opal.defs(self, '$bridge', TMP_Opal_bridge_1 = function $$bridge(klass, constructor) {
      var self = this;

      return Opal.bridge(klass, constructor)
    }, TMP_Opal_bridge_1.$$arity = 2);
    Opal.defs(self, '$type_error', TMP_Opal_type_error_2 = function $$type_error(object, type, method, coerced) {
      var $a, self = this;

      if (method == null) {
        method = nil;
      }
      if (coerced == null) {
        coerced = nil;
      }
      if ($truthy(($truthy($a = method) ? coerced : $a))) {
        return Opal.const_get_relative($nesting, 'TypeError').$new("" + "can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()))
        } else {
        return Opal.const_get_relative($nesting, 'TypeError').$new("" + "no implicit conversion of " + (object.$class()) + " into " + (type))
      }
    }, TMP_Opal_type_error_2.$$arity = -3);
    Opal.defs(self, '$coerce_to', TMP_Opal_coerce_to_3 = function $$coerce_to(object, type, method) {
      var self = this;

      
      if ($truthy(type['$==='](object))) {
        return object};
      if ($truthy(object['$respond_to?'](method))) {
        } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    }, TMP_Opal_coerce_to_3.$$arity = 3);
    Opal.defs(self, '$coerce_to!', TMP_Opal_coerce_to$B_4 = function(object, type, method) {
      var self = this, coerced = nil;

      
      coerced = self.$coerce_to(object, type, method);
      if ($truthy(type['$==='](coerced))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_Opal_coerce_to$B_4.$$arity = 3);
    Opal.defs(self, '$coerce_to?', TMP_Opal_coerce_to$q_5 = function(object, type, method) {
      var self = this, coerced = nil;

      
      if ($truthy(object['$respond_to?'](method))) {
        } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ($truthy(coerced['$nil?']())) {
        return nil};
      if ($truthy(type['$==='](coerced))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_Opal_coerce_to$q_5.$$arity = 3);
    Opal.defs(self, '$try_convert', TMP_Opal_try_convert_6 = function $$try_convert(object, type, method) {
      var self = this;

      
      if ($truthy(type['$==='](object))) {
        return object};
      if ($truthy(object['$respond_to?'](method))) {
        return object.$__send__(method)
        } else {
        return nil
      };
    }, TMP_Opal_try_convert_6.$$arity = 3);
    Opal.defs(self, '$compare', TMP_Opal_compare_7 = function $$compare(a, b) {
      var self = this, compare = nil;

      
      compare = a['$<=>'](b);
      if ($truthy(compare === nil)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    }, TMP_Opal_compare_7.$$arity = 2);
    Opal.defs(self, '$destructure', TMP_Opal_destructure_8 = function $$destructure(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        var args_ary = new Array(args.length);
        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

        return args_ary;
      }
    
    }, TMP_Opal_destructure_8.$$arity = 1);
    Opal.defs(self, '$respond_to?', TMP_Opal_respond_to$q_9 = function(obj, method) {
      var self = this;

      
      
      if (obj == null || !obj.$$class) {
        return false;
      }
    ;
      return obj['$respond_to?'](method);
    }, TMP_Opal_respond_to$q_9.$$arity = 2);
    Opal.defs(self, '$inspect_obj', TMP_Opal_inspect_obj_10 = function $$inspect_obj(obj) {
      var self = this;

      return Opal.inspect(obj)
    }, TMP_Opal_inspect_obj_10.$$arity = 1);
    Opal.defs(self, '$instance_variable_name!', TMP_Opal_instance_variable_name$B_11 = function(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](name, Opal.const_get_relative($nesting, 'String'), "to_str");
      if ($truthy(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    }, TMP_Opal_instance_variable_name$B_11.$$arity = 1);
    Opal.defs(self, '$class_variable_name!', TMP_Opal_class_variable_name$B_12 = function(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](name, Opal.const_get_relative($nesting, 'String'), "to_str");
      if ($truthy(name.length < 3 || name.slice(0,2) !== '@@')) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "`" + (name) + "' is not allowed as a class variable name", name))};
      return name;
    }, TMP_Opal_class_variable_name$B_12.$$arity = 1);
    Opal.defs(self, '$const_name!', TMP_Opal_const_name$B_13 = function(const_name) {
      var self = this;

      
      const_name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](const_name, Opal.const_get_relative($nesting, 'String'), "to_str");
      if ($truthy(const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase()))) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError'), "" + "wrong constant name " + (const_name))};
      return const_name;
    }, TMP_Opal_const_name$B_13.$$arity = 1);
    Opal.defs(self, '$pristine', TMP_Opal_pristine_14 = function $$pristine(owner_class, $a_rest) {
      var self = this, method_names;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      method_names = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        method_names[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      
      var method_name;
      for (var i = method_names.length - 1; i >= 0; i--) {
        method_name = method_names[i];
        owner_class.$$proto['$'+method_name].$$pristine = true
      }
    ;
      return nil;
    }, TMP_Opal_pristine_14.$$arity = -2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/module"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$class_variable_name!', '$new', '$const_name!', '$=~', '$inject', '$split', '$const_get', '$==', '$!', '$start_with?', '$to_proc', '$lambda', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$+', '$to_s', '$__id__', '$constants', '$include?', '$copy_class_variables', '$copy_constants']);
  return (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_allocate_1, TMP_Module_initialize_2, TMP_Module_$eq$eq$eq_3, TMP_Module_$lt_4, TMP_Module_$lt$eq_5, TMP_Module_$gt_6, TMP_Module_$gt$eq_7, TMP_Module_$lt$eq$gt_8, TMP_Module_alias_method_9, TMP_Module_alias_native_10, TMP_Module_ancestors_11, TMP_Module_append_features_12, TMP_Module_attr_accessor_13, TMP_Module_attr_reader_14, TMP_Module_attr_writer_15, TMP_Module_autoload_16, TMP_Module_class_variables_17, TMP_Module_class_variable_get_18, TMP_Module_class_variable_set_19, TMP_Module_class_variable_defined$q_20, TMP_Module_remove_class_variable_21, TMP_Module_constants_22, TMP_Module_constants_23, TMP_Module_nesting_24, TMP_Module_const_defined$q_25, TMP_Module_const_get_27, TMP_Module_const_missing_28, TMP_Module_const_set_29, TMP_Module_public_constant_30, TMP_Module_define_method_31, TMP_Module_remove_method_33, TMP_Module_singleton_class$q_34, TMP_Module_include_35, TMP_Module_included_modules_36, TMP_Module_include$q_37, TMP_Module_instance_method_38, TMP_Module_instance_methods_39, TMP_Module_included_40, TMP_Module_extended_41, TMP_Module_method_added_42, TMP_Module_method_removed_43, TMP_Module_method_undefined_44, TMP_Module_module_eval_45, TMP_Module_module_exec_47, TMP_Module_method_defined$q_48, TMP_Module_module_function_49, TMP_Module_name_50, TMP_Module_remove_const_51, TMP_Module_to_s_52, TMP_Module_undef_method_53, TMP_Module_instance_variables_54, TMP_Module_dup_55, TMP_Module_copy_class_variables_56, TMP_Module_copy_constants_57;

    
    Opal.defs(self, '$allocate', TMP_Module_allocate_1 = function $$allocate() {
      var self = this;

      
      var module;

      module = Opal.module_allocate(self);
      return module;
    
    }, TMP_Module_allocate_1.$$arity = 0);
    
    Opal.defn(self, '$initialize', TMP_Module_initialize_2 = function $$initialize() {
      var self = this, $iter = TMP_Module_initialize_2.$$p, block = $iter || nil;

      if ($iter) TMP_Module_initialize_2.$$p = null;
      return Opal.module_initialize(self, block)
    }, TMP_Module_initialize_2.$$arity = 0);
    
    Opal.defn(self, '$===', TMP_Module_$eq$eq$eq_3 = function(object) {
      var self = this;

      
      if ($truthy(object == null)) {
        return false};
      return Opal.is_a(object, self);
    }, TMP_Module_$eq$eq$eq_3.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Module_$lt_4 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Module')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    ;
    }, TMP_Module_$lt_4.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Module_$lt$eq_5 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_lt(self, other))
    }, TMP_Module_$lt$eq_5.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Module_$gt_6 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Module')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    }, TMP_Module_$gt_6.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Module_$gt$eq_7 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_gt(self, other))
    }, TMP_Module_$gt$eq_7.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Module_$lt$eq$gt_8 = function(other) {
      var self = this, lt = nil;

      
      
      if (self === other) {
        return 0;
      }
    ;
      if ($truthy(Opal.const_get_relative($nesting, 'Module')['$==='](other))) {
        } else {
        return nil
      };
      lt = $rb_lt(self, other);
      if ($truthy(lt['$nil?']())) {
        return nil};
      if ($truthy(lt)) {
        return -1
        } else {
        return 1
      };
    }, TMP_Module_$lt$eq$gt_8.$$arity = 1);
    
    Opal.defn(self, '$alias_method', TMP_Module_alias_method_9 = function $$alias_method(newname, oldname) {
      var self = this;

      
      Opal.alias(self, newname, oldname);
      return self;
    }, TMP_Module_alias_method_9.$$arity = 2);
    
    Opal.defn(self, '$alias_native', TMP_Module_alias_native_10 = function $$alias_native(mid, jsid) {
      var self = this;

      if (jsid == null) {
        jsid = mid;
      }
      
      Opal.alias_native(self, mid, jsid);
      return self;
    }, TMP_Module_alias_native_10.$$arity = -2);
    
    Opal.defn(self, '$ancestors', TMP_Module_ancestors_11 = function $$ancestors() {
      var self = this;

      return Opal.ancestors(self)
    }, TMP_Module_ancestors_11.$$arity = 0);
    
    Opal.defn(self, '$append_features', TMP_Module_append_features_12 = function $$append_features(includer) {
      var self = this;

      
      Opal.append_features(self, includer);
      return self;
    }, TMP_Module_append_features_12.$$arity = 1);
    
    Opal.defn(self, '$attr_accessor', TMP_Module_attr_accessor_13 = function $$attr_accessor($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      $send(self, 'attr_reader', Opal.to_a(names));
      return $send(self, 'attr_writer', Opal.to_a(names));
    }, TMP_Module_attr_accessor_13.$$arity = -1);
    Opal.alias(self, "attr", "attr_accessor");
    
    Opal.defn(self, '$attr_reader', TMP_Module_attr_reader_14 = function $$attr_reader($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar) {
          return function() {
            if (this[ivar] == null) {
              return nil;
            }
            else {
              return this[ivar];
            }
          };
        })(ivar);

        // initialize the instance variable as nil
        proto[ivar] = nil;

        body.$$parameters = [];
        body.$$arity = 0;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    ;
      return nil;
    }, TMP_Module_attr_reader_14.$$arity = -1);
    
    Opal.defn(self, '$attr_writer', TMP_Module_attr_writer_15 = function $$attr_writer($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar){
          return function(value) {
            return this[ivar] = value;
          }
        })(ivar);

        body.$$parameters = [['req']];
        body.$$arity = 1;

        // initialize the instance variable as nil
        proto[ivar] = nil;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    ;
      return nil;
    }, TMP_Module_attr_writer_15.$$arity = -1);
    
    Opal.defn(self, '$autoload', TMP_Module_autoload_16 = function $$autoload(const$, path) {
      var self = this;

      
      if (self.$$autoload == null) self.$$autoload = {};
      Opal.const_cache_version++;
      self.$$autoload[const$] = path;
      return nil;
    
    }, TMP_Module_autoload_16.$$arity = 2);
    
    Opal.defn(self, '$class_variables', TMP_Module_class_variables_17 = function $$class_variables() {
      var self = this;

      return Object.keys(Opal.class_variables(self))
    }, TMP_Module_class_variables_17.$$arity = 0);
    
    Opal.defn(self, '$class_variable_get', TMP_Module_class_variable_get_18 = function $$class_variable_get(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$class_variable_name!'](name);
      
      var value = Opal.class_variables(self)[name];
      if (value == null) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "uninitialized class variable " + (name) + " in " + (self), name))
      }
      return value;
    ;
    }, TMP_Module_class_variable_get_18.$$arity = 1);
    
    Opal.defn(self, '$class_variable_set', TMP_Module_class_variable_set_19 = function $$class_variable_set(name, value) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variable_set(self, name, value);
    }, TMP_Module_class_variable_set_19.$$arity = 2);
    
    Opal.defn(self, '$class_variable_defined?', TMP_Module_class_variable_defined$q_20 = function(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variables(self).hasOwnProperty(name);
    }, TMP_Module_class_variable_defined$q_20.$$arity = 1);
    
    Opal.defn(self, '$remove_class_variable', TMP_Module_remove_class_variable_21 = function $$remove_class_variable(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$class_variable_name!'](name);
      
      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {
        var value = self.$$cvars[name];
        delete self.$$cvars[name];
        return value;
      } else {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "cannot remove " + (name) + " for " + (self)))
      }
    ;
    }, TMP_Module_remove_class_variable_21.$$arity = 1);
    
    Opal.defn(self, '$constants', TMP_Module_constants_22 = function $$constants(inherit) {
      var self = this;

      if (inherit == null) {
        inherit = true;
      }
      return Opal.constants(self, inherit)
    }, TMP_Module_constants_22.$$arity = -1);
    Opal.defs(self, '$constants', TMP_Module_constants_23 = function $$constants(inherit) {
      var self = this;

      
      if (inherit == null) {
        var nesting = (self.$$nesting || []).concat(Opal.Object),
            constant, constants = {},
            i, ii;

        for(i = 0, ii = nesting.length; i < ii; i++) {
          for (constant in nesting[i].$$const) {
            constants[constant] = true;
          }
        }
        return Object.keys(constants);
      } else {
        return Opal.constants(self, inherit)
      }
    
    }, TMP_Module_constants_23.$$arity = -1);
    Opal.defs(self, '$nesting', TMP_Module_nesting_24 = function $$nesting() {
      var self = this;

      return self.$$nesting || []
    }, TMP_Module_nesting_24.$$arity = 0);
    
    Opal.defn(self, '$const_defined?', TMP_Module_const_defined$q_25 = function(name, inherit) {
      var self = this;

      if (inherit == null) {
        inherit = true;
      }
      
      name = Opal.const_get_relative($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(name['$=~'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      var module, modules = [self], module_constants, i, ii;

      // Add up ancestors if inherit is true
      if (inherit) {
        modules = modules.concat(Opal.ancestors(self));

        // Add Object's ancestors if it's a module – modules have no ancestors otherwise
        if (self.$$is_module) {
          modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));
        }
      }

      for (i = 0, ii = modules.length; i < ii; i++) {
        module = modules[i];
        if (module.$$const[name] != null) {
          return true;
        }
      }

      return false;
    ;
    }, TMP_Module_const_defined$q_25.$$arity = -2);
    
    Opal.defn(self, '$const_get', TMP_Module_const_get_27 = function $$const_get(name, inherit) {
      var TMP_26, self = this;

      if (inherit == null) {
        inherit = true;
      }
      
      name = Opal.const_get_relative($nesting, 'Opal')['$const_name!'](name);
      
      if (name.indexOf('::') === 0 && name !== '::'){
        name = name.slice(2);
      }
    ;
      if ($truthy(name.indexOf('::') != -1 && name != '::')) {
        return $send(name.$split("::"), 'inject', [self], (TMP_26 = function(o, c){var self = TMP_26.$$s || this;
if (o == null) o = nil;if (c == null) c = nil;
        return o.$const_get(c)}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26))};
      if ($truthy(name['$=~'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      if (inherit) {
        return Opal.const_get_relative([self], name);
      } else {
        return Opal.const_get_local(self, name);
      }
    ;
    }, TMP_Module_const_get_27.$$arity = -2);
    
    Opal.defn(self, '$const_missing', TMP_Module_const_missing_28 = function $$const_missing(name) {
      var self = this, full_const_name = nil;

      
      
      if (self.$$autoload) {
        var file = self.$$autoload[name];

        if (file) {
          self.$require(file);

          return self.$const_get(name);
        }
      }
    ;
      full_const_name = (function() {if (self['$=='](Opal.const_get_relative($nesting, 'Object'))) {
        return name
        } else {
        return "" + (self) + "::" + (name)
      }; return nil; })();
      return self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "uninitialized constant " + (full_const_name), name));
    }, TMP_Module_const_missing_28.$$arity = 1);
    
    Opal.defn(self, '$const_set', TMP_Module_const_set_29 = function $$const_set(name, value) {
      var $a, self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(($truthy($a = name['$=~'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Opal'), 'CONST_NAME_REGEXP'))['$!']()) ? $a : name['$start_with?']("::")))) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))};
      Opal.const_set(self, name, value);
      return value;
    }, TMP_Module_const_set_29.$$arity = 2);
    
    Opal.defn(self, '$public_constant', TMP_Module_public_constant_30 = function $$public_constant(const_name) {
      var self = this;

      return nil
    }, TMP_Module_public_constant_30.$$arity = 1);
    
    Opal.defn(self, '$define_method', TMP_Module_define_method_31 = function $$define_method(name, method) {
      var $a, TMP_32, self = this, $iter = TMP_Module_define_method_31.$$p, block = $iter || nil, $case = nil;

      if ($iter) TMP_Module_define_method_31.$$p = null;
      
      if ($truthy(method === undefined && block === nil)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to create a Proc object without a block")};
      block = ($truthy($a = block) ? $a : (function() {$case = method;
      if (Opal.const_get_relative($nesting, 'Proc')['$===']($case)) {return method}
      else if (Opal.const_get_relative($nesting, 'Method')['$===']($case)) {return method.$to_proc().$$unbound}
      else if (Opal.const_get_relative($nesting, 'UnboundMethod')['$===']($case)) {return $send(self, 'lambda', [], (TMP_32 = function($b_rest){var self = TMP_32.$$s || this, args, bound = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        bound = method.$bind(self);
        return $send(bound, 'call', Opal.to_a(args));}, TMP_32.$$s = self, TMP_32.$$arity = -1, TMP_32))}
      else {return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + (block.$class()) + " (expected Proc/Method)")}})());
      
      var id = '$' + name;

      block.$$jsid        = name;
      block.$$s           = null;
      block.$$def         = block;
      block.$$define_meth = true;

      Opal.defn(self, id, block);

      return name;
    ;
    }, TMP_Module_define_method_31.$$arity = -2);
    
    Opal.defn(self, '$remove_method', TMP_Module_remove_method_33 = function $$remove_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.rdef(self, "$" + names[i]);
      }
    ;
      return self;
    }, TMP_Module_remove_method_33.$$arity = -1);
    
    Opal.defn(self, '$singleton_class?', TMP_Module_singleton_class$q_34 = function() {
      var self = this;

      return !!self.$$is_singleton
    }, TMP_Module_singleton_class$q_34.$$arity = 0);
    
    Opal.defn(self, '$include', TMP_Module_include_35 = function $$include($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    ;
      return self;
    }, TMP_Module_include_35.$$arity = -1);
    
    Opal.defn(self, '$included_modules', TMP_Module_included_modules_36 = function $$included_modules() {
      var self = this;

      
      var results;

      var module_chain = function(klass) {
        var included = [];

        for (var i = 0, ii = klass.$$inc.length; i < ii; i++) {
          var mod_or_class = klass.$$inc[i];
          included.push(mod_or_class);
          included = included.concat(module_chain(mod_or_class));
        }

        return included;
      };

      results = module_chain(self);

      // need superclass's modules
      if (self.$$is_class) {
        for (var cls = self; cls; cls = cls.$$super) {
          results = results.concat(module_chain(cls));
        }
      }

      return results;
    
    }, TMP_Module_included_modules_36.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Module_include$q_37 = function(mod) {
      var self = this;

      
      if (!mod.$$is_module) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
      }

      var i, ii, mod2, ancestors = Opal.ancestors(self);

      for (i = 0, ii = ancestors.length; i < ii; i++) {
        mod2 = ancestors[i];
        if (mod2 === mod && mod2 !== self) {
          return true;
        }
      }

      return false;
    
    }, TMP_Module_include$q_37.$$arity = 1);
    
    Opal.defn(self, '$instance_method', TMP_Module_instance_method_38 = function $$instance_method(name) {
      var self = this;

      
      var meth = self.$$proto['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return Opal.const_get_relative($nesting, 'UnboundMethod').$new(self, meth.$$owner || self, meth, name);
    
    }, TMP_Module_instance_method_38.$$arity = 1);
    
    Opal.defn(self, '$instance_methods', TMP_Module_instance_methods_39 = function $$instance_methods(include_super) {
      var self = this;

      if (include_super == null) {
        include_super = true;
      }
      
      var value,
          methods = [],
          proto   = self.$$proto;

      for (var prop in proto) {
        if (prop.charAt(0) !== '$' || prop.charAt(1) === '$') {
          continue;
        }

        value = proto[prop];

        if (typeof(value) !== "function") {
          continue;
        }

        if (value.$$stub) {
          continue;
        }

        if (!self.$$is_module) {
          if (self !== Opal.BasicObject && value === Opal.BasicObject.$$proto[prop]) {
            continue;
          }

          if (!include_super && !proto.hasOwnProperty(prop)) {
            continue;
          }

          if (!include_super && value.$$donated) {
            continue;
          }
        }

        methods.push(prop.substr(1));
      }

      return methods;
    
    }, TMP_Module_instance_methods_39.$$arity = -1);
    
    Opal.defn(self, '$included', TMP_Module_included_40 = function $$included(mod) {
      var self = this;

      return nil
    }, TMP_Module_included_40.$$arity = 1);
    
    Opal.defn(self, '$extended', TMP_Module_extended_41 = function $$extended(mod) {
      var self = this;

      return nil
    }, TMP_Module_extended_41.$$arity = 1);
    
    Opal.defn(self, '$method_added', TMP_Module_method_added_42 = function $$method_added($a_rest) {
      var self = this;

      return nil
    }, TMP_Module_method_added_42.$$arity = -1);
    
    Opal.defn(self, '$method_removed', TMP_Module_method_removed_43 = function $$method_removed($a_rest) {
      var self = this;

      return nil
    }, TMP_Module_method_removed_43.$$arity = -1);
    
    Opal.defn(self, '$method_undefined', TMP_Module_method_undefined_44 = function $$method_undefined($a_rest) {
      var self = this;

      return nil
    }, TMP_Module_method_undefined_44.$$arity = -1);
    
    Opal.defn(self, '$module_eval', TMP_Module_module_eval_45 = function $$module_eval($a_rest) {
      var $b, TMP_46, self = this, args, $iter = TMP_Module_module_eval_45.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Module_module_eval_45.$$p = null;
      
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
          } else {
          Opal.const_get_relative($nesting, 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = Opal.const_get_relative($nesting, 'Opal').$compile(string, compiling_options);
        block = $send(Opal.const_get_relative($nesting, 'Kernel'), 'proc', [], (TMP_46 = function(){var self = TMP_46.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46));
      } else if ($truthy($rb_gt(args.$size(), 0))) {
        Opal.const_get_relative($nesting, 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), $rb_plus("" + "wrong number of arguments (" + (args.$size()) + " for 0)", "\n\n  NOTE:If you want to enable passing a String argument please add \"require 'opal-parser'\" to your script\n"))};
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, [self]);
      block.$$s = old;

      return result;
    ;
    }, TMP_Module_module_eval_45.$$arity = -1);
    Opal.alias(self, "class_eval", "module_eval");
    
    Opal.defn(self, '$module_exec', TMP_Module_module_exec_47 = function $$module_exec($a_rest) {
      var self = this, args, $iter = TMP_Module_module_exec_47.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Module_module_exec_47.$$p = null;
      
      if (block === nil) {
        self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    
    }, TMP_Module_module_exec_47.$$arity = -1);
    Opal.alias(self, "class_exec", "module_exec");
    
    Opal.defn(self, '$method_defined?', TMP_Module_method_defined$q_48 = function(method) {
      var self = this;

      
      var body = self.$$proto['$' + method];
      return (!!body) && !body.$$stub;
    
    }, TMP_Module_method_defined$q_48.$$arity = 1);
    
    Opal.defn(self, '$module_function', TMP_Module_module_function_49 = function $$module_function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.$$proto[id];

          Opal.defs(self, id, func);
        }
      }

      return self;
    
    }, TMP_Module_module_function_49.$$arity = -1);
    
    Opal.defn(self, '$name', TMP_Module_name_50 = function $$name() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        // Give up if any of the ancestors is unnamed
        if (base.$$name === nil || base.$$name == null) return nil;

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    }, TMP_Module_name_50.$$arity = 0);
    
    Opal.defn(self, '$remove_const', TMP_Module_remove_const_51 = function $$remove_const(name) {
      var self = this;

      return Opal.const_remove(self, name)
    }, TMP_Module_remove_const_51.$$arity = 1);
    
    Opal.defn(self, '$to_s', TMP_Module_to_s_52 = function $$to_s() {
      var $a, self = this;

      return ($truthy($a = Opal.Module.$name.call(self)) ? $a : "" + "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">")
    }, TMP_Module_to_s_52.$$arity = 0);
    
    Opal.defn(self, '$undef_method', TMP_Module_undef_method_53 = function $$undef_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.udef(self, "$" + names[i]);
      }
    ;
      return self;
    }, TMP_Module_undef_method_53.$$arity = -1);
    
    Opal.defn(self, '$instance_variables', TMP_Module_instance_variables_54 = function $$instance_variables() {
      var self = this, consts = nil;

      
      consts = (Opal.Module.$$nesting = $nesting, self.$constants());
      
      var result = [];

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {
          result.push('@' + name);
        }
      }

      return result;
    ;
    }, TMP_Module_instance_variables_54.$$arity = 0);
    
    Opal.defn(self, '$dup', TMP_Module_dup_55 = function $$dup() {
      var self = this, $iter = TMP_Module_dup_55.$$p, $yield = $iter || nil, copy = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Module_dup_55.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      copy = $send(self, Opal.find_super_dispatcher(self, 'dup', TMP_Module_dup_55, false), $zuper, $iter);
      copy.$copy_class_variables(self);
      copy.$copy_constants(self);
      return copy;
    }, TMP_Module_dup_55.$$arity = 0);
    
    Opal.defn(self, '$copy_class_variables', TMP_Module_copy_class_variables_56 = function $$copy_class_variables(other) {
      var self = this;

      
      for (var name in other.$$cvars) {
        self.$$cvars[name] = other.$$cvars[name];
      }
    
    }, TMP_Module_copy_class_variables_56.$$arity = 1);
    return (Opal.defn(self, '$copy_constants', TMP_Module_copy_constants_57 = function $$copy_constants(other) {
      var self = this;

      
      var name, other_constants = other.$$const;

      for (name in other_constants) {
        Opal.const_set(self, name, other_constants[name]);
      }
    
    }, TMP_Module_copy_constants_57.$$arity = 1), nil) && 'copy_constants';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$initialize_copy', '$allocate', '$name', '$to_s']);
  
  self.$require("corelib/module");
  return (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_new_1, TMP_Class_allocate_2, TMP_Class_inherited_3, TMP_Class_initialize_dup_4, TMP_Class_new_5, TMP_Class_superclass_6, TMP_Class_to_s_7;

    
    Opal.defs(self, '$new', TMP_Class_new_1 = function(superclass) {
      var self = this, $iter = TMP_Class_new_1.$$p, block = $iter || nil;

      if (superclass == null) {
        superclass = Opal.const_get_relative($nesting, 'Object');
      }
      if ($iter) TMP_Class_new_1.$$p = null;
      
      if (!superclass.$$is_class) {
        throw Opal.TypeError.$new("superclass must be a Class");
      }

      var alloc = Opal.boot_class_alloc(null, function(){}, superclass);
      var klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);

      klass.$$super  = superclass;
      klass.$$parent = superclass;

      superclass.$inherited(klass);
      Opal.module_initialize(klass, block);

      return klass;
    
    }, TMP_Class_new_1.$$arity = -1);
    
    Opal.defn(self, '$allocate', TMP_Class_allocate_2 = function $$allocate() {
      var self = this;

      
      var obj = new self.$$alloc();
      obj.$$id = Opal.uid();
      return obj;
    
    }, TMP_Class_allocate_2.$$arity = 0);
    
    Opal.defn(self, '$inherited', TMP_Class_inherited_3 = function $$inherited(cls) {
      var self = this;

      return nil
    }, TMP_Class_inherited_3.$$arity = 1);
    
    Opal.defn(self, '$initialize_dup', TMP_Class_initialize_dup_4 = function $$initialize_dup(original) {
      var self = this;

      
      self.$initialize_copy(original);
      
      self.$$name = null;
      self.$$full_name = null;
    ;
    }, TMP_Class_initialize_dup_4.$$arity = 1);
    
    Opal.defn(self, '$new', TMP_Class_new_5 = function($a_rest) {
      var self = this, args, $iter = TMP_Class_new_5.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Class_new_5.$$p = null;
      
      var object = self.$allocate();
      Opal.send(object, object.$initialize, args, block);
      return object;
    
    }, TMP_Class_new_5.$$arity = -1);
    
    Opal.defn(self, '$superclass', TMP_Class_superclass_6 = function $$superclass() {
      var self = this;

      return self.$$super || nil
    }, TMP_Class_superclass_6.$$arity = 0);
    return (Opal.defn(self, '$to_s', TMP_Class_to_s_7 = function $$to_s() {
      var self = this, $iter = TMP_Class_to_s_7.$$p, $yield = $iter || nil;

      if ($iter) TMP_Class_to_s_7.$$p = null;
      
      var singleton_of = self.$$singleton_of;

      if (singleton_of && (singleton_of.$$is_class || singleton_of.$$is_module)) {
        return "" + "#<Class:" + ((singleton_of).$name()) + ">";
      }
      else if (singleton_of) {
        // a singleton class created from an object
        return "" + "#<Class:#<" + ((singleton_of.$$class).$name()) + ":0x" + ((Opal.id(singleton_of)).$to_s(16)) + ">>";
      }
      return $send(self, Opal.find_super_dispatcher(self, 'to_s', TMP_Class_to_s_7, false), [], null);
    
    }, TMP_Class_to_s_7.$$arity = 0), nil) && 'to_s';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/basic_object"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$>', '$new', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BasicObject_initialize_1, TMP_BasicObject_$eq$eq_2, TMP_BasicObject_eql$q_3, TMP_BasicObject___id___4, TMP_BasicObject___send___5, TMP_BasicObject_$B_6, TMP_BasicObject_$B$eq_7, TMP_BasicObject_instance_eval_8, TMP_BasicObject_instance_exec_10, TMP_BasicObject_singleton_method_added_11, TMP_BasicObject_singleton_method_removed_12, TMP_BasicObject_singleton_method_undefined_13, TMP_BasicObject_method_missing_14;

    
    
    Opal.defn(self, '$initialize', TMP_BasicObject_initialize_1 = function $$initialize($a_rest) {
      var self = this;

      return nil
    }, TMP_BasicObject_initialize_1.$$arity = -1);
    
    Opal.defn(self, '$==', TMP_BasicObject_$eq$eq_2 = function(other) {
      var self = this;

      return self === other
    }, TMP_BasicObject_$eq$eq_2.$$arity = 1);
    
    Opal.defn(self, '$eql?', TMP_BasicObject_eql$q_3 = function(other) {
      var self = this;

      return self['$=='](other)
    }, TMP_BasicObject_eql$q_3.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    
    Opal.defn(self, '$__id__', TMP_BasicObject___id___4 = function $$__id__() {
      var self = this;

      return self.$$id || (self.$$id = Opal.uid())
    }, TMP_BasicObject___id___4.$$arity = 0);
    
    Opal.defn(self, '$__send__', TMP_BasicObject___send___5 = function $$__send__(symbol, $a_rest) {
      var self = this, args, $iter = TMP_BasicObject___send___5.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_BasicObject___send___5.$$p = null;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    
    }, TMP_BasicObject___send___5.$$arity = -2);
    
    Opal.defn(self, '$!', TMP_BasicObject_$B_6 = function() {
      var self = this;

      return false
    }, TMP_BasicObject_$B_6.$$arity = 0);
    
    Opal.defn(self, '$!=', TMP_BasicObject_$B$eq_7 = function(other) {
      var self = this;

      return self['$=='](other)['$!']()
    }, TMP_BasicObject_$B$eq_7.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    
    Opal.defn(self, '$instance_eval', TMP_BasicObject_instance_eval_8 = function $$instance_eval($a_rest) {
      var $b, TMP_9, self = this, args, $iter = TMP_BasicObject_instance_eval_8.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_BasicObject_instance_eval_8.$$p = null;
      
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
          } else {
          Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = Opal.const_get_qualified('::', 'Opal').$compile(string, compiling_options);
        block = $send(Opal.const_get_qualified('::', 'Kernel'), 'proc', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
      } else if ($truthy($rb_gt(args.$size(), 0))) {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "" + "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    ;
    }, TMP_BasicObject_instance_eval_8.$$arity = -1);
    
    Opal.defn(self, '$instance_exec', TMP_BasicObject_instance_exec_10 = function $$instance_exec($a_rest) {
      var self = this, args, $iter = TMP_BasicObject_instance_exec_10.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_BasicObject_instance_exec_10.$$p = null;
      
      if ($truthy(block)) {
        } else {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    ;
    }, TMP_BasicObject_instance_exec_10.$$arity = -1);
    
    Opal.defn(self, '$singleton_method_added', TMP_BasicObject_singleton_method_added_11 = function $$singleton_method_added($a_rest) {
      var self = this;

      return nil
    }, TMP_BasicObject_singleton_method_added_11.$$arity = -1);
    
    Opal.defn(self, '$singleton_method_removed', TMP_BasicObject_singleton_method_removed_12 = function $$singleton_method_removed($a_rest) {
      var self = this;

      return nil
    }, TMP_BasicObject_singleton_method_removed_12.$$arity = -1);
    
    Opal.defn(self, '$singleton_method_undefined', TMP_BasicObject_singleton_method_undefined_13 = function $$singleton_method_undefined($a_rest) {
      var self = this;

      return nil
    }, TMP_BasicObject_singleton_method_undefined_13.$$arity = -1);
    return (Opal.defn(self, '$method_missing', TMP_BasicObject_method_missing_14 = function $$method_missing(symbol, $a_rest) {
      var self = this, args, $iter = TMP_BasicObject_method_missing_14.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_BasicObject_method_missing_14.$$p = null;
      return Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'NoMethodError').$new((function() {if ($truthy(self.$inspect && !self.$inspect.$$stub)) {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
        } else {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })(), symbol))
    }, TMP_BasicObject_method_missing_14.$$arity = -2), nil) && 'method_missing';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/kernel"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$singleton_class', '$to_proc', '$initialize_dup', '$for', '$>', '$size', '$pop', '$call', '$append_features', '$extended', '$length', '$respond_to?', '$[]', '$nil?', '$to_a', '$to_int', '$fetch', '$Integer', '$Float', '$to_ary', '$to_str', '$coerce_to', '$to_s', '$__id__', '$instance_variable_name!', '$coerce_to!', '$===', '$enum_for', '$result', '$print', '$format', '$puts', '$each', '$<=', '$empty?', '$exception', '$kind_of?', '$rand', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$srand', '$new_seed', '$sym', '$arg', '$open', '$include']);
  
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_method_missing_1, TMP_Kernel_$eq$_2, TMP_Kernel_$B$_3, TMP_Kernel_$eq$eq$eq_4, TMP_Kernel_$lt$eq$gt_5, TMP_Kernel_method_6, TMP_Kernel_methods_7, TMP_Kernel_Array_8, TMP_Kernel_at_exit_9, TMP_Kernel_caller_10, TMP_Kernel_class_11, TMP_Kernel_copy_instance_variables_12, TMP_Kernel_copy_singleton_methods_13, TMP_Kernel_clone_14, TMP_Kernel_initialize_clone_15, TMP_Kernel_define_singleton_method_16, TMP_Kernel_dup_17, TMP_Kernel_initialize_dup_18, TMP_Kernel_enum_for_19, TMP_Kernel_equal$q_20, TMP_Kernel_exit_21, TMP_Kernel_extend_22, TMP_Kernel_format_23, TMP_Kernel_hash_24, TMP_Kernel_initialize_copy_25, TMP_Kernel_inspect_26, TMP_Kernel_instance_of$q_27, TMP_Kernel_instance_variable_defined$q_28, TMP_Kernel_instance_variable_get_29, TMP_Kernel_instance_variable_set_30, TMP_Kernel_remove_instance_variable_31, TMP_Kernel_instance_variables_32, TMP_Kernel_Integer_33, TMP_Kernel_Float_34, TMP_Kernel_Hash_35, TMP_Kernel_is_a$q_36, TMP_Kernel_itself_37, TMP_Kernel_lambda_38, TMP_Kernel_load_39, TMP_Kernel_loop_40, TMP_Kernel_nil$q_42, TMP_Kernel_printf_43, TMP_Kernel_proc_44, TMP_Kernel_puts_45, TMP_Kernel_p_47, TMP_Kernel_print_48, TMP_Kernel_warn_49, TMP_Kernel_raise_50, TMP_Kernel_rand_51, TMP_Kernel_respond_to$q_52, TMP_Kernel_respond_to_missing$q_53, TMP_Kernel_require_54, TMP_Kernel_require_relative_55, TMP_Kernel_require_tree_56, TMP_Kernel_singleton_class_57, TMP_Kernel_sleep_58, TMP_Kernel_srand_59, TMP_Kernel_String_60, TMP_Kernel_tap_61, TMP_Kernel_to_proc_62, TMP_Kernel_to_s_63, TMP_Kernel_catch_64, TMP_Kernel_throw_65, TMP_Kernel_open_66;

    
    
    Opal.defn(self, '$method_missing', TMP_Kernel_method_missing_1 = function $$method_missing(symbol, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_method_missing_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_method_missing_1.$$p = null;
      return self.$raise(Opal.const_get_relative($nesting, 'NoMethodError').$new("" + "undefined method `" + (symbol) + "' for " + (self.$inspect()), symbol, args))
    }, TMP_Kernel_method_missing_1.$$arity = -2);
    
    Opal.defn(self, '$=~', TMP_Kernel_$eq$_2 = function(obj) {
      var self = this;

      return false
    }, TMP_Kernel_$eq$_2.$$arity = 1);
    
    Opal.defn(self, '$!~', TMP_Kernel_$B$_3 = function(obj) {
      var self = this;

      return self['$=~'](obj)['$!']()
    }, TMP_Kernel_$B$_3.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_Kernel_$eq$eq$eq_4 = function(other) {
      var $a, self = this;

      return ($truthy($a = self.$object_id()['$=='](other.$object_id())) ? $a : self['$=='](other))
    }, TMP_Kernel_$eq$eq$eq_4.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Kernel_$lt$eq$gt_5 = function(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    }, TMP_Kernel_$lt$eq$gt_5.$$arity = 1);
    
    Opal.defn(self, '$method', TMP_Kernel_method_6 = function $$method(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return Opal.const_get_relative($nesting, 'Method').$new(self, meth.$$owner || self.$class(), meth, name);
    
    }, TMP_Kernel_method_6.$$arity = 1);
    
    Opal.defn(self, '$methods', TMP_Kernel_methods_7 = function $$methods(all) {
      var self = this;

      if (all == null) {
        all = true;
      }
      
      var methods = [];

      for (var key in self) {
        if (key[0] == "$" && typeof(self[key]) === "function") {
          if (all == false || all === nil) {
            if (!Opal.hasOwnProperty.call(self, key)) {
              continue;
            }
          }
          if (self[key].$$stub === undefined) {
            methods.push(key.substr(1));
          }
        }
      }

      return methods;
    
    }, TMP_Kernel_methods_7.$$arity = -1);
    Opal.alias(self, "public_methods", "methods");
    
    Opal.defn(self, '$Array', TMP_Kernel_Array_8 = function $$Array(object) {
      var self = this;

      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](object, Opal.const_get_relative($nesting, 'Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](object, Opal.const_get_relative($nesting, 'Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    }, TMP_Kernel_Array_8.$$arity = 1);
    
    Opal.defn(self, '$at_exit', TMP_Kernel_at_exit_9 = function $$at_exit() {
      var $a, self = this, $iter = TMP_Kernel_at_exit_9.$$p, block = $iter || nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if ($iter) TMP_Kernel_at_exit_9.$$p = null;
      
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      return $gvars.__at_exit__['$<<'](block);
    }, TMP_Kernel_at_exit_9.$$arity = 0);
    
    Opal.defn(self, '$caller', TMP_Kernel_caller_10 = function $$caller($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return []
    }, TMP_Kernel_caller_10.$$arity = -1);
    
    Opal.defn(self, '$class', TMP_Kernel_class_11 = function() {
      var self = this;

      return self.$$class
    }, TMP_Kernel_class_11.$$arity = 0);
    
    Opal.defn(self, '$copy_instance_variables', TMP_Kernel_copy_instance_variables_12 = function $$copy_instance_variables(other) {
      var self = this;

      
      var keys = Object.keys(other), i, ii, name;
      for (i = 0, ii = keys.length; i < ii; i++) {
        name = keys[i];
        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, TMP_Kernel_copy_instance_variables_12.$$arity = 1);
    
    Opal.defn(self, '$copy_singleton_methods', TMP_Kernel_copy_singleton_methods_13 = function $$copy_singleton_methods(other) {
      var self = this;

      
      var name;

      if (other.hasOwnProperty('$$meta')) {
        var other_singleton_class_proto = Opal.get_singleton_class(other).$$proto;
        var self_singleton_class_proto = Opal.get_singleton_class(self).$$proto;

        for (name in other_singleton_class_proto) {
          if (name.charAt(0) === '$' && other_singleton_class_proto.hasOwnProperty(name)) {
            self_singleton_class_proto[name] = other_singleton_class_proto[name];
          }
        }
      }

      for (name in other) {
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, TMP_Kernel_copy_singleton_methods_13.$$arity = 1);
    
    Opal.defn(self, '$clone', TMP_Kernel_clone_14 = function $$clone() {
      var self = this, copy = nil;

      
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_Kernel_clone_14.$$arity = 0);
    
    Opal.defn(self, '$initialize_clone', TMP_Kernel_initialize_clone_15 = function $$initialize_clone(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, TMP_Kernel_initialize_clone_15.$$arity = 1);
    
    Opal.defn(self, '$define_singleton_method', TMP_Kernel_define_singleton_method_16 = function $$define_singleton_method(name, method) {
      var self = this, $iter = TMP_Kernel_define_singleton_method_16.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_define_singleton_method_16.$$p = null;
      return $send(self.$singleton_class(), 'define_method', [name, method], block.$to_proc())
    }, TMP_Kernel_define_singleton_method_16.$$arity = -2);
    
    Opal.defn(self, '$dup', TMP_Kernel_dup_17 = function $$dup() {
      var self = this, copy = nil;

      
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_Kernel_dup_17.$$arity = 0);
    
    Opal.defn(self, '$initialize_dup', TMP_Kernel_initialize_dup_18 = function $$initialize_dup(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, TMP_Kernel_initialize_dup_18.$$arity = 1);
    
    Opal.defn(self, '$enum_for', TMP_Kernel_enum_for_19 = function $$enum_for(method, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_enum_for_19.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_enum_for_19.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'Enumerator'), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc())
    }, TMP_Kernel_enum_for_19.$$arity = -1);
    Opal.alias(self, "to_enum", "enum_for");
    
    Opal.defn(self, '$equal?', TMP_Kernel_equal$q_20 = function(other) {
      var self = this;

      return self === other
    }, TMP_Kernel_equal$q_20.$$arity = 1);
    
    Opal.defn(self, '$exit', TMP_Kernel_exit_21 = function $$exit(status) {
      var $a, self = this, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if (status == null) {
        status = true;
      }
      
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      while ($truthy($rb_gt($gvars.__at_exit__.$size(), 0))) {
        
        block = $gvars.__at_exit__.$pop();
        block.$call();
      };
      if ($truthy(status === true)) {
        status = 0};
      Opal.exit(status);;
      return nil;
    }, TMP_Kernel_exit_21.$$arity = -1);
    
    Opal.defn(self, '$extend', TMP_Kernel_extend_22 = function $$extend($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extended(self);
      }
    ;
      return self;
    }, TMP_Kernel_extend_22.$$arity = -1);
    
    Opal.defn(self, '$format', TMP_Kernel_format_23 = function $$format(format_string, $a_rest) {
      var $b, self = this, args, ary = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if ($truthy((($b = args.$length()['$=='](1)) ? args['$[]'](0)['$respond_to?']("to_ary") : args.$length()['$=='](1)))) {
        
        ary = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](args['$[]'](0), Opal.const_get_relative($nesting, 'Array'), "to_ary");
        if ($truthy(ary['$nil?']())) {
          } else {
          args = ary.$to_a()
        };};
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "flag after width") }
        if (flags&FPREC0) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "width given twice") }
        if (flags&FPREC0) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with numbered")
        case -2: self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with named")
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = self.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode(Opal.const_get_relative($nesting, 'Opal').$coerce_to(arg, Opal.const_get_relative($nesting, 'Integer'), "to_int"));
            }
            if (str.length !== 1) {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    }, TMP_Kernel_format_23.$$arity = -2);
    
    Opal.defn(self, '$hash', TMP_Kernel_hash_24 = function $$hash() {
      var self = this;

      return self.$__id__()
    }, TMP_Kernel_hash_24.$$arity = 0);
    
    Opal.defn(self, '$initialize_copy', TMP_Kernel_initialize_copy_25 = function $$initialize_copy(other) {
      var self = this;

      return nil
    }, TMP_Kernel_initialize_copy_25.$$arity = 1);
    
    Opal.defn(self, '$inspect', TMP_Kernel_inspect_26 = function $$inspect() {
      var self = this;

      return self.$to_s()
    }, TMP_Kernel_inspect_26.$$arity = 0);
    
    Opal.defn(self, '$instance_of?', TMP_Kernel_instance_of$q_27 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "class or module required");
      }

      return self.$$class === klass;
    
    }, TMP_Kernel_instance_of$q_27.$$arity = 1);
    
    Opal.defn(self, '$instance_variable_defined?', TMP_Kernel_instance_variable_defined$q_28 = function(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));
    }, TMP_Kernel_instance_variable_defined$q_28.$$arity = 1);
    
    Opal.defn(self, '$instance_variable_get', TMP_Kernel_instance_variable_get_29 = function $$instance_variable_get(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    ;
    }, TMP_Kernel_instance_variable_get_29.$$arity = 1);
    
    Opal.defn(self, '$instance_variable_set', TMP_Kernel_instance_variable_set_30 = function $$instance_variable_set(name, value) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;
    }, TMP_Kernel_instance_variable_set_30.$$arity = 2);
    
    Opal.defn(self, '$remove_instance_variable', TMP_Kernel_remove_instance_variable_31 = function $$remove_instance_variable(name) {
      var self = this;

      
      name = Opal.const_get_relative($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    ;
      return self.$raise(Opal.const_get_relative($nesting, 'NameError'), "" + "instance variable " + (name) + " not defined");
    }, TMP_Kernel_remove_instance_variable_31.$$arity = 1);
    
    Opal.defn(self, '$instance_variables', TMP_Kernel_instance_variables_32 = function $$instance_variables() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    }, TMP_Kernel_instance_variables_32.$$arity = 0);
    
    Opal.defn(self, '$Integer', TMP_Kernel_Integer_33 = function $$Integer(value, base) {
      var self = this;

      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](value, Opal.const_get_relative($nesting, 'Integer'), "to_i");
      }

      if (value === "0") {
        return 0;
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = Opal.const_get_relative($nesting, 'Opal').$coerce_to(base, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (base === 1 || base < 0 || base > 36) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
        }
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    
    }, TMP_Kernel_Integer_33.$$arity = -2);
    
    Opal.defn(self, '$Float', TMP_Kernel_Float_34 = function $$Float(value) {
      var self = this;

      
      var str;

      if (value === nil) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return self.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](value, Opal.const_get_relative($nesting, 'Float'), "to_f");
    
    }, TMP_Kernel_Float_34.$$arity = 1);
    
    Opal.defn(self, '$Hash', TMP_Kernel_Hash_35 = function $$Hash(arg) {
      var $a, self = this;

      
      if ($truthy(($truthy($a = arg['$nil?']()) ? $a : arg['$==']([])))) {
        return $hash2([], {})};
      if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](arg))) {
        return arg};
      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](arg, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
    }, TMP_Kernel_Hash_35.$$arity = 1);
    
    Opal.defn(self, '$is_a?', TMP_Kernel_is_a$q_36 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    
    }, TMP_Kernel_is_a$q_36.$$arity = 1);
    
    Opal.defn(self, '$itself', TMP_Kernel_itself_37 = function $$itself() {
      var self = this;

      return self
    }, TMP_Kernel_itself_37.$$arity = 0);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$lambda', TMP_Kernel_lambda_38 = function $$lambda() {
      var self = this, $iter = TMP_Kernel_lambda_38.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_lambda_38.$$p = null;
      
      block.$$is_lambda = true;
      return block;
    }, TMP_Kernel_lambda_38.$$arity = 0);
    
    Opal.defn(self, '$load', TMP_Kernel_load_39 = function $$load(file) {
      var self = this;

      
      file = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](file, Opal.const_get_relative($nesting, 'String'), "to_str");
      return Opal.load(file);
    }, TMP_Kernel_load_39.$$arity = 1);
    
    Opal.defn(self, '$loop', TMP_Kernel_loop_40 = function $$loop() {
      var TMP_41, $a, self = this, $iter = TMP_Kernel_loop_40.$$p, $yield = $iter || nil, e = nil;

      if ($iter) TMP_Kernel_loop_40.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["loop"], (TMP_41 = function(){var self = TMP_41.$$s || this;

        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41))
      };
      while ($truthy(true)) {
        
        try {
          Opal.yieldX($yield, [])
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StopIteration')])) {e = $err;
            try {
              return e.$result()
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      };
      return self;
    }, TMP_Kernel_loop_40.$$arity = 0);
    
    Opal.defn(self, '$nil?', TMP_Kernel_nil$q_42 = function() {
      var self = this;

      return false
    }, TMP_Kernel_nil$q_42.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.defn(self, '$printf', TMP_Kernel_printf_43 = function $$printf($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if ($truthy($rb_gt(args.$length(), 0))) {
        self.$print($send(self, 'format', Opal.to_a(args)))};
      return nil;
    }, TMP_Kernel_printf_43.$$arity = -1);
    
    Opal.defn(self, '$proc', TMP_Kernel_proc_44 = function $$proc() {
      var self = this, $iter = TMP_Kernel_proc_44.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_proc_44.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    }, TMP_Kernel_proc_44.$$arity = 0);
    
    Opal.defn(self, '$puts', TMP_Kernel_puts_45 = function $$puts($a_rest) {
      var self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send($gvars.stdout, 'puts', Opal.to_a(strs))
    }, TMP_Kernel_puts_45.$$arity = -1);
    
    Opal.defn(self, '$p', TMP_Kernel_p_47 = function $$p($a_rest) {
      var TMP_46, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      $send(args, 'each', [], (TMP_46 = function(obj){var self = TMP_46.$$s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;
if (obj == null) obj = nil;
      return $gvars.stdout.$puts(obj.$inspect())}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46));
      if ($truthy($rb_le(args.$length(), 1))) {
        return args['$[]'](0)
        } else {
        return args
      };
    }, TMP_Kernel_p_47.$$arity = -1);
    
    Opal.defn(self, '$print', TMP_Kernel_print_48 = function $$print($a_rest) {
      var self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send($gvars.stdout, 'print', Opal.to_a(strs))
    }, TMP_Kernel_print_48.$$arity = -1);
    
    Opal.defn(self, '$warn', TMP_Kernel_warn_49 = function $$warn($a_rest) {
      var $b, self = this, strs;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($truthy(($truthy($b = $gvars.VERBOSE['$nil?']()) ? $b : strs['$empty?']()))) {
        return nil
        } else {
        return $send($gvars.stderr, 'puts', Opal.to_a(strs))
      }
    }, TMP_Kernel_warn_49.$$arity = -1);
    
    Opal.defn(self, '$raise', TMP_Kernel_raise_50 = function $$raise(exception, string, _backtrace) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      if (string == null) {
        string = nil;
      }
      if (_backtrace == null) {
        _backtrace = nil;
      }
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = Opal.const_get_relative($nesting, 'RuntimeError').$new();
      }
      else if (exception.$$is_string) {
        exception = Opal.const_get_relative($nesting, 'RuntimeError').$new(exception);
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && exception['$respond_to?']("exception")) {
        exception = exception.$exception(string);
      }
      else if (exception['$kind_of?'](Opal.const_get_relative($nesting, 'Exception'))) {
        // exception is fine
      }
      else {
        exception = Opal.const_get_relative($nesting, 'TypeError').$new("exception class/object expected");
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;

      throw exception;
    
    }, TMP_Kernel_raise_50.$$arity = -1);
    Opal.alias(self, "fail", "raise");
    
    Opal.defn(self, '$rand', TMP_Kernel_rand_51 = function $$rand(max) {
      var self = this;

      
      
      if (max === undefined) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Random'), 'DEFAULT').$rand();
      }

      if (max.$$is_number) {
        if (max < 0) {
          max = Math.abs(max);
        }

        if (max % 1 !== 0) {
          max = max.$to_i();
        }

        if (max === 0) {
          max = undefined;
        }
      }
    ;
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Random'), 'DEFAULT').$rand(max);
    }, TMP_Kernel_rand_51.$$arity = -1);
    
    Opal.defn(self, '$respond_to?', TMP_Kernel_respond_to$q_52 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      
      if ($truthy(self['$respond_to_missing?'](name, include_all))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
    ;
      return false;
    }, TMP_Kernel_respond_to$q_52.$$arity = -2);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Kernel_respond_to_missing$q_53 = function(method_name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return false
    }, TMP_Kernel_respond_to_missing$q_53.$$arity = -2);
    
    Opal.defn(self, '$require', TMP_Kernel_require_54 = function $$require(file) {
      var self = this;

      
      file = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](file, Opal.const_get_relative($nesting, 'String'), "to_str");
      return Opal.require(file);
    }, TMP_Kernel_require_54.$$arity = 1);
    
    Opal.defn(self, '$require_relative', TMP_Kernel_require_relative_55 = function $$require_relative(file) {
      var self = this;

      
      Opal.const_get_relative($nesting, 'Opal')['$try_convert!'](file, Opal.const_get_relative($nesting, 'String'), "to_str");
      file = Opal.const_get_relative($nesting, 'File').$expand_path(Opal.const_get_relative($nesting, 'File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    }, TMP_Kernel_require_relative_55.$$arity = 1);
    
    Opal.defn(self, '$require_tree', TMP_Kernel_require_tree_56 = function $$require_tree(path) {
      var self = this;

      
      path = Opal.const_get_relative($nesting, 'File').$expand_path(path);
      if (path['$=='](".")) {
        path = ""};
      
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          Opal.require(name);
        }
      }
    ;
      return nil;
    }, TMP_Kernel_require_tree_56.$$arity = 1);
    Opal.alias(self, "send", "__send__");
    Opal.alias(self, "public_send", "__send__");
    
    Opal.defn(self, '$singleton_class', TMP_Kernel_singleton_class_57 = function $$singleton_class() {
      var self = this;

      return Opal.get_singleton_class(self)
    }, TMP_Kernel_singleton_class_57.$$arity = 0);
    
    Opal.defn(self, '$sleep', TMP_Kernel_sleep_58 = function $$sleep(seconds) {
      var self = this;

      if (seconds == null) {
        seconds = nil;
      }
      
      if (seconds === nil) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "time interval must be positive")
      }
      var t = new Date();
      while (new Date() - t <= seconds * 1000);
      return seconds;
    
    }, TMP_Kernel_sleep_58.$$arity = -1);
    Opal.alias(self, "sprintf", "format");
    
    Opal.defn(self, '$srand', TMP_Kernel_srand_59 = function $$srand(seed) {
      var self = this;

      if (seed == null) {
        seed = Opal.const_get_relative($nesting, 'Random').$new_seed();
      }
      return Opal.const_get_relative($nesting, 'Random').$srand(seed)
    }, TMP_Kernel_srand_59.$$arity = -1);
    
    Opal.defn(self, '$String', TMP_Kernel_String_60 = function $$String(str) {
      var $a, self = this;

      return ($truthy($a = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](str, Opal.const_get_relative($nesting, 'String'), "to_str")) ? $a : Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](str, Opal.const_get_relative($nesting, 'String'), "to_s"))
    }, TMP_Kernel_String_60.$$arity = 1);
    
    Opal.defn(self, '$tap', TMP_Kernel_tap_61 = function $$tap() {
      var self = this, $iter = TMP_Kernel_tap_61.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_tap_61.$$p = null;
      
      Opal.yield1(block, self);
      return self;
    }, TMP_Kernel_tap_61.$$arity = 0);
    
    Opal.defn(self, '$to_proc', TMP_Kernel_to_proc_62 = function $$to_proc() {
      var self = this;

      return self
    }, TMP_Kernel_to_proc_62.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Kernel_to_s_63 = function $$to_s() {
      var self = this;

      return "" + "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">"
    }, TMP_Kernel_to_s_63.$$arity = 0);
    
    Opal.defn(self, '$catch', TMP_Kernel_catch_64 = function(sym) {
      var self = this, $iter = TMP_Kernel_catch_64.$$p, $yield = $iter || nil, e = nil;

      if ($iter) TMP_Kernel_catch_64.$$p = null;
      try {
        return Opal.yieldX($yield, []);
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'UncaughtThrowError')])) {e = $err;
          try {
            
            if (e.$sym()['$=='](sym)) {
              return e.$arg()};
            return self.$raise();
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Kernel_catch_64.$$arity = 1);
    
    Opal.defn(self, '$throw', TMP_Kernel_throw_65 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$raise(Opal.const_get_relative($nesting, 'UncaughtThrowError').$new(args))
    }, TMP_Kernel_throw_65.$$arity = -1);
    
    Opal.defn(self, '$open', TMP_Kernel_open_66 = function $$open($a_rest) {
      var self = this, args, $iter = TMP_Kernel_open_66.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_open_66.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'File'), 'open', Opal.to_a(args), block.$to_proc())
    }, TMP_Kernel_open_66.$$arity = -1);
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return self.$include(Opal.const_get_relative($nesting, 'Kernel'))
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/error"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$+', '$attr_reader', '$[]', '$>', '$length', '$inspect']);
  
  (function($base, $super, $parent_nesting) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Exception_new_1, TMP_Exception_exception_2, TMP_Exception_initialize_3, TMP_Exception_backtrace_4, TMP_Exception_exception_5, TMP_Exception_message_6, TMP_Exception_inspect_7, TMP_Exception_to_s_8;

    def.message = nil;
    
    var Kernel$raise = Opal.const_get_relative($nesting, 'Kernel').$raise;
    Opal.defs(self, '$new', TMP_Exception_new_1 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var message   = (args.length > 0) ? args[0] : nil;
      var error     = new self.$$alloc(message);
      error.name    = self.$$name;
      error.message = message;
      Opal.send(error, error.$initialize, args);

      // Error.captureStackTrace() will use .name and .toString to build the
      // first line of the stack trace so it must be called after the error
      // has been initialized.
      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html
      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {
        // Passing Kernel.raise will cut the stack trace from that point above
        Error.captureStackTrace(error, Kernel$raise);
      }

      return error;
    
    }, TMP_Exception_new_1.$$arity = -1);
    Opal.defs(self, '$exception', TMP_Exception_exception_2 = function $$exception($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(self, 'new', Opal.to_a(args))
    }, TMP_Exception_exception_2.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Exception_initialize_3 = function $$initialize($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.message = (args.length > 0) ? args[0] : nil
    }, TMP_Exception_initialize_3.$$arity = -1);
    
    Opal.defn(self, '$backtrace', TMP_Exception_backtrace_4 = function $$backtrace() {
      var self = this;

      
      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    }, TMP_Exception_backtrace_4.$$arity = 0);
    
    Opal.defn(self, '$exception', TMP_Exception_exception_5 = function $$exception(str) {
      var self = this;

      if (str == null) {
        str = nil;
      }
      
      if (str === nil || self === str) {
        return self;
      }

      var cloned = self.$clone();
      cloned.message = str;
      return cloned;
    
    }, TMP_Exception_exception_5.$$arity = -1);
    
    Opal.defn(self, '$message', TMP_Exception_message_6 = function $$message() {
      var self = this;

      return self.$to_s()
    }, TMP_Exception_message_6.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Exception_inspect_7 = function $$inspect() {
      var self = this, as_str = nil;

      
      as_str = self.$to_s();
      if ($truthy(as_str['$empty?']())) {
        return self.$class().$to_s()
        } else {
        return "" + "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    }, TMP_Exception_inspect_7.$$arity = 0);
    return (Opal.defn(self, '$to_s', TMP_Exception_to_s_8 = function $$to_s() {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = self.message) ? self.message.$to_s() : $b)) ? $a : self.$class().$to_s())
    }, TMP_Exception_to_s_8.$$arity = 0), nil) && 'to_s';
  })($nesting[0], Error, $nesting);
  (function($base, $super, $parent_nesting) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NoMemoryError(){};
    var self = $NoMemoryError = $klass($base, $super, 'NoMemoryError', $NoMemoryError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SignalException(){};
    var self = $SignalException = $klass($base, $super, 'SignalException', $SignalException);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Interrupt(){};
    var self = $Interrupt = $klass($base, $super, 'Interrupt', $Interrupt);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SecurityError(){};
    var self = $SecurityError = $klass($base, $super, 'SecurityError', $SecurityError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $ZeroDivisionError(){};
    var self = $ZeroDivisionError = $klass($base, $super, 'ZeroDivisionError', $ZeroDivisionError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'NameError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'RangeError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $parent_nesting) {
    var $Errno, self = $Errno = $module($base, 'Errno');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_EINVAL_new_9;

      return Opal.defs(self, '$new', TMP_EINVAL_new_9 = function(name) {
        var self = this, $iter = TMP_EINVAL_new_9.$$p, $yield = $iter || nil, message = nil;

        if (name == null) {
          name = nil;
        }
        if ($iter) TMP_EINVAL_new_9.$$p = null;
        
        message = "Invalid argument";
        if ($truthy(name)) {
          message = $rb_plus(message, "" + " - " + (name))};
        return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_EINVAL_new_9, false, $EINVAL), [message], null);
      }, TMP_EINVAL_new_9.$$arity = -1)
    })($nesting[0], Opal.const_get_relative($nesting, 'SystemCallError'), $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $UncaughtThrowError(){};
    var self = $UncaughtThrowError = $klass($base, $super, 'UncaughtThrowError', $UncaughtThrowError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_UncaughtThrowError_initialize_10;

    def.sym = nil;
    
    self.$attr_reader("sym", "arg");
    return (Opal.defn(self, '$initialize', TMP_UncaughtThrowError_initialize_10 = function $$initialize(args) {
      var self = this, $iter = TMP_UncaughtThrowError_initialize_10.$$p, $yield = $iter || nil;

      if ($iter) TMP_UncaughtThrowError_initialize_10.$$p = null;
      
      self.sym = args['$[]'](0);
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.arg = args['$[]'](1)};
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_UncaughtThrowError_initialize_10, false), ["" + "uncaught throw " + (self.sym.$inspect())], null);
    }, TMP_UncaughtThrowError_initialize_10.$$arity = 1), nil) && 'initialize';
  })($nesting[0], Opal.const_get_relative($nesting, 'ArgumentError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NameError_initialize_11;

    
    self.$attr_reader("name");
    return (Opal.defn(self, '$initialize', TMP_NameError_initialize_11 = function $$initialize(message, name) {
      var self = this, $iter = TMP_NameError_initialize_11.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      if ($iter) TMP_NameError_initialize_11.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_NameError_initialize_11, false), [message], null);
      return (self.name = name);
    }, TMP_NameError_initialize_11.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NoMethodError_initialize_12;

    
    self.$attr_reader("args");
    return (Opal.defn(self, '$initialize', TMP_NoMethodError_initialize_12 = function $$initialize(message, name, args) {
      var self = this, $iter = TMP_NoMethodError_initialize_12.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      if (args == null) {
        args = [];
      }
      if ($iter) TMP_NoMethodError_initialize_12.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_NoMethodError_initialize_12, false), [message, name], null);
      return (self.args = args);
    }, TMP_NoMethodError_initialize_12.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return self.$attr_reader("result")
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $JS, self = $JS = $module($base, 'JS');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Error(){};
      var self = $Error = $klass($base, $super, 'Error', $Error);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/constants"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  
  Opal.const_set($nesting[0], 'RUBY_PLATFORM', "opal");
  Opal.const_set($nesting[0], 'RUBY_ENGINE', "opal");
  Opal.const_set($nesting[0], 'RUBY_VERSION', "2.3.4");
  Opal.const_set($nesting[0], 'RUBY_ENGINE_VERSION', "0.11.0.rc1");
  Opal.const_set($nesting[0], 'RUBY_RELEASE_DATE', "2017-05-01");
  Opal.const_set($nesting[0], 'RUBY_PATCHLEVEL', 0);
  Opal.const_set($nesting[0], 'RUBY_REVISION', 0);
  Opal.const_set($nesting[0], 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2015 Adam Beynon");
  return Opal.const_set($nesting[0], 'RUBY_DESCRIPTION', "" + "opal " + (Opal.const_get_relative($nesting, 'RUBY_ENGINE_VERSION')) + " (" + (Opal.const_get_relative($nesting, 'RUBY_RELEASE_DATE')) + " revision " + (Opal.const_get_relative($nesting, 'RUBY_REVISION')) + ")");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["opal/base"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/error");
  return self.$require("corelib/constants");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/nil"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$class', '$new', '$>', '$length', '$Rational']);
  
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_$B_1, TMP_NilClass_$_2, TMP_NilClass_$_3, TMP_NilClass_$_4, TMP_NilClass_$eq$eq_5, TMP_NilClass_dup_6, TMP_NilClass_clone_7, TMP_NilClass_inspect_8, TMP_NilClass_nil$q_9, TMP_NilClass_singleton_class_10, TMP_NilClass_to_a_11, TMP_NilClass_to_h_12, TMP_NilClass_to_i_13, TMP_NilClass_to_s_14, TMP_NilClass_to_c_15, TMP_NilClass_rationalize_16, TMP_NilClass_to_r_17, TMP_NilClass_instance_variables_18;

    
    def.$$meta = self;
    
    Opal.defn(self, '$!', TMP_NilClass_$B_1 = function() {
      var self = this;

      return true
    }, TMP_NilClass_$B_1.$$arity = 0);
    
    Opal.defn(self, '$&', TMP_NilClass_$_2 = function(other) {
      var self = this;

      return false
    }, TMP_NilClass_$_2.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_NilClass_$_3 = function(other) {
      var self = this;

      return other !== false && other !== nil
    }, TMP_NilClass_$_3.$$arity = 1);
    
    Opal.defn(self, '$^', TMP_NilClass_$_4 = function(other) {
      var self = this;

      return other !== false && other !== nil
    }, TMP_NilClass_$_4.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_NilClass_$eq$eq_5 = function(other) {
      var self = this;

      return other === nil
    }, TMP_NilClass_$eq$eq_5.$$arity = 1);
    
    Opal.defn(self, '$dup', TMP_NilClass_dup_6 = function $$dup() {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't dup " + (self.$class()))
    }, TMP_NilClass_dup_6.$$arity = 0);
    
    Opal.defn(self, '$clone', TMP_NilClass_clone_7 = function $$clone() {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't clone " + (self.$class()))
    }, TMP_NilClass_clone_7.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_NilClass_inspect_8 = function $$inspect() {
      var self = this;

      return "nil"
    }, TMP_NilClass_inspect_8.$$arity = 0);
    
    Opal.defn(self, '$nil?', TMP_NilClass_nil$q_9 = function() {
      var self = this;

      return true
    }, TMP_NilClass_nil$q_9.$$arity = 0);
    
    Opal.defn(self, '$singleton_class', TMP_NilClass_singleton_class_10 = function $$singleton_class() {
      var self = this;

      return Opal.const_get_relative($nesting, 'NilClass')
    }, TMP_NilClass_singleton_class_10.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_NilClass_to_a_11 = function $$to_a() {
      var self = this;

      return []
    }, TMP_NilClass_to_a_11.$$arity = 0);
    
    Opal.defn(self, '$to_h', TMP_NilClass_to_h_12 = function $$to_h() {
      var self = this;

      return Opal.hash()
    }, TMP_NilClass_to_h_12.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_NilClass_to_i_13 = function $$to_i() {
      var self = this;

      return 0
    }, TMP_NilClass_to_i_13.$$arity = 0);
    Opal.alias(self, "to_f", "to_i");
    
    Opal.defn(self, '$to_s', TMP_NilClass_to_s_14 = function $$to_s() {
      var self = this;

      return ""
    }, TMP_NilClass_to_s_14.$$arity = 0);
    
    Opal.defn(self, '$to_c', TMP_NilClass_to_c_15 = function $$to_c() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Complex').$new(0, 0)
    }, TMP_NilClass_to_c_15.$$arity = 0);
    
    Opal.defn(self, '$rationalize', TMP_NilClass_rationalize_16 = function $$rationalize($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'))};
      return self.$Rational(0, 1);
    }, TMP_NilClass_rationalize_16.$$arity = -1);
    
    Opal.defn(self, '$to_r', TMP_NilClass_to_r_17 = function $$to_r() {
      var self = this;

      return self.$Rational(0, 1)
    }, TMP_NilClass_to_r_17.$$arity = 0);
    return (Opal.defn(self, '$instance_variables', TMP_NilClass_instance_variables_18 = function $$instance_variables() {
      var self = this;

      return []
    }, TMP_NilClass_instance_variables_18.$$arity = 0), nil) && 'instance_variables';
  })($nesting[0], null, $nesting);
  return Opal.const_set($nesting[0], 'NIL', nil);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/boolean"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$class']);
  
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean___id___1, TMP_Boolean_$B_2, TMP_Boolean_$_3, TMP_Boolean_$_4, TMP_Boolean_$_5, TMP_Boolean_$eq$eq_6, TMP_Boolean_singleton_class_7, TMP_Boolean_to_s_8, TMP_Boolean_dup_9, TMP_Boolean_clone_10;

    
    def.$$is_boolean = true;
    def.$$meta = self;
    
    Opal.defn(self, '$__id__', TMP_Boolean___id___1 = function $$__id__() {
      var self = this;

      return self.valueOf() ? 2 : 0
    }, TMP_Boolean___id___1.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.defn(self, '$!', TMP_Boolean_$B_2 = function() {
      var self = this;

      return self != true
    }, TMP_Boolean_$B_2.$$arity = 0);
    
    Opal.defn(self, '$&', TMP_Boolean_$_3 = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false
    }, TMP_Boolean_$_3.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Boolean_$_4 = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil)
    }, TMP_Boolean_$_4.$$arity = 1);
    
    Opal.defn(self, '$^', TMP_Boolean_$_5 = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil)
    }, TMP_Boolean_$_5.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Boolean_$eq$eq_6 = function(other) {
      var self = this;

      return (self == true) === other.valueOf()
    }, TMP_Boolean_$eq$eq_6.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$singleton_class', TMP_Boolean_singleton_class_7 = function $$singleton_class() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Boolean')
    }, TMP_Boolean_singleton_class_7.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Boolean_to_s_8 = function $$to_s() {
      var self = this;

      return (self == true) ? 'true' : 'false'
    }, TMP_Boolean_to_s_8.$$arity = 0);
    
    Opal.defn(self, '$dup', TMP_Boolean_dup_9 = function $$dup() {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't dup " + (self.$class()))
    }, TMP_Boolean_dup_9.$$arity = 0);
    return (Opal.defn(self, '$clone', TMP_Boolean_clone_10 = function $$clone() {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't clone " + (self.$class()))
    }, TMP_Boolean_clone_10.$$arity = 0), nil) && 'clone';
  })($nesting[0], Boolean, $nesting);
  Opal.const_set($nesting[0], 'TrueClass', Opal.const_get_relative($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'FalseClass', Opal.const_get_relative($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'TRUE', true);
  return Opal.const_set($nesting[0], 'FALSE', false);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base, $parent_nesting) {
    var $Comparable, self = $Comparable = $module($base, 'Comparable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Comparable_normalize_1, TMP_Comparable_$eq$eq_2, TMP_Comparable_$gt_3, TMP_Comparable_$gt$eq_4, TMP_Comparable_$lt_5, TMP_Comparable_$lt$eq_6, TMP_Comparable_between$q_7;

    
    Opal.defs(self, '$normalize', TMP_Comparable_normalize_1 = function $$normalize(what) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](what))) {
        return what};
      if ($truthy($rb_gt(what, 0))) {
        return 1};
      if ($truthy($rb_lt(what, 0))) {
        return -1};
      return 0;
    }, TMP_Comparable_normalize_1.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Comparable_$eq$eq_2 = function(other) {
      var self = this, cmp = nil;

      try {
        
        if ($truthy(self['$equal?'](other))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
        if ($truthy((cmp = self['$<=>'](other)))) {
          } else {
          return false
        };
        return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Comparable_$eq$eq_2.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Comparable_$gt_3 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) > 0;
    }, TMP_Comparable_$gt_3.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Comparable_$gt$eq_4 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) >= 0;
    }, TMP_Comparable_$gt$eq_4.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Comparable_$lt_5 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) < 0;
    }, TMP_Comparable_$lt_5.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Comparable_$lt$eq_6 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return Opal.const_get_relative($nesting, 'Comparable').$normalize(cmp) <= 0;
    }, TMP_Comparable_$lt$eq_6.$$arity = 1);
    
    Opal.defn(self, '$between?', TMP_Comparable_between$q_7 = function(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, TMP_Comparable_between$q_7.$$arity = 2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/regexp"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$call', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);
  
  (function($base, $super, $parent_nesting) {
    function $RegexpError(){};
    var self = $RegexpError = $klass($base, $super, 'RegexpError', $RegexpError);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Regexp_$eq$eq_6, TMP_Regexp_$eq$eq$eq_7, TMP_Regexp_$eq$_8, TMP_Regexp_inspect_9, TMP_Regexp_match_10, TMP_Regexp_$_11, TMP_Regexp_source_12, TMP_Regexp_options_13, TMP_Regexp_casefold$q_14;

    
    Opal.const_set($nesting[0], 'IGNORECASE', 1);
    Opal.const_set($nesting[0], 'MULTILINE', 4);
    def.$$is_regexp = true;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_allocate_1, TMP_escape_2, TMP_last_match_3, TMP_union_4, TMP_new_5;

      
      
      Opal.defn(self, '$allocate', TMP_allocate_1 = function $$allocate() {
        var self = this, $iter = TMP_allocate_1.$$p, $yield = $iter || nil, allocated = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_allocate_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        allocated = $send(self, Opal.find_super_dispatcher(self, 'allocate', TMP_allocate_1, false), $zuper, $iter);
        allocated.uninitialized = true;
        return allocated;
      }, TMP_allocate_1.$$arity = 0);
      
      Opal.defn(self, '$escape', TMP_escape_2 = function $$escape(string) {
        var self = this;

        return Opal.escape_regexp(string)
      }, TMP_escape_2.$$arity = 1);
      
      Opal.defn(self, '$last_match', TMP_last_match_3 = function $$last_match(n) {
        var self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        if (n == null) {
          n = nil;
        }
        if ($truthy(n['$nil?']())) {
          return $gvars["~"]
          } else {
          return $gvars["~"]['$[]'](n)
        }
      }, TMP_last_match_3.$$arity = -1);
      Opal.alias(self, "quote", "escape");
      
      Opal.defn(self, '$union', TMP_union_4 = function $$union($a_rest) {
        var self = this, parts;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        parts = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          parts[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "no implicit conversion of Array into String")
        }
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      ;
        return self.$new((quoted_validated).$join("|"), options);
      }, TMP_union_4.$$arity = -1);
      return (Opal.defn(self, '$new', TMP_new_5 = function(regexp, options) {
        var self = this;

        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](regexp, Opal.const_get_relative($nesting, 'String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\' && regexp.charAt(regexp.length - 2) !== '\\') {
          self.$raise(Opal.const_get_relative($nesting, 'RegexpError'), "" + "too short escape sequence: /" + (regexp) + "/")
        }

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if (Opal.const_get_relative($nesting, 'IGNORECASE') & options) { temp += 'i'; }
          if (Opal.const_get_relative($nesting, 'MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      
      }, TMP_new_5.$$arity = -2), nil) && 'new';
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.defn(self, '$==', TMP_Regexp_$eq$eq_6 = function(other) {
      var self = this;

      return other.constructor == RegExp && self.toString() === other.toString()
    }, TMP_Regexp_$eq$eq_6.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_Regexp_$eq$eq$eq_7 = function(string) {
      var self = this;

      return self.$match(Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](string, Opal.const_get_relative($nesting, 'String'), "to_str")) !== nil
    }, TMP_Regexp_$eq$eq$eq_7.$$arity = 1);
    
    Opal.defn(self, '$=~', TMP_Regexp_$eq$_8 = function(string) {
      var $a, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      return ($truthy($a = self.$match(string)) ? $gvars["~"].$begin(0) : $a)
    }, TMP_Regexp_$eq$_8.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$inspect', TMP_Regexp_inspect_9 = function $$inspect() {
      var self = this;

      
      var regexp_format = /^\/(.*)\/([^\/]*)$/;
      var value = self.toString();
      var matches = regexp_format.exec(value);
      if (matches) {
        var regexp_pattern = matches[1];
        var regexp_flags = matches[2];
        var chars = regexp_pattern.split('');
        var chars_length = chars.length;
        var char_escaped = false;
        var regexp_pattern_escaped = '';
        for (var i = 0; i < chars_length; i++) {
          var current_char = chars[i];
          if (!char_escaped && current_char == '/') {
            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\');
          }
          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);
          if (current_char == '\\') {
            if (char_escaped) {
              // does not over escape
              char_escaped = false;
            } else {
              char_escaped = true;
            }
          } else {
            char_escaped = false;
          }
        }
        return '/' + regexp_pattern_escaped + '/' + regexp_flags;
      } else {
        return value;
      }
    
    }, TMP_Regexp_inspect_9.$$arity = 0);
    
    Opal.defn(self, '$match', TMP_Regexp_match_10 = function $$match(string, pos) {
      var self = this, $iter = TMP_Regexp_match_10.$$p, block = $iter || nil;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      if ($iter) TMP_Regexp_match_10.$$p = null;
      
      if (self.uninitialized) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        pos = 0;
      } else {
        pos = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pos, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (string === nil) {
        return ($gvars["~"] = nil);
      }

      string = Opal.const_get_relative($nesting, 'Opal').$coerce_to(string, Opal.const_get_relative($nesting, 'String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return ($gvars["~"] = nil);
        }
      }

      var source = self.source;
      var flags = 'g';
      // m flag + a . in Ruby will match white space, but in JS, it only matches beginning/ending of lines, so we get the equivalent here
      if (self.multiline) {
        source = source.replace('.', "[\\s\\S]");
        flags += 'm';
      }

      // global RegExp maintains state, so not using self/this
      var md, re = new RegExp(source, flags + (self.ignoreCase ? 'i' : ''));

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return ($gvars["~"] = nil);
        }
        if (md.index >= pos) {
          ($gvars["~"] = Opal.const_get_relative($nesting, 'MatchData').$new(re, md))
          return block === nil ? $gvars["~"] : block.$call($gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    
    }, TMP_Regexp_match_10.$$arity = -2);
    
    Opal.defn(self, '$~', TMP_Regexp_$_11 = function() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._)
    }, TMP_Regexp_$_11.$$arity = 0);
    
    Opal.defn(self, '$source', TMP_Regexp_source_12 = function $$source() {
      var self = this;

      return self.source
    }, TMP_Regexp_source_12.$$arity = 0);
    
    Opal.defn(self, '$options', TMP_Regexp_options_13 = function $$options() {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= Opal.const_get_relative($nesting, 'MULTILINE');
      }
      if (self.ignoreCase) {
        result |= Opal.const_get_relative($nesting, 'IGNORECASE');
      }
      return result;
    
    }, TMP_Regexp_options_13.$$arity = 0);
    
    Opal.defn(self, '$casefold?', TMP_Regexp_casefold$q_14 = function() {
      var self = this;

      return self.ignoreCase
    }, TMP_Regexp_casefold$q_14.$$arity = 0);
    return Opal.alias(self, "to_s", "source");
  })($nesting[0], RegExp, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MatchData_initialize_15, TMP_MatchData_$$_16, TMP_MatchData_offset_17, TMP_MatchData_$eq$eq_18, TMP_MatchData_begin_19, TMP_MatchData_end_20, TMP_MatchData_captures_21, TMP_MatchData_inspect_22, TMP_MatchData_length_23, TMP_MatchData_to_a_24, TMP_MatchData_to_s_25, TMP_MatchData_values_at_26;

    def.matches = nil;
    
    self.$attr_reader("post_match", "pre_match", "regexp", "string");
    
    Opal.defn(self, '$initialize', TMP_MatchData_initialize_15 = function $$initialize(regexp, match_groups) {
      var self = this;

      
      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    ;
    }, TMP_MatchData_initialize_15.$$arity = 2);
    
    Opal.defn(self, '$[]', TMP_MatchData_$$_16 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(self.matches, '[]', Opal.to_a(args))
    }, TMP_MatchData_$$_16.$$arity = -1);
    
    Opal.defn(self, '$offset', TMP_MatchData_offset_17 = function $$offset(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    
    }, TMP_MatchData_offset_17.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_MatchData_$eq$eq_18 = function(other) {
      var $a, $b, $c, $d, self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'MatchData')['$==='](other))) {
        } else {
        return false
      };
      return ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = self.string == other.string) ? self.regexp.toString() == other.regexp.toString() : $d)) ? self.pre_match == other.pre_match : $c)) ? self.post_match == other.post_match : $b)) ? self.begin == other.begin : $a);
    }, TMP_MatchData_$eq$eq_18.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$begin', TMP_MatchData_begin_19 = function $$begin(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    
    }, TMP_MatchData_begin_19.$$arity = 1);
    
    Opal.defn(self, '$end', TMP_MatchData_end_20 = function $$end(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    
    }, TMP_MatchData_end_20.$$arity = 1);
    
    Opal.defn(self, '$captures', TMP_MatchData_captures_21 = function $$captures() {
      var self = this;

      return self.matches.slice(1)
    }, TMP_MatchData_captures_21.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_MatchData_inspect_22 = function $$inspect() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    
    }, TMP_MatchData_inspect_22.$$arity = 0);
    
    Opal.defn(self, '$length', TMP_MatchData_length_23 = function $$length() {
      var self = this;

      return self.matches.length
    }, TMP_MatchData_length_23.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$to_a', TMP_MatchData_to_a_24 = function $$to_a() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_a_24.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_MatchData_to_s_25 = function $$to_s() {
      var self = this;

      return self.matches[0]
    }, TMP_MatchData_to_s_25.$$arity = 0);
    return (Opal.defn(self, '$values_at', TMP_MatchData_values_at_26 = function $$values_at($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](args[i], Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    
    }, TMP_MatchData_values_at_26.$$arity = -1), nil) && 'values_at';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/string"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$class', '$match', '$captures', '$proc', '$succ', '$escape']);
  
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String___id___1, TMP_String_try_convert_2, TMP_String_new_3, TMP_String_initialize_4, TMP_String_$_5, TMP_String_$_6, TMP_String_$_7, TMP_String_$lt$eq$gt_8, TMP_String_$eq$eq_9, TMP_String_$eq$_10, TMP_String_$$_11, TMP_String_capitalize_12, TMP_String_casecmp_13, TMP_String_center_14, TMP_String_chars_15, TMP_String_chomp_16, TMP_String_chop_17, TMP_String_chr_18, TMP_String_clone_19, TMP_String_dup_20, TMP_String_count_21, TMP_String_delete_22, TMP_String_downcase_23, TMP_String_each_char_24, TMP_String_each_line_26, TMP_String_empty$q_27, TMP_String_end_with$q_28, TMP_String_gsub_29, TMP_String_hash_30, TMP_String_hex_31, TMP_String_include$q_32, TMP_String_index_33, TMP_String_inspect_34, TMP_String_intern_35, TMP_String_lines_36, TMP_String_length_37, TMP_String_ljust_38, TMP_String_lstrip_39, TMP_String_ascii_only$q_40, TMP_String_match_41, TMP_String_next_42, TMP_String_oct_43, TMP_String_ord_44, TMP_String_partition_45, TMP_String_reverse_46, TMP_String_rindex_47, TMP_String_rjust_48, TMP_String_rpartition_49, TMP_String_rstrip_50, TMP_String_scan_51, TMP_String_split_52, TMP_String_squeeze_53, TMP_String_start_with$q_54, TMP_String_strip_55, TMP_String_sub_56, TMP_String_sum_57, TMP_String_swapcase_58, TMP_String_to_f_59, TMP_String_to_i_60, TMP_String_to_proc_62, TMP_String_to_s_63, TMP_String_tr_64, TMP_String_tr_s_65, TMP_String_upcase_66, TMP_String_upto_67, TMP_String_instance_variables_68, TMP_String__load_69, TMP_String_unpack_70;

    def.length = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Comparable'));
    def.$$is_string = true;
    
    Opal.defn(self, '$__id__', TMP_String___id___1 = function $$__id__() {
      var self = this;

      return self.toString()
    }, TMP_String___id___1.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    Opal.defs(self, '$try_convert', TMP_String_try_convert_2 = function $$try_convert(what) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](what, Opal.const_get_relative($nesting, 'String'), "to_str")
    }, TMP_String_try_convert_2.$$arity = 1);
    Opal.defs(self, '$new', TMP_String_new_3 = function(str) {
      var self = this;

      if (str == null) {
        str = "";
      }
      
      str = Opal.const_get_relative($nesting, 'Opal').$coerce_to(str, Opal.const_get_relative($nesting, 'String'), "to_str");
      return new String(str);
    }, TMP_String_new_3.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_String_initialize_4 = function $$initialize(str) {
      var self = this;

      
      
      if (str === undefined) {
        return self;
      }
    ;
      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "Mutable strings are not supported in Opal.");
    }, TMP_String_initialize_4.$$arity = -1);
    
    Opal.defn(self, '$%', TMP_String_$_5 = function(data) {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](data))) {
        return $send(self, 'format', [self].concat(Opal.to_a(data)))
        } else {
        return self.$format(self, data)
      }
    }, TMP_String_$_5.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_String_$_6 = function(count) {
      var self = this;

      
      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return '';
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return result;
    
    }, TMP_String_$_6.$$arity = 1);
    
    Opal.defn(self, '$+', TMP_String_$_7 = function(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'String'), "to_str");
      return self + other.$to_s();
    }, TMP_String_$_7.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_String_$lt$eq$gt_8 = function(other) {
      var self = this;

      if ($truthy(other['$respond_to?']("to_str"))) {
        
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);
        } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      
      }
    }, TMP_String_$lt$eq$gt_8.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_String_$eq$eq_9 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](other, "to_str")) {
        return other['$=='](self);
      }
      return false;
    
    }, TMP_String_$eq$eq_9.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    
    Opal.defn(self, '$=~', TMP_String_$eq$_10 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    
    }, TMP_String_$eq$_10.$$arity = 1);
    
    Opal.defn(self, '$[]', TMP_String_$$_11 = function(index, length) {
      var self = this;

      
      var size = self.length, exclude;

      if (index.$$is_range) {
        exclude = index.excl;
        length  = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index.end, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        index   = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index.begin, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }


      if (index.$$is_string) {
        if (length != null) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'))
        }
        return self.indexOf(index) !== -1 ? index : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          ($gvars["~"] = nil)
          return nil;
        }

        ($gvars["~"] = Opal.const_get_relative($nesting, 'MatchData').$new(index, match))

        if (length == null) {
          return match[0];
        }

        length = Opal.const_get_relative($nesting, 'Opal').$coerce_to(length, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (length < 0 && -length < match.length) {
          return match[length += match.length];
        }

        if (length >= 0 && length < match.length) {
          return match[length];
        }

        return nil;
      }


      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.substr(index, 1);
      }

      length = Opal.const_get_relative($nesting, 'Opal').$coerce_to(length, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    
    }, TMP_String_$$_11.$$arity = -2);
    Opal.alias(self, "byteslice", "[]");
    
    Opal.defn(self, '$capitalize', TMP_String_capitalize_12 = function $$capitalize() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase()
    }, TMP_String_capitalize_12.$$arity = 0);
    
    Opal.defn(self, '$casecmp', TMP_String_casecmp_13 = function $$casecmp(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    ;
      return self['$<=>'](other);
    }, TMP_String_casecmp_13.$$arity = 1);
    
    Opal.defn(self, '$center', TMP_String_center_14 = function $$center(width, padstr) {
      var self = this;

      if (padstr == null) {
        padstr = " ";
      }
      
      width = Opal.const_get_relative($nesting, 'Opal').$coerce_to(width, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      padstr = Opal.const_get_relative($nesting, 'Opal').$coerce_to(padstr, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var ljustified = self.$ljust($rb_divide($rb_plus(width, self.length), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide($rb_plus(width, self.length), 2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    }, TMP_String_center_14.$$arity = -2);
    
    Opal.defn(self, '$chars', TMP_String_chars_15 = function $$chars() {
      var self = this, $iter = TMP_String_chars_15.$$p, block = $iter || nil;

      if ($iter) TMP_String_chars_15.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$each_char().$to_a()
      };
      return $send(self, 'each_char', [], block.$to_proc());
    }, TMP_String_chars_15.$$arity = 0);
    
    Opal.defn(self, '$chomp', TMP_String_chomp_16 = function $$chomp(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      
      if ($truthy(separator === nil || self.length === 0)) {
        return self};
      separator = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](separator, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      
      if (separator === "\n") {
        return self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        return self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          return self.substr(0, self.length - separator.length);
        }
      }
    ;
      return self;
    }, TMP_String_chomp_16.$$arity = -1);
    
    Opal.defn(self, '$chop', TMP_String_chop_17 = function $$chop() {
      var self = this;

      
      var length = self.length;

      if (length <= 1) {
        return "";
      }

      if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        return self.substr(0, length - 2);
      }
      else {
        return self.substr(0, length - 1);
      }
    
    }, TMP_String_chop_17.$$arity = 0);
    
    Opal.defn(self, '$chr', TMP_String_chr_18 = function $$chr() {
      var self = this;

      return self.charAt(0)
    }, TMP_String_chr_18.$$arity = 0);
    
    Opal.defn(self, '$clone', TMP_String_clone_19 = function $$clone() {
      var self = this, copy = nil;

      
      copy = self.slice();
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_String_clone_19.$$arity = 0);
    
    Opal.defn(self, '$dup', TMP_String_dup_20 = function $$dup() {
      var self = this, copy = nil;

      
      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    }, TMP_String_dup_20.$$arity = 0);
    
    Opal.defn(self, '$count', TMP_String_count_21 = function $$count($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    
    }, TMP_String_count_21.$$arity = -1);
    
    Opal.defn(self, '$delete', TMP_String_delete_22 = function($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp(char_class, 'g'), '');
    
    }, TMP_String_delete_22.$$arity = -1);
    
    Opal.defn(self, '$downcase', TMP_String_downcase_23 = function $$downcase() {
      var self = this;

      return self.toLowerCase()
    }, TMP_String_downcase_23.$$arity = 0);
    
    Opal.defn(self, '$each_char', TMP_String_each_char_24 = function $$each_char() {
      var TMP_25, self = this, $iter = TMP_String_each_char_24.$$p, block = $iter || nil;

      if ($iter) TMP_String_each_char_24.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_char"], (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.charAt(i));
      }
    ;
      return self;
    }, TMP_String_each_char_24.$$arity = 0);
    
    Opal.defn(self, '$each_line', TMP_String_each_line_26 = function $$each_line(separator) {
      var self = this, $iter = TMP_String_each_line_26.$$p, block = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ($iter) TMP_String_each_line_26.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      
      if (separator === nil) {
        Opal.yield1(block, self);

        return self;
      }

      separator = Opal.const_get_relative($nesting, 'Opal').$coerce_to(separator, Opal.const_get_relative($nesting, 'String'), "to_str")

      var a, i, n, length, chomped, trailing, splitted;

      if (separator.length === 0) {
        for (a = self.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            Opal.yield1(block, (a[i] || "") + (a[i + 1] || ""));
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          Opal.yield1(block, splitted[i] + separator);
        }
        else {
          Opal.yield1(block, splitted[i]);
        }
      }
    ;
      return self;
    }, TMP_String_each_line_26.$$arity = -1);
    
    Opal.defn(self, '$empty?', TMP_String_empty$q_27 = function() {
      var self = this;

      return self.length === 0
    }, TMP_String_empty$q_27.$$arity = 0);
    
    Opal.defn(self, '$end_with?', TMP_String_end_with$q_28 = function($a_rest) {
      var self = this, suffixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      suffixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        suffixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = Opal.const_get_relative($nesting, 'Opal').$coerce_to(suffixes[i], Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    ;
      return false;
    }, TMP_String_end_with$q_28.$$arity = -1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "equal?", "===");
    
    Opal.defn(self, '$gsub', TMP_String_gsub_29 = function $$gsub(pattern, replacement) {
      var self = this, $iter = TMP_String_gsub_29.$$p, block = $iter || nil;

      if ($iter) TMP_String_gsub_29.$$p = null;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pattern, Opal.const_get_relative($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          ($gvars["~"] = nil)
          result += self.slice(index);
          break;
        }

        match_data = Opal.const_get_relative($nesting, 'MatchData').$new(pattern, match);

        if (replacement === undefined) {
          _replacement = block(match[0]);
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = Opal.const_get_relative($nesting, 'Opal').$coerce_to(replacement, Opal.const_get_relative($nesting, 'String'), "to_str");
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (_replacement + self.slice(index, match.index + 1))
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      ($gvars["~"] = match_data)
      return result;
    
    }, TMP_String_gsub_29.$$arity = -2);
    
    Opal.defn(self, '$hash', TMP_String_hash_30 = function $$hash() {
      var self = this;

      return self.toString()
    }, TMP_String_hash_30.$$arity = 0);
    
    Opal.defn(self, '$hex', TMP_String_hex_31 = function $$hex() {
      var self = this;

      return self.$to_i(16)
    }, TMP_String_hex_31.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_String_include$q_32 = function(other) {
      var self = this;

      
      if (!other.$$is_string) {
        (other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'String'), "to_str"))
      }
      return self.indexOf(other) !== -1;
    
    }, TMP_String_include$q_32.$$arity = 1);
    
    Opal.defn(self, '$index', TMP_String_index_33 = function $$index(search, offset) {
      var self = this;

      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = Opal.const_get_relative($nesting, 'Opal').$coerce_to(offset, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            ($gvars["~"] = nil);
            index = -1;
            break;
          }
          if (match.index >= offset) {
            ($gvars["~"] = Opal.const_get_relative($nesting, 'MatchData').$new(regex, match))
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = Opal.const_get_relative($nesting, 'Opal').$coerce_to(search, Opal.const_get_relative($nesting, 'String'), "to_str");
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    
    }, TMP_String_index_33.$$arity = -2);
    
    Opal.defn(self, '$inspect', TMP_String_inspect_34 = function $$inspect() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\u007F-\u009F\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            return meta[chr] || '\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
    
    }, TMP_String_inspect_34.$$arity = 0);
    
    Opal.defn(self, '$intern', TMP_String_intern_35 = function $$intern() {
      var self = this;

      return self
    }, TMP_String_intern_35.$$arity = 0);
    
    Opal.defn(self, '$lines', TMP_String_lines_36 = function $$lines(separator) {
      var self = this, $iter = TMP_String_lines_36.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ($iter) TMP_String_lines_36.$$p = null;
      
      e = $send(self, 'each_line', [separator], block.$to_proc());
      if ($truthy(block)) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_String_lines_36.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_String_length_37 = function $$length() {
      var self = this;

      return self.length
    }, TMP_String_length_37.$$arity = 0);
    
    Opal.defn(self, '$ljust', TMP_String_ljust_38 = function $$ljust(width, padstr) {
      var self = this;

      if (padstr == null) {
        padstr = " ";
      }
      
      width = Opal.const_get_relative($nesting, 'Opal').$coerce_to(width, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      padstr = Opal.const_get_relative($nesting, 'Opal').$coerce_to(padstr, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    ;
    }, TMP_String_ljust_38.$$arity = -2);
    
    Opal.defn(self, '$lstrip', TMP_String_lstrip_39 = function $$lstrip() {
      var self = this;

      return self.replace(/^\s*/, '')
    }, TMP_String_lstrip_39.$$arity = 0);
    
    Opal.defn(self, '$ascii_only?', TMP_String_ascii_only$q_40 = function() {
      var self = this;

      return self.match(/[ -~\n]*/)[0] === self
    }, TMP_String_ascii_only$q_40.$$arity = 0);
    
    Opal.defn(self, '$match', TMP_String_match_41 = function $$match(pattern, pos) {
      var $a, self = this, $iter = TMP_String_match_41.$$p, block = $iter || nil;

      if ($iter) TMP_String_match_41.$$p = null;
      
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?']("to_str")))) {
        pattern = Opal.const_get_relative($nesting, 'Regexp').$new(pattern.$to_str())};
      if ($truthy(Opal.const_get_relative($nesting, 'Regexp')['$==='](pattern))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return $send(pattern, 'match', [self, pos], block.$to_proc());
    }, TMP_String_match_41.$$arity = -2);
    
    Opal.defn(self, '$next', TMP_String_next_42 = function $$next() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return '';
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return result;
    
    }, TMP_String_next_42.$$arity = 0);
    
    Opal.defn(self, '$oct', TMP_String_oct_43 = function $$oct() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, TMP_String_oct_43.$$arity = 0);
    
    Opal.defn(self, '$ord', TMP_String_ord_44 = function $$ord() {
      var self = this;

      return self.charCodeAt(0)
    }, TMP_String_ord_44.$$arity = 0);
    
    Opal.defn(self, '$partition', TMP_String_partition_45 = function $$partition(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          Opal.const_get_relative($nesting, 'MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = Opal.const_get_relative($nesting, 'Opal').$coerce_to(sep, Opal.const_get_relative($nesting, 'String'), "to_str");
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_String_partition_45.$$arity = 1);
    
    Opal.defn(self, '$reverse', TMP_String_reverse_46 = function $$reverse() {
      var self = this;

      return self.split('').reverse().join('')
    }, TMP_String_reverse_46.$$arity = 0);
    
    Opal.defn(self, '$rindex', TMP_String_rindex_47 = function $$rindex(search, offset) {
      var self = this;

      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = Opal.const_get_relative($nesting, 'Opal').$coerce_to(offset, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          ($gvars["~"] = nil)
          i = -1;
        } else {
          Opal.const_get_relative($nesting, 'MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = Opal.const_get_relative($nesting, 'Opal').$coerce_to(search, Opal.const_get_relative($nesting, 'String'), "to_str");
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    
    }, TMP_String_rindex_47.$$arity = -2);
    
    Opal.defn(self, '$rjust', TMP_String_rjust_48 = function $$rjust(width, padstr) {
      var self = this;

      if (padstr == null) {
        padstr = " ";
      }
      
      width = Opal.const_get_relative($nesting, 'Opal').$coerce_to(width, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      padstr = Opal.const_get_relative($nesting, 'Opal').$coerce_to(padstr, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    ;
    }, TMP_String_rjust_48.$$arity = -2);
    
    Opal.defn(self, '$rpartition', TMP_String_rpartition_49 = function $$rpartition(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = new RegExp(sep.source, 'gm' + (sep.ignoreCase ? 'i' : ''));

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          Opal.const_get_relative($nesting, 'MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = Opal.const_get_relative($nesting, 'Opal').$coerce_to(sep, Opal.const_get_relative($nesting, 'String'), "to_str");
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_String_rpartition_49.$$arity = 1);
    
    Opal.defn(self, '$rstrip', TMP_String_rstrip_50 = function $$rstrip() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '')
    }, TMP_String_rstrip_50.$$arity = 0);
    
    Opal.defn(self, '$scan', TMP_String_scan_51 = function $$scan(pattern) {
      var self = this, $iter = TMP_String_scan_51.$$p, block = $iter || nil;

      if ($iter) TMP_String_scan_51.$$p = null;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pattern, Opal.const_get_relative($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = Opal.const_get_relative($nesting, 'MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      ($gvars["~"] = match_data)

      return (block !== nil ? self : result);
    
    }, TMP_String_scan_51.$$arity = 1);
    Opal.alias(self, "size", "length");
    Opal.alias(self, "slice", "[]");
    
    Opal.defn(self, '$split', TMP_String_split_52 = function $$split(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](limit, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ($truthy($a = $gvars[";"]) ? $a : " ");
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i, ii;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pattern, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return result;
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0, ii = match.length; i < ii; i++) {
            result.push('');
          }
        }
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        return result;
      }

      if (limit >= result.length) {
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }
      result.splice(limit - 1, result.length - 1, string.slice(index));
      return result;
    
    }, TMP_String_split_52.$$arity = -1);
    
    Opal.defn(self, '$squeeze', TMP_String_squeeze_53 = function $$squeeze($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1');
    
    }, TMP_String_squeeze_53.$$arity = -1);
    
    Opal.defn(self, '$start_with?', TMP_String_start_with$q_54 = function($a_rest) {
      var self = this, prefixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      prefixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        prefixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = Opal.const_get_relative($nesting, 'Opal').$coerce_to(prefixes[i], Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    
    }, TMP_String_start_with$q_54.$$arity = -1);
    
    Opal.defn(self, '$strip', TMP_String_strip_55 = function $$strip() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/[\s\u0000]*$/, '')
    }, TMP_String_strip_55.$$arity = 0);
    
    Opal.defn(self, '$sub', TMP_String_sub_56 = function $$sub(pattern, replacement) {
      var self = this, $iter = TMP_String_sub_56.$$p, block = $iter || nil;

      if ($iter) TMP_String_sub_56.$$p = null;
      
      if (!pattern.$$is_regexp) {
        pattern = Opal.const_get_relative($nesting, 'Opal').$coerce_to(pattern, Opal.const_get_relative($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result = pattern.exec(self);

      if (result === null) {
        ($gvars["~"] = nil)
        return self.toString();
      }

      Opal.const_get_relative($nesting, 'MatchData').$new(pattern, result)

      if (replacement === undefined) {
        if (block === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (1 for 2)")
        }
        return self.slice(0, result.index) + block(result[0]) + self.slice(result.index + result[0].length);
      }

      if (replacement.$$is_hash) {
        return self.slice(0, result.index) + (replacement)['$[]'](result[0]).$to_s() + self.slice(result.index + result[0].length);
      }

      replacement = Opal.const_get_relative($nesting, 'Opal').$coerce_to(replacement, Opal.const_get_relative($nesting, 'String'), "to_str");

      replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
        if (slashes.length % 2 === 0) {
          return original;
        }
        switch (command) {
        case "+":
          for (var i = result.length - 1; i > 0; i--) {
            if (result[i] !== undefined) {
              return slashes.slice(1) + result[i];
            }
          }
          return '';
        case "&": return slashes.slice(1) + result[0];
        case "`": return slashes.slice(1) + self.slice(0, result.index);
        case "'": return slashes.slice(1) + self.slice(result.index + result[0].length);
        default:  return slashes.slice(1) + (result[command] || '');
        }
      }).replace(/\\\\/g, '\\');

      return self.slice(0, result.index) + replacement + self.slice(result.index + result[0].length);
    
    }, TMP_String_sub_56.$$arity = -2);
    Opal.alias(self, "succ", "next");
    
    Opal.defn(self, '$sum', TMP_String_sum_57 = function $$sum(n) {
      var self = this;

      if (n == null) {
        n = 16;
      }
      
      n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    
    }, TMP_String_sum_57.$$arity = -1);
    
    Opal.defn(self, '$swapcase', TMP_String_swapcase_58 = function $$swapcase() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    }, TMP_String_swapcase_58.$$arity = 0);
    
    Opal.defn(self, '$to_f', TMP_String_to_f_59 = function $$to_f() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    }, TMP_String_to_f_59.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_String_to_i_60 = function $$to_i(base) {
      var self = this;

      if (base == null) {
        base = 10;
      }
      
      var result,
          string = self.toLowerCase(),
          radix = Opal.const_get_relative($nesting, 'Opal').$coerce_to(base, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (radix === 1 || radix < 0 || radix > 36) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, TMP_String_to_i_60.$$arity = -1);
    
    Opal.defn(self, '$to_proc', TMP_String_to_proc_62 = function $$to_proc() {
      var TMP_61, self = this, sym = nil;

      
      sym = self.valueOf();
      return $send(self, 'proc', [], (TMP_61 = function($a_rest){var self = TMP_61.$$s || this, block, args;

        block = TMP_61.$$p || nil;
        if (block) TMP_61.$$p = null;
        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        if (args.length === 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no receiver given")
        }
        var obj = args.shift();
        if (obj == null) obj = nil;
        return Opal.send(obj, sym, args, block);
      }, TMP_61.$$s = self, TMP_61.$$arity = -1, TMP_61));
    }, TMP_String_to_proc_62.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_String_to_s_63 = function $$to_s() {
      var self = this;

      return self.toString()
    }, TMP_String_to_s_63.$$arity = 0);
    Opal.alias(self, "to_str", "to_s");
    Opal.alias(self, "to_sym", "intern");
    
    Opal.defn(self, '$tr', TMP_String_tr_64 = function $$tr(from, to) {
      var self = this;

      
      from = Opal.const_get_relative($nesting, 'Opal').$coerce_to(from, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      to = Opal.const_get_relative($nesting, 'Opal').$coerce_to(to, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      
      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_to == null) {
              last_to = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_to.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_to = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    ;
    }, TMP_String_tr_64.$$arity = 2);
    
    Opal.defn(self, '$tr_s', TMP_String_tr_s_65 = function $$tr_s(from, to) {
      var self = this;

      
      from = Opal.const_get_relative($nesting, 'Opal').$coerce_to(from, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      to = Opal.const_get_relative($nesting, 'Opal').$coerce_to(to, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s();
      
      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    ;
    }, TMP_String_tr_s_65.$$arity = 2);
    
    Opal.defn(self, '$upcase', TMP_String_upcase_66 = function $$upcase() {
      var self = this;

      return self.toUpperCase()
    }, TMP_String_upcase_66.$$arity = 0);
    
    Opal.defn(self, '$upto', TMP_String_upto_67 = function $$upto(stop, excl) {
      var self = this, $iter = TMP_String_upto_67.$$p, block = $iter || nil;

      if (excl == null) {
        excl = false;
      }
      if ($iter) TMP_String_upto_67.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("upto", stop, excl)
      };
      stop = Opal.const_get_relative($nesting, 'Opal').$coerce_to(stop, Opal.const_get_relative($nesting, 'String'), "to_str");
      
      var a, b, s = self.toString();

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(String.fromCharCode(a));

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(a.toString());

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          block(s);

          s = (s).$succ();
        }

      }
      return self;
    ;
    }, TMP_String_upto_67.$$arity = -2);
    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = Opal.const_get_relative($nesting, 'Opal').$coerce_to(sets[i], Opal.const_get_relative($nesting, 'String'), "to_str");
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + Opal.const_get_relative($nesting, 'Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + Opal.const_get_relative($nesting, 'Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  ;
    
    Opal.defn(self, '$instance_variables', TMP_String_instance_variables_68 = function $$instance_variables() {
      var self = this;

      return []
    }, TMP_String_instance_variables_68.$$arity = 0);
    Opal.defs(self, '$_load', TMP_String__load_69 = function $$_load($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(self, 'new', Opal.to_a(args))
    }, TMP_String__load_69.$$arity = -1);
    return (Opal.defn(self, '$unpack', TMP_String_unpack_70 = function $$unpack(pattern) {
      var self = this, $case = nil;

      
      
      function stringToBytes(string) {
        var i,
            singleByte,
            l = string.length,
            result = [];

        for (i = 0; i < l; i++) {
          singleByte = string.charCodeAt(i);
          result.push(singleByte);
        }
        return result;
      }
    ;
      return (function() {$case = pattern;
      if ("U*"['$===']($case) || "C*"['$===']($case)) {return stringToBytes(self);}
      else {return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))}})();
    }, TMP_String_unpack_70.$$arity = 1), nil) && 'unpack';
  })($nesting[0], String, $nesting);
  return Opal.const_set($nesting[0], 'Symbol', Opal.const_get_relative($nesting, 'String'));
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/enumerable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $falsy = Opal.falsy;

  Opal.add_stubs(['$each', '$destructure', '$raise', '$new', '$yield', '$slice_when', '$!', '$enum_for', '$enumerator_size', '$flatten', '$map', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$to_enum', '$ceil', '$/', '$size', '$===', '$<<', '$[]', '$[]=', '$inspect', '$__send__', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$compare', '$call', '$dup', '$to_a', '$lambda', '$sort!', '$map!', '$zip']);
  return (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_all$q_1, TMP_Enumerable_any$q_4, TMP_Enumerable_chunk_7, TMP_Enumerable_chunk_while_9, TMP_Enumerable_collect_11, TMP_Enumerable_collect_concat_13, TMP_Enumerable_count_16, TMP_Enumerable_cycle_20, TMP_Enumerable_detect_22, TMP_Enumerable_drop_24, TMP_Enumerable_drop_while_25, TMP_Enumerable_each_cons_26, TMP_Enumerable_each_entry_28, TMP_Enumerable_each_slice_30, TMP_Enumerable_each_with_index_32, TMP_Enumerable_each_with_object_34, TMP_Enumerable_entries_36, TMP_Enumerable_find_all_37, TMP_Enumerable_find_index_39, TMP_Enumerable_first_44, TMP_Enumerable_grep_45, TMP_Enumerable_grep_v_46, TMP_Enumerable_group_by_47, TMP_Enumerable_include$q_50, TMP_Enumerable_inject_51, TMP_Enumerable_lazy_53, TMP_Enumerable_enumerator_size_54, TMP_Enumerable_max_55, TMP_Enumerable_max_by_56, TMP_Enumerable_min_58, TMP_Enumerable_min_by_59, TMP_Enumerable_minmax_61, TMP_Enumerable_minmax_by_63, TMP_Enumerable_none$q_64, TMP_Enumerable_one$q_67, TMP_Enumerable_partition_70, TMP_Enumerable_reject_72, TMP_Enumerable_reverse_each_74, TMP_Enumerable_slice_before_76, TMP_Enumerable_slice_after_78, TMP_Enumerable_slice_when_81, TMP_Enumerable_sort_83, TMP_Enumerable_sort_by_85, TMP_Enumerable_take_90, TMP_Enumerable_take_while_91, TMP_Enumerable_zip_93;

    
    
    Opal.defn(self, '$all?', TMP_Enumerable_all$q_1 = function() {try {

      var TMP_2, TMP_3, self = this, $iter = TMP_Enumerable_all$q_1.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_all$q_1.$$p = null;
      
      if ((block !== nil)) {
        $send(self, 'each', [], (TMP_2 = function($a_rest){var self = TMP_2.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2))
        } else {
        $send(self, 'each', [], (TMP_3 = function($a_rest){var self = TMP_3.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.const_get_relative($nesting, 'Opal').$destructure(value))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_all$q_1.$$arity = 0);
    
    Opal.defn(self, '$any?', TMP_Enumerable_any$q_4 = function() {try {

      var TMP_5, TMP_6, self = this, $iter = TMP_Enumerable_any$q_4.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_any$q_4.$$p = null;
      
      if ((block !== nil)) {
        $send(self, 'each', [], (TMP_5 = function($a_rest){var self = TMP_5.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5))
        } else {
        $send(self, 'each', [], (TMP_6 = function($a_rest){var self = TMP_6.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.const_get_relative($nesting, 'Opal').$destructure(value))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6))
      };
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_any$q_4.$$arity = 0);
    
    Opal.defn(self, '$chunk', TMP_Enumerable_chunk_7 = function $$chunk() {
      var TMP_8, self = this, $iter = TMP_Enumerable_chunk_7.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_chunk_7.$$p = null;
      
      if ((block !== nil)) {
        } else {
        Opal.const_get_relative($nesting, 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
      };
      return $send(Opal.const_get_qualified('::', 'Enumerator'), 'new', [], (TMP_8 = function(yielder){var self = TMP_8.$$s || this;
if (yielder == null) yielder = nil;
      
        var previous = nil, accumulate = [];

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = Opal.yield1(block, value);

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      }, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
    }, TMP_Enumerable_chunk_7.$$arity = 0);
    
    Opal.defn(self, '$chunk_while', TMP_Enumerable_chunk_while_9 = function $$chunk_while() {
      var TMP_10, self = this, $iter = TMP_Enumerable_chunk_while_9.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_chunk_while_9.$$p = null;
      
      if ((block !== nil)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
      };
      return $send(self, 'slice_when', [], (TMP_10 = function(before, after){var self = TMP_10.$$s || this;
if (before == null) before = nil;if (after == null) after = nil;
      return Opal.yieldX(block, [before, after])['$!']()}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10));
    }, TMP_Enumerable_chunk_while_9.$$arity = 0);
    
    Opal.defn(self, '$collect', TMP_Enumerable_collect_11 = function $$collect() {
      var TMP_12, self = this, $iter = TMP_Enumerable_collect_11.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_collect_11.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["collect"], (TMP_12 = function(){var self = TMP_12.$$s || this;

        return self.$enumerator_size()}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        result.push(value);
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_collect_11.$$arity = 0);
    
    Opal.defn(self, '$collect_concat', TMP_Enumerable_collect_concat_13 = function $$collect_concat() {
      var TMP_14, TMP_15, self = this, $iter = TMP_Enumerable_collect_concat_13.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_collect_concat_13.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["collect_concat"], (TMP_14 = function(){var self = TMP_14.$$s || this;

        return self.$enumerator_size()}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14))
      };
      return $send(self, 'map', [], (TMP_15 = function(item){var self = TMP_15.$$s || this;
if (item == null) item = nil;
      return Opal.yield1(block, item);}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15)).$flatten(1);
    }, TMP_Enumerable_collect_concat_13.$$arity = 0);
    
    Opal.defn(self, '$count', TMP_Enumerable_count_16 = function $$count(object) {
      var TMP_17, TMP_18, TMP_19, self = this, $iter = TMP_Enumerable_count_16.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Enumerable_count_16.$$p = null;
      
      result = 0;
      if ($truthy(object != null)) {
        block = $send(self, 'proc', [], (TMP_17 = function($a_rest){var self = TMP_17.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return Opal.const_get_relative($nesting, 'Opal').$destructure(args)['$=='](object)}, TMP_17.$$s = self, TMP_17.$$arity = -1, TMP_17))
      } else if ($truthy(block['$nil?']())) {
        block = $send(self, 'proc', [], (TMP_18 = function(){var self = TMP_18.$$s || this;

        return true}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18))};
      $send(self, 'each', [], (TMP_19 = function($a_rest){var self = TMP_19.$$s || this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ($truthy(Opal.yieldX(block, args))) {
          return result++
          } else {
          return nil
        }}, TMP_19.$$s = self, TMP_19.$$arity = -1, TMP_19));
      return result;
    }, TMP_Enumerable_count_16.$$arity = -1);
    
    Opal.defn(self, '$cycle', TMP_Enumerable_cycle_20 = function $$cycle(n) {
      var TMP_21, self = this, $iter = TMP_Enumerable_cycle_20.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      if ($iter) TMP_Enumerable_cycle_20.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["cycle", n], (TMP_21 = function(){var self = TMP_21.$$s || this;

        if (n['$=='](nil)) {
            if ($truthy(self['$respond_to?']("size"))) {
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')
              } else {
              return nil
            }
            } else {
            
            n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))
      };
      if ($truthy(n['$nil?']())) {
        } else {
        
        n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(n <= 0)) {
          return nil};
      };
      
      var result,
          all = [], i, length, value;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }

          n--;
        }
      }
    ;
    }, TMP_Enumerable_cycle_20.$$arity = -1);
    
    Opal.defn(self, '$detect', TMP_Enumerable_detect_22 = function $$detect(ifnone) {try {

      var TMP_23, self = this, $iter = TMP_Enumerable_detect_22.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_detect_22.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("detect", ifnone)
      };
      $send(self, 'each', [], (TMP_23 = function($a_rest){var self = TMP_23.$$s || this, args, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        value = Opal.const_get_relative($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
          Opal.ret(value)
          } else {
          return nil
        };}, TMP_23.$$s = self, TMP_23.$$arity = -1, TMP_23));
      
      if (ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          return ifnone();
        } else {
          return ifnone;
        }
      }
    ;
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_detect_22.$$arity = -1);
    
    Opal.defn(self, '$drop', TMP_Enumerable_drop_24 = function $$drop(number) {
      var self = this;

      
      number = Opal.const_get_relative($nesting, 'Opal').$coerce_to(number, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(number < 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push(Opal.const_get_relative($nesting, 'Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    ;
    }, TMP_Enumerable_drop_24.$$arity = 1);
    
    Opal.defn(self, '$drop_while', TMP_Enumerable_drop_while_25 = function $$drop_while() {
      var self = this, $iter = TMP_Enumerable_drop_while_25.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_drop_while_25.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if ($falsy(value)) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_drop_while_25.$$arity = 0);
    
    Opal.defn(self, '$each_cons', TMP_Enumerable_each_cons_26 = function $$each_cons(n) {
      var TMP_27, self = this, $iter = TMP_Enumerable_each_cons_26.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_each_cons_26.$$p = null;
      
      if ($truthy(arguments.length != 1)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 1)")};
      n = Opal.const_get_relative($nesting, 'Opal').$try_convert(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(n <= 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "invalid size")};
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_cons", n], (TMP_27 = function(){var self = TMP_27.$$s || this, $a, enum_size = nil;

        
          enum_size = self.$enumerator_size();
          if ($truthy(enum_size['$nil?']())) {
            return nil
          } else if ($truthy(($truthy($a = enum_size['$=='](0)) ? $a : $rb_lt(enum_size, n)))) {
            return 0
            } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27))
      };
      
      var buffer = [], result = nil;

      self.$each.$$p = function() {
        var element = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          Opal.yield1(block, buffer.slice(0, n));
        }
      }

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_each_cons_26.$$arity = 1);
    
    Opal.defn(self, '$each_entry', TMP_Enumerable_each_entry_28 = function $$each_entry($a_rest) {
      var TMP_29, self = this, data, $iter = TMP_Enumerable_each_entry_28.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      data = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        data[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_each_entry_28.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'to_enum', ["each_entry"].concat(Opal.to_a(data)), (TMP_29 = function(){var self = TMP_29.$$s || this;

        return self.$enumerator_size()}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))
      };
      
      self.$each.$$p = function() {
        var item = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        Opal.yield1(block, item);
      }

      self.$each.apply(self, data);

      return self;
    ;
    }, TMP_Enumerable_each_entry_28.$$arity = -1);
    
    Opal.defn(self, '$each_slice', TMP_Enumerable_each_slice_30 = function $$each_slice(n) {
      var TMP_31, self = this, $iter = TMP_Enumerable_each_slice_30.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_each_slice_30.$$p = null;
      
      n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(n <= 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_slice", n], (TMP_31 = function(){var self = TMP_31.$$s || this;

        if ($truthy(self['$respond_to?']("size"))) {
            return $rb_divide(self.$size(), n).$ceil()
            } else {
            return nil
          }}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))
      };
      
      var result,
          slice = []

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          Opal.yield1(block, slice);
          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        Opal.yield1(block, slice);
      }
    ;
      return nil;
    }, TMP_Enumerable_each_slice_30.$$arity = 1);
    
    Opal.defn(self, '$each_with_index', TMP_Enumerable_each_with_index_32 = function $$each_with_index($a_rest) {
      var TMP_33, self = this, args, $iter = TMP_Enumerable_each_with_index_32.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_each_with_index_32.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_with_index"].concat(Opal.to_a(args)), (TMP_33 = function(){var self = TMP_33.$$s || this;

        return self.$enumerator_size()}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33))
      };
      
      var result,
          index = 0;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        block(param, index);

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    ;
      return self;
    }, TMP_Enumerable_each_with_index_32.$$arity = -1);
    
    Opal.defn(self, '$each_with_object', TMP_Enumerable_each_with_object_34 = function $$each_with_object(object) {
      var TMP_35, self = this, $iter = TMP_Enumerable_each_with_object_34.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_each_with_object_34.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_with_object", object], (TMP_35 = function(){var self = TMP_35.$$s || this;

        return self.$enumerator_size()}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35))
      };
      
      var result;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

        block(param, object);
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return object;
    }, TMP_Enumerable_each_with_object_34.$$arity = 1);
    
    Opal.defn(self, '$entries', TMP_Enumerable_entries_36 = function $$entries($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      self.$each.$$p = function() {
        result.push(Opal.const_get_relative($nesting, 'Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    
    }, TMP_Enumerable_entries_36.$$arity = -1);
    Opal.alias(self, "find", "detect");
    
    Opal.defn(self, '$find_all', TMP_Enumerable_find_all_37 = function $$find_all() {
      var TMP_38, self = this, $iter = TMP_Enumerable_find_all_37.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_find_all_37.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["find_all"], (TMP_38 = function(){var self = TMP_38.$$s || this;

        return self.$enumerator_size()}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_find_all_37.$$arity = 0);
    
    Opal.defn(self, '$find_index', TMP_Enumerable_find_index_39 = function $$find_index(object) {try {

      var TMP_40, TMP_41, self = this, $iter = TMP_Enumerable_find_index_39.$$p, block = $iter || nil, index = nil;

      if ($iter) TMP_Enumerable_find_index_39.$$p = null;
      
      if ($truthy(object === undefined && block === nil)) {
        return self.$enum_for("find_index")};
      index = 0;
      if ($truthy(object != null)) {
        $send(self, 'each', [], (TMP_40 = function($a_rest){var self = TMP_40.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        
          if (Opal.const_get_relative($nesting, 'Opal').$destructure(value)['$=='](object)) {
            Opal.ret(index)};
          return index += 1;}, TMP_40.$$s = self, TMP_40.$$arity = -1, TMP_40))
        } else {
        $send(self, 'each', [], (TMP_41 = function($a_rest){var self = TMP_41.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(index)};
          return index += 1;}, TMP_41.$$s = self, TMP_41.$$arity = -1, TMP_41))
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_find_index_39.$$arity = -1);
    
    Opal.defn(self, '$first', TMP_Enumerable_first_44 = function $$first(number) {try {

      var TMP_42, TMP_43, self = this, result = nil, current = nil;

      if ($truthy(number === undefined)) {
        return $send(self, 'each', [], (TMP_42 = function(value){var self = TMP_42.$$s || this;
if (value == null) value = nil;
        Opal.ret(value)}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42))
        } else {
        
        result = [];
        number = Opal.const_get_relative($nesting, 'Opal').$coerce_to(number, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(number < 0)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "attempt to take negative size")};
        if ($truthy(number == 0)) {
          return []};
        current = 0;
        $send(self, 'each', [], (TMP_43 = function($a_rest){var self = TMP_43.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        
          result.push(Opal.const_get_relative($nesting, 'Opal').$destructure(args));
          if ($truthy(number <= ++current)) {
            Opal.ret(result)
            } else {
            return nil
          };}, TMP_43.$$s = self, TMP_43.$$arity = -1, TMP_43));
        return result;
      }
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_first_44.$$arity = -1);
    Opal.alias(self, "flat_map", "collect_concat");
    
    Opal.defn(self, '$grep', TMP_Enumerable_grep_45 = function $$grep(pattern) {
      var self = this, $iter = TMP_Enumerable_grep_45.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_grep_45.$$p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ($truthy(value)) {
            value = Opal.yield1(block, param);

            result.push(value);
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ($truthy(value)) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    
    }, TMP_Enumerable_grep_45.$$arity = 1);
    
    Opal.defn(self, '$grep_v', TMP_Enumerable_grep_v_46 = function $$grep_v(pattern) {
      var self = this, $iter = TMP_Enumerable_grep_v_46.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_grep_v_46.$$p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ($falsy(value)) {
            value = Opal.yield1(block, param);

            result.push(value);
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ($falsy(value)) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    
    }, TMP_Enumerable_grep_v_46.$$arity = 1);
    
    Opal.defn(self, '$group_by', TMP_Enumerable_group_by_47 = function $$group_by() {
      var TMP_48, $a, self = this, $iter = TMP_Enumerable_group_by_47.$$p, block = $iter || nil, hash = nil, $writer = nil;

      if ($iter) TMP_Enumerable_group_by_47.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["group_by"], (TMP_48 = function(){var self = TMP_48.$$s || this;

        return self.$enumerator_size()}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48))
      };
      hash = Opal.const_get_relative($nesting, 'Hash').$new();
      
      var result;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        ($truthy($a = hash['$[]'](value)) ? $a : (($writer = [value, []]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return hash;
    }, TMP_Enumerable_group_by_47.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Enumerable_include$q_50 = function(obj) {try {

      var TMP_49, self = this;

      
      $send(self, 'each', [], (TMP_49 = function($a_rest){var self = TMP_49.$$s || this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if (Opal.const_get_relative($nesting, 'Opal').$destructure(args)['$=='](obj)) {
          Opal.ret(true)
          } else {
          return nil
        }}, TMP_49.$$s = self, TMP_49.$$arity = -1, TMP_49));
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_include$q_50.$$arity = 1);
    
    Opal.defn(self, '$inject', TMP_Enumerable_inject_51 = function $$inject(object, sym) {
      var self = this, $iter = TMP_Enumerable_inject_51.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_inject_51.$$p = null;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!Opal.const_get_relative($nesting, 'Symbol')['$==='](object)) {
            self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    
    }, TMP_Enumerable_inject_51.$$arity = -1);
    
    Opal.defn(self, '$lazy', TMP_Enumerable_lazy_53 = function $$lazy() {
      var TMP_52, self = this;

      return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Enumerator'), 'Lazy'), 'new', [self, self.$enumerator_size()], (TMP_52 = function(enum$, $a_rest){var self = TMP_52.$$s || this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }if (enum$ == null) enum$ = nil;
      return $send(enum$, 'yield', Opal.to_a(args))}, TMP_52.$$s = self, TMP_52.$$arity = -2, TMP_52))
    }, TMP_Enumerable_lazy_53.$$arity = 0);
    
    Opal.defn(self, '$enumerator_size', TMP_Enumerable_enumerator_size_54 = function $$enumerator_size() {
      var self = this;

      if ($truthy(self['$respond_to?']("size"))) {
        return self.$size()
        } else {
        return nil
      }
    }, TMP_Enumerable_enumerator_size_54.$$arity = 0);
    Opal.alias(self, "map", "collect");
    
    Opal.defn(self, '$max', TMP_Enumerable_max_55 = function $$max(n) {
      var self = this, $iter = TMP_Enumerable_max_55.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_max_55.$$p = null;
      
      
      if (n === undefined || n === nil) {
        var result, value;

        self.$each.$$p = function() {
          var item = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = item;
            return;
          }

          if (block !== nil) {
            value = Opal.yieldX(block, [item, result]);
          } else {
            value = (item)['$<=>'](result);
          }

          if (value === nil) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = item;
          }
        }

        self.$each();

        if (result === undefined) {
          return nil;
        } else {
          return result;
        }
      }
    ;
      n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      return $send(self, 'sort', [], block.$to_proc()).$reverse().$first(n);
    }, TMP_Enumerable_max_55.$$arity = -1);
    
    Opal.defn(self, '$max_by', TMP_Enumerable_max_by_56 = function $$max_by() {
      var TMP_57, self = this, $iter = TMP_Enumerable_max_by_56.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_max_by_56.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["max_by"], (TMP_57 = function(){var self = TMP_57.$$s || this;

        return self.$enumerator_size()}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57))
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, TMP_Enumerable_max_by_56.$$arity = 0);
    Opal.alias(self, "member?", "include?");
    
    Opal.defn(self, '$min', TMP_Enumerable_min_58 = function $$min() {
      var self = this, $iter = TMP_Enumerable_min_58.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_min_58.$$p = null;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === nil) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if (Opal.const_get_relative($nesting, 'Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_Enumerable_min_58.$$arity = 0);
    
    Opal.defn(self, '$min_by', TMP_Enumerable_min_by_59 = function $$min_by() {
      var TMP_60, self = this, $iter = TMP_Enumerable_min_by_59.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_min_by_59.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["min_by"], (TMP_60 = function(){var self = TMP_60.$$s || this;

        return self.$enumerator_size()}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60))
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, TMP_Enumerable_min_by_59.$$arity = 0);
    
    Opal.defn(self, '$minmax', TMP_Enumerable_minmax_61 = function $$minmax() {
      var $a, TMP_62, self = this, $iter = TMP_Enumerable_minmax_61.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_minmax_61.$$p = null;
      
      block = ($truthy($a = block) ? $a : $send(self, 'proc', [], (TMP_62 = function(a, b){var self = TMP_62.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a['$<=>'](b)}, TMP_62.$$s = self, TMP_62.$$arity = 2, TMP_62)));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    ;
    }, TMP_Enumerable_minmax_61.$$arity = 0);
    
    Opal.defn(self, '$minmax_by', TMP_Enumerable_minmax_by_63 = function $$minmax_by() {
      var self = this, $iter = TMP_Enumerable_minmax_by_63.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_minmax_by_63.$$p = null;
      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
    }, TMP_Enumerable_minmax_by_63.$$arity = 0);
    
    Opal.defn(self, '$none?', TMP_Enumerable_none$q_64 = function() {try {

      var TMP_65, TMP_66, self = this, $iter = TMP_Enumerable_none$q_64.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_none$q_64.$$p = null;
      
      if ((block !== nil)) {
        $send(self, 'each', [], (TMP_65 = function($a_rest){var self = TMP_65.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_65.$$s = self, TMP_65.$$arity = -1, TMP_65))
        } else {
        $send(self, 'each', [], (TMP_66 = function($a_rest){var self = TMP_66.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.const_get_relative($nesting, 'Opal').$destructure(value))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_66.$$s = self, TMP_66.$$arity = -1, TMP_66))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_none$q_64.$$arity = 0);
    
    Opal.defn(self, '$one?', TMP_Enumerable_one$q_67 = function() {try {

      var TMP_68, TMP_69, self = this, $iter = TMP_Enumerable_one$q_67.$$p, block = $iter || nil, count = nil;

      if ($iter) TMP_Enumerable_one$q_67.$$p = null;
      
      count = 0;
      if ((block !== nil)) {
        $send(self, 'each', [], (TMP_68 = function($a_rest){var self = TMP_68.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            
            count = $rb_plus(count, 1);
            if ($truthy($rb_gt(count, 1))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_68.$$s = self, TMP_68.$$arity = -1, TMP_68))
        } else {
        $send(self, 'each', [], (TMP_69 = function($a_rest){var self = TMP_69.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($truthy(Opal.const_get_relative($nesting, 'Opal').$destructure(value))) {
            
            count = $rb_plus(count, 1);
            if ($truthy($rb_gt(count, 1))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_69.$$s = self, TMP_69.$$arity = -1, TMP_69))
      };
      return count['$=='](1);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_one$q_67.$$arity = 0);
    
    Opal.defn(self, '$partition', TMP_Enumerable_partition_70 = function $$partition() {
      var TMP_71, self = this, $iter = TMP_Enumerable_partition_70.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_partition_70.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["partition"], (TMP_71 = function(){var self = TMP_71.$$s || this;

        return self.$enumerator_size()}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71))
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    ;
    }, TMP_Enumerable_partition_70.$$arity = 0);
    Opal.alias(self, "reduce", "inject");
    
    Opal.defn(self, '$reject', TMP_Enumerable_reject_72 = function $$reject() {
      var TMP_73, self = this, $iter = TMP_Enumerable_reject_72.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_reject_72.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reject"], (TMP_73 = function(){var self = TMP_73.$$s || this;

        return self.$enumerator_size()}, TMP_73.$$s = self, TMP_73.$$arity = 0, TMP_73))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($falsy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, TMP_Enumerable_reject_72.$$arity = 0);
    
    Opal.defn(self, '$reverse_each', TMP_Enumerable_reverse_each_74 = function $$reverse_each() {
      var TMP_75, self = this, $iter = TMP_Enumerable_reverse_each_74.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_reverse_each_74.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reverse_each"], (TMP_75 = function(){var self = TMP_75.$$s || this;

        return self.$enumerator_size()}, TMP_75.$$s = self, TMP_75.$$arity = 0, TMP_75))
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    ;
    }, TMP_Enumerable_reverse_each_74.$$arity = 0);
    Opal.alias(self, "select", "find_all");
    
    Opal.defn(self, '$slice_before', TMP_Enumerable_slice_before_76 = function $$slice_before(pattern) {
      var TMP_77, self = this, $iter = TMP_Enumerable_slice_before_76.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_slice_before_76.$$p = null;
      
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      return $send(Opal.const_get_relative($nesting, 'Enumerator'), 'new', [], (TMP_77 = function(e){var self = TMP_77.$$s || this;
if (e == null) e = nil;
      
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ($truthy(value) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      }, TMP_77.$$s = self, TMP_77.$$arity = 1, TMP_77));
    }, TMP_Enumerable_slice_before_76.$$arity = -1);
    
    Opal.defn(self, '$slice_after', TMP_Enumerable_slice_after_78 = function $$slice_after(pattern) {
      var TMP_79, TMP_80, self = this, $iter = TMP_Enumerable_slice_after_78.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_slice_after_78.$$p = null;
      
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      if ($truthy(pattern !== undefined)) {
        block = $send(self, 'proc', [], (TMP_79 = function(e){var self = TMP_79.$$s || this;
if (e == null) e = nil;
        return pattern['$==='](e)}, TMP_79.$$s = self, TMP_79.$$arity = 1, TMP_79))};
      return $send(Opal.const_get_relative($nesting, 'Enumerator'), 'new', [], (TMP_80 = function(yielder){var self = TMP_80.$$s || this;
if (yielder == null) yielder = nil;
      
        var accumulate;

        self.$each.$$p = function() {
          var element = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              end_chunk = Opal.yield1(block, element);

          if (accumulate == null) {
            accumulate = [];
          }

          if ($truthy(end_chunk)) {
            accumulate.push(element);
            yielder.$yield(accumulate);
            accumulate = null;
          } else {
            accumulate.push(element)
          }
        }

        self.$each();

        if (accumulate != null) {
          yielder.$yield(accumulate);
        }
      }, TMP_80.$$s = self, TMP_80.$$arity = 1, TMP_80));
    }, TMP_Enumerable_slice_after_78.$$arity = -1);
    
    Opal.defn(self, '$slice_when', TMP_Enumerable_slice_when_81 = function $$slice_when() {
      var TMP_82, self = this, $iter = TMP_Enumerable_slice_when_81.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerable_slice_when_81.$$p = null;
      
      if ((block !== nil)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1)")
      };
      return $send(Opal.const_get_relative($nesting, 'Enumerator'), 'new', [], (TMP_82 = function(yielder){var self = TMP_82.$$s || this;
if (yielder == null) yielder = nil;
      
        var slice = nil, last_after = nil;

        self.$each_cons.$$p = function() {
          var params = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
              before = params[0],
              after = params[1],
              match = Opal.yieldX(block, [before, after]);

          last_after = after;

          if (slice === nil) {
            slice = [];
          }

          if ($truthy(match)) {
            slice.push(before);
            yielder.$yield(slice);
            slice = [];
          } else {
            slice.push(before);
          }
        }

        self.$each_cons(2);

        if (slice !== nil) {
          slice.push(last_after);
          yielder.$yield(slice);
        }
      }, TMP_82.$$s = self, TMP_82.$$arity = 1, TMP_82));
    }, TMP_Enumerable_slice_when_81.$$arity = 0);
    
    Opal.defn(self, '$sort', TMP_Enumerable_sort_83 = function $$sort() {
      var TMP_84, self = this, $iter = TMP_Enumerable_sort_83.$$p, block = $iter || nil, ary = nil;

      if ($iter) TMP_Enumerable_sort_83.$$p = null;
      
      ary = self.$to_a();
      if ((block !== nil)) {
        } else {
        block = $send(self, 'lambda', [], (TMP_84 = function(a, b){var self = TMP_84.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
        return a['$<=>'](b)}, TMP_84.$$s = self, TMP_84.$$arity = 2, TMP_84))
      };
      return $send(ary, 'sort', [], block.$to_proc());
    }, TMP_Enumerable_sort_83.$$arity = 0);
    
    Opal.defn(self, '$sort_by', TMP_Enumerable_sort_by_85 = function $$sort_by() {
      var TMP_86, TMP_87, TMP_88, TMP_89, self = this, $iter = TMP_Enumerable_sort_by_85.$$p, block = $iter || nil, dup = nil;

      if ($iter) TMP_Enumerable_sort_by_85.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["sort_by"], (TMP_86 = function(){var self = TMP_86.$$s || this;

        return self.$enumerator_size()}, TMP_86.$$s = self, TMP_86.$$arity = 0, TMP_86))
      };
      dup = $send(self, 'map', [], (TMP_87 = function(){var self = TMP_87.$$s || this, arg = nil;

      
        arg = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments);
        return [Opal.yield1(block, arg), arg];}, TMP_87.$$s = self, TMP_87.$$arity = 0, TMP_87));
      $send(dup, 'sort!', [], (TMP_88 = function(a, b){var self = TMP_88.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return (a[0])['$<=>'](b[0])}, TMP_88.$$s = self, TMP_88.$$arity = 2, TMP_88));
      return $send(dup, 'map!', [], (TMP_89 = function(i){var self = TMP_89.$$s || this;
if (i == null) i = nil;
      return i[1]}, TMP_89.$$s = self, TMP_89.$$arity = 1, TMP_89));
    }, TMP_Enumerable_sort_by_85.$$arity = 0);
    
    Opal.defn(self, '$take', TMP_Enumerable_take_90 = function $$take(num) {
      var self = this;

      return self.$first(num)
    }, TMP_Enumerable_take_90.$$arity = 1);
    
    Opal.defn(self, '$take_while', TMP_Enumerable_take_while_91 = function $$take_while() {try {

      var TMP_92, self = this, $iter = TMP_Enumerable_take_while_91.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Enumerable_take_while_91.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("take_while")
      };
      result = [];
      return $send(self, 'each', [], (TMP_92 = function($a_rest){var self = TMP_92.$$s || this, args, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        value = Opal.const_get_relative($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
          } else {
          Opal.ret(result)
        };
        return result.push(value);}, TMP_92.$$s = self, TMP_92.$$arity = -1, TMP_92));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Enumerable_take_while_91.$$arity = 0);
    Opal.alias(self, "to_a", "entries");
    
    Opal.defn(self, '$zip', TMP_Enumerable_zip_93 = function $$zip($a_rest) {
      var self = this, others, $iter = TMP_Enumerable_zip_93.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_zip_93.$$p = null;
      return $send(self.$to_a(), 'zip', Opal.to_a(others))
    }, TMP_Enumerable_zip_93.$$arity = -1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/enumerator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerator_for_1, TMP_Enumerator_initialize_2, TMP_Enumerator_each_3, TMP_Enumerator_size_4, TMP_Enumerator_with_index_5, TMP_Enumerator_inspect_7;

    def.size = def.args = def.object = def.method = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    def.$$is_enumerator = true;
    Opal.defs(self, '$for', TMP_Enumerator_for_1 = function(object, method, $a_rest) {
      var self = this, args, $iter = TMP_Enumerator_for_1.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerator_for_1.$$p = null;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    
    }, TMP_Enumerator_for_1.$$arity = -2);
    
    Opal.defn(self, '$initialize', TMP_Enumerator_initialize_2 = function $$initialize($a_rest) {
      var self = this, $iter = TMP_Enumerator_initialize_2.$$p, block = $iter || nil;

      if ($iter) TMP_Enumerator_initialize_2.$$p = null;
      if ($truthy(block)) {
        
        self.object = $send(Opal.const_get_relative($nesting, 'Generator'), 'new', [], block.$to_proc());
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ($truthy(self.size)) {
          return (self.size = Opal.const_get_relative($nesting, 'Opal').$coerce_to(self.size, Opal.const_get_relative($nesting, 'Integer'), "to_int"))
          } else {
          return nil
        };
        } else {
        
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return (self.size = nil);
      }
    }, TMP_Enumerator_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$each', TMP_Enumerator_each_3 = function $$each($a_rest) {
      var $b, self = this, args, $iter = TMP_Enumerator_each_3.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerator_each_3.$$p = null;
      
      if ($truthy(($truthy($b = block['$nil?']()) ? args['$empty?']() : $b))) {
        return self};
      args = $rb_plus(self.args, args);
      if ($truthy(block['$nil?']())) {
        return $send(self.$class(), 'new', [self.object, self.method].concat(Opal.to_a(args)))};
      return $send(self.object, '__send__', [self.method].concat(Opal.to_a(args)), block.$to_proc());
    }, TMP_Enumerator_each_3.$$arity = -1);
    
    Opal.defn(self, '$size', TMP_Enumerator_size_4 = function $$size() {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Proc')['$==='](self.size))) {
        return $send(self.size, 'call', Opal.to_a(self.args))
        } else {
        return self.size
      }
    }, TMP_Enumerator_size_4.$$arity = 0);
    
    Opal.defn(self, '$with_index', TMP_Enumerator_with_index_5 = function $$with_index(offset) {
      var TMP_6, self = this, $iter = TMP_Enumerator_with_index_5.$$p, block = $iter || nil;

      if (offset == null) {
        offset = 0;
      }
      if ($iter) TMP_Enumerator_with_index_5.$$p = null;
      
      if ($truthy(offset)) {
        offset = Opal.const_get_relative($nesting, 'Opal').$coerce_to(offset, Opal.const_get_relative($nesting, 'Integer'), "to_int")
        } else {
        offset = 0
      };
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["with_index", offset], (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self.$size()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = block(param, index);

        index++;

        return value;
      }

      return self.$each();
    ;
    }, TMP_Enumerator_with_index_5.$$arity = -1);
    Opal.alias(self, "with_object", "each_with_object");
    
    Opal.defn(self, '$inspect', TMP_Enumerator_inspect_7 = function $$inspect() {
      var self = this, result = nil;

      
      result = "" + "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ($truthy(self.args['$empty?']())) {
        } else {
        result = $rb_plus(result, "" + "(" + (self.args.$inspect()['$[]'](Opal.const_get_relative($nesting, 'Range').$new(1, -2))) + ")")
      };
      return $rb_plus(result, ">");
    }, TMP_Enumerator_inspect_7.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Generator_initialize_8, TMP_Generator_each_9;

      def.block = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
      
      Opal.defn(self, '$initialize', TMP_Generator_initialize_8 = function $$initialize() {
        var self = this, $iter = TMP_Generator_initialize_8.$$p, block = $iter || nil;

        if ($iter) TMP_Generator_initialize_8.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
        };
        return (self.block = block);
      }, TMP_Generator_initialize_8.$$arity = 0);
      return (Opal.defn(self, '$each', TMP_Generator_each_9 = function $$each($a_rest) {
        var self = this, args, $iter = TMP_Generator_each_9.$$p, block = $iter || nil, yielder = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_Generator_each_9.$$p = null;
        
        yielder = $send(Opal.const_get_relative($nesting, 'Yielder'), 'new', [], block.$to_proc());
        
        try {
          args.unshift(yielder);

          Opal.yieldX(self.block, args);
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, TMP_Generator_each_9.$$arity = -1), nil) && 'each';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Yielder_initialize_10, TMP_Yielder_yield_11, TMP_Yielder_$lt$lt_12;

      def.block = nil;
      
      
      Opal.defn(self, '$initialize', TMP_Yielder_initialize_10 = function $$initialize() {
        var self = this, $iter = TMP_Yielder_initialize_10.$$p, block = $iter || nil;

        if ($iter) TMP_Yielder_initialize_10.$$p = null;
        return (self.block = block)
      }, TMP_Yielder_initialize_10.$$arity = 0);
      
      Opal.defn(self, '$yield', TMP_Yielder_yield_11 = function($a_rest) {
        var self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      
      }, TMP_Yielder_yield_11.$$arity = -1);
      return (Opal.defn(self, '$<<', TMP_Yielder_$lt$lt_12 = function($a_rest) {
        var self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        $send(self, 'yield', Opal.to_a(values));
        return self;
      }, TMP_Yielder_$lt$lt_12.$$arity = -1), nil) && '<<';
    })($nesting[0], null, $nesting);
    return (function($base, $super, $parent_nesting) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Lazy_initialize_13, TMP_Lazy_lazy_16, TMP_Lazy_collect_17, TMP_Lazy_collect_concat_19, TMP_Lazy_drop_24, TMP_Lazy_drop_while_25, TMP_Lazy_enum_for_27, TMP_Lazy_find_all_28, TMP_Lazy_grep_30, TMP_Lazy_reject_33, TMP_Lazy_take_36, TMP_Lazy_take_while_37, TMP_Lazy_inspect_39;

      def.enumerator = nil;
      
      (function($base, $super, $parent_nesting) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
      
      Opal.defn(self, '$initialize', TMP_Lazy_initialize_13 = function $$initialize(object, size) {
        var TMP_14, self = this, $iter = TMP_Lazy_initialize_13.$$p, block = $iter || nil;

        if (size == null) {
          size = nil;
        }
        if ($iter) TMP_Lazy_initialize_13.$$p = null;
        
        if ((block !== nil)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Lazy_initialize_13, false), [size], (TMP_14 = function(yielder, $a_rest){var self = TMP_14.$$s || this, each_args, TMP_15;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          each_args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            each_args[$arg_idx - 1] = arguments[$arg_idx];
          }if (yielder == null) yielder = nil;
        
          try {
            return $send(object, 'each', Opal.to_a(each_args), (TMP_15 = function($a_rest){var self = TMP_15.$$s || this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              args.unshift(yielder);

              Opal.yieldX(block, args);
            }, TMP_15.$$s = self, TMP_15.$$arity = -1, TMP_15))
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };}, TMP_14.$$s = self, TMP_14.$$arity = -2, TMP_14));
      }, TMP_Lazy_initialize_13.$$arity = -2);
      Opal.alias(self, "force", "to_a");
      
      Opal.defn(self, '$lazy', TMP_Lazy_lazy_16 = function $$lazy() {
        var self = this;

        return self
      }, TMP_Lazy_lazy_16.$$arity = 0);
      
      Opal.defn(self, '$collect', TMP_Lazy_collect_17 = function $$collect() {
        var TMP_18, self = this, $iter = TMP_Lazy_collect_17.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_collect_17.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, self.$enumerator_size()], (TMP_18 = function(enum$, $a_rest){var self = TMP_18.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          enum$.$yield(value);
        }, TMP_18.$$s = self, TMP_18.$$arity = -2, TMP_18));
      }, TMP_Lazy_collect_17.$$arity = 0);
      
      Opal.defn(self, '$collect_concat', TMP_Lazy_collect_concat_19 = function $$collect_concat() {
        var TMP_20, self = this, $iter = TMP_Lazy_collect_concat_19.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_collect_concat_19.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_20 = function(enum$, $a_rest){var self = TMP_20.$$s || this, args, TMP_21, TMP_22;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            $send((value), 'each', [], (TMP_21 = function(v){var self = TMP_21.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21))
          }
          else {
            var array = Opal.const_get_relative($nesting, 'Opal').$try_convert(value, Opal.const_get_relative($nesting, 'Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              $send((value), 'each', [], (TMP_22 = function(v){var self = TMP_22.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22));
            }
          }
        }, TMP_20.$$s = self, TMP_20.$$arity = -2, TMP_20));
      }, TMP_Lazy_collect_concat_19.$$arity = 0);
      
      Opal.defn(self, '$drop', TMP_Lazy_drop_24 = function $$drop(n) {
        var TMP_23, self = this, current_size = nil, set_size = nil, dropped = nil;

        
        n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(n, 0))) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, set_size], (TMP_23 = function(enum$, $a_rest){var self = TMP_23.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ($truthy($rb_lt(dropped, n))) {
            return (dropped = $rb_plus(dropped, 1))
            } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          }}, TMP_23.$$s = self, TMP_23.$$arity = -2, TMP_23));
      }, TMP_Lazy_drop_24.$$arity = 1);
      
      Opal.defn(self, '$drop_while', TMP_Lazy_drop_while_25 = function $$drop_while() {
        var TMP_26, self = this, $iter = TMP_Lazy_drop_while_25.$$p, block = $iter || nil, succeeding = nil;

        if ($iter) TMP_Lazy_drop_while_25.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_26 = function(enum$, $a_rest){var self = TMP_26.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ($truthy(succeeding)) {
            
            var value = Opal.yieldX(block, args);

            if ($falsy(value)) {
              succeeding = false;

              $send(enum$, 'yield', Opal.to_a(args));
            }
          
            } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          }}, TMP_26.$$s = self, TMP_26.$$arity = -2, TMP_26));
      }, TMP_Lazy_drop_while_25.$$arity = 0);
      
      Opal.defn(self, '$enum_for', TMP_Lazy_enum_for_27 = function $$enum_for(method, $a_rest) {
        var self = this, args, $iter = TMP_Lazy_enum_for_27.$$p, block = $iter || nil;

        if (method == null) {
          method = "each";
        }
        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_Lazy_enum_for_27.$$p = null;
        return $send(self.$class(), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc())
      }, TMP_Lazy_enum_for_27.$$arity = -1);
      
      Opal.defn(self, '$find_all', TMP_Lazy_find_all_28 = function $$find_all() {
        var TMP_29, self = this, $iter = TMP_Lazy_find_all_28.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_find_all_28.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy select without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_29 = function(enum$, $a_rest){var self = TMP_29.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        }, TMP_29.$$s = self, TMP_29.$$arity = -2, TMP_29));
      }, TMP_Lazy_find_all_28.$$arity = 0);
      Opal.alias(self, "flat_map", "collect_concat");
      
      Opal.defn(self, '$grep', TMP_Lazy_grep_30 = function $$grep(pattern) {
        var TMP_31, TMP_32, self = this, $iter = TMP_Lazy_grep_30.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_grep_30.$$p = null;
        if ($truthy(block)) {
          return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_31 = function(enum$, $a_rest){var self = TMP_31.$$s || this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = Opal.const_get_relative($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              value = Opal.yield1(block, param);

              enum$.$yield(Opal.yield1(block, param));
            }
          }, TMP_31.$$s = self, TMP_31.$$arity = -2, TMP_31))
          } else {
          return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_32 = function(enum$, $a_rest){var self = TMP_32.$$s || this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = Opal.const_get_relative($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              enum$.$yield(param);
            }
          }, TMP_32.$$s = self, TMP_32.$$arity = -2, TMP_32))
        }
      }, TMP_Lazy_grep_30.$$arity = 1);
      Opal.alias(self, "map", "collect");
      Opal.alias(self, "select", "find_all");
      
      Opal.defn(self, '$reject', TMP_Lazy_reject_33 = function $$reject() {
        var TMP_34, self = this, $iter = TMP_Lazy_reject_33.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_reject_33.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy reject without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_34 = function(enum$, $a_rest){var self = TMP_34.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ($falsy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        }, TMP_34.$$s = self, TMP_34.$$arity = -2, TMP_34));
      }, TMP_Lazy_reject_33.$$arity = 0);
      
      Opal.defn(self, '$take', TMP_Lazy_take_36 = function $$take(n) {
        var TMP_35, self = this, current_size = nil, set_size = nil, taken = nil;

        
        n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(n, 0))) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, set_size], (TMP_35 = function(enum$, $a_rest){var self = TMP_35.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ($truthy($rb_lt(taken, n))) {
            
            $send(enum$, 'yield', Opal.to_a(args));
            return (taken = $rb_plus(taken, 1));
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'StopLazyError'))
          }}, TMP_35.$$s = self, TMP_35.$$arity = -2, TMP_35));
      }, TMP_Lazy_take_36.$$arity = 1);
      
      Opal.defn(self, '$take_while', TMP_Lazy_take_while_37 = function $$take_while() {
        var TMP_38, self = this, $iter = TMP_Lazy_take_while_37.$$p, block = $iter || nil;

        if ($iter) TMP_Lazy_take_while_37.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to call lazy take_while without a block")
        };
        return $send(Opal.const_get_relative($nesting, 'Lazy'), 'new', [self, nil], (TMP_38 = function(enum$, $a_rest){var self = TMP_38.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
          else {
            self.$raise(Opal.const_get_relative($nesting, 'StopLazyError'));
          }
        }, TMP_38.$$s = self, TMP_38.$$arity = -2, TMP_38));
      }, TMP_Lazy_take_while_37.$$arity = 0);
      Opal.alias(self, "to_enum", "enum_for");
      return (Opal.defn(self, '$inspect', TMP_Lazy_inspect_39 = function $$inspect() {
        var self = this;

        return "" + "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">"
      }, TMP_Lazy_inspect_39.$$arity = 0), nil) && 'inspect';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/numeric"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$coerce', '$===', '$raise', '$__send__', '$equal?', '$-', '$*', '$div', '$<', '$-@', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$coerce_to!', '$round', '$to_i', '$truncate', '$>']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_coerce_1, TMP_Numeric___coerced___2, TMP_Numeric_$lt$eq$gt_3, TMP_Numeric_$$_4, TMP_Numeric_$$_5, TMP_Numeric_$_6, TMP_Numeric_abs_7, TMP_Numeric_abs2_8, TMP_Numeric_angle_9, TMP_Numeric_ceil_10, TMP_Numeric_conj_11, TMP_Numeric_denominator_12, TMP_Numeric_div_13, TMP_Numeric_divmod_14, TMP_Numeric_fdiv_15, TMP_Numeric_floor_16, TMP_Numeric_i_17, TMP_Numeric_imag_18, TMP_Numeric_integer$q_19, TMP_Numeric_nonzero$q_20, TMP_Numeric_numerator_21, TMP_Numeric_polar_22, TMP_Numeric_quo_23, TMP_Numeric_real_24, TMP_Numeric_real$q_25, TMP_Numeric_rect_26, TMP_Numeric_round_27, TMP_Numeric_to_c_28, TMP_Numeric_to_int_29, TMP_Numeric_truncate_30, TMP_Numeric_zero$q_31, TMP_Numeric_positive$q_32, TMP_Numeric_negative$q_33, TMP_Numeric_dup_34, TMP_Numeric_clone_35;

    
    self.$include(Opal.const_get_relative($nesting, 'Comparable'));
    
    Opal.defn(self, '$coerce', TMP_Numeric_coerce_1 = function $$coerce(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        return [other, self]};
      return [self.$Float(other), self.$Float(self)];
    }, TMP_Numeric_coerce_1.$$arity = 1);
    
    Opal.defn(self, '$__coerced__', TMP_Numeric___coerced___2 = function $$__coerced__(method, other) {
      var $a, $b, self = this, a = nil, b = nil, $case = nil;

      
      
      try {
        $b = other.$coerce(self), $a = Opal.to_ary($b), (a = ($a[0] == null ? nil : $a[0])), (b = ($a[1] == null ? nil : $a[1])), $b
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
          try {
            $case = method;
            if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerce into Numeric")}
            else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return a.$__send__(method, b);
    }, TMP_Numeric___coerced___2.$$arity = 2);
    
    Opal.defn(self, '$<=>', TMP_Numeric_$lt$eq$gt_3 = function(other) {
      var self = this;

      
      if ($truthy(self['$equal?'](other))) {
        return 0};
      return nil;
    }, TMP_Numeric_$lt$eq$gt_3.$$arity = 1);
    
    Opal.defn(self, '$+@', TMP_Numeric_$$_4 = function() {
      var self = this;

      return self
    }, TMP_Numeric_$$_4.$$arity = 0);
    
    Opal.defn(self, '$-@', TMP_Numeric_$$_5 = function() {
      var self = this;

      return $rb_minus(0, self)
    }, TMP_Numeric_$$_5.$$arity = 0);
    
    Opal.defn(self, '$%', TMP_Numeric_$_6 = function(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)))
    }, TMP_Numeric_$_6.$$arity = 1);
    
    Opal.defn(self, '$abs', TMP_Numeric_abs_7 = function $$abs() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
        } else {
        return self
      }
    }, TMP_Numeric_abs_7.$$arity = 0);
    
    Opal.defn(self, '$abs2', TMP_Numeric_abs2_8 = function $$abs2() {
      var self = this;

      return $rb_times(self, self)
    }, TMP_Numeric_abs2_8.$$arity = 0);
    
    Opal.defn(self, '$angle', TMP_Numeric_angle_9 = function $$angle() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Math'), 'PI')
        } else {
        return 0
      }
    }, TMP_Numeric_angle_9.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.defn(self, '$ceil', TMP_Numeric_ceil_10 = function $$ceil() {
      var self = this;

      return self.$to_f().$ceil()
    }, TMP_Numeric_ceil_10.$$arity = 0);
    
    Opal.defn(self, '$conj', TMP_Numeric_conj_11 = function $$conj() {
      var self = this;

      return self
    }, TMP_Numeric_conj_11.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.defn(self, '$denominator', TMP_Numeric_denominator_12 = function $$denominator() {
      var self = this;

      return self.$to_r().$denominator()
    }, TMP_Numeric_denominator_12.$$arity = 0);
    
    Opal.defn(self, '$div', TMP_Numeric_div_13 = function $$div(other) {
      var self = this;

      
      if (other['$=='](0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ZeroDivisionError'), "divided by o")};
      return $rb_divide(self, other).$floor();
    }, TMP_Numeric_div_13.$$arity = 1);
    
    Opal.defn(self, '$divmod', TMP_Numeric_divmod_14 = function $$divmod(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)]
    }, TMP_Numeric_divmod_14.$$arity = 1);
    
    Opal.defn(self, '$fdiv', TMP_Numeric_fdiv_15 = function $$fdiv(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other)
    }, TMP_Numeric_fdiv_15.$$arity = 1);
    
    Opal.defn(self, '$floor', TMP_Numeric_floor_16 = function $$floor() {
      var self = this;

      return self.$to_f().$floor()
    }, TMP_Numeric_floor_16.$$arity = 0);
    
    Opal.defn(self, '$i', TMP_Numeric_i_17 = function $$i() {
      var self = this;

      return self.$Complex(0, self)
    }, TMP_Numeric_i_17.$$arity = 0);
    
    Opal.defn(self, '$imag', TMP_Numeric_imag_18 = function $$imag() {
      var self = this;

      return 0
    }, TMP_Numeric_imag_18.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.defn(self, '$integer?', TMP_Numeric_integer$q_19 = function() {
      var self = this;

      return false
    }, TMP_Numeric_integer$q_19.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.defn(self, '$nonzero?', TMP_Numeric_nonzero$q_20 = function() {
      var self = this;

      if ($truthy(self['$zero?']())) {
        return nil
        } else {
        return self
      }
    }, TMP_Numeric_nonzero$q_20.$$arity = 0);
    
    Opal.defn(self, '$numerator', TMP_Numeric_numerator_21 = function $$numerator() {
      var self = this;

      return self.$to_r().$numerator()
    }, TMP_Numeric_numerator_21.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.defn(self, '$polar', TMP_Numeric_polar_22 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, TMP_Numeric_polar_22.$$arity = 0);
    
    Opal.defn(self, '$quo', TMP_Numeric_quo_23 = function $$quo(other) {
      var self = this;

      return $rb_divide(Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](self, Opal.const_get_relative($nesting, 'Rational'), "to_r"), other)
    }, TMP_Numeric_quo_23.$$arity = 1);
    
    Opal.defn(self, '$real', TMP_Numeric_real_24 = function $$real() {
      var self = this;

      return self
    }, TMP_Numeric_real_24.$$arity = 0);
    
    Opal.defn(self, '$real?', TMP_Numeric_real$q_25 = function() {
      var self = this;

      return true
    }, TMP_Numeric_real$q_25.$$arity = 0);
    
    Opal.defn(self, '$rect', TMP_Numeric_rect_26 = function $$rect() {
      var self = this;

      return [self, 0]
    }, TMP_Numeric_rect_26.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.defn(self, '$round', TMP_Numeric_round_27 = function $$round(digits) {
      var self = this;

      return self.$to_f().$round(digits)
    }, TMP_Numeric_round_27.$$arity = -1);
    
    Opal.defn(self, '$to_c', TMP_Numeric_to_c_28 = function $$to_c() {
      var self = this;

      return self.$Complex(self, 0)
    }, TMP_Numeric_to_c_28.$$arity = 0);
    
    Opal.defn(self, '$to_int', TMP_Numeric_to_int_29 = function $$to_int() {
      var self = this;

      return self.$to_i()
    }, TMP_Numeric_to_int_29.$$arity = 0);
    
    Opal.defn(self, '$truncate', TMP_Numeric_truncate_30 = function $$truncate() {
      var self = this;

      return self.$to_f().$truncate()
    }, TMP_Numeric_truncate_30.$$arity = 0);
    
    Opal.defn(self, '$zero?', TMP_Numeric_zero$q_31 = function() {
      var self = this;

      return self['$=='](0)
    }, TMP_Numeric_zero$q_31.$$arity = 0);
    
    Opal.defn(self, '$positive?', TMP_Numeric_positive$q_32 = function() {
      var self = this;

      return $rb_gt(self, 0)
    }, TMP_Numeric_positive$q_32.$$arity = 0);
    
    Opal.defn(self, '$negative?', TMP_Numeric_negative$q_33 = function() {
      var self = this;

      return $rb_lt(self, 0)
    }, TMP_Numeric_negative$q_33.$$arity = 0);
    
    Opal.defn(self, '$dup', TMP_Numeric_dup_34 = function $$dup() {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't dup " + (self.$class()))
    }, TMP_Numeric_dup_34.$$arity = 0);
    return (Opal.defn(self, '$clone', TMP_Numeric_clone_35 = function $$clone() {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't clone " + (self.$class()))
    }, TMP_Numeric_clone_35.$$arity = 0), nil) && 'clone';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/array"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$to_a', '$raise', '$replace', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$===', '$join', '$to_str', '$class', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$bsearch_index', '$to_proc', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$[]', '$dig', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$to_s', '$new', '$!', '$>=', '$**', '$delete_if', '$each', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$dup', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$-', '$<<', '$values', '$kind_of?', '$last', '$first', '$upto', '$reject', '$pristine']);
  
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_$$_1, TMP_Array_initialize_2, TMP_Array_try_convert_3, TMP_Array_$_4, TMP_Array_$_5, TMP_Array_$_6, TMP_Array_$_7, TMP_Array_$_8, TMP_Array_$lt$lt_9, TMP_Array_$lt$eq$gt_10, TMP_Array_$eq$eq_11, TMP_Array_$$_12, TMP_Array_$$$eq_13, TMP_Array_any$q_14, TMP_Array_assoc_15, TMP_Array_at_16, TMP_Array_bsearch_index_17, TMP_Array_bsearch_18, TMP_Array_cycle_19, TMP_Array_clear_21, TMP_Array_count_22, TMP_Array_initialize_copy_23, TMP_Array_collect_24, TMP_Array_collect$B_26, TMP_Array_combination_28, TMP_Array_repeated_combination_30, TMP_Array_compact_32, TMP_Array_compact$B_33, TMP_Array_concat_34, TMP_Array_delete_35, TMP_Array_delete_at_36, TMP_Array_delete_if_37, TMP_Array_dig_39, TMP_Array_drop_40, TMP_Array_dup_41, TMP_Array_each_42, TMP_Array_each_index_44, TMP_Array_empty$q_46, TMP_Array_eql$q_47, TMP_Array_fetch_48, TMP_Array_fill_49, TMP_Array_first_50, TMP_Array_flatten_51, TMP_Array_flatten$B_52, TMP_Array_hash_53, TMP_Array_include$q_54, TMP_Array_index_55, TMP_Array_insert_56, TMP_Array_inspect_57, TMP_Array_join_58, TMP_Array_keep_if_59, TMP_Array_last_61, TMP_Array_length_62, TMP_Array_permutation_63, TMP_Array_repeated_permutation_65, TMP_Array_pop_67, TMP_Array_product_68, TMP_Array_push_69, TMP_Array_rassoc_70, TMP_Array_reject_71, TMP_Array_reject$B_73, TMP_Array_replace_75, TMP_Array_reverse_76, TMP_Array_reverse$B_77, TMP_Array_reverse_each_78, TMP_Array_rindex_80, TMP_Array_rotate_81, TMP_Array_rotate$B_82, TMP_Array_sample_85, TMP_Array_select_86, TMP_Array_select$B_88, TMP_Array_shift_90, TMP_Array_shuffle_91, TMP_Array_shuffle$B_92, TMP_Array_slice$B_93, TMP_Array_sort_94, TMP_Array_sort$B_95, TMP_Array_sort_by$B_96, TMP_Array_take_98, TMP_Array_take_while_99, TMP_Array_to_a_100, TMP_Array_to_h_101, TMP_Array_transpose_104, TMP_Array_uniq_105, TMP_Array_uniq$B_106, TMP_Array_unshift_107, TMP_Array_values_at_110, TMP_Array_zip_111, TMP_Array_inherited_112, TMP_Array_instance_variables_113;

    def.length = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    def.$$is_array = true;
    
    function toArraySubclass(obj, klass) {
      if (klass.$$name === Opal.Array) {
        return obj;
      } else {
        return klass.$allocate().$replace((obj).$to_a());
      }
    }
  ;
    Opal.defs(self, '$[]', TMP_Array_$$_1 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return toArraySubclass(objects, self)
    }, TMP_Array_$$_1.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Array_initialize_2 = function $$initialize(size, obj) {
      var self = this, $iter = TMP_Array_initialize_2.$$p, block = $iter || nil;

      if (size == null) {
        size = nil;
      }
      if (obj == null) {
        obj = nil;
      }
      if ($iter) TMP_Array_initialize_2.$$p = null;
      
      if (size > Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Integer'), 'MAX')) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "array size too big")
      }

      if (arguments.length > 2) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..2)")
      }

      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }

      if (arguments.length === 1) {
        if (size.$$is_array) {
          self.$replace(size.$to_a())
          return self;
        } else if (size['$respond_to?']("to_ary")) {
          self.$replace(size.$to_ary())
          return self;
        }
      }

      size = Opal.const_get_relative($nesting, 'Opal').$coerce_to(size, Opal.const_get_relative($nesting, 'Integer'), "to_int")

      if (size < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size")
      }

      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);
          self[i] = value;
        }
      }

      return self;
    
    }, TMP_Array_initialize_2.$$arity = -1);
    Opal.defs(self, '$try_convert', TMP_Array_try_convert_3 = function $$try_convert(obj) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](obj, Opal.const_get_relative($nesting, 'Array'), "to_ary")
    }, TMP_Array_try_convert_3.$$arity = 1);
    
    Opal.defn(self, '$&', TMP_Array_$_4 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_Array_$_4.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Array_$_5 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        Opal.hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    }, TMP_Array_$_5.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Array_$_6 = function(other) {
      var self = this;

      
      if ($truthy(other['$respond_to?']("to_str"))) {
        return self.$join(other.$to_str())};
      other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(other < 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative argument")};
      
      var result = [],
          converted = self.$to_a();

      for (var i = 0; i < other; i++) {
        result = result.concat(converted);
      }

      return toArraySubclass(result, self.$class());
    ;
    }, TMP_Array_$_6.$$arity = 1);
    
    Opal.defn(self, '$+', TMP_Array_$_7 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      return self.concat(other);
    }, TMP_Array_$_7.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Array_$_8 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(other.length === 0)) {
        return self.slice()};
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_Array_$_8.$$arity = 1);
    
    Opal.defn(self, '$<<', TMP_Array_$lt$lt_9 = function(object) {
      var self = this;

      
      self.push(object);;
      return self;
    }, TMP_Array_$lt$lt_9.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Array_$lt$eq$gt_10 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
      } else if ($truthy(other['$respond_to?']("to_ary"))) {
        other = other.$to_ary().$to_a()
        } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    }, TMP_Array_$lt$eq$gt_10.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Array_$eq$eq_11 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](other, "to_ary")) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.constructor !== Array)
          array = (array).$to_a();
        if (other.constructor !== Array)
          other = (other).$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    
    }, TMP_Array_$eq$eq_11.$$arity = 1);
    
    function $array_slice_range(self, index) {
      var size = self.length,
          exclude, from, to, result;

      exclude = index.excl;
      from    = Opal.Opal.$coerce_to(index.begin, Opal.Integer, 'to_int');
      to      = Opal.Opal.$coerce_to(index.end, Opal.Integer, 'to_int');

      if (from < 0) {
        from += size;

        if (from < 0) {
          return nil;
        }
      }

      if (from > size) {
        return nil;
      }

      if (to < 0) {
        to += size;

        if (to < 0) {
          return [];
        }
      }

      if (!exclude) {
        to += 1;
      }

      result = self.slice(from, to);
      return toArraySubclass(result, self.$class());
    }

    function $array_slice_index_length(self, index, length) {
      var size = self.length,
          exclude, from, to, result;

      index = Opal.Opal.$coerce_to(index, Opal.Integer, 'to_int');

      if (index < 0) {
        index += size;

        if (index < 0) {
          return nil;
        }
      }

      if (length === undefined) {
        if (index >= size || index < 0) {
          return nil;
        }

        return self[index];
      }
      else {
        length = Opal.Opal.$coerce_to(length, Opal.Integer, 'to_int');

        if (length < 0 || index > size || index < 0) {
          return nil;
        }

        result = self.slice(index, index + length);
      }
      return toArraySubclass(result, self.$class());
    }
  ;
    
    Opal.defn(self, '$[]', TMP_Array_$$_12 = function(index, length) {
      var self = this;

      
      if (index.$$is_range) {
        return $array_slice_range(self, index);
      }
      else {
        return $array_slice_index_length(self, index, length);
      }
    
    }, TMP_Array_$$_12.$$arity = -2);
    
    Opal.defn(self, '$[]=', TMP_Array_$$$eq_13 = function(index, value, extra) {
      var self = this, data = nil, length = nil;

      
      
      var i, size = self.length;
    ;
      if ($truthy(Opal.const_get_relative($nesting, 'Range')['$==='](index))) {
        
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](value))) {
          data = value.$to_a()
        } else if ($truthy(value['$respond_to?']("to_ary"))) {
          data = value.$to_ary().$to_a()
          } else {
          data = [value]
        };
        
        var exclude = index.excl,
            from    = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index.begin, Opal.const_get_relative($nesting, 'Integer'), "to_int"),
            to      = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index.end, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
        } else {
        
        if ($truthy(extra === undefined)) {
          length = 1
          } else {
          
          length = value;
          value = extra;
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](value))) {
            data = value.$to_a()
          } else if ($truthy(value['$respond_to?']("to_ary"))) {
            data = value.$to_ary().$to_a()
            } else {
            data = [value]
          };
        };
        
        var old;

        index  = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        length = Opal.const_get_relative($nesting, 'Opal').$coerce_to(length, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      ;
      };
    }, TMP_Array_$$$eq_13.$$arity = -3);
    
    Opal.defn(self, '$any?', TMP_Array_any$q_14 = function() {
      var self = this, $iter = TMP_Array_any$q_14.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_any$q_14.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if (self.length === 0) return false;;
      return $send(self, Opal.find_super_dispatcher(self, 'any?', TMP_Array_any$q_14, false), $zuper, $iter);
    }, TMP_Array_any$q_14.$$arity = 0);
    
    Opal.defn(self, '$assoc', TMP_Array_assoc_15 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    }, TMP_Array_assoc_15.$$arity = 1);
    
    Opal.defn(self, '$at', TMP_Array_at_16 = function $$at(index) {
      var self = this;

      
      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    ;
    }, TMP_Array_at_16.$$arity = 1);
    
    Opal.defn(self, '$bsearch_index', TMP_Array_bsearch_index_17 = function $$bsearch_index() {
      var self = this, $iter = TMP_Array_bsearch_index_17.$$p, block = $iter || nil;

      if ($iter) TMP_Array_bsearch_index_17.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch_index")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = Opal.yield1(block, val);

        if (ret === true) {
          satisfied = mid;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return mid; }
          smaller = (ret < 0);
        }
        else {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    ;
    }, TMP_Array_bsearch_index_17.$$arity = 0);
    
    Opal.defn(self, '$bsearch', TMP_Array_bsearch_18 = function $$bsearch() {
      var self = this, $iter = TMP_Array_bsearch_18.$$p, block = $iter || nil, index = nil;

      if ($iter) TMP_Array_bsearch_18.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch")
      };
      index = $send(self, 'bsearch_index', [], block.$to_proc());
      
      if (index != null && index.$$is_number) {
        return self[index];
      } else {
        return index;
      }
    ;
    }, TMP_Array_bsearch_18.$$arity = 0);
    
    Opal.defn(self, '$cycle', TMP_Array_cycle_19 = function $$cycle(n) {
      var TMP_20, $a, self = this, $iter = TMP_Array_cycle_19.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      if ($iter) TMP_Array_cycle_19.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["cycle", n], (TMP_20 = function(){var self = TMP_20.$$s || this;

        if (n['$=='](nil)) {
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')
            } else {
            
            n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20))
      };
      if ($truthy(($truthy($a = self['$empty?']()) ? $a : n['$=='](0)))) {
        return nil};
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }
        }
      }
      else {
        n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }

          n--;
        }
      }
    ;
      return self;
    }, TMP_Array_cycle_19.$$arity = -1);
    
    Opal.defn(self, '$clear', TMP_Array_clear_21 = function $$clear() {
      var self = this;

      
      self.splice(0, self.length);
      return self;
    }, TMP_Array_clear_21.$$arity = 0);
    
    Opal.defn(self, '$count', TMP_Array_count_22 = function $$count(object) {
      var $a, self = this, $iter = TMP_Array_count_22.$$p, block = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if (object == null) {
        object = nil;
      }
      if ($iter) TMP_Array_count_22.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = object) ? $a : block))) {
        return $send(self, Opal.find_super_dispatcher(self, 'count', TMP_Array_count_22, false), $zuper, $iter)
        } else {
        return self.$size()
      }
    }, TMP_Array_count_22.$$arity = -1);
    
    Opal.defn(self, '$initialize_copy', TMP_Array_initialize_copy_23 = function $$initialize_copy(other) {
      var self = this;

      return self.$replace(other)
    }, TMP_Array_initialize_copy_23.$$arity = 1);
    
    Opal.defn(self, '$collect', TMP_Array_collect_24 = function $$collect() {
      var TMP_25, self = this, $iter = TMP_Array_collect_24.$$p, block = $iter || nil;

      if ($iter) TMP_Array_collect_24.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["collect"], (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25))
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        result.push(value);
      }

      return result;
    ;
    }, TMP_Array_collect_24.$$arity = 0);
    
    Opal.defn(self, '$collect!', TMP_Array_collect$B_26 = function() {
      var TMP_27, self = this, $iter = TMP_Array_collect$B_26.$$p, block = $iter || nil;

      if ($iter) TMP_Array_collect$B_26.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["collect!"], (TMP_27 = function(){var self = TMP_27.$$s || this;

        return self.$size()}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        self[i] = value;
      }
    ;
      return self;
    }, TMP_Array_collect$B_26.$$arity = 0);
    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  ;
    
    Opal.defn(self, '$combination', TMP_Array_combination_28 = function $$combination(n) {
      var TMP_29, self = this, $iter = TMP_Array_combination_28.$$p, $yield = $iter || nil, num = nil;

      if ($iter) TMP_Array_combination_28.$$p = null;
      
      num = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["combination", num], (TMP_29 = function(){var self = TMP_29.$$s || this;

        return binomial_coefficient(self.length, num)}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        Opal.yield1($yield, [])
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          Opal.yield1($yield, [self[i]])
        }
      }
      else if (num === self.length) {
        Opal.yield1($yield, self.slice())
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          Opal.yield1($yield, chosen.slice())
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    }, TMP_Array_combination_28.$$arity = 1);
    
    Opal.defn(self, '$repeated_combination', TMP_Array_repeated_combination_30 = function $$repeated_combination(n) {
      var TMP_31, self = this, $iter = TMP_Array_repeated_combination_30.$$p, $yield = $iter || nil, num = nil;

      if ($iter) TMP_Array_repeated_combination_30.$$p = null;
      
      num = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["repeated_combination", num], (TMP_31 = function(){var self = TMP_31.$$s || this;

        return binomial_coefficient(self.length + num - 1, num)}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))
      };
      
      function iterate(max, from, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = from; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, i, buffer, self);
          buffer.pop();
        }
      }

      if (num >= 0) {
        iterate(num, 0, [], self);
      }
    ;
      return self;
    }, TMP_Array_repeated_combination_30.$$arity = 1);
    
    Opal.defn(self, '$compact', TMP_Array_compact_32 = function $$compact() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, TMP_Array_compact_32.$$arity = 0);
    
    Opal.defn(self, '$compact!', TMP_Array_compact$B_33 = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    }, TMP_Array_compact$B_33.$$arity = 0);
    
    Opal.defn(self, '$concat', TMP_Array_concat_34 = function $$concat(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      
      for (var i = 0, length = other.length; i < length; i++) {
        self.push(other[i]);
      }
    ;
      return self;
    }, TMP_Array_concat_34.$$arity = 1);
    
    Opal.defn(self, '$delete', TMP_Array_delete_35 = function(object) {
      var self = this, $iter = TMP_Array_delete_35.$$p, $yield = $iter || nil;

      if ($iter) TMP_Array_delete_35.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
        }
        return nil;
      }
      return object;
    
    }, TMP_Array_delete_35.$$arity = 1);
    
    Opal.defn(self, '$delete_at', TMP_Array_delete_at_36 = function $$delete_at(index) {
      var self = this;

      
      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    
    }, TMP_Array_delete_at_36.$$arity = 1);
    
    Opal.defn(self, '$delete_if', TMP_Array_delete_if_37 = function $$delete_if() {
      var TMP_38, self = this, $iter = TMP_Array_delete_if_37.$$p, block = $iter || nil;

      if ($iter) TMP_Array_delete_if_37.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["delete_if"], (TMP_38 = function(){var self = TMP_38.$$s || this;

        return self.$size()}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38))
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    ;
      return self;
    }, TMP_Array_delete_if_37.$$arity = 0);
    
    Opal.defn(self, '$dig', TMP_Array_dig_39 = function $$dig(idx, $a_rest) {
      var self = this, idxs, item = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      idxs = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        idxs[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      item = self['$[]'](idx);
      
      if (item === nil || idxs.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(idxs));
    }, TMP_Array_dig_39.$$arity = -2);
    
    Opal.defn(self, '$drop', TMP_Array_drop_40 = function $$drop(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'))
      }

      return self.slice(number);
    
    }, TMP_Array_drop_40.$$arity = 1);
    
    Opal.defn(self, '$dup', TMP_Array_dup_41 = function $$dup() {
      var self = this, $iter = TMP_Array_dup_41.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_dup_41.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if (
        self.$$class === Opal.Array &&
        self.$allocate.$$pristine &&
        self.$copy_instance_variables.$$pristine &&
        self.$initialize_dup.$$pristine
      ) return self.slice(0);
    ;
      return $send(self, Opal.find_super_dispatcher(self, 'dup', TMP_Array_dup_41, false), $zuper, $iter);
    }, TMP_Array_dup_41.$$arity = 0);
    
    Opal.defn(self, '$each', TMP_Array_each_42 = function $$each() {
      var TMP_43, self = this, $iter = TMP_Array_each_42.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_42.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each"], (TMP_43 = function(){var self = TMP_43.$$s || this;

        return self.$size()}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
      }
    ;
      return self;
    }, TMP_Array_each_42.$$arity = 0);
    
    Opal.defn(self, '$each_index', TMP_Array_each_index_44 = function $$each_index() {
      var TMP_45, self = this, $iter = TMP_Array_each_index_44.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_index_44.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_index"], (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$size()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, i);
      }
    ;
      return self;
    }, TMP_Array_each_index_44.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Array_empty$q_46 = function() {
      var self = this;

      return self.length === 0
    }, TMP_Array_empty$q_46.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Array_eql$q_47 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    }, TMP_Array_eql$q_47.$$arity = 1);
    
    Opal.defn(self, '$fetch', TMP_Array_fetch_48 = function $$fetch(index, defaults) {
      var self = this, $iter = TMP_Array_fetch_48.$$p, block = $iter || nil;

      if ($iter) TMP_Array_fetch_48.$$p = null;
      
      var original = index;

      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    
    }, TMP_Array_fetch_48.$$arity = -2);
    
    Opal.defn(self, '$fill', TMP_Array_fill_49 = function $$fill($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_Array_fill_49.$$p, block = $iter || nil, one = nil, two = nil, obj = nil, left = nil, right = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Array_fill_49.$$p = null;
      
      
      var i, length, value;
    ;
      if ($truthy(block)) {
        
        if ($truthy(args.length > 2)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $c = args, $b = Opal.to_ary($c), (one = ($b[0] == null ? nil : $b[0])), (two = ($b[1] == null ? nil : $b[1])), $c;
        } else {
        
        if ($truthy(args.length == 0)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ($truthy(args.length > 3)) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $c = args, $b = Opal.to_ary($c), (obj = ($b[0] == null ? nil : $b[0])), (one = ($b[1] == null ? nil : $b[1])), (two = ($b[2] == null ? nil : $b[2])), $c;
      };
      if ($truthy(Opal.const_get_relative($nesting, 'Range')['$==='](one))) {
        
        if ($truthy(two)) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "length invalid with range")};
        left = Opal.const_get_relative($nesting, 'Opal').$coerce_to(one.$begin(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(left < 0)) {
          left += self.length};
        if ($truthy(left < 0)) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + (one.$inspect()) + " out of range")};
        right = Opal.const_get_relative($nesting, 'Opal').$coerce_to(one.$end(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(right < 0)) {
          right += self.length};
        if ($truthy(one['$exclude_end?']())) {
          } else {
          right += 1
        };
        if ($truthy(right <= left)) {
          return self};
      } else if ($truthy(one)) {
        
        left = Opal.const_get_relative($nesting, 'Opal').$coerce_to(one, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(left < 0)) {
          left += self.length};
        if ($truthy(left < 0)) {
          left = 0};
        if ($truthy(two)) {
          
          right = Opal.const_get_relative($nesting, 'Opal').$coerce_to(two, Opal.const_get_relative($nesting, 'Integer'), "to_int");
          if ($truthy(right == 0)) {
            return self};
          right += left;
          } else {
          right = self.length
        };
        } else {
        
        left = 0;
        right = self.length;
      };
      if ($truthy(left > self.length)) {
        
        for (i = self.length; i < right; i++) {
          self[i] = nil;
        }
      };
      if ($truthy(right > self.length)) {
        self.length = right};
      if ($truthy(block)) {
        
        for (length = self.length; left < right; left++) {
          value = block(left);
          self[left] = value;
        }
      
        } else {
        
        for (length = self.length; left < right; left++) {
          self[left] = obj;
        }
      
      };
      return self;
    }, TMP_Array_fill_49.$$arity = -1);
    
    Opal.defn(self, '$first', TMP_Array_first_50 = function $$first(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    
    }, TMP_Array_first_50.$$arity = -1);
    
    Opal.defn(self, '$flatten', TMP_Array_flatten_51 = function $$flatten(level) {
      var self = this;

      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](item, "to_ary")) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
          }

          if (ary === self) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'));
          }

          switch (level) {
          case undefined:
            result = result.concat(_flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = Opal.const_get_relative($nesting, 'Opal').$coerce_to(level, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      return toArraySubclass(_flatten(self, level), self.$class());
    
    }, TMP_Array_flatten_51.$$arity = -1);
    
    Opal.defn(self, '$flatten!', TMP_Array_flatten$B_52 = function(level) {
      var self = this;

      
      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    }, TMP_Array_flatten$B_52.$$arity = -1);
    
    Opal.defn(self, '$hash', TMP_Array_hash_53 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        // return early for recursive structures
        if (Opal.hash_ids[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, TMP_Array_hash_53.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Array_include$q_54 = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    }, TMP_Array_include$q_54.$$arity = 1);
    
    Opal.defn(self, '$index', TMP_Array_index_55 = function $$index(object) {
      var self = this, $iter = TMP_Array_index_55.$$p, block = $iter || nil;

      if ($iter) TMP_Array_index_55.$$p = null;
      
      var i, length, value;

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    
    }, TMP_Array_index_55.$$arity = -1);
    
    Opal.defn(self, '$insert', TMP_Array_insert_56 = function $$insert(index, $a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      
      index = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    }, TMP_Array_insert_56.$$arity = -2);
    
    Opal.defn(self, '$inspect', TMP_Array_inspect_57 = function $$inspect() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_Array_inspect_57.$$arity = 0);
    
    Opal.defn(self, '$join', TMP_Array_join_58 = function $$join(sep) {
      var self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      if (sep == null) {
        sep = nil;
      }
      
      if ($truthy(self.length === 0)) {
        return ""};
      if ($truthy(sep === nil)) {
        sep = $gvars[","]};
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](item, "to_str")) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](item, "to_ary")) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if (Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](item, "to_s")) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise(Opal.const_get_relative($nesting, 'NoMethodError').$new("" + (Opal.inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join(Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](sep, Opal.const_get_relative($nesting, 'String'), "to_str").$to_s());
      }
    ;
    }, TMP_Array_join_58.$$arity = -1);
    
    Opal.defn(self, '$keep_if', TMP_Array_keep_if_59 = function $$keep_if() {
      var TMP_60, self = this, $iter = TMP_Array_keep_if_59.$$p, block = $iter || nil;

      if ($iter) TMP_Array_keep_if_59.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["keep_if"], (TMP_60 = function(){var self = TMP_60.$$s || this;

        return self.$size()}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60))
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    ;
      return self;
    }, TMP_Array_keep_if_59.$$arity = 0);
    
    Opal.defn(self, '$last', TMP_Array_last_61 = function $$last(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    
    }, TMP_Array_last_61.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_Array_length_62 = function $$length() {
      var self = this;

      return self.length
    }, TMP_Array_length_62.$$arity = 0);
    Opal.alias(self, "map", "collect");
    Opal.alias(self, "map!", "collect!");
    
    // Returns the product of from, from-1, ..., from - how_many + 1.
    function descending_factorial(from, how_many) {
      var count = how_many >= 0 ? 1 : 0;
      while (how_many) {
        count *= from;
        from--;
        how_many--;
      }
      return count;
    }
  ;
    
    Opal.defn(self, '$permutation', TMP_Array_permutation_63 = function $$permutation(num) {
      var TMP_64, self = this, $iter = TMP_Array_permutation_63.$$p, block = $iter || nil, perm = nil, used = nil;

      if ($iter) TMP_Array_permutation_63.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["permutation", num], (TMP_64 = function(){var self = TMP_64.$$s || this;

        return descending_factorial(self.length, num === undefined ? self.length : num)}, TMP_64.$$s = self, TMP_64.$$arity = 0, TMP_64))
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = Opal.const_get_relative($nesting, 'Opal').$coerce_to(num, Opal.const_get_relative($nesting, 'Integer'), "to_int")
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        Opal.yield1(block, [])
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          Opal.yield1(block, [self[i]])
        }
      }
      else {
        // this is the general case
        (perm = Opal.const_get_relative($nesting, 'Array').$new(num));
        (used = Opal.const_get_relative($nesting, 'Array').$new(self.length, false));

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                Opal.yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    }, TMP_Array_permutation_63.$$arity = -1);
    
    Opal.defn(self, '$repeated_permutation', TMP_Array_repeated_permutation_65 = function $$repeated_permutation(n) {
      var TMP_66, self = this, $iter = TMP_Array_repeated_permutation_65.$$p, $yield = $iter || nil, num = nil;

      if ($iter) TMP_Array_repeated_permutation_65.$$p = null;
      
      num = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["repeated_permutation", num], (TMP_66 = function(){var self = TMP_66.$$s || this;

        if ($truthy($rb_ge(num, 0))) {
            return self.$size()['$**'](num)
            } else {
            return 0
          }}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66))
      };
      
      function iterate(max, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = 0; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, buffer, self);
          buffer.pop();
        }
      }

      iterate(num, [], self.slice());
    ;
      return self;
    }, TMP_Array_repeated_permutation_65.$$arity = 1);
    
    Opal.defn(self, '$pop', TMP_Array_pop_67 = function $$pop(count) {
      var self = this;

      
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.pop();};
      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(count < 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(count > self.length)) {
        return self.splice(0, self.length)
        } else {
        return self.splice(self.length - count, self.length)
      };
    }, TMP_Array_pop_67.$$arity = -1);
    
    Opal.defn(self, '$product', TMP_Array_product_68 = function $$product($a_rest) {
      var self = this, args, $iter = TMP_Array_product_68.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Array_product_68.$$p = null;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = Opal.const_get_relative($nesting, 'Opal').$coerce_to(args[i - 1], Opal.const_get_relative($nesting, 'Array'), "to_ary");
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          Opal.yield1(block, subarray)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    
    }, TMP_Array_product_68.$$arity = -1);
    
    Opal.defn(self, '$push', TMP_Array_push_69 = function $$push($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    ;
      return self;
    }, TMP_Array_push_69.$$arity = -1);
    
    Opal.defn(self, '$rassoc', TMP_Array_rassoc_70 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    }, TMP_Array_rassoc_70.$$arity = 1);
    
    Opal.defn(self, '$reject', TMP_Array_reject_71 = function $$reject() {
      var TMP_72, self = this, $iter = TMP_Array_reject_71.$$p, block = $iter || nil;

      if ($iter) TMP_Array_reject_71.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reject"], (TMP_72 = function(){var self = TMP_72.$$s || this;

        return self.$size()}, TMP_72.$$s = self, TMP_72.$$arity = 0, TMP_72))
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    ;
    }, TMP_Array_reject_71.$$arity = 0);
    
    Opal.defn(self, '$reject!', TMP_Array_reject$B_73 = function() {
      var TMP_74, self = this, $iter = TMP_Array_reject$B_73.$$p, block = $iter || nil, original = nil;

      if ($iter) TMP_Array_reject$B_73.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reject!"], (TMP_74 = function(){var self = TMP_74.$$s || this;

        return self.$size()}, TMP_74.$$s = self, TMP_74.$$arity = 0, TMP_74))
      };
      original = self.$length();
      $send(self, 'delete_if', [], block.$to_proc());
      if (self.$length()['$=='](original)) {
        return nil
        } else {
        return self
      };
    }, TMP_Array_reject$B_73.$$arity = 0);
    
    Opal.defn(self, '$replace', TMP_Array_replace_75 = function $$replace(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
        } else {
        other = Opal.const_get_relative($nesting, 'Opal').$coerce_to(other, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
      };
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    ;
      return self;
    }, TMP_Array_replace_75.$$arity = 1);
    
    Opal.defn(self, '$reverse', TMP_Array_reverse_76 = function $$reverse() {
      var self = this;

      return self.slice(0).reverse()
    }, TMP_Array_reverse_76.$$arity = 0);
    
    Opal.defn(self, '$reverse!', TMP_Array_reverse$B_77 = function() {
      var self = this;

      return self.reverse()
    }, TMP_Array_reverse$B_77.$$arity = 0);
    
    Opal.defn(self, '$reverse_each', TMP_Array_reverse_each_78 = function $$reverse_each() {
      var TMP_79, self = this, $iter = TMP_Array_reverse_each_78.$$p, block = $iter || nil;

      if ($iter) TMP_Array_reverse_each_78.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["reverse_each"], (TMP_79 = function(){var self = TMP_79.$$s || this;

        return self.$size()}, TMP_79.$$s = self, TMP_79.$$arity = 0, TMP_79))
      };
      $send(self.$reverse(), 'each', [], block.$to_proc());
      return self;
    }, TMP_Array_reverse_each_78.$$arity = 0);
    
    Opal.defn(self, '$rindex', TMP_Array_rindex_80 = function $$rindex(object) {
      var self = this, $iter = TMP_Array_rindex_80.$$p, block = $iter || nil;

      if ($iter) TMP_Array_rindex_80.$$p = null;
      
      var i, value;

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }

          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    
    }, TMP_Array_rindex_80.$$arity = -1);
    
    Opal.defn(self, '$rotate', TMP_Array_rotate_81 = function $$rotate(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      
      n = Opal.const_get_relative($nesting, 'Opal').$coerce_to(n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      
      var ary, idx, firstPart, lastPart;

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    ;
    }, TMP_Array_rotate_81.$$arity = -1);
    
    Opal.defn(self, '$rotate!', TMP_Array_rotate$B_82 = function(cnt) {
      var self = this, ary = nil;

      if (cnt == null) {
        cnt = 1;
      }
      
      
      if (self.length === 0 || self.length === 1) {
        return self;
      }
    ;
      cnt = Opal.const_get_relative($nesting, 'Opal').$coerce_to(cnt, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    }, TMP_Array_rotate$B_82.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      function $SampleRandom(){};
      var self = $SampleRandom = $klass($base, $super, 'SampleRandom', $SampleRandom);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_SampleRandom_initialize_83, TMP_SampleRandom_rand_84;

      def.rng = nil;
      
      
      Opal.defn(self, '$initialize', TMP_SampleRandom_initialize_83 = function $$initialize(rng) {
        var self = this;

        return (self.rng = rng)
      }, TMP_SampleRandom_initialize_83.$$arity = 1);
      return (Opal.defn(self, '$rand', TMP_SampleRandom_rand_84 = function $$rand(size) {
        var self = this, random = nil;

        
        random = Opal.const_get_relative($nesting, 'Opal').$coerce_to(self.rng.$rand(size), Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy(random < 0)) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "random value must be >= 0")};
        if ($truthy(random < size)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "random value must be less than Array size")
        };
        return random;
      }, TMP_SampleRandom_rand_84.$$arity = 1), nil) && 'rand';
    })($nesting[0], null, $nesting);
    
    Opal.defn(self, '$sample', TMP_Array_sample_85 = function $$sample(count, options) {
      var $a, self = this, o = nil, rng = nil;

      
      if ($truthy(count === undefined)) {
        return self.$at(Opal.const_get_relative($nesting, 'Kernel').$rand(self.length))};
      if ($truthy(options === undefined)) {
        if ($truthy((o = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](count, Opal.const_get_relative($nesting, 'Hash'), "to_hash")))) {
          
          options = o;
          count = nil;
          } else {
          
          options = nil;
          count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        }
        } else {
        
        count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        options = Opal.const_get_relative($nesting, 'Opal').$coerce_to(options, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      };
      if ($truthy(($truthy($a = count) ? count < 0 : $a))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "count must be greater than 0")};
      if ($truthy(options)) {
        rng = options['$[]']("random")};
      if ($truthy(($truthy($a = rng) ? rng['$respond_to?']("rand") : $a))) {
        rng = Opal.const_get_relative($nesting, 'SampleRandom').$new(rng)
        } else {
        rng = Opal.const_get_relative($nesting, 'Kernel')
      };
      if ($truthy(count)) {
        } else {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = Opal.const_get_relative($nesting, 'Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    ;
    }, TMP_Array_sample_85.$$arity = -1);
    
    Opal.defn(self, '$select', TMP_Array_select_86 = function $$select() {
      var TMP_87, self = this, $iter = TMP_Array_select_86.$$p, block = $iter || nil;

      if ($iter) TMP_Array_select_86.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["select"], (TMP_87 = function(){var self = TMP_87.$$s || this;

        return self.$size()}, TMP_87.$$s = self, TMP_87.$$arity = 0, TMP_87))
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = Opal.yield1(block, item);

        if (value !== false && value !== nil) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_Array_select_86.$$arity = 0);
    
    Opal.defn(self, '$select!', TMP_Array_select$B_88 = function() {
      var TMP_89, self = this, $iter = TMP_Array_select$B_88.$$p, block = $iter || nil;

      if ($iter) TMP_Array_select$B_88.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["select!"], (TMP_89 = function(){var self = TMP_89.$$s || this;

        return self.$size()}, TMP_89.$$s = self, TMP_89.$$arity = 0, TMP_89))
      };
      
      var original = self.length;
      $send(self, 'keep_if', [], block.$to_proc());
      return self.length === original ? nil : self;
    ;
    }, TMP_Array_select$B_88.$$arity = 0);
    
    Opal.defn(self, '$shift', TMP_Array_shift_90 = function $$shift(count) {
      var self = this;

      
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.shift();};
      count = Opal.const_get_relative($nesting, 'Opal').$coerce_to(count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      if ($truthy(count < 0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      return self.splice(0, count);
    }, TMP_Array_shift_90.$$arity = -1);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$shuffle', TMP_Array_shuffle_91 = function $$shuffle(rng) {
      var self = this;

      return self.$dup().$to_a()['$shuffle!'](rng)
    }, TMP_Array_shuffle_91.$$arity = -1);
    
    Opal.defn(self, '$shuffle!', TMP_Array_shuffle$B_92 = function(rng) {
      var self = this;

      
      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](rng, Opal.const_get_relative($nesting, 'Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "random number too small " + (j))
          }

          if (j >= i) {
            self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "random number too big " + (j))
          }
        }
        else {
          j = self.$rand(i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    
    }, TMP_Array_shuffle$B_92.$$arity = -1);
    Opal.alias(self, "slice", "[]");
    
    Opal.defn(self, '$slice!', TMP_Array_slice$B_93 = function(index, length) {
      var self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;

      
      result = nil;
      if ($truthy(length === undefined)) {
        if ($truthy(Opal.const_get_relative($nesting, 'Range')['$==='](index))) {
          
          range = index;
          result = self['$[]'](range);
          range_start = Opal.const_get_relative($nesting, 'Opal').$coerce_to(range.$begin(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
          range_end = Opal.const_get_relative($nesting, 'Opal').$coerce_to(range.$end(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
          
          if (range_start < 0) {
            range_start += self.length;
          }

          if (range_end < 0) {
            range_end += self.length;
          } else if (range_end >= self.length) {
            range_end = self.length - 1;
            if (range.excl) {
              range_end += 1;
            }
          }

          var range_length = range_end - range_start;
          if (range.excl) {
            range_end -= 1;
          } else {
            range_length += 1;
          }

          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {
            self.splice(range_start, range_length);
          }
        ;
          } else {
          
          start = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");
          
          if (start < 0) {
            start += self.length;
          }

          if (start < 0 || start >= self.length) {
            return nil;
          }

          result = self[start];

          if (start === 0) {
            self.shift();
          } else {
            self.splice(start, 1);
          }
        ;
        }
        } else {
        
        start = Opal.const_get_relative($nesting, 'Opal').$coerce_to(index, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        length = Opal.const_get_relative($nesting, 'Opal').$coerce_to(length, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        
        if (length < 0) {
          return nil;
        }

        var end = start + length;

        result = self['$[]'](start, length);

        if (start < 0) {
          start += self.length;
        }

        if (start + length > self.length) {
          length = self.length - start;
        }

        if (start < self.length && start >= 0) {
          self.splice(start, length);
        }
      ;
      };
      return result;
    }, TMP_Array_slice$B_93.$$arity = -2);
    
    Opal.defn(self, '$sort', TMP_Array_sort_94 = function $$sort() {
      var self = this, $iter = TMP_Array_sort_94.$$p, block = $iter || nil;

      if ($iter) TMP_Array_sort_94.$$p = null;
      
      if ($truthy(self.length > 1)) {
        } else {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      return self.slice().sort(function(x, y) {
        var ret = block(x, y);

        if (ret === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
        }

        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
      });
    ;
    }, TMP_Array_sort_94.$$arity = 0);
    
    Opal.defn(self, '$sort!', TMP_Array_sort$B_95 = function() {
      var self = this, $iter = TMP_Array_sort$B_95.$$p, block = $iter || nil;

      if ($iter) TMP_Array_sort$B_95.$$p = null;
      
      var result;

      if ((block !== nil)) {
        result = $send((self.slice()), 'sort', [], block.$to_proc());
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    
    }, TMP_Array_sort$B_95.$$arity = 0);
    
    Opal.defn(self, '$sort_by!', TMP_Array_sort_by$B_96 = function() {
      var TMP_97, self = this, $iter = TMP_Array_sort_by$B_96.$$p, block = $iter || nil;

      if ($iter) TMP_Array_sort_by$B_96.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["sort_by!"], (TMP_97 = function(){var self = TMP_97.$$s || this;

        return self.$size()}, TMP_97.$$s = self, TMP_97.$$arity = 0, TMP_97))
      };
      return self.$replace($send(self, 'sort_by', [], block.$to_proc()));
    }, TMP_Array_sort_by$B_96.$$arity = 0);
    
    Opal.defn(self, '$take', TMP_Array_take_98 = function $$take(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'));
      }

      return self.slice(0, count);
    
    }, TMP_Array_take_98.$$arity = 1);
    
    Opal.defn(self, '$take_while', TMP_Array_take_while_99 = function $$take_while() {
      var self = this, $iter = TMP_Array_take_while_99.$$p, block = $iter || nil;

      if ($iter) TMP_Array_take_while_99.$$p = null;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = block(item);

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    
    }, TMP_Array_take_while_99.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Array_to_a_100 = function $$to_a() {
      var self = this;

      return self
    }, TMP_Array_to_a_100.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    
    Opal.defn(self, '$to_h', TMP_Array_to_h_101 = function $$to_h() {
      var self = this;

      
      var i, len = self.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](self[i], Opal.const_get_relative($nesting, 'Array'), "to_ary");
        if (!ary.$$is_array) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        Opal.hash_put(hash, key, val);
      }

      return hash;
    
    }, TMP_Array_to_h_101.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.defn(self, '$transpose', TMP_Array_transpose_104 = function $$transpose() {
      var TMP_102, self = this, result = nil, max = nil;

      
      if ($truthy(self['$empty?']())) {
        return []};
      result = [];
      max = nil;
      $send(self, 'each', [], (TMP_102 = function(row){var self = TMP_102.$$s || this, $a, TMP_103;
if (row == null) row = nil;
      
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](row))) {
          row = row.$to_a()
          } else {
          row = Opal.const_get_relative($nesting, 'Opal').$coerce_to(row, Opal.const_get_relative($nesting, 'Array'), "to_ary").$to_a()
        };
        max = ($truthy($a = max) ? $a : row.length);
        if ($truthy((row.length)['$!='](max))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "element size differs (" + (row.length) + " should be " + (max))};
        return $send((row.length), 'times', [], (TMP_103 = function(i){var self = TMP_103.$$s || this, $b, entry = nil, $writer = nil;
if (i == null) i = nil;
        
          entry = ($truthy($b = result['$[]'](i)) ? $b : (($writer = [i, []]), $send(result, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          return entry['$<<'](row.$at(i));}, TMP_103.$$s = self, TMP_103.$$arity = 1, TMP_103));}, TMP_102.$$s = self, TMP_102.$$arity = 1, TMP_102));
      return result;
    }, TMP_Array_transpose_104.$$arity = 0);
    
    Opal.defn(self, '$uniq', TMP_Array_uniq_105 = function $$uniq() {
      var self = this, $iter = TMP_Array_uniq_105.$$p, block = $iter || nil;

      if ($iter) TMP_Array_uniq_105.$$p = null;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if (Opal.hash_get(hash, item) === undefined) {
            Opal.hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = Opal.yield1(block, item);
          if (Opal.hash_get(hash, key) === undefined) {
            Opal.hash_put(hash, key, item);
          }
        }
      }

      return toArraySubclass((hash).$values(), self.$class());
    
    }, TMP_Array_uniq_105.$$arity = 0);
    
    Opal.defn(self, '$uniq!', TMP_Array_uniq$B_106 = function() {
      var self = this, $iter = TMP_Array_uniq$B_106.$$p, block = $iter || nil;

      if ($iter) TMP_Array_uniq$B_106.$$p = null;
      
      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : Opal.yield1(block, item));

        if (Opal.hash_get(hash, key) === undefined) {
          Opal.hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    
    }, TMP_Array_uniq$B_106.$$arity = 0);
    
    Opal.defn(self, '$unshift', TMP_Array_unshift_107 = function $$unshift($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    ;
      return self;
    }, TMP_Array_unshift_107.$$arity = -1);
    
    Opal.defn(self, '$values_at', TMP_Array_values_at_110 = function $$values_at($a_rest) {
      var TMP_108, self = this, args, out = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      out = [];
      $send(args, 'each', [], (TMP_108 = function(elem){var self = TMP_108.$$s || this, TMP_109, finish = nil, start = nil, i = nil;
if (elem == null) elem = nil;
      if ($truthy(elem['$kind_of?'](Opal.const_get_relative($nesting, 'Range')))) {
          
          finish = Opal.const_get_relative($nesting, 'Opal').$coerce_to(elem.$last(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
          start = Opal.const_get_relative($nesting, 'Opal').$coerce_to(elem.$first(), Opal.const_get_relative($nesting, 'Integer'), "to_int");
          
          if (start < 0) {
            start = start + self.length;
            return nil;;
          }
        ;
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']()) {
            finish--;
          }
          if (finish < start) {
            return nil;;
          }
        ;
          return $send(start, 'upto', [finish], (TMP_109 = function(i){var self = TMP_109.$$s || this;
if (i == null) i = nil;
          return out['$<<'](self.$at(i))}, TMP_109.$$s = self, TMP_109.$$arity = 1, TMP_109));
          } else {
          
          i = Opal.const_get_relative($nesting, 'Opal').$coerce_to(elem, Opal.const_get_relative($nesting, 'Integer'), "to_int");
          return out['$<<'](self.$at(i));
        }}, TMP_108.$$s = self, TMP_108.$$arity = 1, TMP_108));
      return out;
    }, TMP_Array_values_at_110.$$arity = -1);
    
    Opal.defn(self, '$zip', TMP_Array_zip_111 = function $$zip($a_rest) {
      var $b, self = this, others, $iter = TMP_Array_zip_111.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Array_zip_111.$$p = null;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_enumerator) {
          if (o.$size() === Infinity) {
            others[j] = o.$take(size);
          } else {
            others[j] = o.$to_a();
          }
          continue;
        }
        others[j] = ($truthy($b = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](o, Opal.const_get_relative($nesting, 'Array'), "to_ary")) ? $b : Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](o, Opal.const_get_relative($nesting, 'Enumerator'), "each")).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    
    }, TMP_Array_zip_111.$$arity = -1);
    Opal.defs(self, '$inherited', TMP_Array_inherited_112 = function $$inherited(klass) {
      var self = this;

      
      klass.$$proto.$to_a = function() {
        return this.slice(0, this.length);
      }
    
    }, TMP_Array_inherited_112.$$arity = 1);
    
    Opal.defn(self, '$instance_variables', TMP_Array_instance_variables_113 = function $$instance_variables() {
      var TMP_114, self = this, $iter = TMP_Array_instance_variables_113.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Array_instance_variables_113.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $send($send(self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_Array_instance_variables_113, false), $zuper, $iter), 'reject', [], (TMP_114 = function(ivar){var self = TMP_114.$$s || this, $a;
if (ivar == null) ivar = nil;
      return ($truthy($a = /^@\d+$/.test(ivar)) ? $a : ivar['$==']("@length"))}, TMP_114.$$s = self, TMP_114.$$arity = 1, TMP_114))
    }, TMP_Array_instance_variables_113.$$arity = 0);
    return Opal.const_get_relative($nesting, 'Opal').$pristine(self, "allocate", "copy_instance_variables", "initialize_dup");
  })($nesting[0], Array, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/hash"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$coerce_to!', '$each', '$fetch', '$>=', '$>', '$==', '$compare_by_identity', '$lambda?', '$abs', '$arity', '$call', '$enum_for', '$size', '$respond_to?', '$class', '$dig', '$inspect', '$map', '$to_proc', '$flatten', '$eql?', '$default', '$dup', '$default_proc', '$default_proc=', '$-', '$default=', '$alias_method', '$proc']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_$$_1, TMP_Hash_allocate_2, TMP_Hash_try_convert_3, TMP_Hash_initialize_4, TMP_Hash_$eq$eq_5, TMP_Hash_$gt$eq_7, TMP_Hash_$gt_8, TMP_Hash_$lt_9, TMP_Hash_$lt$eq_10, TMP_Hash_$$_11, TMP_Hash_$$$eq_12, TMP_Hash_assoc_13, TMP_Hash_clear_14, TMP_Hash_clone_15, TMP_Hash_compare_by_identity_16, TMP_Hash_compare_by_identity$q_17, TMP_Hash_default_18, TMP_Hash_default$eq_19, TMP_Hash_default_proc_20, TMP_Hash_default_proc$eq_21, TMP_Hash_delete_22, TMP_Hash_delete_if_23, TMP_Hash_dig_25, TMP_Hash_each_26, TMP_Hash_each_key_28, TMP_Hash_each_value_30, TMP_Hash_empty$q_32, TMP_Hash_fetch_33, TMP_Hash_fetch_values_34, TMP_Hash_flatten_36, TMP_Hash_has_key$q_37, TMP_Hash_has_value$q_38, TMP_Hash_hash_39, TMP_Hash_index_40, TMP_Hash_indexes_41, TMP_Hash_inspect_42, TMP_Hash_invert_43, TMP_Hash_keep_if_44, TMP_Hash_keys_46, TMP_Hash_length_47, TMP_Hash_merge_48, TMP_Hash_merge$B_49, TMP_Hash_rassoc_50, TMP_Hash_rehash_51, TMP_Hash_reject_52, TMP_Hash_reject$B_54, TMP_Hash_replace_56, TMP_Hash_select_57, TMP_Hash_select$B_59, TMP_Hash_shift_61, TMP_Hash_to_a_62, TMP_Hash_to_h_63, TMP_Hash_to_hash_64, TMP_Hash_to_proc_66, TMP_Hash_values_67;

    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    def.$$is_hash = true;
    Opal.defs(self, '$[]', TMP_Hash_$$_1 = function($a_rest) {
      var self = this, argv;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      argv = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        argv[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), Opal.const_get_relative($nesting, 'Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), Opal.const_get_relative($nesting, 'Array'), "to_ary");
        if (argv === nil) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    
    }, TMP_Hash_$$_1.$$arity = -1);
    Opal.defs(self, '$allocate', TMP_Hash_allocate_2 = function $$allocate() {
      var self = this;

      
      var hash = new self.$$alloc();

      Opal.hash_init(hash);

      hash.$$none = nil;
      hash.$$proc = nil;

      return hash;
    
    }, TMP_Hash_allocate_2.$$arity = 0);
    Opal.defs(self, '$try_convert', TMP_Hash_try_convert_3 = function $$try_convert(obj) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to?'](obj, Opal.const_get_relative($nesting, 'Hash'), "to_hash")
    }, TMP_Hash_try_convert_3.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Hash_initialize_4 = function $$initialize(defaults) {
      var self = this, $iter = TMP_Hash_initialize_4.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_initialize_4.$$p = null;
      
      
      if (defaults !== undefined && block !== nil) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.$$none = (defaults === undefined ? nil : defaults);
      self.$$proc = block;
    ;
      return self;
    }, TMP_Hash_initialize_4.$$arity = -1);
    
    Opal.defn(self, '$==', TMP_Hash_$eq$eq_5 = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = Opal.hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    }, TMP_Hash_$eq$eq_5.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Hash_$gt$eq_7 = function(other) {
      var TMP_6, self = this, result = nil;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length < other.$$keys.length) {
        return false
      }
    ;
      result = true;
      $send(other, 'each', [], (TMP_6 = function(other_key, other_val){var self = TMP_6.$$s || this, val = nil;
if (other_key == null) other_key = nil;if (other_val == null) other_val = nil;
      
        val = self.$fetch(other_key, null);
        
        if (val == null || val !== other_val) {
          result = false;
          return;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6));
      return result;
    }, TMP_Hash_$gt$eq_7.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Hash_$gt_8 = function(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length <= other.$$keys.length) {
        return false
      }
    ;
      return $rb_ge(self, other);
    }, TMP_Hash_$gt_8.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Hash_$lt_9 = function(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      return $rb_gt(other, self);
    }, TMP_Hash_$lt_9.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Hash_$lt$eq_10 = function(other) {
      var self = this;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      return $rb_ge(other, self);
    }, TMP_Hash_$lt$eq_10.$$arity = 1);
    
    Opal.defn(self, '$[]', TMP_Hash_$$_11 = function(key) {
      var self = this;

      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    }, TMP_Hash_$$_11.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Hash_$$$eq_12 = function(key, value) {
      var self = this;

      
      Opal.hash_put(self, key, value);
      return value;
    
    }, TMP_Hash_$$$eq_12.$$arity = 2);
    
    Opal.defn(self, '$assoc', TMP_Hash_assoc_13 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    }, TMP_Hash_assoc_13.$$arity = 1);
    
    Opal.defn(self, '$clear', TMP_Hash_clear_14 = function $$clear() {
      var self = this;

      
      Opal.hash_init(self);
      return self;
    
    }, TMP_Hash_clear_14.$$arity = 0);
    
    Opal.defn(self, '$clone', TMP_Hash_clone_15 = function $$clone() {
      var self = this;

      
      var hash = new self.$$class.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_Hash_clone_15.$$arity = 0);
    
    Opal.defn(self, '$compare_by_identity', TMP_Hash_compare_by_identity_16 = function $$compare_by_identity() {
      var self = this;

      
      var i, ii, key, keys = self.$$keys, identity_hash;

      if (self.$$by_identity) return self;
      if (self.$$keys.length === 0) {
        self.$$by_identity = true
        return self;
      }

      identity_hash = $hash2([], {}).$compare_by_identity();
      for(i = 0, ii = keys.length; i < ii; i++) {
        key = keys[i];
        if (!key.$$is_string) key = key.key;
        Opal.hash_put(identity_hash, key, Opal.hash_get(self, key));
      }

      self.$$by_identity = true;
      self.$$map = identity_hash.$$map;
      self.$$smap = identity_hash.$$smap;
      return self;
    
    }, TMP_Hash_compare_by_identity_16.$$arity = 0);
    
    Opal.defn(self, '$compare_by_identity?', TMP_Hash_compare_by_identity$q_17 = function() {
      var self = this;

      return self.$$by_identity === true
    }, TMP_Hash_compare_by_identity$q_17.$$arity = 0);
    
    Opal.defn(self, '$default', TMP_Hash_default_18 = function(key) {
      var self = this;

      
      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {
        return self.$$proc.$call(self, key);
      }
      if (self.$$none === undefined) {
        return nil;
      }
      return self.$$none;
    
    }, TMP_Hash_default_18.$$arity = -1);
    
    Opal.defn(self, '$default=', TMP_Hash_default$eq_19 = function(object) {
      var self = this;

      
      self.$$proc = nil;
      self.$$none = object;

      return object;
    
    }, TMP_Hash_default$eq_19.$$arity = 1);
    
    Opal.defn(self, '$default_proc', TMP_Hash_default_proc_20 = function $$default_proc() {
      var self = this;

      
      if (self.$$proc !== undefined) {
        return self.$$proc;
      }
      return nil;
    
    }, TMP_Hash_default_proc_20.$$arity = 0);
    
    Opal.defn(self, '$default_proc=', TMP_Hash_default_proc$eq_21 = function(default_proc) {
      var self = this;

      
      var proc = default_proc;

      if (proc !== nil) {
        proc = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](proc, Opal.const_get_relative($nesting, 'Proc'), "to_proc");

        if ((proc)['$lambda?']() && (proc).$arity().$abs() !== 2) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "default_proc takes two arguments");
        }
      }

      self.$$none = nil;
      self.$$proc = proc;

      return default_proc;
    
    }, TMP_Hash_default_proc$eq_21.$$arity = 1);
    
    Opal.defn(self, '$delete', TMP_Hash_delete_22 = function(key) {
      var self = this, $iter = TMP_Hash_delete_22.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_delete_22.$$p = null;
      
      var value = Opal.hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block.$call(key);
      }

      return nil;
    
    }, TMP_Hash_delete_22.$$arity = 1);
    
    Opal.defn(self, '$delete_if', TMP_Hash_delete_if_23 = function $$delete_if() {
      var TMP_24, self = this, $iter = TMP_Hash_delete_if_23.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_delete_if_23.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["delete_if"], (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.$size()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, TMP_Hash_delete_if_23.$$arity = 0);
    Opal.alias(self, "dup", "clone");
    
    Opal.defn(self, '$dig', TMP_Hash_dig_25 = function $$dig(key, $a_rest) {
      var self = this, keys, item = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      keys = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        keys[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      item = self['$[]'](key);
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, TMP_Hash_dig_25.$$arity = -2);
    
    Opal.defn(self, '$each', TMP_Hash_each_26 = function $$each() {
      var TMP_27, self = this, $iter = TMP_Hash_each_26.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_each_26.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["each"], (TMP_27 = function(){var self = TMP_27.$$s || this;

        return self.$size()}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.yield1(block, [key, value]);
      }

      return self;
    ;
    }, TMP_Hash_each_26.$$arity = 0);
    
    Opal.defn(self, '$each_key', TMP_Hash_each_key_28 = function $$each_key() {
      var TMP_29, self = this, $iter = TMP_Hash_each_key_28.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_each_key_28.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["each_key"], (TMP_29 = function(){var self = TMP_29.$$s || this;

        return self.$size()}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? key : key.key);
      }

      return self;
    ;
    }, TMP_Hash_each_key_28.$$arity = 0);
    Opal.alias(self, "each_pair", "each");
    
    Opal.defn(self, '$each_value', TMP_Hash_each_value_30 = function $$each_value() {
      var TMP_31, self = this, $iter = TMP_Hash_each_value_30.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_each_value_30.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["each_value"], (TMP_31 = function(){var self = TMP_31.$$s || this;

        return self.$size()}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? self.$$smap[key] : key.value);
      }

      return self;
    ;
    }, TMP_Hash_each_value_30.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Hash_empty$q_32 = function() {
      var self = this;

      return self.$$keys.length === 0
    }, TMP_Hash_empty$q_32.$$arity = 0);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$fetch', TMP_Hash_fetch_33 = function $$fetch(key, defaults) {
      var self = this, $iter = TMP_Hash_fetch_33.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_fetch_33.$$p = null;
      
      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block(key);
      }

      if (defaults !== undefined) {
        return defaults;
      }
    ;
      return self.$raise(Opal.const_get_relative($nesting, 'KeyError'), "" + "key not found: " + (key.$inspect()));
    }, TMP_Hash_fetch_33.$$arity = -2);
    
    Opal.defn(self, '$fetch_values', TMP_Hash_fetch_values_34 = function $$fetch_values($a_rest) {
      var TMP_35, self = this, keys, $iter = TMP_Hash_fetch_values_34.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      keys = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        keys[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Hash_fetch_values_34.$$p = null;
      return $send(keys, 'map', [], (TMP_35 = function(key){var self = TMP_35.$$s || this;
if (key == null) key = nil;
      return $send(self, 'fetch', [key], block.$to_proc())}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35))
    }, TMP_Hash_fetch_values_34.$$arity = -1);
    
    Opal.defn(self, '$flatten', TMP_Hash_flatten_36 = function $$flatten(level) {
      var self = this;

      if (level == null) {
        level = 1;
      }
      
      level = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](level, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, TMP_Hash_flatten_36.$$arity = -1);
    
    Opal.defn(self, '$has_key?', TMP_Hash_has_key$q_37 = function(key) {
      var self = this;

      return Opal.hash_get(self, key) !== undefined
    }, TMP_Hash_has_key$q_37.$$arity = 1);
    
    Opal.defn(self, '$has_value?', TMP_Hash_has_value$q_38 = function(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    }, TMP_Hash_has_value$q_38.$$arity = 1);
    
    Opal.defn(self, '$hash', TMP_Hash_hash_39 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        if (Opal[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, TMP_Hash_hash_39.$$arity = 0);
    Opal.alias(self, "include?", "has_key?");
    
    Opal.defn(self, '$index', TMP_Hash_index_40 = function $$index(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    }, TMP_Hash_index_40.$$arity = 1);
    
    Opal.defn(self, '$indexes', TMP_Hash_indexes_41 = function $$indexes($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = Opal.hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    
    }, TMP_Hash_indexes_41.$$arity = -1);
    Opal.alias(self, "indices", "indexes");
    var inspect_ids;;
    
    Opal.defn(self, '$inspect', TMP_Hash_inspect_42 = function $$inspect() {
      var self = this;

      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];

      try {
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          result.push(key.$inspect() + '=>' + value.$inspect());
        }

        return '{' + result.join(', ') + '}';

      } finally {
        if (top) {
          inspect_ids = undefined;
        }
      }
    
    }, TMP_Hash_inspect_42.$$arity = 0);
    
    Opal.defn(self, '$invert', TMP_Hash_invert_43 = function $$invert() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.hash_put(hash, value, key);
      }

      return hash;
    
    }, TMP_Hash_invert_43.$$arity = 0);
    
    Opal.defn(self, '$keep_if', TMP_Hash_keep_if_44 = function $$keep_if() {
      var TMP_45, self = this, $iter = TMP_Hash_keep_if_44.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_keep_if_44.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["keep_if"], (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$size()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, TMP_Hash_keep_if_44.$$arity = 0);
    Opal.alias(self, "key", "index");
    Opal.alias(self, "key?", "has_key?");
    
    Opal.defn(self, '$keys', TMP_Hash_keys_46 = function $$keys() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    }, TMP_Hash_keys_46.$$arity = 0);
    
    Opal.defn(self, '$length', TMP_Hash_length_47 = function $$length() {
      var self = this;

      return self.$$keys.length
    }, TMP_Hash_length_47.$$arity = 0);
    Opal.alias(self, "member?", "has_key?");
    
    Opal.defn(self, '$merge', TMP_Hash_merge_48 = function $$merge(other) {
      var self = this, $iter = TMP_Hash_merge_48.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_merge_48.$$p = null;
      return $send(self.$dup(), 'merge!', [other], block.$to_proc())
    }, TMP_Hash_merge_48.$$arity = 1);
    
    Opal.defn(self, '$merge!', TMP_Hash_merge$B_49 = function(other) {
      var self = this, $iter = TMP_Hash_merge$B_49.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_merge$B_49.$$p = null;
      
      if (!other.$$is_hash) {
        other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      }

      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;

      if (block === nil) {
        for (i = 0; i < length; i++) {
          key = other_keys[i];

          if (key.$$is_string) {
            other_value = other.$$smap[key];
          } else {
            other_value = key.value;
            key = key.key;
          }

          Opal.hash_put(self, key, other_value);
        }

        return self;
      }

      for (i = 0; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        value = Opal.hash_get(self, key);

        if (value === undefined) {
          Opal.hash_put(self, key, other_value);
          continue;
        }

        Opal.hash_put(self, key, block(key, value, other_value));
      }

      return self;
    
    }, TMP_Hash_merge$B_49.$$arity = 1);
    
    Opal.defn(self, '$rassoc', TMP_Hash_rassoc_50 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    }, TMP_Hash_rassoc_50.$$arity = 1);
    
    Opal.defn(self, '$rehash', TMP_Hash_rehash_51 = function $$rehash() {
      var self = this;

      
      Opal.hash_rehash(self);
      return self;
    
    }, TMP_Hash_rehash_51.$$arity = 0);
    
    Opal.defn(self, '$reject', TMP_Hash_reject_52 = function $$reject() {
      var TMP_53, self = this, $iter = TMP_Hash_reject_52.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_reject_52.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["reject"], (TMP_53 = function(){var self = TMP_53.$$s || this;

        return self.$size()}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, TMP_Hash_reject_52.$$arity = 0);
    
    Opal.defn(self, '$reject!', TMP_Hash_reject$B_54 = function() {
      var TMP_55, self = this, $iter = TMP_Hash_reject$B_54.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_reject$B_54.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["reject!"], (TMP_55 = function(){var self = TMP_55.$$s || this;

        return self.$size()}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55))
      };
      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    ;
    }, TMP_Hash_reject$B_54.$$arity = 0);
    
    Opal.defn(self, '$replace', TMP_Hash_replace_56 = function $$replace(other) {
      var self = this, $writer = nil;

      
      other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Hash'), "to_hash");
      
      Opal.hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        Opal.hash_put(self, key, other_value);
      }
    ;
      if ($truthy(other.$default_proc())) {
        
        $writer = [other.$default_proc()];
        $send(self, 'default_proc=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        } else {
        
        $writer = [other.$default()];
        $send(self, 'default=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return self;
    }, TMP_Hash_replace_56.$$arity = 1);
    
    Opal.defn(self, '$select', TMP_Hash_select_57 = function $$select() {
      var TMP_58, self = this, $iter = TMP_Hash_select_57.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_select_57.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["select"], (TMP_58 = function(){var self = TMP_58.$$s || this;

        return self.$size()}, TMP_58.$$s = self, TMP_58.$$arity = 0, TMP_58))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, TMP_Hash_select_57.$$arity = 0);
    
    Opal.defn(self, '$select!', TMP_Hash_select$B_59 = function() {
      var TMP_60, self = this, $iter = TMP_Hash_select$B_59.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_select$B_59.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["select!"], (TMP_60 = function(){var self = TMP_60.$$s || this;

        return self.$size()}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60))
      };
      
      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    ;
    }, TMP_Hash_select$B_59.$$arity = 0);
    
    Opal.defn(self, '$shift', TMP_Hash_shift_61 = function $$shift() {
      var self = this;

      
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, Opal.hash_delete(self, key)];
      }

      return self.$default(nil);
    
    }, TMP_Hash_shift_61.$$arity = 0);
    Opal.alias(self, "size", "length");
    self.$alias_method("store", "[]=");
    
    Opal.defn(self, '$to_a', TMP_Hash_to_a_62 = function $$to_a() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    }, TMP_Hash_to_a_62.$$arity = 0);
    
    Opal.defn(self, '$to_h', TMP_Hash_to_h_63 = function $$to_h() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_Hash_to_h_63.$$arity = 0);
    
    Opal.defn(self, '$to_hash', TMP_Hash_to_hash_64 = function $$to_hash() {
      var self = this;

      return self
    }, TMP_Hash_to_hash_64.$$arity = 0);
    
    Opal.defn(self, '$to_proc', TMP_Hash_to_proc_66 = function $$to_proc() {
      var TMP_65, self = this;

      return $send(self, 'proc', [], (TMP_65 = function(key){var self = TMP_65.$$s || this;

      
        
        if (key == null) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no key given")
        }
      ;
        return self['$[]'](key);}, TMP_65.$$s = self, TMP_65.$$arity = -1, TMP_65))
    }, TMP_Hash_to_proc_66.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    Opal.alias(self, "update", "merge!");
    Opal.alias(self, "value?", "has_value?");
    Opal.alias(self, "values_at", "indexes");
    return (Opal.defn(self, '$values', TMP_Hash_values_67 = function $$values() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }, TMP_Hash_values_67.$$arity = 0), nil) && 'values';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/number"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$bridge', '$raise', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$-@', '$size', '$<=', '$>=']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Number_coerce_1, TMP_Number___id___2, TMP_Number_$_3, TMP_Number_$_4, TMP_Number_$_5, TMP_Number_$_6, TMP_Number_$_7, TMP_Number_$_8, TMP_Number_$_9, TMP_Number_$_10, TMP_Number_$lt_11, TMP_Number_$lt$eq_12, TMP_Number_$gt_13, TMP_Number_$gt$eq_14, TMP_Number_$lt$eq$gt_15, TMP_Number_$lt$lt_16, TMP_Number_$gt$gt_17, TMP_Number_$$_18, TMP_Number_$$_19, TMP_Number_$$_20, TMP_Number_$_21, TMP_Number_$$_22, TMP_Number_$eq$eq$eq_23, TMP_Number_$eq$eq_24, TMP_Number_abs_25, TMP_Number_abs2_26, TMP_Number_angle_27, TMP_Number_bit_length_28, TMP_Number_ceil_29, TMP_Number_chr_30, TMP_Number_denominator_31, TMP_Number_downto_32, TMP_Number_equal$q_34, TMP_Number_even$q_35, TMP_Number_floor_36, TMP_Number_gcd_37, TMP_Number_gcdlcm_38, TMP_Number_integer$q_39, TMP_Number_is_a$q_40, TMP_Number_instance_of$q_41, TMP_Number_lcm_42, TMP_Number_next_43, TMP_Number_nonzero$q_44, TMP_Number_numerator_45, TMP_Number_odd$q_46, TMP_Number_ord_47, TMP_Number_pred_48, TMP_Number_quo_49, TMP_Number_rationalize_50, TMP_Number_round_51, TMP_Number_step_52, TMP_Number_times_54, TMP_Number_to_f_56, TMP_Number_to_i_57, TMP_Number_to_r_58, TMP_Number_to_s_59, TMP_Number_divmod_60, TMP_Number_upto_61, TMP_Number_zero$q_63, TMP_Number_size_64, TMP_Number_nan$q_65, TMP_Number_finite$q_66, TMP_Number_infinite$q_67, TMP_Number_positive$q_68, TMP_Number_negative$q_69;

    
    Opal.const_get_relative($nesting, 'Opal').$bridge(self, Number);
    Number.prototype.$$is_number = true;
    self.$$is_number_class = true;
    
    Opal.defn(self, '$coerce', TMP_Number_coerce_1 = function $$coerce(other) {
      var self = this;

      
      if (other === nil) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [self.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
    
    }, TMP_Number_coerce_1.$$arity = 1);
    
    Opal.defn(self, '$__id__', TMP_Number___id___2 = function $$__id__() {
      var self = this;

      return (self * 2) + 1
    }, TMP_Number___id___2.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.defn(self, '$+', TMP_Number_$_3 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    }, TMP_Number_$_3.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Number_$_4 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    }, TMP_Number_$_4.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Number_$_5 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    }, TMP_Number_$_5.$$arity = 1);
    
    Opal.defn(self, '$/', TMP_Number_$_6 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    }, TMP_Number_$_6.$$arity = 1);
    Opal.alias(self, "fdiv", "/");
    
    Opal.defn(self, '$%', TMP_Number_$_7 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    }, TMP_Number_$_7.$$arity = 1);
    
    Opal.defn(self, '$&', TMP_Number_$_8 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    }, TMP_Number_$_8.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Number_$_9 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    }, TMP_Number_$_9.$$arity = 1);
    
    Opal.defn(self, '$^', TMP_Number_$_10 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    }, TMP_Number_$_10.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Number_$lt_11 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    }, TMP_Number_$lt_11.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Number_$lt$eq_12 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    }, TMP_Number_$lt$eq_12.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Number_$gt_13 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    }, TMP_Number_$gt_13.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Number_$gt$eq_14 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    }, TMP_Number_$gt$eq_14.$$arity = 1);
    
    var spaceship_operator = function(self, other) {
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        if (self > other) {
          return 1;
        } else if (self < other) {
          return -1;
        } else {
          return 0;
        }
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    }
  ;
    
    Opal.defn(self, '$<=>', TMP_Number_$lt$eq$gt_15 = function(other) {
      var self = this;

      try {
        
      return spaceship_operator(self, other);
    
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {
          try {
            return nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, TMP_Number_$lt$eq$gt_15.$$arity = 1);
    
    Opal.defn(self, '$<<', TMP_Number_$lt$lt_16 = function(count) {
      var self = this;

      
      count = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    }, TMP_Number_$lt$lt_16.$$arity = 1);
    
    Opal.defn(self, '$>>', TMP_Number_$gt$gt_17 = function(count) {
      var self = this;

      
      count = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](count, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    }, TMP_Number_$gt$gt_17.$$arity = 1);
    
    Opal.defn(self, '$[]', TMP_Number_$$_18 = function(bit) {
      var self = this;

      
      bit = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](bit, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      
      if (bit < 0) {
        return 0;
      }
      if (bit >= 32) {
        return self < 0 ? 1 : 0;
      }
      return (self >> bit) & 1;
    ;
    }, TMP_Number_$$_18.$$arity = 1);
    
    Opal.defn(self, '$+@', TMP_Number_$$_19 = function() {
      var self = this;

      return +self
    }, TMP_Number_$$_19.$$arity = 0);
    
    Opal.defn(self, '$-@', TMP_Number_$$_20 = function() {
      var self = this;

      return -self
    }, TMP_Number_$$_20.$$arity = 0);
    
    Opal.defn(self, '$~', TMP_Number_$_21 = function() {
      var self = this;

      return ~self
    }, TMP_Number_$_21.$$arity = 0);
    
    Opal.defn(self, '$**', TMP_Number_$$_22 = function(other) {
      var $a, $b, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](other))) {
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Integer')['$==='](self)['$!']()) ? $a : $rb_gt(other, 0)))) {
          return Math.pow(self, other)
          } else {
          return Opal.const_get_relative($nesting, 'Rational').$new(self, 1)['$**'](other)
        }
      } else if ($truthy((($a = $rb_lt(self, 0)) ? ($truthy($b = Opal.const_get_relative($nesting, 'Float')['$==='](other)) ? $b : Opal.const_get_relative($nesting, 'Rational')['$==='](other)) : $rb_lt(self, 0)))) {
        return Opal.const_get_relative($nesting, 'Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ($truthy(other.$$is_number != null)) {
        return Math.pow(self, other)
        } else {
        return self.$__coerced__("**", other)
      }
    }, TMP_Number_$$_22.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_Number_$eq$eq$eq_23 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, TMP_Number_$eq$eq$eq_23.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Number_$eq$eq_24 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, TMP_Number_$eq$eq_24.$$arity = 1);
    
    Opal.defn(self, '$abs', TMP_Number_abs_25 = function $$abs() {
      var self = this;

      return Math.abs(self)
    }, TMP_Number_abs_25.$$arity = 0);
    
    Opal.defn(self, '$abs2', TMP_Number_abs2_26 = function $$abs2() {
      var self = this;

      return Math.abs(self * self)
    }, TMP_Number_abs2_26.$$arity = 0);
    
    Opal.defn(self, '$angle', TMP_Number_angle_27 = function $$angle() {
      var self = this;

      
      if ($truthy(self['$nan?']())) {
        return self};
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    ;
    }, TMP_Number_angle_27.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    Opal.alias(self, "phase", "angle");
    
    Opal.defn(self, '$bit_length', TMP_Number_bit_length_28 = function $$bit_length() {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'NoMethodError').$new("" + "undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    ;
    }, TMP_Number_bit_length_28.$$arity = 0);
    
    Opal.defn(self, '$ceil', TMP_Number_ceil_29 = function $$ceil() {
      var self = this;

      return Math.ceil(self)
    }, TMP_Number_ceil_29.$$arity = 0);
    
    Opal.defn(self, '$chr', TMP_Number_chr_30 = function $$chr(encoding) {
      var self = this;

      return String.fromCharCode(self)
    }, TMP_Number_chr_30.$$arity = -1);
    
    Opal.defn(self, '$denominator', TMP_Number_denominator_31 = function $$denominator() {
      var $a, self = this, $iter = TMP_Number_denominator_31.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_denominator_31.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return 1
        } else {
        return $send(self, Opal.find_super_dispatcher(self, 'denominator', TMP_Number_denominator_31, false), $zuper, $iter)
      }
    }, TMP_Number_denominator_31.$$arity = 0);
    
    Opal.defn(self, '$downto', TMP_Number_downto_32 = function $$downto(stop) {
      var TMP_33, self = this, $iter = TMP_Number_downto_32.$$p, block = $iter || nil;

      if ($iter) TMP_Number_downto_32.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["downto", stop], (TMP_33 = function(){var self = TMP_33.$$s || this;

        
          if ($truthy(Opal.const_get_relative($nesting, 'Numeric')['$==='](stop))) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_gt(stop, self))) {
            return 0
            } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33))
      };
      
      if (!stop.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        block(i);
      }
    ;
      return self;
    }, TMP_Number_downto_32.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$equal?', TMP_Number_equal$q_34 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$=='](other)) ? $a : isNaN(self) && isNaN(other))
    }, TMP_Number_equal$q_34.$$arity = 1);
    
    Opal.defn(self, '$even?', TMP_Number_even$q_35 = function() {
      var self = this;

      return self % 2 === 0
    }, TMP_Number_even$q_35.$$arity = 0);
    
    Opal.defn(self, '$floor', TMP_Number_floor_36 = function $$floor() {
      var self = this;

      return Math.floor(self)
    }, TMP_Number_floor_36.$$arity = 0);
    
    Opal.defn(self, '$gcd', TMP_Number_gcd_37 = function $$gcd(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    ;
    }, TMP_Number_gcd_37.$$arity = 1);
    
    Opal.defn(self, '$gcdlcm', TMP_Number_gcdlcm_38 = function $$gcdlcm(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()]
    }, TMP_Number_gcdlcm_38.$$arity = 1);
    
    Opal.defn(self, '$integer?', TMP_Number_integer$q_39 = function() {
      var self = this;

      return self % 1 === 0
    }, TMP_Number_integer$q_39.$$arity = 0);
    
    Opal.defn(self, '$is_a?', TMP_Number_is_a$q_40 = function(klass) {
      var $a, self = this, $iter = TMP_Number_is_a$q_40.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_is_a$q_40.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Fixnum'))) ? Opal.const_get_relative($nesting, 'Integer')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Fixnum'))))) {
        return true};
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Integer'))) ? Opal.const_get_relative($nesting, 'Integer')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Float'))) ? Opal.const_get_relative($nesting, 'Float')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Float'))))) {
        return true};
      return $send(self, Opal.find_super_dispatcher(self, 'is_a?', TMP_Number_is_a$q_40, false), $zuper, $iter);
    }, TMP_Number_is_a$q_40.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$instance_of?', TMP_Number_instance_of$q_41 = function(klass) {
      var $a, self = this, $iter = TMP_Number_instance_of$q_41.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_instance_of$q_41.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Fixnum'))) ? Opal.const_get_relative($nesting, 'Integer')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Fixnum'))))) {
        return true};
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Integer'))) ? Opal.const_get_relative($nesting, 'Integer')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$=='](Opal.const_get_relative($nesting, 'Float'))) ? Opal.const_get_relative($nesting, 'Float')['$==='](self) : klass['$=='](Opal.const_get_relative($nesting, 'Float'))))) {
        return true};
      return $send(self, Opal.find_super_dispatcher(self, 'instance_of?', TMP_Number_instance_of$q_41, false), $zuper, $iter);
    }, TMP_Number_instance_of$q_41.$$arity = 1);
    
    Opal.defn(self, '$lcm', TMP_Number_lcm_42 = function $$lcm(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    ;
    }, TMP_Number_lcm_42.$$arity = 1);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.defn(self, '$next', TMP_Number_next_43 = function $$next() {
      var self = this;

      return self + 1
    }, TMP_Number_next_43.$$arity = 0);
    
    Opal.defn(self, '$nonzero?', TMP_Number_nonzero$q_44 = function() {
      var self = this;

      return self == 0 ? nil : self
    }, TMP_Number_nonzero$q_44.$$arity = 0);
    
    Opal.defn(self, '$numerator', TMP_Number_numerator_45 = function $$numerator() {
      var $a, self = this, $iter = TMP_Number_numerator_45.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_numerator_45.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return self
        } else {
        return $send(self, Opal.find_super_dispatcher(self, 'numerator', TMP_Number_numerator_45, false), $zuper, $iter)
      }
    }, TMP_Number_numerator_45.$$arity = 0);
    
    Opal.defn(self, '$odd?', TMP_Number_odd$q_46 = function() {
      var self = this;

      return self % 2 !== 0
    }, TMP_Number_odd$q_46.$$arity = 0);
    
    Opal.defn(self, '$ord', TMP_Number_ord_47 = function $$ord() {
      var self = this;

      return self
    }, TMP_Number_ord_47.$$arity = 0);
    
    Opal.defn(self, '$pred', TMP_Number_pred_48 = function $$pred() {
      var self = this;

      return self - 1
    }, TMP_Number_pred_48.$$arity = 0);
    
    Opal.defn(self, '$quo', TMP_Number_quo_49 = function $$quo(other) {
      var self = this, $iter = TMP_Number_quo_49.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_quo_49.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        return $send(self, Opal.find_super_dispatcher(self, 'quo', TMP_Number_quo_49, false), $zuper, $iter)
        } else {
        return $rb_divide(self, other)
      }
    }, TMP_Number_quo_49.$$arity = 1);
    
    Opal.defn(self, '$rationalize', TMP_Number_rationalize_50 = function $$rationalize(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      
      if (arguments.length > 1) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        return Opal.const_get_relative($nesting, 'Rational').$new(self, 1)
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "Infinity")
      } else if ($truthy(self['$nan?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(eps == null)) {
        
        $b = Opal.const_get_relative($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;
        f = Opal.const_get_relative($nesting, 'Math').$ldexp(f, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'MANT_DIG')).$to_i();
        n = $rb_minus(n, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'MANT_DIG'));
        return Opal.const_get_relative($nesting, 'Rational').$new($rb_times(2, f), (1)['$<<']($rb_minus(1, n))).$rationalize(Opal.const_get_relative($nesting, 'Rational').$new(1, (1)['$<<']($rb_minus(1, n))));
        } else {
        return self.$to_r().$rationalize(eps)
      };
    }, TMP_Number_rationalize_50.$$arity = -1);
    
    Opal.defn(self, '$round', TMP_Number_round_51 = function $$round(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        
        if ($truthy(ndigits == null)) {
          return self};
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Float')['$==='](ndigits)) ? ndigits['$infinite?']() : $a))) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "Infinity")};
        ndigits = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](ndigits, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(ndigits, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Integer'), 'MIN')))) {
          self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "out of bounds")};
        if ($truthy(ndigits >= 0)) {
          return self};
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(x) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
        } else {
        
        if ($truthy(($truthy($a = self['$nan?']()) ? ndigits == null : $a))) {
          self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "NaN")};
        ndigits = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](ndigits || 0, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if ($truthy($rb_le(ndigits, 0))) {
          if ($truthy(self['$nan?']())) {
            self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "NaN")
          } else if ($truthy(self['$infinite?']())) {
            self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "Infinity")}
        } else if (ndigits['$=='](0)) {
          return Math.round(self)
        } else if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
          return self};
        $b = Opal.const_get_relative($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (exp = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy($rb_ge(ndigits, $rb_minus($rb_plus(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'DIG'), 2), (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_divide(exp, 4)
          } else {
          return $rb_minus($rb_divide(exp, 3), 1)
        }; return nil; })())))) {
          return self};
        if ($truthy($rb_lt(ndigits, (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_plus($rb_divide(exp, 3), 1)
          } else {
          return $rb_divide(exp, 4)
        }; return nil; })()['$-@']()))) {
          return 0};
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);
      }
    }, TMP_Number_round_51.$$arity = -1);
    
    Opal.defn(self, '$step', TMP_Number_step_52 = function $$step($limit, $step, $kwargs) {
      var $a, $b, TMP_53, self = this, $post_args, to, by, limit, step, $iter = TMP_Number_step_52.$$p, block = $iter || nil;

      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      $kwargs = Opal.extract_kwargs($post_args);
      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      if ((to = $kwargs.$$smap['to']) == null) {
        to = nil
      }
      if ((by = $kwargs.$$smap['by']) == null) {
        by = nil
      }
      if (0 < $post_args.length) {
        limit = $post_args.splice(0,1)[0];
      }
      if (limit == null) {
        limit = nil;
      }
      if (0 < $post_args.length) {
        step = $post_args.splice(0,1)[0];
      }
      if (step == null) {
        step = nil;
      }
      if ($iter) TMP_Number_step_52.$$p = null;
      
      
      if (limit !== nil && to !== nil) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "to is given twice")
      }

      if (step !== nil && by !== nil) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "step is given twice")
      }

      function validateParameters() {
        if (step === 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "step cannot be 0")
        }

        (limit = ($truthy($a = limit) ? $a : to));
        (step = ($truthy($a = step) ? $a : ($truthy($b = by) ? $b : 1)));

        if (!limit.$$is_number) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "limit must be a number")
        }

        if (!step.$$is_number) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "step must be a number")
        }
      }

      function stepFloatSize() {
        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else if (step === Infinity || step === -Infinity) {
          return 1;
        } else {
          var abs = Math.abs, floor = Math.floor,
              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'EPSILON');

          if (err === Infinity || err === -Infinity) {
            return 0;
          } else {
            if (err > 0.5) {
              err = 0.5;
            }

            return floor((limit - self) / step + err) + 1
          }
        }
      }

      function stepSize() {
        validateParameters();

        if (step === 0) {
          return Infinity;
        }

        if (step % 1 !== 0) {
          return stepFloatSize();
        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else {
          var ceil = Math.ceil, abs = Math.abs,
              lhs = abs(self - limit) + 1,
              rhs = abs(step);

          return ceil(lhs / rhs);
        }
      }
    ;
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["step", limit, step, $hash2(["to", "by"], {"to": to, "by": by})], (TMP_53 = function(){var self = TMP_53.$$s || this;

        return stepSize()}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53))
      };
      
      validateParameters();

      if (step === 0) {
        while (true) {
          block(self);
        }
      }

      if (self % 1 !== 0 || limit % 1 !== 0 || step % 1 !== 0) {
        var n = stepFloatSize();

        if (n > 0) {
          if (step === Infinity || step === -Infinity) {
            block(self);
          } else {
            var i = 0, d;

            if (step > 0) {
              while (i < n) {
                d = i * step + self;
                if (limit < d) {
                  d = limit;
                }
                block(d);
                i += 1;
              }
            } else {
              while (i < n) {
                d = i * step + self;
                if (limit > d) {
                  d = limit;
                }
                block(d);
                i += 1
              }
            }
          }
        }
      } else {
        var value = self;

        if (step > 0) {
          while (value <= limit) {
            block(value);
            value += step;
          }
        } else {
          while (value >= limit) {
            block(value);
            value += step
          }
        }
      }

      return self;
    ;
    }, TMP_Number_step_52.$$arity = -1);
    Opal.alias(self, "succ", "next");
    
    Opal.defn(self, '$times', TMP_Number_times_54 = function $$times() {
      var TMP_55, self = this, $iter = TMP_Number_times_54.$$p, block = $iter || nil;

      if ($iter) TMP_Number_times_54.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return $send(self, 'enum_for', ["times"], (TMP_55 = function(){var self = TMP_55.$$s || this;

        return self}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55))
      };
      
      for (var i = 0; i < self; i++) {
        block(i);
      }
    ;
      return self;
    }, TMP_Number_times_54.$$arity = 0);
    
    Opal.defn(self, '$to_f', TMP_Number_to_f_56 = function $$to_f() {
      var self = this;

      return self
    }, TMP_Number_to_f_56.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_Number_to_i_57 = function $$to_i() {
      var self = this;

      return parseInt(self, 10)
    }, TMP_Number_to_i_57.$$arity = 0);
    Opal.alias(self, "to_int", "to_i");
    
    Opal.defn(self, '$to_r', TMP_Number_to_r_58 = function $$to_r() {
      var $a, $b, self = this, f = nil, e = nil;

      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](self))) {
        return Opal.const_get_relative($nesting, 'Rational').$new(self, 1)
        } else {
        
        $b = Opal.const_get_relative($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;
        f = Opal.const_get_relative($nesting, 'Math').$ldexp(f, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'MANT_DIG')).$to_i();
        e = $rb_minus(e, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'MANT_DIG'));
        return $rb_times(f, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'RADIX')['$**'](e)).$to_r();
      }
    }, TMP_Number_to_r_58.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Number_to_s_59 = function $$to_s(base) {
      var $a, self = this;

      if (base == null) {
        base = 10;
      }
      
      if ($truthy(($truthy($a = $rb_lt(base, 2)) ? $a : $rb_gt(base, 36)))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "base must be between 2 and 36")};
      return self.toString(base);
    }, TMP_Number_to_s_59.$$arity = -1);
    Opal.alias(self, "truncate", "to_i");
    Opal.alias(self, "inspect", "to_s");
    
    Opal.defn(self, '$divmod', TMP_Number_divmod_60 = function $$divmod(other) {
      var $a, self = this, $iter = TMP_Number_divmod_60.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Number_divmod_60.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : other['$nan?']()))) {
        return self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "Infinity")
        } else {
        return $send(self, Opal.find_super_dispatcher(self, 'divmod', TMP_Number_divmod_60, false), $zuper, $iter)
      }
    }, TMP_Number_divmod_60.$$arity = 1);
    
    Opal.defn(self, '$upto', TMP_Number_upto_61 = function $$upto(stop) {
      var TMP_62, self = this, $iter = TMP_Number_upto_61.$$p, block = $iter || nil;

      if ($iter) TMP_Number_upto_61.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return $send(self, 'enum_for', ["upto", stop], (TMP_62 = function(){var self = TMP_62.$$s || this;

        
          if ($truthy(Opal.const_get_relative($nesting, 'Numeric')['$==='](stop))) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_lt(stop, self))) {
            return 0
            } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, TMP_62.$$s = self, TMP_62.$$arity = 0, TMP_62))
      };
      
      if (!stop.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        block(i);
      }
    ;
      return self;
    }, TMP_Number_upto_61.$$arity = 1);
    
    Opal.defn(self, '$zero?', TMP_Number_zero$q_63 = function() {
      var self = this;

      return self == 0
    }, TMP_Number_zero$q_63.$$arity = 0);
    
    Opal.defn(self, '$size', TMP_Number_size_64 = function $$size() {
      var self = this;

      return 4
    }, TMP_Number_size_64.$$arity = 0);
    
    Opal.defn(self, '$nan?', TMP_Number_nan$q_65 = function() {
      var self = this;

      return isNaN(self)
    }, TMP_Number_nan$q_65.$$arity = 0);
    
    Opal.defn(self, '$finite?', TMP_Number_finite$q_66 = function() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self)
    }, TMP_Number_finite$q_66.$$arity = 0);
    
    Opal.defn(self, '$infinite?', TMP_Number_infinite$q_67 = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    }, TMP_Number_infinite$q_67.$$arity = 0);
    
    Opal.defn(self, '$positive?', TMP_Number_positive$q_68 = function() {
      var self = this;

      return self != 0 && (self == Infinity || 1 / self > 0)
    }, TMP_Number_positive$q_68.$$arity = 0);
    return (Opal.defn(self, '$negative?', TMP_Number_negative$q_69 = function() {
      var self = this;

      return self == -Infinity || 1 / self < 0
    }, TMP_Number_negative$q_69.$$arity = 0), nil) && 'negative?';
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
  Opal.const_set($nesting[0], 'Fixnum', Opal.const_get_relative($nesting, 'Number'));
  (function($base, $super, $parent_nesting) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Integer_$eq$eq$eq_70;

    
    self.$$is_number_class = true;
    Opal.defs(self, '$===', TMP_Integer_$eq$eq$eq_70 = function(other) {
      var self = this;

      
      if (!other.$$is_number) {
        return false;
      }

      return (other % 1) === 0;
    
    }, TMP_Integer_$eq$eq$eq_70.$$arity = 1);
    Opal.const_set($nesting[0], 'MAX', Math.pow(2, 30) - 1);
    return Opal.const_set($nesting[0], 'MIN', -Math.pow(2, 30));
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Float_$eq$eq$eq_71;

    
    self.$$is_number_class = true;
    Opal.defs(self, '$===', TMP_Float_$eq$eq$eq_71 = function(other) {
      var self = this;

      return !!other.$$is_number
    }, TMP_Float_$eq$eq$eq_71.$$arity = 1);
    Opal.const_set($nesting[0], 'INFINITY', Infinity);
    Opal.const_set($nesting[0], 'MAX', Number.MAX_VALUE);
    Opal.const_set($nesting[0], 'MIN', Number.MIN_VALUE);
    Opal.const_set($nesting[0], 'NAN', NaN);
    Opal.const_set($nesting[0], 'DIG', 15);
    Opal.const_set($nesting[0], 'MANT_DIG', 53);
    Opal.const_set($nesting[0], 'RADIX', 2);
    return Opal.const_set($nesting[0], 'EPSILON', Number.EPSILON || 2.2204460492503130808472633361816E-16);
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/range"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$raise', '$<=>', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$respond_to?', '$class', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$last', '$to_a', '$>', '$-', '$abs', '$to_i', '$coerce_to!', '$ceil', '$/', '$size', '$loop', '$+', '$*', '$>=', '$each_with_index', '$%', '$bsearch', '$inspect', '$[]', '$hash']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Range_initialize_1, TMP_Range_$eq$eq_2, TMP_Range_$eq$eq$eq_3, TMP_Range_cover$q_4, TMP_Range_each_5, TMP_Range_eql$q_6, TMP_Range_exclude_end$q_7, TMP_Range_first_8, TMP_Range_last_9, TMP_Range_max_10, TMP_Range_min_11, TMP_Range_size_12, TMP_Range_step_13, TMP_Range_bsearch_17, TMP_Range_to_s_18, TMP_Range_inspect_19, TMP_Range_marshal_load_20, TMP_Range_hash_21;

    def.begin = def.end = def.excl = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    def.$$is_range = true;;
    self.$attr_reader("begin", "end");
    
    Opal.defn(self, '$initialize', TMP_Range_initialize_1 = function $$initialize(first, last, exclude) {
      var self = this;

      if (exclude == null) {
        exclude = false;
      }
      
      if ($truthy(self.begin)) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError'), "'initialize' called twice")};
      if ($truthy(first['$<=>'](last))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "bad value for range")
      };
      self.begin = first;
      self.end = last;
      return (self.excl = exclude);
    }, TMP_Range_initialize_1.$$arity = -3);
    
    Opal.defn(self, '$==', TMP_Range_$eq$eq_2 = function(other) {
      var self = this;

      
      if (!other.$$is_range) {
        return false;
      }

      return self.excl  === other.excl &&
             self.begin ==  other.begin &&
             self.end   ==  other.end;
    
    }, TMP_Range_$eq$eq_2.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_Range_$eq$eq$eq_3 = function(value) {
      var self = this;

      return self['$include?'](value)
    }, TMP_Range_$eq$eq$eq_3.$$arity = 1);
    
    Opal.defn(self, '$cover?', TMP_Range_cover$q_4 = function(value) {
      var $a, self = this, beg_cmp = nil, end_cmp = nil;

      
      beg_cmp = self.begin['$<=>'](value);
      if ($truthy(($truthy($a = beg_cmp) ? $rb_le(beg_cmp, 0) : $a))) {
        } else {
        return false
      };
      end_cmp = value['$<=>'](self.end);
      if ($truthy(self.excl)) {
        return ($truthy($a = end_cmp) ? $rb_lt(end_cmp, 0) : $a)
        } else {
        return ($truthy($a = end_cmp) ? $rb_le(end_cmp, 0) : $a)
      };
    }, TMP_Range_cover$q_4.$$arity = 1);
    
    Opal.defn(self, '$each', TMP_Range_each_5 = function $$each() {
      var $a, self = this, $iter = TMP_Range_each_5.$$p, block = $iter || nil, current = nil, last = nil;

      if ($iter) TMP_Range_each_5.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      
      var i, limit;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + (function() {if ($truthy(self.excl)) {
        return 0
        } else {
        return 1
      }; return nil; })(); i < limit; i++) {
          block(i);
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        $send(self.begin, 'upto', [self.end, self.excl], block.$to_proc())
        return self;
      }
    ;
      current = self.begin;
      last = self.end;
      if ($truthy(current['$respond_to?']("succ"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't iterate from " + (current.$class()))
      };
      while ($truthy($rb_lt(current['$<=>'](last), 0))) {
        
        Opal.yield1(block, current);
        current = current.$succ();
      };
      if ($truthy(($truthy($a = self.excl['$!']()) ? current['$=='](last) : $a))) {
        Opal.yield1(block, current)};
      return self;
    }, TMP_Range_each_5.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Range_eql$q_6 = function(other) {
      var $a, $b, self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Range')['$==='](other))) {
        } else {
        return false
      };
      return ($truthy($a = ($truthy($b = self.excl['$==='](other['$exclude_end?']())) ? self.begin['$eql?'](other.$begin()) : $b)) ? self.end['$eql?'](other.$end()) : $a);
    }, TMP_Range_eql$q_6.$$arity = 1);
    
    Opal.defn(self, '$exclude_end?', TMP_Range_exclude_end$q_7 = function() {
      var self = this;

      return self.excl
    }, TMP_Range_exclude_end$q_7.$$arity = 0);
    
    Opal.defn(self, '$first', TMP_Range_first_8 = function $$first(n) {
      var self = this, $iter = TMP_Range_first_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Range_first_8.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy(n == null)) {
        return self.begin};
      return $send(self, Opal.find_super_dispatcher(self, 'first', TMP_Range_first_8, false), $zuper, $iter);
    }, TMP_Range_first_8.$$arity = -1);
    Opal.alias(self, "include?", "cover?");
    
    Opal.defn(self, '$last', TMP_Range_last_9 = function $$last(n) {
      var self = this;

      
      if ($truthy(n == null)) {
        return self.end};
      return self.$to_a().$last(n);
    }, TMP_Range_last_9.$$arity = -1);
    
    Opal.defn(self, '$max', TMP_Range_max_10 = function $$max() {
      var $a, self = this, $iter = TMP_Range_max_10.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Range_max_10.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send(self, Opal.find_super_dispatcher(self, 'max', TMP_Range_max_10, false), $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
        } else {
        return self.excl ? self.end - 1 : self.end
      }
    }, TMP_Range_max_10.$$arity = 0);
    Opal.alias(self, "member?", "cover?");
    
    Opal.defn(self, '$min', TMP_Range_min_11 = function $$min() {
      var $a, self = this, $iter = TMP_Range_min_11.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Range_min_11.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send(self, Opal.find_super_dispatcher(self, 'min', TMP_Range_min_11, false), $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
        } else {
        return self.begin
      }
    }, TMP_Range_min_11.$$arity = 0);
    
    Opal.defn(self, '$size', TMP_Range_size_12 = function $$size() {
      var $a, self = this, _begin = nil, _end = nil, infinity = nil;

      
      _begin = self.begin;
      _end = self.end;
      if ($truthy(self.excl)) {
        _end = $rb_minus(_end, 1)};
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](_begin)) ? Opal.const_get_relative($nesting, 'Numeric')['$==='](_end) : $a))) {
        } else {
        return nil
      };
      if ($truthy($rb_lt(_end, _begin))) {
        return 0};
      infinity = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY');
      if ($truthy(($truthy($a = infinity['$=='](_begin.$abs())) ? $a : _end.$abs()['$=='](infinity)))) {
        return infinity};
      return (Math.abs(_end - _begin) + 1).$to_i();
    }, TMP_Range_size_12.$$arity = 0);
    
    Opal.defn(self, '$step', TMP_Range_step_13 = function $$step(n) {
      var TMP_14, TMP_15, TMP_16, self = this, $iter = TMP_Range_step_13.$$p, $yield = $iter || nil, i = nil;

      if (n == null) {
        n = 1;
      }
      if ($iter) TMP_Range_step_13.$$p = null;
      
      
      function coerceStepSize() {
        if (!n.$$is_number) {
          n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int")
        }

        if (n < 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "step can't be negative")
        } else if (n === 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "step can't be 0")
        }
      }

      function enumeratorSize() {
        if (!self.begin['$respond_to?']("succ")) {
          return nil;
        }

        if (self.begin.$$is_string && self.end.$$is_string) {
          return nil;
        }

        if (n % 1 === 0) {
          return $rb_divide(self.$size(), n).$ceil();
        } else {
          // n is a float
          var begin = self.begin, end = self.end,
              abs = Math.abs, floor = Math.floor,
              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'EPSILON'),
              size;

          if (err > 0.5) {
            err = 0.5;
          }

          if (self.excl) {
            size = floor((end - begin) / n - err);
            if (size * n + begin < end) {
              size++;
            }
          } else {
            size = floor((end - begin) / n + err) + 1
          }

          return size;
        }
      }
    ;
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["step", n], (TMP_14 = function(){var self = TMP_14.$$s || this;

        
          coerceStepSize();
          return enumeratorSize();
        }, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14))
      };
      coerceStepSize();
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
        
        i = 0;
        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], (TMP_15 = function(){var self = TMP_15.$$s || this, current = nil;
          if (self.begin == null) self.begin = nil;
          if (self.excl == null) self.excl = nil;
          if (self.end == null) self.end = nil;

        
          current = $rb_plus(self.begin, $rb_times(i, n));
          if ($truthy(self.excl)) {
            if ($truthy($rb_ge(current, self.end))) {
              
              Opal.brk(nil, $brk)}
          } else if ($truthy($rb_gt(current, self.end))) {
            
            Opal.brk(nil, $brk)};
          Opal.yield1($yield, current);
          return (i = $rb_plus(i, 1));}, TMP_15.$$s = self, TMP_15.$$brk = $brk, TMP_15.$$arity = 0, TMP_15))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        } else {
        
        
        if (self.begin.$$is_string && self.end.$$is_string && n % 1 !== 0) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "no implicit conversion to float from string")
        }
      ;
        $send(self, 'each_with_index', [], (TMP_16 = function(value, idx){var self = TMP_16.$$s || this;
if (value == null) value = nil;if (idx == null) idx = nil;
        if (idx['$%'](n)['$=='](0)) {
            return Opal.yield1($yield, value);
            } else {
            return nil
          }}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16));
      };
      return self;
    }, TMP_Range_step_13.$$arity = -1);
    
    Opal.defn(self, '$bsearch', TMP_Range_bsearch_17 = function $$bsearch() {
      var self = this, $iter = TMP_Range_bsearch_17.$$p, block = $iter || nil;

      if ($iter) TMP_Range_bsearch_17.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch")
      };
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't do binary search for " + (self.begin.$class()))
      };
      return $send(self.$to_a(), 'bsearch', [], block.$to_proc());
    }, TMP_Range_bsearch_17.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Range_to_s_18 = function $$to_s() {
      var self = this;

      return "" + (self.begin) + ((function() {if ($truthy(self.excl)) {
        return "..."
        } else {
        return ".."
      }; return nil; })()) + (self.end)
    }, TMP_Range_to_s_18.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Range_inspect_19 = function $$inspect() {
      var self = this;

      return "" + (self.begin.$inspect()) + ((function() {if ($truthy(self.excl)) {
        return "..."
        } else {
        return ".."
      }; return nil; })()) + (self.end.$inspect())
    }, TMP_Range_inspect_19.$$arity = 0);
    
    Opal.defn(self, '$marshal_load', TMP_Range_marshal_load_20 = function $$marshal_load(args) {
      var self = this;

      
      self.begin = args['$[]']("begin");
      self.end = args['$[]']("end");
      return (self.excl = args['$[]']("excl"));
    }, TMP_Range_marshal_load_20.$$arity = 1);
    return (Opal.defn(self, '$hash', TMP_Range_hash_21 = function $$hash() {
      var self = this;

      return [self.begin, self.end, self.excl].$hash()
    }, TMP_Range_hash_21.$$arity = 0), nil) && 'hash';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/proc"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$coerce_to!']);
  return (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_new_1, TMP_Proc_call_2, TMP_Proc_to_proc_3, TMP_Proc_lambda$q_4, TMP_Proc_arity_5, TMP_Proc_source_location_6, TMP_Proc_binding_7, TMP_Proc_parameters_8, TMP_Proc_curry_9, TMP_Proc_dup_10;

    
    def.$$is_proc = true;
    def.$$is_lambda = false;
    Opal.defs(self, '$new', TMP_Proc_new_1 = function() {
      var self = this, $iter = TMP_Proc_new_1.$$p, block = $iter || nil;

      if ($iter) TMP_Proc_new_1.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    }, TMP_Proc_new_1.$$arity = 0);
    
    Opal.defn(self, '$call', TMP_Proc_call_2 = function $$call($a_rest) {
      var self = this, args, $iter = TMP_Proc_call_2.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Proc_call_2.$$p = null;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result, $brk = self.$$brk;

      if ($brk) {
        try {
          if (self.$$is_lambda) {
            result = self.apply(null, args);
          }
          else {
            result = Opal.yieldX(self, args);
          }
        } catch (err) {
          if (err === $brk) {
            return $brk.$v
          }
          else {
            throw err
          }
        }
      }
      else {
        if (self.$$is_lambda) {
          result = self.apply(null, args);
        }
        else {
          result = Opal.yieldX(self, args);
        }
      }

      return result;
    
    }, TMP_Proc_call_2.$$arity = -1);
    Opal.alias(self, "[]", "call");
    Opal.alias(self, "===", "call");
    Opal.alias(self, "yield", "call");
    
    Opal.defn(self, '$to_proc', TMP_Proc_to_proc_3 = function $$to_proc() {
      var self = this;

      return self
    }, TMP_Proc_to_proc_3.$$arity = 0);
    
    Opal.defn(self, '$lambda?', TMP_Proc_lambda$q_4 = function() {
      var self = this;

      return !!self.$$is_lambda
    }, TMP_Proc_lambda$q_4.$$arity = 0);
    
    Opal.defn(self, '$arity', TMP_Proc_arity_5 = function $$arity() {
      var self = this;

      
      if (self.$$is_curried) {
        return -1;
      } else {
        return self.$$arity;
      }
    
    }, TMP_Proc_arity_5.$$arity = 0);
    
    Opal.defn(self, '$source_location', TMP_Proc_source_location_6 = function $$source_location() {
      var self = this;

      
      if (self.$$is_curried) { return nil; };
      return nil;
    }, TMP_Proc_source_location_6.$$arity = 0);
    
    Opal.defn(self, '$binding', TMP_Proc_binding_7 = function $$binding() {
      var self = this;

      
      if (self.$$is_curried) { self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "Can't create Binding") };
      return nil;
    }, TMP_Proc_binding_7.$$arity = 0);
    
    Opal.defn(self, '$parameters', TMP_Proc_parameters_8 = function $$parameters() {
      var self = this;

      
      if (self.$$is_curried) {
        return [["rest"]];
      } else if (self.$$parameters) {
        if (self.$$is_lambda) {
          return self.$$parameters;
        } else {
          var result = [], i, length;

          for (i = 0, length = self.$$parameters.length; i < length; i++) {
            var parameter = self.$$parameters[i];

            if (parameter[0] === 'req') {
              // required arguments always have name
              parameter = ['opt', parameter[1]];
            }

            result.push(parameter);
          }

          return result;
        }
      } else {
        return [];
      }
    
    }, TMP_Proc_parameters_8.$$arity = 0);
    
    Opal.defn(self, '$curry', TMP_Proc_curry_9 = function $$curry(arity) {
      var self = this;

      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](arity, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    
    }, TMP_Proc_curry_9.$$arity = -1);
    
    Opal.defn(self, '$dup', TMP_Proc_dup_10 = function $$dup() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    }, TMP_Proc_dup_10.$$arity = 0);
    return Opal.alias(self, "clone", "dup");
  })($nesting[0], Function, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/method"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$arity', '$new', '$class', '$join', '$source_location', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Method_initialize_1, TMP_Method_arity_2, TMP_Method_parameters_3, TMP_Method_source_location_4, TMP_Method_comments_5, TMP_Method_call_6, TMP_Method_unbind_7, TMP_Method_to_proc_8, TMP_Method_inspect_9;

    def.method = def.receiver = def.owner = def.name = nil;
    
    self.$attr_reader("owner", "receiver", "name");
    
    Opal.defn(self, '$initialize', TMP_Method_initialize_1 = function $$initialize(receiver, owner, method, name) {
      var self = this;

      
      self.receiver = receiver;
      self.owner = owner;
      self.name = name;
      return (self.method = method);
    }, TMP_Method_initialize_1.$$arity = 4);
    
    Opal.defn(self, '$arity', TMP_Method_arity_2 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, TMP_Method_arity_2.$$arity = 0);
    
    Opal.defn(self, '$parameters', TMP_Method_parameters_3 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, TMP_Method_parameters_3.$$arity = 0);
    
    Opal.defn(self, '$source_location', TMP_Method_source_location_4 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, TMP_Method_source_location_4.$$arity = 0);
    
    Opal.defn(self, '$comments', TMP_Method_comments_5 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, TMP_Method_comments_5.$$arity = 0);
    
    Opal.defn(self, '$call', TMP_Method_call_6 = function $$call($a_rest) {
      var self = this, args, $iter = TMP_Method_call_6.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Method_call_6.$$p = null;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    
    }, TMP_Method_call_6.$$arity = -1);
    Opal.alias(self, "[]", "call");
    
    Opal.defn(self, '$unbind', TMP_Method_unbind_7 = function $$unbind() {
      var self = this;

      return Opal.const_get_relative($nesting, 'UnboundMethod').$new(self.receiver.$class(), self.owner, self.method, self.name)
    }, TMP_Method_unbind_7.$$arity = 0);
    
    Opal.defn(self, '$to_proc', TMP_Method_to_proc_8 = function $$to_proc() {
      var self = this;

      
      var proc = self.$call.bind(self);
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      return proc;
    
    }, TMP_Method_to_proc_8.$$arity = 0);
    return (Opal.defn(self, '$inspect', TMP_Method_inspect_9 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.receiver.$class()) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, TMP_Method_inspect_9.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_UnboundMethod_initialize_10, TMP_UnboundMethod_arity_11, TMP_UnboundMethod_parameters_12, TMP_UnboundMethod_source_location_13, TMP_UnboundMethod_comments_14, TMP_UnboundMethod_bind_15, TMP_UnboundMethod_inspect_16;

    def.method = def.owner = def.name = def.source = nil;
    
    self.$attr_reader("source", "owner", "name");
    
    Opal.defn(self, '$initialize', TMP_UnboundMethod_initialize_10 = function $$initialize(source, owner, method, name) {
      var self = this;

      
      self.source = source;
      self.owner = owner;
      self.method = method;
      return (self.name = name);
    }, TMP_UnboundMethod_initialize_10.$$arity = 4);
    
    Opal.defn(self, '$arity', TMP_UnboundMethod_arity_11 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, TMP_UnboundMethod_arity_11.$$arity = 0);
    
    Opal.defn(self, '$parameters', TMP_UnboundMethod_parameters_12 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, TMP_UnboundMethod_parameters_12.$$arity = 0);
    
    Opal.defn(self, '$source_location', TMP_UnboundMethod_source_location_13 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, TMP_UnboundMethod_source_location_13.$$arity = 0);
    
    Opal.defn(self, '$comments', TMP_UnboundMethod_comments_14 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, TMP_UnboundMethod_comments_14.$$arity = 0);
    
    Opal.defn(self, '$bind', TMP_UnboundMethod_bind_15 = function $$bind(object) {
      var self = this;

      
      if (self.owner.$$is_module || Opal.is_a(object, self.owner)) {
        return Opal.const_get_relative($nesting, 'Method').$new(object, self.owner, self.method, self.name);
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "can't bind singleton method to a different class (expected " + (object) + ".kind_of?(" + (self.owner) + " to be true)");
      }
    
    }, TMP_UnboundMethod_bind_15.$$arity = 1);
    return (Opal.defn(self, '$inspect', TMP_UnboundMethod_inspect_16 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.source) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, TMP_UnboundMethod_inspect_16.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/variables"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  
  $gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = ($gvars["\""] = Opal.loaded_features);
  $gvars.LOAD_PATH = ($gvars[":"] = []);
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.const_set($nesting[0], 'ARGV', []);
  Opal.const_set($nesting[0], 'ARGF', Opal.const_get_relative($nesting, 'Object').$new());
  Opal.const_set($nesting[0], 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return ($gvars.SAFE = 0);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base, $parent_nesting) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'REGEXP_START', (function() {if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "^"
      } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'REGEXP_END', (function() {if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "$"
      } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'INLINE_IDENTIFIER_REGEXP', Opal.const_get_relative($nesting, 'Regexp').$new("" + "[^" + (Opal.const_get_relative($nesting, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + (Opal.const_get_relative($nesting, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));
    Opal.const_set($nesting[0], 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'CONST_NAME_REGEXP', Opal.const_get_relative($nesting, 'Regexp').$new("" + (Opal.const_get_relative($nesting, 'REGEXP_START')) + "(::)?[A-Z][^" + (Opal.const_get_relative($nesting, 'FORBIDDEN_CONST_NAME_CHARS')) + "]*" + (Opal.const_get_relative($nesting, 'REGEXP_END'))));
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["opal/mini"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("corelib/nil");
  self.$require("corelib/boolean");
  self.$require("corelib/string");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/hash");
  self.$require("corelib/number");
  self.$require("corelib/range");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/regexp");
  self.$require("corelib/variables");
  return self.$require("opal/regexp_anchors");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/string/inheritance"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$class', '$clone', '$respond_to?', '$==', '$inspect', '$+', '$*', '$map', '$split', '$enum_for', '$each_line', '$to_a', '$%', '$-']);
  
  self.$require("corelib/string");
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_inherited_1;

    return Opal.defs(self, '$inherited', TMP_String_inherited_1 = function $$inherited(klass) {
      var self = this, replace = nil;

      
      replace = Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'String'), 'Wrapper'));
      
      klass.$$proto         = replace.$$proto;
      klass.$$proto.$$class = klass;
      klass.$$alloc         = replace.$$alloc;
      klass.$$parent        = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'String'), 'Wrapper');

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
    ;
    }, TMP_String_inherited_1.$$arity = 1)
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Wrapper_allocate_2, TMP_Wrapper_new_3, TMP_Wrapper_$$_4, TMP_Wrapper_initialize_5, TMP_Wrapper_method_missing_6, TMP_Wrapper_initialize_copy_7, TMP_Wrapper_respond_to$q_8, TMP_Wrapper_$eq$eq_9, TMP_Wrapper_to_s_10, TMP_Wrapper_inspect_11, TMP_Wrapper_$_12, TMP_Wrapper_$_13, TMP_Wrapper_split_15, TMP_Wrapper_replace_16, TMP_Wrapper_each_line_17, TMP_Wrapper_lines_19, TMP_Wrapper_$_20, TMP_Wrapper_instance_variables_21;

    def.literal = nil;
    
    def.$$is_string = true;
    Opal.defs(self, '$allocate', TMP_Wrapper_allocate_2 = function $$allocate(string) {
      var self = this, $iter = TMP_Wrapper_allocate_2.$$p, $yield = $iter || nil, obj = nil;

      if (string == null) {
        string = "";
      }
      if ($iter) TMP_Wrapper_allocate_2.$$p = null;
      
      obj = $send(self, Opal.find_super_dispatcher(self, 'allocate', TMP_Wrapper_allocate_2, false, $Wrapper), [], null);
      obj.literal = string;
      return obj;
    }, TMP_Wrapper_allocate_2.$$arity = -1);
    Opal.defs(self, '$new', TMP_Wrapper_new_3 = function($a_rest) {
      var self = this, args, $iter = TMP_Wrapper_new_3.$$p, block = $iter || nil, obj = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Wrapper_new_3.$$p = null;
      
      obj = self.$allocate();
      $send(obj, 'initialize', Opal.to_a(args), block.$to_proc());
      return obj;
    }, TMP_Wrapper_new_3.$$arity = -1);
    Opal.defs(self, '$[]', TMP_Wrapper_$$_4 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$allocate(objects)
    }, TMP_Wrapper_$$_4.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Wrapper_initialize_5 = function $$initialize(string) {
      var self = this;

      if (string == null) {
        string = "";
      }
      return (self.literal = string)
    }, TMP_Wrapper_initialize_5.$$arity = -1);
    
    Opal.defn(self, '$method_missing', TMP_Wrapper_method_missing_6 = function $$method_missing($a_rest) {
      var self = this, args, $iter = TMP_Wrapper_method_missing_6.$$p, block = $iter || nil, result = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Wrapper_method_missing_6.$$p = null;
      
      result = $send(self.literal, '__send__', Opal.to_a(args), block.$to_proc());
      if ($truthy(result.$$is_string != null)) {
        if ($truthy(result == self.literal)) {
          return self
          } else {
          return self.$class().$allocate(result)
        }
        } else {
        return result
      };
    }, TMP_Wrapper_method_missing_6.$$arity = -1);
    
    Opal.defn(self, '$initialize_copy', TMP_Wrapper_initialize_copy_7 = function $$initialize_copy(other) {
      var self = this;

      return (self.literal = (other.literal).$clone())
    }, TMP_Wrapper_initialize_copy_7.$$arity = 1);
    
    Opal.defn(self, '$respond_to?', TMP_Wrapper_respond_to$q_8 = function(name, $a_rest) {
      var $b, self = this, $iter = TMP_Wrapper_respond_to$q_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Wrapper_respond_to$q_8.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return ($truthy($b = $send(self, Opal.find_super_dispatcher(self, 'respond_to?', TMP_Wrapper_respond_to$q_8, false), $zuper, $iter)) ? $b : self.literal['$respond_to?'](name))
    }, TMP_Wrapper_respond_to$q_8.$$arity = -2);
    
    Opal.defn(self, '$==', TMP_Wrapper_$eq$eq_9 = function(other) {
      var self = this;

      return self.literal['$=='](other)
    }, TMP_Wrapper_$eq$eq_9.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    
    Opal.defn(self, '$to_s', TMP_Wrapper_to_s_10 = function $$to_s() {
      var self = this;

      return self.literal
    }, TMP_Wrapper_to_s_10.$$arity = 0);
    Opal.alias(self, "to_str", "to_s");
    
    Opal.defn(self, '$inspect', TMP_Wrapper_inspect_11 = function $$inspect() {
      var self = this;

      return self.literal.$inspect()
    }, TMP_Wrapper_inspect_11.$$arity = 0);
    
    Opal.defn(self, '$+', TMP_Wrapper_$_12 = function(other) {
      var self = this;

      return $rb_plus(self.literal, other)
    }, TMP_Wrapper_$_12.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Wrapper_$_13 = function(other) {
      var self = this;

      
      var result = $rb_times(self.literal, other);

      if (result.$$is_string) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    
    }, TMP_Wrapper_$_13.$$arity = 1);
    
    Opal.defn(self, '$split', TMP_Wrapper_split_15 = function $$split(pattern, limit) {
      var TMP_14, self = this;

      return $send(self.literal.$split(pattern, limit), 'map', [], (TMP_14 = function(str){var self = TMP_14.$$s || this;
if (str == null) str = nil;
      return self.$class().$allocate(str)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))
    }, TMP_Wrapper_split_15.$$arity = -1);
    
    Opal.defn(self, '$replace', TMP_Wrapper_replace_16 = function $$replace(string) {
      var self = this;

      return (self.literal = string)
    }, TMP_Wrapper_replace_16.$$arity = 1);
    
    Opal.defn(self, '$each_line', TMP_Wrapper_each_line_17 = function $$each_line(separator) {
      var TMP_18, self = this, $iter = TMP_Wrapper_each_line_17.$$p, $yield = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ($iter) TMP_Wrapper_each_line_17.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      return $send(self.literal, 'each_line', [separator], (TMP_18 = function(str){var self = TMP_18.$$s || this;
if (str == null) str = nil;
      return Opal.yield1($yield, self.$class().$allocate(str));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18));
    }, TMP_Wrapper_each_line_17.$$arity = -1);
    
    Opal.defn(self, '$lines', TMP_Wrapper_lines_19 = function $$lines(separator) {
      var self = this, $iter = TMP_Wrapper_lines_19.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ($iter) TMP_Wrapper_lines_19.$$p = null;
      
      e = $send(self, 'each_line', [separator], block.$to_proc());
      if ($truthy(block)) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_Wrapper_lines_19.$$arity = -1);
    
    Opal.defn(self, '$%', TMP_Wrapper_$_20 = function(data) {
      var self = this;

      return self.literal['$%'](data)
    }, TMP_Wrapper_$_20.$$arity = 1);
    return (Opal.defn(self, '$instance_variables', TMP_Wrapper_instance_variables_21 = function $$instance_variables() {
      var self = this, $iter = TMP_Wrapper_instance_variables_21.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Wrapper_instance_variables_21.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $rb_minus($send(self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_Wrapper_instance_variables_21, false), $zuper, $iter), ["@literal"])
    }, TMP_Wrapper_instance_variables_21.$$arity = 0), nil) && 'instance_variables';
  })(Opal.const_get_relative($nesting, 'String'), null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/string/encoding"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var TMP_13, TMP_16, TMP_19, TMP_22, TMP_25, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$upcase', '$constants', '$const_get', '$===', '$==', '$name', '$include?', '$names', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$force_encoding', '$dup', '$coerce_to!', '$find', '$nil?', '$getbyte']);
  
  self.$require("corelib/string");
  (function($base, $super, $parent_nesting) {
    function $Encoding(){};
    var self = $Encoding = $klass($base, $super, 'Encoding', $Encoding);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Encoding_register_1, TMP_Encoding_find_4, TMP_Encoding_initialize_5, TMP_Encoding_ascii_compatible$q_6, TMP_Encoding_dummy$q_7, TMP_Encoding_to_s_8, TMP_Encoding_inspect_9, TMP_Encoding_each_byte_10, TMP_Encoding_getbyte_11, TMP_Encoding_bytesize_12;

    def.ascii = def.dummy = def.name = nil;
    
    Opal.defs(self, '$register', TMP_Encoding_register_1 = function $$register(name, options) {
      var $a, TMP_2, self = this, $iter = TMP_Encoding_register_1.$$p, block = $iter || nil, names = nil, encoding = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Encoding_register_1.$$p = null;
      
      names = $rb_plus([name], ($truthy($a = options['$[]']("aliases")) ? $a : []));
      encoding = $send(Opal.const_get_relative($nesting, 'Class'), 'new', [self], block.$to_proc()).$new(name, names, ($truthy($a = options['$[]']("ascii")) ? $a : false), ($truthy($a = options['$[]']("dummy")) ? $a : false));
      return $send(names, 'each', [], (TMP_2 = function(name){var self = TMP_2.$$s || this;
if (name == null) name = nil;
      return self.$const_set(name.$sub("-", "_"), encoding)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
    }, TMP_Encoding_register_1.$$arity = -2);
    Opal.defs(self, '$find', TMP_Encoding_find_4 = function $$find(name) {try {

      var TMP_3, self = this, upcase = nil;

      
      upcase = name.$upcase();
      $send((Opal.Module.$$nesting = $nesting, self.$constants()), 'each', [], (TMP_3 = function(const$){var self = TMP_3.$$s || this, $a, encoding = nil;
if (const$ == null) const$ = nil;
      
        encoding = self.$const_get(const$);
        if ($truthy(Opal.const_get_relative($nesting, 'Encoding')['$==='](encoding))) {
          } else {
          return nil;
        };
        if ($truthy(($truthy($a = encoding.$name()['$=='](upcase)) ? $a : encoding.$names()['$include?'](upcase)))) {
          Opal.ret(encoding)
          } else {
          return nil
        };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
      return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "unknown encoding name - " + (name));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Encoding_find_4.$$arity = 1);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("default_external")
    })(Opal.get_singleton_class(self), $nesting);
    self.$attr_reader("name", "names");
    
    Opal.defn(self, '$initialize', TMP_Encoding_initialize_5 = function $$initialize(name, names, ascii, dummy) {
      var self = this;

      
      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return (self.dummy = dummy);
    }, TMP_Encoding_initialize_5.$$arity = 4);
    
    Opal.defn(self, '$ascii_compatible?', TMP_Encoding_ascii_compatible$q_6 = function() {
      var self = this;

      return self.ascii
    }, TMP_Encoding_ascii_compatible$q_6.$$arity = 0);
    
    Opal.defn(self, '$dummy?', TMP_Encoding_dummy$q_7 = function() {
      var self = this;

      return self.dummy
    }, TMP_Encoding_dummy$q_7.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Encoding_to_s_8 = function $$to_s() {
      var self = this;

      return self.name
    }, TMP_Encoding_to_s_8.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Encoding_inspect_9 = function $$inspect() {
      var self = this;

      return "" + "#<Encoding:" + (self.name) + ((function() {if ($truthy(self.dummy)) {
        return " (dummy)"
        } else {
        return nil
      }; return nil; })()) + ">"
    }, TMP_Encoding_inspect_9.$$arity = 0);
    
    Opal.defn(self, '$each_byte', TMP_Encoding_each_byte_10 = function $$each_byte($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
    }, TMP_Encoding_each_byte_10.$$arity = -1);
    
    Opal.defn(self, '$getbyte', TMP_Encoding_getbyte_11 = function $$getbyte($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
    }, TMP_Encoding_getbyte_11.$$arity = -1);
    
    Opal.defn(self, '$bytesize', TMP_Encoding_bytesize_12 = function $$bytesize($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
    }, TMP_Encoding_bytesize_12.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      function $EncodingError(){};
      var self = $EncodingError = $klass($base, $super, 'EncodingError', $EncodingError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    return (function($base, $super, $parent_nesting) {
      function $CompatibilityError(){};
      var self = $CompatibilityError = $klass($base, $super, 'CompatibilityError', $CompatibilityError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'EncodingError'), $nesting);
  })($nesting[0], null, $nesting);
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true})], (TMP_13 = function(){var self = TMP_13.$$s || this, TMP_each_byte_14, TMP_bytesize_15;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_14 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_14.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_14.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        if (code <= 0x7f) {
          Opal.yield1(block, code);
        }
        else {
          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');

          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {
            Opal.yield1(block, parseInt(encoded[j], 16));
          }
        }
      }
    
    }, TMP_each_byte_14.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_15 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_15.$$arity = 1), nil) && 'bytesize';}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13));
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["UTF-16LE"], (TMP_16 = function(){var self = TMP_16.$$s || this, TMP_each_byte_17, TMP_bytesize_18;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_17 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_17.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_17.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    
    }, TMP_each_byte_17.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_18 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_18.$$arity = 1), nil) && 'bytesize';}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16));
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["UTF-16BE"], (TMP_19 = function(){var self = TMP_19.$$s || this, TMP_each_byte_20, TMP_bytesize_21;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_20 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_20.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_20.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code >> 8);
        Opal.yield1(block, code & 0xff);
      }
    
    }, TMP_each_byte_20.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_21 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_21.$$arity = 1), nil) && 'bytesize';}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19));
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["UTF-32LE"], (TMP_22 = function(){var self = TMP_22.$$s || this, TMP_each_byte_23, TMP_bytesize_24;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_23 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_23.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_23.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    
    }, TMP_each_byte_23.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_24 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_24.$$arity = 1), nil) && 'bytesize';}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22));
  $send(Opal.const_get_relative($nesting, 'Encoding'), 'register', ["ASCII-8BIT", $hash2(["aliases", "ascii"], {"aliases": ["BINARY"], "ascii": true})], (TMP_25 = function(){var self = TMP_25.$$s || this, TMP_each_byte_26, TMP_bytesize_27;

  
    
    Opal.def(self, '$each_byte', TMP_each_byte_26 = function $$each_byte(string) {
      var self = this, $iter = TMP_each_byte_26.$$p, block = $iter || nil;

      if ($iter) TMP_each_byte_26.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        Opal.yield1(block, string.charCodeAt(i) & 0xff);
      }
    
    }, TMP_each_byte_26.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_bytesize_27 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, TMP_bytesize_27.$$arity = 1), nil) && 'bytesize';}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25));
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_bytes_28, TMP_String_bytesize_29, TMP_String_each_byte_30, TMP_String_encode_31, TMP_String_encoding_32, TMP_String_force_encoding_33, TMP_String_getbyte_34, TMP_String_valid_encoding$q_35;

    def.encoding = nil;
    
    String.prototype.encoding = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Encoding'), 'UTF_16LE');
    
    Opal.defn(self, '$bytes', TMP_String_bytes_28 = function $$bytes() {
      var self = this;

      return self.$each_byte().$to_a()
    }, TMP_String_bytes_28.$$arity = 0);
    
    Opal.defn(self, '$bytesize', TMP_String_bytesize_29 = function $$bytesize() {
      var self = this;

      return self.encoding.$bytesize(self)
    }, TMP_String_bytesize_29.$$arity = 0);
    
    Opal.defn(self, '$each_byte', TMP_String_each_byte_30 = function $$each_byte() {
      var self = this, $iter = TMP_String_each_byte_30.$$p, block = $iter || nil;

      if ($iter) TMP_String_each_byte_30.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_byte")
      };
      $send(self.encoding, 'each_byte', [self], block.$to_proc());
      return self;
    }, TMP_String_each_byte_30.$$arity = 0);
    
    Opal.defn(self, '$encode', TMP_String_encode_31 = function $$encode(encoding) {
      var self = this;

      return self.$dup().$force_encoding(encoding)
    }, TMP_String_encode_31.$$arity = 1);
    
    Opal.defn(self, '$encoding', TMP_String_encoding_32 = function $$encoding() {
      var self = this;

      return self.encoding
    }, TMP_String_encoding_32.$$arity = 0);
    
    Opal.defn(self, '$force_encoding', TMP_String_force_encoding_33 = function $$force_encoding(encoding) {
      var self = this;

      
      
      if (encoding === self.encoding) {
        return self;
      }
    ;
      encoding = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](encoding, Opal.const_get_relative($nesting, 'String'), "to_s");
      encoding = Opal.const_get_relative($nesting, 'Encoding').$find(encoding);
      if (encoding['$=='](self.encoding)) {
        return self};
      if ($truthy(encoding['$nil?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "unknown encoding name - " + (encoding))};
      
      var result = new String(self);
      result.encoding = encoding;

      return result;
    ;
    }, TMP_String_force_encoding_33.$$arity = 1);
    
    Opal.defn(self, '$getbyte', TMP_String_getbyte_34 = function $$getbyte(idx) {
      var self = this;

      return self.encoding.$getbyte(self, idx)
    }, TMP_String_getbyte_34.$$arity = 1);
    return (Opal.defn(self, '$valid_encoding?', TMP_String_valid_encoding$q_35 = function() {
      var self = this;

      return true
    }, TMP_String_valid_encoding$q_35.$$arity = 0), nil) && 'valid_encoding?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/math"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$raise', '$Float', '$type_error', '$Integer', '$module_function', '$checked', '$float!', '$===', '$gamma', '$-', '$integer!', '$/', '$infinite?']);
  return (function($base, $parent_nesting) {
    var $Math, self = $Math = $module($base, 'Math');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Math_checked_1, TMP_Math_float$B_2, TMP_Math_integer$B_3, TMP_Math_acos_4, TMP_Math_acosh_5, TMP_Math_asin_6, TMP_Math_asinh_7, TMP_Math_atan_8, TMP_Math_atan2_9, TMP_Math_atanh_10, TMP_Math_cbrt_11, TMP_Math_cos_12, TMP_Math_cosh_13, TMP_Math_erf_14, TMP_Math_erfc_15, TMP_Math_exp_16, TMP_Math_frexp_17, TMP_Math_gamma_18, TMP_Math_hypot_19, TMP_Math_ldexp_20, TMP_Math_lgamma_21, TMP_Math_log_22, TMP_Math_log10_23, TMP_Math_log2_24, TMP_Math_sin_25, TMP_Math_sinh_26, TMP_Math_sqrt_27, TMP_Math_tan_28, TMP_Math_tanh_29;

    
    Opal.const_set($nesting[0], 'E', Math.E);
    Opal.const_set($nesting[0], 'PI', Math.PI);
    Opal.const_set($nesting[0], 'DomainError', Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'StandardError')));
    Opal.defs(self, '$checked', TMP_Math_checked_1 = function $$checked(method, $a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        self.$raise(Opal.const_get_relative($nesting, 'DomainError'), "" + "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    
    }, TMP_Math_checked_1.$$arity = -2);
    Opal.defs(self, '$float!', TMP_Math_float$B_2 = function(value) {
      var self = this;

      
      try {
        return self.$Float(value)
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {
          try {
            return self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(value, Opal.const_get_relative($nesting, 'Float')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_Math_float$B_2.$$arity = 1);
    Opal.defs(self, '$integer!', TMP_Math_integer$B_3 = function(value) {
      var self = this;

      
      try {
        return self.$Integer(value)
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {
          try {
            return self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(value, Opal.const_get_relative($nesting, 'Integer')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_Math_integer$B_3.$$arity = 1);
    self.$module_function();
    
    Opal.defn(self, '$acos', TMP_Math_acos_4 = function $$acos(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("acos", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_acos_4.$$arity = 1);
    if ($truthy((typeof(Math.acosh) !== "undefined"))) {
      } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };
    
    Opal.defn(self, '$acosh', TMP_Math_acosh_5 = function $$acosh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("acosh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_acosh_5.$$arity = 1);
    
    Opal.defn(self, '$asin', TMP_Math_asin_6 = function $$asin(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("asin", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_asin_6.$$arity = 1);
    if ($truthy((typeof(Math.asinh) !== "undefined"))) {
      } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    
    };
    
    Opal.defn(self, '$asinh', TMP_Math_asinh_7 = function $$asinh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("asinh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_asinh_7.$$arity = 1);
    
    Opal.defn(self, '$atan', TMP_Math_atan_8 = function $$atan(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("atan", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_atan_8.$$arity = 1);
    
    Opal.defn(self, '$atan2', TMP_Math_atan2_9 = function $$atan2(y, x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("atan2", Opal.const_get_relative($nesting, 'Math')['$float!'](y), Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_atan2_9.$$arity = 2);
    if ($truthy((typeof(Math.atanh) !== "undefined"))) {
      } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };
    
    Opal.defn(self, '$atanh', TMP_Math_atanh_10 = function $$atanh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("atanh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_atanh_10.$$arity = 1);
    if ($truthy((typeof(Math.cbrt) !== "undefined"))) {
      } else {
      
      Math.cbrt = function(x) {
        if (x == 0) {
          return 0;
        }

        if (x < 0) {
          return -Math.cbrt(-x);
        }

        var r  = x,
            ex = 0;

        while (r < 0.125) {
          r *= 8;
          ex--;
        }

        while (r > 1.0) {
          r *= 0.125;
          ex++;
        }

        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;

        while (ex < 0) {
          r *= 0.5;
          ex++;
        }

        while (ex > 0) {
          r *= 2;
          ex--;
        }

        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);

        return r;
      }
    
    };
    
    Opal.defn(self, '$cbrt', TMP_Math_cbrt_11 = function $$cbrt(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("cbrt", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_cbrt_11.$$arity = 1);
    
    Opal.defn(self, '$cos', TMP_Math_cos_12 = function $$cos(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("cos", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_cos_12.$$arity = 1);
    if ($truthy((typeof(Math.cosh) !== "undefined"))) {
      } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.defn(self, '$cosh', TMP_Math_cosh_13 = function $$cosh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("cosh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_cosh_13.$$arity = 1);
    if ($truthy((typeof(Math.erf) !== "undefined"))) {
      } else {
      
      Math.erf = function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      }
    
    };
    
    Opal.defn(self, '$erf', TMP_Math_erf_14 = function $$erf(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("erf", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_erf_14.$$arity = 1);
    if ($truthy((typeof(Math.erfc) !== "undefined"))) {
      } else {
      
      Math.erfc = function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      }
    
    };
    
    Opal.defn(self, '$erfc', TMP_Math_erfc_15 = function $$erfc(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("erfc", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_erfc_15.$$arity = 1);
    
    Opal.defn(self, '$exp', TMP_Math_exp_16 = function $$exp(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("exp", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_exp_16.$$arity = 1);
    
    Opal.defn(self, '$frexp', TMP_Math_frexp_17 = function $$frexp(x) {
      var self = this;

      
      x = Opal.const_get_relative($nesting, 'Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    ;
    }, TMP_Math_frexp_17.$$arity = 1);
    
    Opal.defn(self, '$gamma', TMP_Math_gamma_18 = function $$gamma(n) {
      var self = this;

      
      n = Opal.const_get_relative($nesting, 'Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        self.$raise(Opal.const_get_relative($nesting, 'DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if (Opal.const_get_relative($nesting, 'Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * Opal.const_get_relative($nesting, 'Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    ;
    }, TMP_Math_gamma_18.$$arity = 1);
    if ($truthy((typeof(Math.hypot) !== "undefined"))) {
      } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    
    };
    
    Opal.defn(self, '$hypot', TMP_Math_hypot_19 = function $$hypot(x, y) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("hypot", Opal.const_get_relative($nesting, 'Math')['$float!'](x), Opal.const_get_relative($nesting, 'Math')['$float!'](y))
    }, TMP_Math_hypot_19.$$arity = 2);
    
    Opal.defn(self, '$ldexp', TMP_Math_ldexp_20 = function $$ldexp(mantissa, exponent) {
      var self = this;

      
      mantissa = Opal.const_get_relative($nesting, 'Math')['$float!'](mantissa);
      exponent = Opal.const_get_relative($nesting, 'Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    }, TMP_Math_ldexp_20.$$arity = 2);
    
    Opal.defn(self, '$lgamma', TMP_Math_lgamma_21 = function $$lgamma(n) {
      var self = this;

      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs(Opal.const_get_relative($nesting, 'Math').$gamma(n))), Opal.const_get_relative($nesting, 'Math').$gamma(n) < 0 ? -1 : 1];
      }
    
    }, TMP_Math_lgamma_21.$$arity = 1);
    
    Opal.defn(self, '$log', TMP_Math_log_22 = function $$log(x, base) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](x))) {
        self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(x, Opal.const_get_relative($nesting, 'Float')))};
      if ($truthy(base == null)) {
        return Opal.const_get_relative($nesting, 'Math').$checked("log", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
        } else {
        
        if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](base))) {
          self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(base, Opal.const_get_relative($nesting, 'Float')))};
        return $rb_divide(Opal.const_get_relative($nesting, 'Math').$checked("log", Opal.const_get_relative($nesting, 'Math')['$float!'](x)), Opal.const_get_relative($nesting, 'Math').$checked("log", Opal.const_get_relative($nesting, 'Math')['$float!'](base)));
      };
    }, TMP_Math_log_22.$$arity = -2);
    if ($truthy((typeof(Math.log10) !== "undefined"))) {
      } else {
      
      Math.log10 = function(x) {
        return Math.log(x) / Math.LN10;
      }
    
    };
    
    Opal.defn(self, '$log10', TMP_Math_log10_23 = function $$log10(x) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](x))) {
        self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(x, Opal.const_get_relative($nesting, 'Float')))};
      return Opal.const_get_relative($nesting, 'Math').$checked("log10", Opal.const_get_relative($nesting, 'Math')['$float!'](x));
    }, TMP_Math_log10_23.$$arity = 1);
    if ($truthy((typeof(Math.log2) !== "undefined"))) {
      } else {
      
      Math.log2 = function(x) {
        return Math.log(x) / Math.LN2;
      }
    
    };
    
    Opal.defn(self, '$log2', TMP_Math_log2_24 = function $$log2(x) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](x))) {
        self.$raise(Opal.const_get_relative($nesting, 'Opal').$type_error(x, Opal.const_get_relative($nesting, 'Float')))};
      return Opal.const_get_relative($nesting, 'Math').$checked("log2", Opal.const_get_relative($nesting, 'Math')['$float!'](x));
    }, TMP_Math_log2_24.$$arity = 1);
    
    Opal.defn(self, '$sin', TMP_Math_sin_25 = function $$sin(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("sin", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_sin_25.$$arity = 1);
    if ($truthy((typeof(Math.sinh) !== "undefined"))) {
      } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.defn(self, '$sinh', TMP_Math_sinh_26 = function $$sinh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("sinh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_sinh_26.$$arity = 1);
    
    Opal.defn(self, '$sqrt', TMP_Math_sqrt_27 = function $$sqrt(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("sqrt", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_sqrt_27.$$arity = 1);
    
    Opal.defn(self, '$tan', TMP_Math_tan_28 = function $$tan(x) {
      var self = this;

      
      x = Opal.const_get_relative($nesting, 'Math')['$float!'](x);
      if ($truthy(x['$infinite?']())) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'NAN')};
      return Opal.const_get_relative($nesting, 'Math').$checked("tan", Opal.const_get_relative($nesting, 'Math')['$float!'](x));
    }, TMP_Math_tan_28.$$arity = 1);
    if ($truthy((typeof(Math.tanh) !== "undefined"))) {
      } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };
    
    Opal.defn(self, '$tanh', TMP_Math_tanh_29 = function $$tanh(x) {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$checked("tanh", Opal.const_get_relative($nesting, 'Math')['$float!'](x))
    }, TMP_Math_tanh_29.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/complex"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$===', '$real?', '$raise', '$new', '$*', '$cos', '$sin', '$attr_reader', '$class', '$==', '$real', '$imag', '$Complex', '$-@', '$+', '$__coerced__', '$-', '$nan?', '$/', '$conj', '$abs2', '$quo', '$polar', '$exp', '$log', '$>', '$!=', '$divmod', '$**', '$hypot', '$atan2', '$lcm', '$denominator', '$to_s', '$numerator', '$abs', '$arg', '$rationalize', '$to_f', '$to_i', '$to_r', '$inspect', '$positive?', '$zero?', '$infinite?']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Complex_rect_1, TMP_Complex_polar_2, TMP_Complex_initialize_3, TMP_Complex_coerce_4, TMP_Complex_$eq$eq_5, TMP_Complex_$$_6, TMP_Complex_$_7, TMP_Complex_$_8, TMP_Complex_$_9, TMP_Complex_$_10, TMP_Complex_$$_11, TMP_Complex_abs_12, TMP_Complex_abs2_13, TMP_Complex_angle_14, TMP_Complex_conj_15, TMP_Complex_denominator_16, TMP_Complex_eql$q_17, TMP_Complex_fdiv_18, TMP_Complex_hash_19, TMP_Complex_inspect_20, TMP_Complex_numerator_21, TMP_Complex_polar_22, TMP_Complex_rationalize_23, TMP_Complex_real$q_24, TMP_Complex_rect_25, TMP_Complex_to_f_26, TMP_Complex_to_i_27, TMP_Complex_to_r_28, TMP_Complex_to_s_29;

    def.real = def.imag = nil;
    
    Opal.defs(self, '$rect', TMP_Complex_rect_1 = function $$rect(real, imag) {
      var $a, $b, $c, self = this;

      if (imag == null) {
        imag = 0;
      }
      
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = Opal.const_get_relative($nesting, 'Numeric')['$==='](real)) ? real['$real?']() : $c)) ? Opal.const_get_relative($nesting, 'Numeric')['$==='](imag) : $b)) ? imag['$real?']() : $a))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not a real")
      };
      return self.$new(real, imag);
    }, TMP_Complex_rect_1.$$arity = -2);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return Opal.alias(self, "rectangular", "rect")
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$polar', TMP_Complex_polar_2 = function $$polar(r, theta) {
      var $a, $b, $c, self = this;

      if (theta == null) {
        theta = 0;
      }
      
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = Opal.const_get_relative($nesting, 'Numeric')['$==='](r)) ? r['$real?']() : $c)) ? Opal.const_get_relative($nesting, 'Numeric')['$==='](theta) : $b)) ? theta['$real?']() : $a))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not a real")
      };
      return self.$new($rb_times(r, Opal.const_get_relative($nesting, 'Math').$cos(theta)), $rb_times(r, Opal.const_get_relative($nesting, 'Math').$sin(theta)));
    }, TMP_Complex_polar_2.$$arity = -2);
    self.$attr_reader("real", "imag");
    
    Opal.defn(self, '$initialize', TMP_Complex_initialize_3 = function $$initialize(real, imag) {
      var self = this;

      if (imag == null) {
        imag = 0;
      }
      
      self.real = real;
      return (self.imag = imag);
    }, TMP_Complex_initialize_3.$$arity = -2);
    
    Opal.defn(self, '$coerce', TMP_Complex_coerce_4 = function $$coerce(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return [other, self]
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return [Opal.const_get_relative($nesting, 'Complex').$new(other, 0), self]
        } else {
        return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      }
    }, TMP_Complex_coerce_4.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Complex_$eq$eq_5 = function(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return (($a = self.real['$=='](other.$real())) ? self.imag['$=='](other.$imag()) : self.real['$=='](other.$real()))
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return (($a = self.real['$=='](other)) ? self.imag['$=='](0) : self.real['$=='](other))
        } else {
        return other['$=='](self)
      }
    }, TMP_Complex_$eq$eq_5.$$arity = 1);
    
    Opal.defn(self, '$-@', TMP_Complex_$$_6 = function() {
      var self = this;

      return self.$Complex(self.real['$-@'](), self.imag['$-@']())
    }, TMP_Complex_$$_6.$$arity = 0);
    
    Opal.defn(self, '$+', TMP_Complex_$_7 = function(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_plus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("+", other)
      }
    }, TMP_Complex_$_7.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Complex_$_8 = function(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_minus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("-", other)
      }
    }, TMP_Complex_$_8.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Complex_$_9 = function(other) {
      var $a, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
        } else {
        return self.$__coerced__("*", other)
      }
    }, TMP_Complex_$_9.$$arity = 1);
    
    Opal.defn(self, '$/', TMP_Complex_$_10 = function(other) {
      var $a, $b, $c, $d, self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = Opal.const_get_relative($nesting, 'Number')['$==='](self.real)) ? self.real['$nan?']() : $d)) ? $c : ($truthy($d = Opal.const_get_relative($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $d))) ? $b : ($truthy($c = Opal.const_get_relative($nesting, 'Number')['$==='](other.$real())) ? other.$real()['$nan?']() : $c))) ? $a : ($truthy($b = Opal.const_get_relative($nesting, 'Number')['$==='](other.$imag())) ? other.$imag()['$nan?']() : $b)))) {
          return Opal.const_get_relative($nesting, 'Complex').$new(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'NAN'), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'NAN'))
          } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex(self.real.$quo(other), self.imag.$quo(other))
        } else {
        return self.$__coerced__("/", other)
      }
    }, TMP_Complex_$_10.$$arity = 1);
    
    Opal.defn(self, '$**', TMP_Complex_$$_11 = function(other) {
      var $a, $b, $c, $d, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      
      if (other['$=='](0)) {
        return Opal.const_get_relative($nesting, 'Complex').$new(1, 0)};
      if ($truthy(Opal.const_get_relative($nesting, 'Complex')['$==='](other))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = Opal.const_get_relative($nesting, 'Math').$exp($rb_minus($rb_times(ore, Opal.const_get_relative($nesting, 'Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, Opal.const_get_relative($nesting, 'Math').$log(r)));
        return Opal.const_get_relative($nesting, 'Complex').$polar(nr, ntheta);
      } else if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](other))) {
        if ($truthy($rb_gt(other, 0))) {
          
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ($truthy(n['$!='](0))) {
            
            while ($truthy(($d = n.$divmod(2), $c = Opal.to_ary($d), (div = ($c[0] == null ? nil : $c[0])), (mod = ($c[1] == null ? nil : $c[1])), $d, mod['$=='](0)))) {
              
              x = self.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
              n = div;
            };
            z = $rb_times(z, x);
            n = $rb_minus(n, 1);
          };
          return z;
          } else {
          return $rb_divide(Opal.const_get_relative($nesting, 'Rational').$new(1, 1), self)['$**'](other['$-@']())
        }
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Float')['$==='](other)) ? $a : Opal.const_get_relative($nesting, 'Rational')['$==='](other)))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        return Opal.const_get_relative($nesting, 'Complex').$polar(r['$**'](other), $rb_times(theta, other));
        } else {
        return self.$__coerced__("**", other)
      };
    }, TMP_Complex_$$_11.$$arity = 1);
    
    Opal.defn(self, '$abs', TMP_Complex_abs_12 = function $$abs() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$hypot(self.real, self.imag)
    }, TMP_Complex_abs_12.$$arity = 0);
    
    Opal.defn(self, '$abs2', TMP_Complex_abs2_13 = function $$abs2() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag))
    }, TMP_Complex_abs2_13.$$arity = 0);
    
    Opal.defn(self, '$angle', TMP_Complex_angle_14 = function $$angle() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Math').$atan2(self.imag, self.real)
    }, TMP_Complex_angle_14.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.defn(self, '$conj', TMP_Complex_conj_15 = function $$conj() {
      var self = this;

      return self.$Complex(self.real, self.imag['$-@']())
    }, TMP_Complex_conj_15.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.defn(self, '$denominator', TMP_Complex_denominator_16 = function $$denominator() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator())
    }, TMP_Complex_denominator_16.$$arity = 0);
    Opal.alias(self, "divide", "/");
    
    Opal.defn(self, '$eql?', TMP_Complex_eql$q_17 = function(other) {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = Opal.const_get_relative($nesting, 'Complex')['$==='](other)) ? self.real.$class()['$=='](self.imag.$class()) : $b)) ? self['$=='](other) : $a)
    }, TMP_Complex_eql$q_17.$$arity = 1);
    
    Opal.defn(self, '$fdiv', TMP_Complex_fdiv_18 = function $$fdiv(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Numeric')['$==='](other))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    }, TMP_Complex_fdiv_18.$$arity = 1);
    
    Opal.defn(self, '$hash', TMP_Complex_hash_19 = function $$hash() {
      var self = this;

      return "" + "Complex:" + (self.real) + ":" + (self.imag)
    }, TMP_Complex_hash_19.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.defn(self, '$inspect', TMP_Complex_inspect_20 = function $$inspect() {
      var self = this;

      return "" + "(" + (self.$to_s()) + ")"
    }, TMP_Complex_inspect_20.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    
    Opal.udef(self, '$' + "negative?");;
    
    Opal.defn(self, '$numerator', TMP_Complex_numerator_21 = function $$numerator() {
      var self = this, d = nil;

      
      d = self.$denominator();
      return self.$Complex($rb_times(self.real.$numerator(), $rb_divide(d, self.real.$denominator())), $rb_times(self.imag.$numerator(), $rb_divide(d, self.imag.$denominator())));
    }, TMP_Complex_numerator_21.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.defn(self, '$polar', TMP_Complex_polar_22 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, TMP_Complex_polar_22.$$arity = 0);
    
    Opal.udef(self, '$' + "positive?");;
    Opal.alias(self, "quo", "/");
    
    Opal.defn(self, '$rationalize', TMP_Complex_rationalize_23 = function $$rationalize(eps) {
      var self = this;

      
      
      if (arguments.length > 1) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy(self.imag['$!='](0))) {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "can't' convert " + (self) + " into Rational")};
      return self.$real().$rationalize(eps);
    }, TMP_Complex_rationalize_23.$$arity = -1);
    
    Opal.defn(self, '$real?', TMP_Complex_real$q_24 = function() {
      var self = this;

      return false
    }, TMP_Complex_real$q_24.$$arity = 0);
    
    Opal.defn(self, '$rect', TMP_Complex_rect_25 = function $$rect() {
      var self = this;

      return [self.real, self.imag]
    }, TMP_Complex_rect_25.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.defn(self, '$to_f', TMP_Complex_to_f_26 = function $$to_f() {
      var self = this;

      
      if (self.imag['$=='](0)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    }, TMP_Complex_to_f_26.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_Complex_to_i_27 = function $$to_i() {
      var self = this;

      
      if (self.imag['$=='](0)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    }, TMP_Complex_to_i_27.$$arity = 0);
    
    Opal.defn(self, '$to_r', TMP_Complex_to_r_28 = function $$to_r() {
      var self = this;

      
      if (self.imag['$=='](0)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    }, TMP_Complex_to_r_28.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Complex_to_s_29 = function $$to_s() {
      var $a, $b, $c, self = this, result = nil;

      
      result = self.real.$inspect();
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = Opal.const_get_relative($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $c)) ? $b : self.imag['$positive?']())) ? $a : self.imag['$zero?']()))) {
        result = $rb_plus(result, "+")
        } else {
        result = $rb_plus(result, "-")
      };
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Number')['$==='](self.imag)) ? ($truthy($b = self.imag['$nan?']()) ? $b : self.imag['$infinite?']()) : $a))) {
        result = $rb_plus(result, "*")};
      return $rb_plus(result, "i");
    }, TMP_Complex_to_s_29.$$arity = 0);
    return Opal.const_set($nesting[0], 'I', self.$new(0, 1));
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_Complex_30;

    
    Opal.defn(self, '$Complex', TMP_Kernel_Complex_30 = function $$Complex(real, imag) {
      var self = this;

      if (imag == null) {
        imag = nil;
      }
      if ($truthy(imag)) {
        return Opal.const_get_relative($nesting, 'Complex').$new(real, imag)
        } else {
        return Opal.const_get_relative($nesting, 'Complex').$new(real, 0)
      }
    }, TMP_Kernel_Complex_30.$$arity = -2)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/rational"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$to_i', '$==', '$raise', '$<', '$-@', '$new', '$gcd', '$/', '$nil?', '$===', '$reduce', '$to_r', '$equal?', '$!', '$coerce_to!', '$attr_reader', '$to_f', '$numerator', '$denominator', '$<=>', '$-', '$*', '$__coerced__', '$+', '$Rational', '$>', '$**', '$abs', '$ceil', '$with_precision', '$floor', '$to_s', '$<=', '$truncate', '$send', '$convert']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Rational_reduce_1, TMP_Rational_convert_2, TMP_Rational_initialize_3, TMP_Rational_numerator_4, TMP_Rational_denominator_5, TMP_Rational_coerce_6, TMP_Rational_$eq$eq_7, TMP_Rational_$lt$eq$gt_8, TMP_Rational_$_9, TMP_Rational_$_10, TMP_Rational_$_11, TMP_Rational_$_12, TMP_Rational_$$_13, TMP_Rational_abs_14, TMP_Rational_ceil_15, TMP_Rational_floor_16, TMP_Rational_hash_17, TMP_Rational_inspect_18, TMP_Rational_rationalize_19, TMP_Rational_round_20, TMP_Rational_to_f_21, TMP_Rational_to_i_22, TMP_Rational_to_r_23, TMP_Rational_to_s_24, TMP_Rational_truncate_25, TMP_Rational_with_precision_26;

    def.num = def.den = nil;
    
    Opal.defs(self, '$reduce', TMP_Rational_reduce_1 = function $$reduce(num, den) {
      var self = this, gcd = nil;

      
      num = num.$to_i();
      den = den.$to_i();
      if (den['$=='](0)) {
        self.$raise(Opal.const_get_relative($nesting, 'ZeroDivisionError'), "divided by 0")
      } else if ($truthy($rb_lt(den, 0))) {
        
        num = num['$-@']();
        den = den['$-@']();
      } else if (den['$=='](1)) {
        return self.$new(num, den)};
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    }, TMP_Rational_reduce_1.$$arity = 2);
    Opal.defs(self, '$convert', TMP_Rational_convert_2 = function $$convert(num, den) {
      var $a, $b, self = this;

      
      if ($truthy(($truthy($a = num['$nil?']()) ? $a : den['$nil?']()))) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "cannot convert nil into Rational")};
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Integer')['$==='](num)) ? Opal.const_get_relative($nesting, 'Integer')['$==='](den) : $a))) {
        return self.$reduce(num, den)};
      if ($truthy(($truthy($a = ($truthy($b = Opal.const_get_relative($nesting, 'Float')['$==='](num)) ? $b : Opal.const_get_relative($nesting, 'String')['$==='](num))) ? $a : Opal.const_get_relative($nesting, 'Complex')['$==='](num)))) {
        num = num.$to_r()};
      if ($truthy(($truthy($a = ($truthy($b = Opal.const_get_relative($nesting, 'Float')['$==='](den)) ? $b : Opal.const_get_relative($nesting, 'String')['$==='](den))) ? $a : Opal.const_get_relative($nesting, 'Complex')['$==='](den)))) {
        den = den.$to_r()};
      if ($truthy(($truthy($a = den['$equal?'](1)) ? Opal.const_get_relative($nesting, 'Integer')['$==='](num)['$!']() : $a))) {
        return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](num, Opal.const_get_relative($nesting, 'Rational'), "to_r")
      } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Numeric')['$==='](num)) ? Opal.const_get_relative($nesting, 'Numeric')['$==='](den) : $a))) {
        return $rb_divide(num, den)
        } else {
        return self.$reduce(num, den)
      };
    }, TMP_Rational_convert_2.$$arity = 2);
    self.$attr_reader("numerator", "denominator");
    
    Opal.defn(self, '$initialize', TMP_Rational_initialize_3 = function $$initialize(num, den) {
      var self = this;

      
      self.num = num;
      return (self.den = den);
    }, TMP_Rational_initialize_3.$$arity = 2);
    
    Opal.defn(self, '$numerator', TMP_Rational_numerator_4 = function $$numerator() {
      var self = this;

      return self.num
    }, TMP_Rational_numerator_4.$$arity = 0);
    
    Opal.defn(self, '$denominator', TMP_Rational_denominator_5 = function $$denominator() {
      var self = this;

      return self.den
    }, TMP_Rational_denominator_5.$$arity = 0);
    
    Opal.defn(self, '$coerce', TMP_Rational_coerce_6 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {return [other, self]}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return [other.$to_r(), self]}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return [other, self.$to_f()]}
      else { return nil }})()
    }, TMP_Rational_coerce_6.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Rational_$eq$eq_7 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {return (($a = self.num['$=='](other.$numerator())) ? self.den['$=='](other.$denominator()) : self.num['$=='](other.$numerator()))}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return (($a = self.num['$=='](other)) ? self.den['$=='](1) : self.num['$=='](other))}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return self.$to_f()['$=='](other)}
      else {return other['$=='](self)}})()
    }, TMP_Rational_$eq$eq_7.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Rational_$lt$eq$gt_8 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return self.$to_f()['$<=>'](other)}
      else {return self.$__coerced__("<=>", other)}})()
    }, TMP_Rational_$lt$eq$gt_8.$$arity = 1);
    
    Opal.defn(self, '$+', TMP_Rational_$_9 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {
      num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return $rb_plus(self.$to_f(), other)}
      else {return self.$__coerced__("+", other)}})()
    }, TMP_Rational_$_9.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Rational_$_10 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {
      num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return $rb_minus(self.$to_f(), other)}
      else {return self.$__coerced__("-", other)}})()
    }, TMP_Rational_$_10.$$arity = 1);
    
    Opal.defn(self, '$*', TMP_Rational_$_11 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$numerator());
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_times(self.num, other), self.den)}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return $rb_times(self.$to_f(), other)}
      else {return self.$__coerced__("*", other)}})()
    }, TMP_Rational_$_11.$$arity = 1);
    
    Opal.defn(self, '$/', TMP_Rational_$_12 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$denominator());
      den = $rb_times(self.den, other.$numerator());
      return self.$Rational(num, den);}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if (other['$=='](0)) {
        return $rb_divide(self.$to_f(), 0.0)
        } else {
        return self.$Rational(self.num, $rb_times(self.den, other))
      }}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return $rb_divide(self.$to_f(), other)}
      else {return self.$__coerced__("/", other)}})()
    }, TMP_Rational_$_12.$$arity = 1);
    
    Opal.defn(self, '$**', TMP_Rational_$$_13 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')
      } else if ($truthy($rb_gt(other, 0))) {
        return self.$Rational(self.num['$**'](other), self.den['$**'](other))
      } else if ($truthy($rb_lt(other, 0))) {
        return self.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
        } else {
        return self.$Rational(1, 1)
      }}
      else if (Opal.const_get_relative($nesting, 'Float')['$===']($case)) {return self.$to_f()['$**'](other)}
      else if (Opal.const_get_relative($nesting, 'Rational')['$===']($case)) {if (other['$=='](0)) {
        return self.$Rational(1, 1)
      } else if (other.$denominator()['$=='](1)) {
        if ($truthy($rb_lt(other, 0))) {
          return self.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
          } else {
          return self.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
        }
      } else if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return self.$raise(Opal.const_get_relative($nesting, 'ZeroDivisionError'), "divided by 0")
        } else {
        return self.$to_f()['$**'](other)
      }}
      else {return self.$__coerced__("**", other)}})()
    }, TMP_Rational_$$_13.$$arity = 1);
    
    Opal.defn(self, '$abs', TMP_Rational_abs_14 = function $$abs() {
      var self = this;

      return self.$Rational(self.num.$abs(), self.den.$abs())
    }, TMP_Rational_abs_14.$$arity = 0);
    
    Opal.defn(self, '$ceil', TMP_Rational_ceil_15 = function $$ceil(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$ceil()
        } else {
        return self.$with_precision("ceil", precision)
      }
    }, TMP_Rational_ceil_15.$$arity = -1);
    Opal.alias(self, "divide", "/");
    
    Opal.defn(self, '$floor', TMP_Rational_floor_16 = function $$floor(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$floor()
        } else {
        return self.$with_precision("floor", precision)
      }
    }, TMP_Rational_floor_16.$$arity = -1);
    
    Opal.defn(self, '$hash', TMP_Rational_hash_17 = function $$hash() {
      var self = this;

      return "" + "Rational:" + (self.num) + ":" + (self.den)
    }, TMP_Rational_hash_17.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Rational_inspect_18 = function $$inspect() {
      var self = this;

      return "" + "(" + (self.$to_s()) + ")"
    }, TMP_Rational_inspect_18.$$arity = 0);
    Opal.alias(self, "quo", "/");
    
    Opal.defn(self, '$rationalize', TMP_Rational_rationalize_19 = function $$rationalize(eps) {
      var self = this;

      
      if (arguments.length > 1) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, $rb_minus(b, k));
        b  = $rb_divide(1, $rb_minus(a, k));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return self.$Rational(c * p1 + p0, c * q1 + q0);
    
    }, TMP_Rational_rationalize_19.$$arity = -1);
    
    Opal.defn(self, '$round', TMP_Rational_round_20 = function $$round(precision) {
      var self = this, num = nil, den = nil, approx = nil;

      if (precision == null) {
        precision = 0;
      }
      
      if (precision['$=='](0)) {
        } else {
        return self.$with_precision("round", precision)
      };
      if (self.num['$=='](0)) {
        return 0};
      if (self.den['$=='](1)) {
        return self.num};
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = $rb_divide(num, den).$truncate();
      if ($truthy($rb_lt(self.num, 0))) {
        return approx['$-@']()
        } else {
        return approx
      };
    }, TMP_Rational_round_20.$$arity = -1);
    
    Opal.defn(self, '$to_f', TMP_Rational_to_f_21 = function $$to_f() {
      var self = this;

      return $rb_divide(self.num, self.den)
    }, TMP_Rational_to_f_21.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_Rational_to_i_22 = function $$to_i() {
      var self = this;

      return self.$truncate()
    }, TMP_Rational_to_i_22.$$arity = 0);
    
    Opal.defn(self, '$to_r', TMP_Rational_to_r_23 = function $$to_r() {
      var self = this;

      return self
    }, TMP_Rational_to_r_23.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Rational_to_s_24 = function $$to_s() {
      var self = this;

      return "" + (self.num) + "/" + (self.den)
    }, TMP_Rational_to_s_24.$$arity = 0);
    
    Opal.defn(self, '$truncate', TMP_Rational_truncate_25 = function $$truncate(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        if ($truthy($rb_lt(self.num, 0))) {
          return self.$ceil()
          } else {
          return self.$floor()
        }
        } else {
        return self.$with_precision("truncate", precision)
      }
    }, TMP_Rational_truncate_25.$$arity = -1);
    return (Opal.defn(self, '$with_precision', TMP_Rational_with_precision_26 = function $$with_precision(method, precision) {
      var self = this, p = nil, s = nil;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](precision))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ($truthy($rb_lt(precision, 1))) {
        return $rb_divide(s.$send(method), p).$to_i()
        } else {
        return self.$Rational(s.$send(method), p)
      };
    }, TMP_Rational_with_precision_26.$$arity = 2), nil) && 'with_precision';
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_Rational_27;

    
    Opal.defn(self, '$Rational', TMP_Kernel_Rational_27 = function $$Rational(numerator, denominator) {
      var self = this;

      if (denominator == null) {
        denominator = 1;
      }
      return Opal.const_get_relative($nesting, 'Rational').$convert(numerator, denominator)
    }, TMP_Kernel_Rational_27.$$arity = -2)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/time"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$===', '$raise', '$coerce_to!', '$respond_to?', '$to_str', '$to_i', '$new', '$<=>', '$to_f', '$nil?', '$>', '$<', '$strftime', '$year', '$month', '$day', '$+', '$round', '$/', '$-', '$copy_instance_variables', '$initialize_dup', '$is_a?', '$zero?', '$wday', '$utc?', '$mon', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$isdst', '$<=', '$!=', '$==', '$ceil']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_at_1, TMP_Time_new_2, TMP_Time_local_3, TMP_Time_gm_4, TMP_Time_now_5, TMP_Time_$_6, TMP_Time_$_7, TMP_Time_$lt$eq$gt_8, TMP_Time_$eq$eq_9, TMP_Time_asctime_10, TMP_Time_day_11, TMP_Time_yday_12, TMP_Time_isdst_13, TMP_Time_dup_14, TMP_Time_eql$q_15, TMP_Time_friday$q_16, TMP_Time_hash_17, TMP_Time_hour_18, TMP_Time_inspect_19, TMP_Time_min_20, TMP_Time_mon_21, TMP_Time_monday$q_22, TMP_Time_saturday$q_23, TMP_Time_sec_24, TMP_Time_succ_25, TMP_Time_usec_26, TMP_Time_zone_27, TMP_Time_getgm_28, TMP_Time_gmtime_29, TMP_Time_gmt$q_30, TMP_Time_gmt_offset_31, TMP_Time_strftime_32, TMP_Time_sunday$q_33, TMP_Time_thursday$q_34, TMP_Time_to_a_35, TMP_Time_to_f_36, TMP_Time_to_i_37, TMP_Time_tuesday$q_38, TMP_Time_wday_39, TMP_Time_wednesday$q_40, TMP_Time_year_41, TMP_Time_cweek_cyear_42;

    
    self.$include(Opal.const_get_relative($nesting, 'Comparable'));
    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;
    Opal.defs(self, '$at', TMP_Time_at_1 = function $$at(seconds, frac) {
      var self = this;

      
      var result;

      if (Opal.const_get_relative($nesting, 'Time')['$==='](seconds)) {
        if (frac !== undefined) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.is_utc = seconds.is_utc;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](seconds, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](frac, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    
    }, TMP_Time_at_1.$$arity = -2);
    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](year, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](month, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](day, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](hour, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](min, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](sec, Opal.const_get_relative($nesting, 'Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;
    Opal.defs(self, '$new', TMP_Time_new_2 = function(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (utc_offset == null) {
        utc_offset = nil;
      }
      
      var args, result;

      if (year === undefined) {
        return new Date();
      }

      if (utc_offset !== nil) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "Opal does not support explicitly specifying UTC offset for Time")
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_Time_new_2.$$arity = -1);
    Opal.defs(self, '$local', TMP_Time_local_3 = function $$local(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_Time_local_3.$$arity = -2);
    Opal.defs(self, '$gm', TMP_Time_gm_4 = function $$gm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.is_utc = true;
      return result;
    
    }, TMP_Time_gm_4.$$arity = -2);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      Opal.alias(self, "mktime", "local");
      return Opal.alias(self, "utc", "gm");
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$now', TMP_Time_now_5 = function $$now() {
      var self = this;

      return self.$new()
    }, TMP_Time_now_5.$$arity = 0);
    
    Opal.defn(self, '$+', TMP_Time_$_6 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Time')['$==='](other))) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "time + time?")};
      
      if (!other.$$is_number) {
        other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_Time_$_6.$$arity = 1);
    
    Opal.defn(self, '$-', TMP_Time_$_7 = function(other) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Time')['$==='](other))) {
        return (self.getTime() - other.getTime()) / 1000};
      
      if (!other.$$is_number) {
        other = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](other, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_Time_$_7.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Time_$lt$eq$gt_8 = function(other) {
      var self = this, r = nil;

      if ($truthy(Opal.const_get_relative($nesting, 'Time')['$==='](other))) {
        return self.$to_f()['$<=>'](other.$to_f())
        } else {
        
        r = other['$<=>'](self);
        if ($truthy(r['$nil?']())) {
          return nil
        } else if ($truthy($rb_gt(r, 0))) {
          return -1
        } else if ($truthy($rb_lt(r, 0))) {
          return 1
          } else {
          return 0
        };
      }
    }, TMP_Time_$lt$eq$gt_8.$$arity = 1);
    
    Opal.defn(self, '$==', TMP_Time_$eq$eq_9 = function(other) {
      var $a, self = this;

      return ($truthy($a = Opal.const_get_relative($nesting, 'Time')['$==='](other)) ? self.$to_f() === other.$to_f() : $a)
    }, TMP_Time_$eq$eq_9.$$arity = 1);
    
    Opal.defn(self, '$asctime', TMP_Time_asctime_10 = function $$asctime() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y")
    }, TMP_Time_asctime_10.$$arity = 0);
    Opal.alias(self, "ctime", "asctime");
    
    Opal.defn(self, '$day', TMP_Time_day_11 = function $$day() {
      var self = this;

      return self.is_utc ? self.getUTCDate() : self.getDate()
    }, TMP_Time_day_11.$$arity = 0);
    
    Opal.defn(self, '$yday', TMP_Time_yday_12 = function $$yday() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      
      start_of_year = Opal.const_get_relative($nesting, 'Time').$new(self.$year()).$to_i();
      start_of_day = Opal.const_get_relative($nesting, 'Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus($rb_divide($rb_minus(start_of_day, start_of_year), one_day).$round(), 1);
    }, TMP_Time_yday_12.$$arity = 0);
    
    Opal.defn(self, '$isdst', TMP_Time_isdst_13 = function $$isdst() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    }, TMP_Time_isdst_13.$$arity = 0);
    Opal.alias(self, "dst?", "isdst");
    
    Opal.defn(self, '$dup', TMP_Time_dup_14 = function $$dup() {
      var self = this, copy = nil;

      
      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_Time_dup_14.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Time_eql$q_15 = function(other) {
      var $a, self = this;

      return ($truthy($a = other['$is_a?'](Opal.const_get_relative($nesting, 'Time'))) ? self['$<=>'](other)['$zero?']() : $a)
    }, TMP_Time_eql$q_15.$$arity = 1);
    
    Opal.defn(self, '$friday?', TMP_Time_friday$q_16 = function() {
      var self = this;

      return self.$wday() == 5
    }, TMP_Time_friday$q_16.$$arity = 0);
    
    Opal.defn(self, '$hash', TMP_Time_hash_17 = function $$hash() {
      var self = this;

      return 'Time:' + self.getTime()
    }, TMP_Time_hash_17.$$arity = 0);
    
    Opal.defn(self, '$hour', TMP_Time_hour_18 = function $$hour() {
      var self = this;

      return self.is_utc ? self.getUTCHours() : self.getHours()
    }, TMP_Time_hour_18.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Time_inspect_19 = function $$inspect() {
      var self = this;

      if ($truthy(self['$utc?']())) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
        } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      }
    }, TMP_Time_inspect_19.$$arity = 0);
    Opal.alias(self, "mday", "day");
    
    Opal.defn(self, '$min', TMP_Time_min_20 = function $$min() {
      var self = this;

      return self.is_utc ? self.getUTCMinutes() : self.getMinutes()
    }, TMP_Time_min_20.$$arity = 0);
    
    Opal.defn(self, '$mon', TMP_Time_mon_21 = function $$mon() {
      var self = this;

      return (self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1
    }, TMP_Time_mon_21.$$arity = 0);
    
    Opal.defn(self, '$monday?', TMP_Time_monday$q_22 = function() {
      var self = this;

      return self.$wday() == 1
    }, TMP_Time_monday$q_22.$$arity = 0);
    Opal.alias(self, "month", "mon");
    
    Opal.defn(self, '$saturday?', TMP_Time_saturday$q_23 = function() {
      var self = this;

      return self.$wday() == 6
    }, TMP_Time_saturday$q_23.$$arity = 0);
    
    Opal.defn(self, '$sec', TMP_Time_sec_24 = function $$sec() {
      var self = this;

      return self.is_utc ? self.getUTCSeconds() : self.getSeconds()
    }, TMP_Time_sec_24.$$arity = 0);
    
    Opal.defn(self, '$succ', TMP_Time_succ_25 = function $$succ() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.is_utc = self.is_utc;
      return result;
    
    }, TMP_Time_succ_25.$$arity = 0);
    
    Opal.defn(self, '$usec', TMP_Time_usec_26 = function $$usec() {
      var self = this;

      return self.getMilliseconds() * 1000
    }, TMP_Time_usec_26.$$arity = 0);
    
    Opal.defn(self, '$zone', TMP_Time_zone_27 = function $$zone() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\((.+)\)(?:\s|$)/)[1]
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    }, TMP_Time_zone_27.$$arity = 0);
    
    Opal.defn(self, '$getgm', TMP_Time_getgm_28 = function $$getgm() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.is_utc = true;
      return result;
    
    }, TMP_Time_getgm_28.$$arity = 0);
    Opal.alias(self, "getutc", "getgm");
    
    Opal.defn(self, '$gmtime', TMP_Time_gmtime_29 = function $$gmtime() {
      var self = this;

      
      self.is_utc = true;
      return self;
    
    }, TMP_Time_gmtime_29.$$arity = 0);
    Opal.alias(self, "utc", "gmtime");
    
    Opal.defn(self, '$gmt?', TMP_Time_gmt$q_30 = function() {
      var self = this;

      return self.is_utc === true
    }, TMP_Time_gmt$q_30.$$arity = 0);
    
    Opal.defn(self, '$gmt_offset', TMP_Time_gmt_offset_31 = function $$gmt_offset() {
      var self = this;

      return -self.getTimezoneOffset() * 60
    }, TMP_Time_gmt_offset_31.$$arity = 0);
    
    Opal.defn(self, '$strftime', TMP_Time_strftime_32 = function $$strftime(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    }, TMP_Time_strftime_32.$$arity = 1);
    
    Opal.defn(self, '$sunday?', TMP_Time_sunday$q_33 = function() {
      var self = this;

      return self.$wday() == 0
    }, TMP_Time_sunday$q_33.$$arity = 0);
    
    Opal.defn(self, '$thursday?', TMP_Time_thursday$q_34 = function() {
      var self = this;

      return self.$wday() == 4
    }, TMP_Time_thursday$q_34.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Time_to_a_35 = function $$to_a() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()]
    }, TMP_Time_to_a_35.$$arity = 0);
    
    Opal.defn(self, '$to_f', TMP_Time_to_f_36 = function $$to_f() {
      var self = this;

      return self.getTime() / 1000
    }, TMP_Time_to_f_36.$$arity = 0);
    
    Opal.defn(self, '$to_i', TMP_Time_to_i_37 = function $$to_i() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10)
    }, TMP_Time_to_i_37.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.defn(self, '$tuesday?', TMP_Time_tuesday$q_38 = function() {
      var self = this;

      return self.$wday() == 2
    }, TMP_Time_tuesday$q_38.$$arity = 0);
    Opal.alias(self, "tv_sec", "to_i");
    Opal.alias(self, "tv_usec", "usec");
    Opal.alias(self, "utc?", "gmt?");
    Opal.alias(self, "gmtoff", "gmt_offset");
    Opal.alias(self, "utc_offset", "gmt_offset");
    
    Opal.defn(self, '$wday', TMP_Time_wday_39 = function $$wday() {
      var self = this;

      return self.is_utc ? self.getUTCDay() : self.getDay()
    }, TMP_Time_wday_39.$$arity = 0);
    
    Opal.defn(self, '$wednesday?', TMP_Time_wednesday$q_40 = function() {
      var self = this;

      return self.$wday() == 3
    }, TMP_Time_wednesday$q_40.$$arity = 0);
    
    Opal.defn(self, '$year', TMP_Time_year_41 = function $$year() {
      var self = this;

      return self.is_utc ? self.getUTCFullYear() : self.getFullYear()
    }, TMP_Time_year_41.$$arity = 0);
    return (Opal.defn(self, '$cweek_cyear', TMP_Time_cweek_cyear_42 = function $$cweek_cyear() {
      var $a, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      
      jan01 = Opal.const_get_relative($nesting, 'Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ($truthy(($truthy($a = $rb_le(jan01_wday, 4)) ? jan01_wday['$!='](0) : $a))) {
        offset = $rb_minus(jan01_wday, 1)
        } else {
        
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = $rb_divide($rb_plus(self.$yday(), offset), 7.0).$ceil();
      if ($truthy($rb_le(week, 0))) {
        return Opal.const_get_relative($nesting, 'Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        
        dec31 = Opal.const_get_relative($nesting, 'Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ($truthy(($truthy($a = $rb_le(dec31_wday, 3)) ? dec31_wday['$!='](0) : $a))) {
          
          week = 1;
          year = $rb_plus(year, 1);};};
      return [week, year];
    }, TMP_Time_cweek_cyear_42.$$arity = 0), nil) && 'cweek_cyear';
  })($nesting[0], Date, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/struct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$>', '$length', '$class', '$each_with_index', '$[]', '$[]=', '$-', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$join', '$each_pair', '$inspect', '$inject', '$flatten', '$to_a', '$respond_to?', '$dig']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Struct_new_1, TMP_Struct_define_struct_attribute_8, TMP_Struct_members_9, TMP_Struct_inherited_11, TMP_Struct_initialize_13, TMP_Struct_members_14, TMP_Struct_hash_15, TMP_Struct_$$_16, TMP_Struct_$$$eq_17, TMP_Struct_$eq$eq_18, TMP_Struct_eql$q_19, TMP_Struct_each_20, TMP_Struct_each_pair_23, TMP_Struct_length_26, TMP_Struct_to_a_28, TMP_Struct_inspect_30, TMP_Struct_to_h_32, TMP_Struct_values_at_34, TMP_Struct_dig_35;

    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    Opal.defs(self, '$new', TMP_Struct_new_1 = function(const_name, $a_rest) {
      var TMP_2, TMP_3, self = this, args, $iter = TMP_Struct_new_1.$$p, block = $iter || nil, klass = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Struct_new_1.$$p = null;
      
      if ($truthy(const_name)) {
        
        try {
          const_name = Opal.const_get_relative($nesting, 'Opal')['$const_name!'](const_name)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'TypeError'), Opal.const_get_relative($nesting, 'NameError')])) {
            try {
              
              args.$unshift(const_name);
              const_name = nil;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };};
      $send(args, 'map', [], (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
      return Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](arg, Opal.const_get_relative($nesting, 'String'), "to_str")}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
      klass = $send(Opal.const_get_relative($nesting, 'Class'), 'new', [self], (TMP_3 = function(){var self = TMP_3.$$s || this, TMP_4;

      
        $send(args, 'each', [], (TMP_4 = function(arg){var self = TMP_4.$$s || this;
if (arg == null) arg = nil;
        return self.$define_struct_attribute(arg)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        return (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_new_5;

          
          
          Opal.defn(self, '$new', TMP_new_5 = function($a_rest) {
            var self = this, args, instance = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            instance = self.$allocate();
            instance.$$data = {};;
            $send(instance, 'initialize', Opal.to_a(args));
            return instance;
          }, TMP_new_5.$$arity = -1);
          return Opal.alias(self, "[]", "new");
        })(Opal.get_singleton_class(self), $nesting);}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3));
      if ($truthy(block)) {
        $send(klass, 'module_eval', [], block.$to_proc())};
      if ($truthy(const_name)) {
        Opal.const_get_relative($nesting, 'Struct').$const_set(const_name, klass)};
      return klass;
    }, TMP_Struct_new_1.$$arity = -2);
    Opal.defs(self, '$define_struct_attribute', TMP_Struct_define_struct_attribute_8 = function $$define_struct_attribute(name) {
      var TMP_6, TMP_7, self = this;

      
      if (self['$=='](Opal.const_get_relative($nesting, 'Struct'))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      $send(self, 'define_method', [name], (TMP_6 = function(){var self = TMP_6.$$s || this;

      return self.$$data[name]}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
      return $send(self, 'define_method', ["" + (name) + "="], (TMP_7 = function(value){var self = TMP_7.$$s || this;
if (value == null) value = nil;
      return self.$$data[name] = value}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
    }, TMP_Struct_define_struct_attribute_8.$$arity = 1);
    Opal.defs(self, '$members', TMP_Struct_members_9 = function $$members() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      
      if (self['$=='](Opal.const_get_relative($nesting, 'Struct'))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the Struct class has no members")};
      return (self.members = ($truthy($a = self.members) ? $a : []));
    }, TMP_Struct_members_9.$$arity = 0);
    Opal.defs(self, '$inherited', TMP_Struct_inherited_11 = function $$inherited(klass) {
      var TMP_10, self = this, members = nil;
      if (self.members == null) self.members = nil;

      
      members = self.members;
      return $send(klass, 'instance_eval', [], (TMP_10 = function(){var self = TMP_10.$$s || this;

      return (self.members = members)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10));
    }, TMP_Struct_inherited_11.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Struct_initialize_13 = function $$initialize($a_rest) {
      var TMP_12, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if ($truthy($rb_gt(args.$length(), self.$class().$members().$length()))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "struct size differs")};
      return $send(self.$class().$members(), 'each_with_index', [], (TMP_12 = function(name, index){var self = TMP_12.$$s || this, $writer = nil;
if (name == null) name = nil;if (index == null) index = nil;
      
        $writer = [name, args['$[]'](index)];
        $send(self, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12));
    }, TMP_Struct_initialize_13.$$arity = -1);
    
    Opal.defn(self, '$members', TMP_Struct_members_14 = function $$members() {
      var self = this;

      return self.$class().$members()
    }, TMP_Struct_members_14.$$arity = 0);
    
    Opal.defn(self, '$hash', TMP_Struct_hash_15 = function $$hash() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Hash').$new(self.$$data).$hash()
    }, TMP_Struct_hash_15.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Struct_$$_16 = function(name) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](name))) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
      
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](name, Opal.const_get_relative($nesting, 'String'), "to_str");
      return self.$$data[name];
    }, TMP_Struct_$$_16.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Struct_$$$eq_17 = function(name, value) {
      var self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise(Opal.const_get_relative($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](name))) {
        if ($truthy(self.$class().$members()['$include?'](name.$to_sym()))) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](name, Opal.const_get_relative($nesting, 'String'), "to_str");
      return self.$$data[name] = value;
    }, TMP_Struct_$$$eq_17.$$arity = 2);
    
    Opal.defn(self, '$==', TMP_Struct_$eq$eq_18 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if (Opal.const_get_relative($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_Struct_$eq$eq_18.$$arity = 1);
    
    Opal.defn(self, '$eql?', TMP_Struct_eql$q_19 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if (Opal.const_get_relative($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_Struct_eql$q_19.$$arity = 1);
    
    Opal.defn(self, '$each', TMP_Struct_each_20 = function $$each() {
      var TMP_21, TMP_22, self = this, $iter = TMP_Struct_each_20.$$p, $yield = $iter || nil;

      if ($iter) TMP_Struct_each_20.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each"], (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$size()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))
      };
      $send(self.$class().$members(), 'each', [], (TMP_22 = function(name){var self = TMP_22.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, self['$[]'](name));}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22));
      return self;
    }, TMP_Struct_each_20.$$arity = 0);
    
    Opal.defn(self, '$each_pair', TMP_Struct_each_pair_23 = function $$each_pair() {
      var TMP_24, TMP_25, self = this, $iter = TMP_Struct_each_pair_23.$$p, $yield = $iter || nil;

      if ($iter) TMP_Struct_each_pair_23.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return $send(self, 'enum_for', ["each_pair"], (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.$size()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24))
      };
      $send(self.$class().$members(), 'each', [], (TMP_25 = function(name){var self = TMP_25.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, [name, self['$[]'](name)]);}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25));
      return self;
    }, TMP_Struct_each_pair_23.$$arity = 0);
    
    Opal.defn(self, '$length', TMP_Struct_length_26 = function $$length() {
      var self = this;

      return self.$class().$members().$length()
    }, TMP_Struct_length_26.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$to_a', TMP_Struct_to_a_28 = function $$to_a() {
      var TMP_27, self = this;

      return $send(self.$class().$members(), 'map', [], (TMP_27 = function(name){var self = TMP_27.$$s || this;
if (name == null) name = nil;
      return self['$[]'](name)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))
    }, TMP_Struct_to_a_28.$$arity = 0);
    Opal.alias(self, "values", "to_a");
    
    Opal.defn(self, '$inspect', TMP_Struct_inspect_30 = function $$inspect() {
      var $a, TMP_29, self = this, result = nil;

      
      result = "#<struct ";
      if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Struct')['$==='](self)) ? self.$class().$name() : $a))) {
        result = $rb_plus(result, "" + (self.$class()) + " ")};
      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], (TMP_29 = function(name, value){var self = TMP_29.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29)).$join(", "));
      result = $rb_plus(result, ">");
      return result;
    }, TMP_Struct_inspect_30.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.defn(self, '$to_h', TMP_Struct_to_h_32 = function $$to_h() {
      var TMP_31, self = this;

      return $send(self.$class().$members(), 'inject', [$hash2([], {})], (TMP_31 = function(h, name){var self = TMP_31.$$s || this, $writer = nil;
if (h == null) h = nil;if (name == null) name = nil;
      
        
        $writer = [name, self['$[]'](name)];
        $send(h, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return h;}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31))
    }, TMP_Struct_to_h_32.$$arity = 0);
    
    Opal.defn(self, '$values_at', TMP_Struct_values_at_34 = function $$values_at($a_rest) {
      var TMP_33, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      args = $send(args, 'map', [], (TMP_33 = function(arg){var self = TMP_33.$$s || this;
if (arg == null) arg = nil;
      return arg.$$is_range ? arg.$to_a() : arg}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33)).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }, TMP_Struct_values_at_34.$$arity = -1);
    return (Opal.defn(self, '$dig', TMP_Struct_dig_35 = function $$dig(key, $a_rest) {
      var self = this, keys, item = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      keys = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        keys[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if ($truthy(key.$$is_string && self.$$data.hasOwnProperty(key))) {
        item = self.$$data[key] || nil
        } else {
        item = nil
      };
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, TMP_Struct_dig_35.$$arity = -2), nil) && 'dig';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/io"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $writer = nil;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$-', '$extend']);
  
  (function($base, $super, $parent_nesting) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IO_tty$q_1, TMP_IO_closed$q_2, TMP_IO_write_3, TMP_IO_flush_4;

    def.tty = def.closed = nil;
    
    Opal.const_set($nesting[0], 'SEEK_SET', 0);
    Opal.const_set($nesting[0], 'SEEK_CUR', 1);
    Opal.const_set($nesting[0], 'SEEK_END', 2);
    
    Opal.defn(self, '$tty?', TMP_IO_tty$q_1 = function() {
      var self = this;

      return self.tty
    }, TMP_IO_tty$q_1.$$arity = 0);
    
    Opal.defn(self, '$closed?', TMP_IO_closed$q_2 = function() {
      var self = this;

      return self.closed
    }, TMP_IO_closed$q_2.$$arity = 0);
    self.$attr_accessor("write_proc");
    
    Opal.defn(self, '$write', TMP_IO_write_3 = function $$write(string) {
      var self = this;

      
      self.write_proc(string);
      return string.$size();
    }, TMP_IO_write_3.$$arity = 1);
    self.$attr_accessor("sync", "tty");
    
    Opal.defn(self, '$flush', TMP_IO_flush_4 = function $$flush() {
      var self = this;

      return nil
    }, TMP_IO_flush_4.$$arity = 0);
    (function($base, $parent_nesting) {
      var $Writable, self = $Writable = $module($base, 'Writable');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Writable_$lt$lt_5, TMP_Writable_print_7, TMP_Writable_puts_9;

      
      
      Opal.defn(self, '$<<', TMP_Writable_$lt$lt_5 = function(string) {
        var self = this;

        
        self.$write(string);
        return self;
      }, TMP_Writable_$lt$lt_5.$$arity = 1);
      
      Opal.defn(self, '$print', TMP_Writable_print_7 = function $$print($a_rest) {
        var TMP_6, self = this, args;
        if ($gvars[","] == null) $gvars[","] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        self.$write($send(args, 'map', [], (TMP_6 = function(arg){var self = TMP_6.$$s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6)).$join($gvars[","]));
        return nil;
      }, TMP_Writable_print_7.$$arity = -1);
      
      Opal.defn(self, '$puts', TMP_Writable_puts_9 = function $$puts($a_rest) {
        var TMP_8, self = this, args, newline = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        newline = $gvars["/"];
        if ($truthy(args['$empty?']())) {
          self.$write($gvars["/"])
          } else {
          self.$write($send(args, 'map', [], (TMP_8 = function(arg){var self = TMP_8.$$s || this;
if (arg == null) arg = nil;
          return self.$String(arg).$chomp()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8)).$concat([nil]).$join(newline))
        };
        return nil;
      }, TMP_Writable_puts_9.$$arity = -1);
    })($nesting[0], $nesting);
    return (function($base, $parent_nesting) {
      var $Readable, self = $Readable = $module($base, 'Readable');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Readable_readbyte_10, TMP_Readable_readchar_11, TMP_Readable_readline_12, TMP_Readable_readpartial_13;

      
      
      Opal.defn(self, '$readbyte', TMP_Readable_readbyte_10 = function $$readbyte() {
        var self = this;

        return self.$getbyte()
      }, TMP_Readable_readbyte_10.$$arity = 0);
      
      Opal.defn(self, '$readchar', TMP_Readable_readchar_11 = function $$readchar() {
        var self = this;

        return self.$getc()
      }, TMP_Readable_readchar_11.$$arity = 0);
      
      Opal.defn(self, '$readline', TMP_Readable_readline_12 = function $$readline(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        if (sep == null) {
          sep = $gvars["/"];
        }
        return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
      }, TMP_Readable_readline_12.$$arity = -1);
      
      Opal.defn(self, '$readpartial', TMP_Readable_readpartial_13 = function $$readpartial(integer, outbuf) {
        var self = this;

        if (outbuf == null) {
          outbuf = nil;
        }
        return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
      }, TMP_Readable_readpartial_13.$$arity = -2);
    })($nesting[0], $nesting);
  })($nesting[0], null, $nesting);
  Opal.const_set($nesting[0], 'STDERR', ($gvars.stderr = Opal.const_get_relative($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDIN', ($gvars.stdin = Opal.const_get_relative($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDOUT', ($gvars.stdout = Opal.const_get_relative($nesting, 'IO').$new()));
  var console = Opal.global.console;
  
  $writer = [typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}];
  $send(Opal.const_get_relative($nesting, 'STDOUT'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}];
  $send(Opal.const_get_relative($nesting, 'STDERR'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  Opal.const_get_relative($nesting, 'STDOUT').$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'Writable'));
  return Opal.const_get_relative($nesting, 'STDERR').$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'Writable'));
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/main"] = function(Opal) {
  var TMP_to_s_1, TMP_include_2, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$include']);
  
  Opal.defs(self, '$to_s', TMP_to_s_1 = function $$to_s() {
    var self = this;

    return "main"
  }, TMP_to_s_1.$$arity = 0);
  return Opal.defs(self, '$include', TMP_include_2 = function $$include(mod) {
    var self = this;

    return Opal.const_get_relative($nesting, 'Object').$include(mod)
  }, TMP_include_2.$$arity = 1);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/dir"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]']);
  return (function($base, $super, $parent_nesting) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_chdir_1, TMP_pwd_2, TMP_home_3;

      
      
      Opal.defn(self, '$chdir', TMP_chdir_1 = function $$chdir(dir) {
        var self = this, $iter = TMP_chdir_1.$$p, $yield = $iter || nil, prev_cwd = nil;

        if ($iter) TMP_chdir_1.$$p = null;
        return (function() { try {
        
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return Opal.yieldX($yield, []);;
        } finally {
          Opal.current_dir = prev_cwd
        }; })()
      }, TMP_chdir_1.$$arity = 1);
      
      Opal.defn(self, '$pwd', TMP_pwd_2 = function $$pwd() {
        var self = this;

        return Opal.current_dir || '.'
      }, TMP_pwd_2.$$arity = 0);
      Opal.alias(self, "getwd", "pwd");
      return (Opal.defn(self, '$home', TMP_home_3 = function $$home() {
        var $a, self = this;

        return ($truthy($a = Opal.const_get_relative($nesting, 'ENV')['$[]']("HOME")) ? $a : ".")
      }, TMP_home_3.$$arity = 0), nil) && 'home';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/file"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$join', '$compact', '$split', '$==', '$first', '$home', '$[]=', '$-', '$pwd', '$each', '$pop', '$<<', '$respond_to?', '$coerce_to!', '$+', '$basename', '$empty?', '$rindex', '$[]', '$nil?', '$length', '$gsub', '$find', '$=~', '$map', '$each_with_index', '$flatten', '$reject', '$end_with?', '$start_with?', '$sub']);
  return (function($base, $super, $parent_nesting) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'Separator', Opal.const_set($nesting[0], 'SEPARATOR', "/"));
    Opal.const_set($nesting[0], 'ALT_SEPARATOR', nil);
    Opal.const_set($nesting[0], 'PATH_SEPARATOR', ":");
    Opal.const_set($nesting[0], 'FNM_SYSCASE', 0);
    return (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_expand_path_2, TMP_dirname_3, TMP_basename_4, TMP_extname_5, TMP_exist$q_6, TMP_directory$q_8, TMP_join_12, TMP_split_13;

      
      
      Opal.defn(self, '$expand_path', TMP_expand_path_2 = function $$expand_path(path, basedir) {
        var TMP_1, self = this, parts = nil, new_parts = nil, $writer = nil;

        if (basedir == null) {
          basedir = nil;
        }
        
        path = [basedir, path].$compact().$join(Opal.const_get_relative($nesting, 'SEPARATOR'));
        parts = path.$split(Opal.const_get_relative($nesting, 'SEPARATOR'));
        new_parts = [];
        if (parts.$first()['$==']("~")) {
          
          $writer = [0, Opal.const_get_relative($nesting, 'Dir').$home()];
          $send(parts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if (parts.$first()['$=='](".")) {
          
          $writer = [0, Opal.const_get_relative($nesting, 'Dir').$pwd()];
          $send(parts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        $send(parts, 'each', [], (TMP_1 = function(part){var self = TMP_1.$$s || this;
if (part == null) part = nil;
        if (part['$==']("..")) {
            return new_parts.$pop()
            } else {
            return new_parts['$<<'](part)
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        return new_parts.$join(Opal.const_get_relative($nesting, 'SEPARATOR'));
      }, TMP_expand_path_2.$$arity = -2);
      Opal.alias(self, "realpath", "expand_path");
      
      // Coerce a given path to a path string using #to_path and #to_str
      function $coerce_to_path(path) {
        if ($truthy((path)['$respond_to?']("to_path"))) {
          path = path.$to_path();
        }

        path = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](path, Opal.const_get_relative($nesting, 'String'), "to_str");

        return path;
      }

      // Return a RegExp compatible char class
      function $sep_chars() {
        if (Opal.const_get_relative($nesting, 'ALT_SEPARATOR') === nil) {
          return Opal.escape_regexp(Opal.const_get_relative($nesting, 'SEPARATOR'));
        } else {
          return Opal.escape_regexp($rb_plus(Opal.const_get_relative($nesting, 'SEPARATOR'), Opal.const_get_relative($nesting, 'ALT_SEPARATOR')));
        }
      }
    ;
      
      Opal.defn(self, '$dirname', TMP_dirname_3 = function $$dirname(path) {
        var self = this, sep_chars = nil;

        
        sep_chars = $sep_chars();
        path = $coerce_to_path(path);
        
        var absolute = path.match(new RegExp("" + "^[" + (sep_chars) + "]"));

        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove trailing separators
        path = path.replace(new RegExp("" + "[^" + (sep_chars) + "]+$"), ''); // remove trailing basename
        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove final trailing separators

        if (path === '') {
          return absolute ? '/' : '.';
        }

        return path;
      ;
      }, TMP_dirname_3.$$arity = 1);
      
      Opal.defn(self, '$basename', TMP_basename_4 = function $$basename(name, suffix) {
        var self = this, sep_chars = nil;

        if (suffix == null) {
          suffix = nil;
        }
        
        sep_chars = $sep_chars();
        name = $coerce_to_path(name);
        
        if (name.length == 0) {
          return name;
        }

        if (suffix !== nil) {
          suffix = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](suffix, Opal.const_get_relative($nesting, 'String'), "to_str")
        } else {
          suffix = null;
        }

        name = name.replace(new RegExp("" + "(.)[" + (sep_chars) + "]*$"), '$1');
        name = name.replace(new RegExp("" + "^(?:.*[" + (sep_chars) + "])?([^" + (sep_chars) + "]+)$"), '$1');

        if (suffix === ".*") {
          name = name.replace(/\.[^\.]+$/, '');
        } else if(suffix !== null) {
          suffix = Opal.escape_regexp(suffix);
          name = name.replace(new RegExp("" + (suffix) + "$"), '');
        }

        return name;
      ;
      }, TMP_basename_4.$$arity = -2);
      
      Opal.defn(self, '$extname', TMP_extname_5 = function $$extname(path) {
        var $a, self = this, filename = nil, last_dot_idx = nil;

        
        path = $coerce_to_path(path);;
        filename = self.$basename(path);
        if ($truthy(filename['$empty?']())) {
          return ""};
        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(".");
        if ($truthy(($truthy($a = last_dot_idx['$nil?']()) ? $a : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) {
          return ""
          } else {
          return filename['$[]'](Opal.Range.$new($rb_plus(last_dot_idx, 1), -1, false))
        };
      }, TMP_extname_5.$$arity = 1);
      
      Opal.defn(self, '$exist?', TMP_exist$q_6 = function(path) {
        var self = this;

        return Opal.modules[path] != null
      }, TMP_exist$q_6.$$arity = 1);
      Opal.alias(self, "exists?", "exist?");
      
      Opal.defn(self, '$directory?', TMP_directory$q_8 = function(path) {
        var TMP_7, self = this, files = nil, file = nil;

        
        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub(new RegExp("" + "(^." + (Opal.const_get_relative($nesting, 'SEPARATOR')) + "+|" + (Opal.const_get_relative($nesting, 'SEPARATOR')) + "+$)"));
        file = $send(files, 'find', [], (TMP_7 = function(file){var self = TMP_7.$$s || this;
if (file == null) file = nil;
        return file['$=~'](new RegExp("" + "^" + (path)))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        return file;
      }, TMP_directory$q_8.$$arity = 1);
      
      Opal.defn(self, '$join', TMP_join_12 = function $$join($a_rest) {
        var TMP_9, TMP_10, TMP_11, self = this, paths, result = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        paths = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          paths[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        if (paths.$length()['$=='](0)) {
          return ""};
        result = "";
        paths = $send(paths.$flatten().$each_with_index(), 'map', [], (TMP_9 = function(item, index){var self = TMP_9.$$s || this, $a;
if (item == null) item = nil;if (index == null) index = nil;
        if ($truthy((($a = index['$=='](0)) ? item['$empty?']() : index['$=='](0)))) {
            return Opal.const_get_relative($nesting, 'SEPARATOR')
          } else if ($truthy((($a = paths.$length()['$==']($rb_plus(index, 1))) ? item['$empty?']() : paths.$length()['$==']($rb_plus(index, 1))))) {
            return Opal.const_get_relative($nesting, 'SEPARATOR')
            } else {
            return item
          }}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9));
        paths = $send(paths, 'reject', [], (TMP_10 = function(path){var self = TMP_10.$$s || this;
if (path == null) path = nil;
        return path['$empty?']()}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
        $send(paths, 'each_with_index', [], (TMP_11 = function(item, index){var self = TMP_11.$$s || this, $a, next_item = nil;
if (item == null) item = nil;if (index == null) index = nil;
        
          next_item = paths['$[]']($rb_plus(index, 1));
          if ($truthy(next_item['$nil?']())) {
            return (result = "" + (result) + (item))
            } else {
            
            if ($truthy(($truthy($a = item['$end_with?'](Opal.const_get_relative($nesting, 'SEPARATOR'))) ? next_item['$start_with?'](Opal.const_get_relative($nesting, 'SEPARATOR')) : $a))) {
              item = item.$sub(new RegExp("" + (Opal.const_get_relative($nesting, 'SEPARATOR')) + "+$"), "")};
            if ($truthy(($truthy($a = item['$end_with?'](Opal.const_get_relative($nesting, 'SEPARATOR'))) ? $a : next_item['$start_with?'](Opal.const_get_relative($nesting, 'SEPARATOR'))))) {
              return (result = "" + (result) + (item))
              } else {
              return (result = "" + (result) + (item) + (Opal.const_get_relative($nesting, 'SEPARATOR')))
            };
          };}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
        return result;
      }, TMP_join_12.$$arity = -1);
      return (Opal.defn(self, '$split', TMP_split_13 = function $$split(path) {
        var self = this;

        return path.$split(Opal.const_get_relative($nesting, 'SEPARATOR'))
      }, TMP_split_13.$$arity = 1), nil) && 'split';
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], Opal.const_get_relative($nesting, 'IO'), $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/process"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$const_set', '$size', '$<<', '$__register_clock__', '$to_f', '$now', '$new', '$[]', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    function $Process(){};
    var self = $Process = $klass($base, $super, 'Process', $Process);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Process___register_clock___1, TMP_Process_pid_2, TMP_Process_times_3, TMP_Process_clock_gettime_4, monotonic = nil;

    
    self.__clocks__ = [];
    Opal.defs(self, '$__register_clock__', TMP_Process___register_clock___1 = function $$__register_clock__(name, func) {
      var self = this;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      self.$const_set(name, self.__clocks__.$size());
      return self.__clocks__['$<<'](func);
    }, TMP_Process___register_clock___1.$$arity = 2);
    self.$__register_clock__("CLOCK_REALTIME", function() { return Date.now() });
    monotonic = false;
    
    if (Opal.global.performance) {
      monotonic = function() {
        return performance.now()
      };
    }
    else if (Opal.global.process && process.hrtime) {
      // let now be the base to get smaller numbers
      var hrtime_base = process.hrtime();

      monotonic = function() {
        var hrtime = process.hrtime(hrtime_base);
        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;
        return ((hrtime[0] * 1000) + (us / 1000));
      };
    }
  ;
    if ($truthy(monotonic)) {
      self.$__register_clock__("CLOCK_MONOTONIC", monotonic)};
    Opal.defs(self, '$pid', TMP_Process_pid_2 = function $$pid() {
      var self = this;

      return 0
    }, TMP_Process_pid_2.$$arity = 0);
    Opal.defs(self, '$times', TMP_Process_times_3 = function $$times() {
      var self = this, t = nil;

      
      t = Opal.const_get_relative($nesting, 'Time').$now().$to_f();
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Benchmark'), 'Tms').$new(t, t, t, t, t);
    }, TMP_Process_times_3.$$arity = 0);
    return Opal.defs(self, '$clock_gettime', TMP_Process_clock_gettime_4 = function $$clock_gettime(clock_id, unit) {
      var $a, self = this, clock = nil;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      if (unit == null) {
        unit = "float_second";
      }
      
      ($truthy($a = (clock = self.__clocks__['$[]'](clock_id))) ? $a : self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Errno'), 'EINVAL'), "" + "clock_gettime(" + (clock_id) + ") " + (self.__clocks__['$[]'](clock_id))));
      
      var ms = clock();
      switch (unit) {
        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)
        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float
        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float
        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer
        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer
        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer
        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer
        default: self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "unexpected unit: " + (unit))
      }
    ;
    }, TMP_Process_clock_gettime_4.$$arity = -2);
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Signal(){};
    var self = $Signal = $klass($base, $super, 'Signal', $Signal);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Signal_trap_5;

    return Opal.defs(self, '$trap', TMP_Signal_trap_5 = function $$trap($a_rest) {
      var self = this;

      return nil
    }, TMP_Signal_trap_5.$$arity = -1)
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $GC(){};
    var self = $GC = $klass($base, $super, 'GC', $GC);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_GC_start_6;

    return Opal.defs(self, '$start', TMP_GC_start_6 = function $$start() {
      var self = this;

      return nil
    }, TMP_GC_start_6.$$arity = 0)
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/random/seedrandom"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $Random(){};
    var self = $Random = $klass($base, $super, 'Random', $Random);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    /* jshint ignore:start */
    /*
    seedrandom.min.js 2.4.1 (original source: https://github.com/davidbau/seedrandom/blob/2.4.1/seedrandom.min.js)
    How to update:
     . Chekout the latest release from GitHub: https://github.com/davidbau/seedrandom
     . Apply the following commits:
     .. Check for hasOwnProperty in flatten(): https://github.com/iliabylich/seedrandom/commit/06a94f59ae3d3956c8b1a2488334cafab6744b04
     .. Add a module id for the RequireJS `define` method: https://github.com/Mogztter/seedrandom/commit/e047540c3d81f955cab9a01d17b8141d439fbd7d
    */
    !function(a,b){function c(c,j,k){var n=[];j=1==j?{entropy:!0}:j||{};var s=g(f(j.entropy?[c,i(a)]:null==c?h():c,3),n),t=new d(n),u=function(){for(var a=t.g(m),b=p,c=0;a<q;)a=(a+c)*l,b*=l,c=t.g(1);for(;a>=r;)a/=2,b/=2,c>>>=1;return(a+c)/b};return u.int32=function(){return 0|t.g(4)},u.quick=function(){return t.g(4)/4294967296},u.double=u,g(i(t.S),a),(j.pass||k||function(a,c,d,f){return f&&(f.S&&e(f,t),a.state=function(){return e(t,{})}),d?(b[o]=a,c):a})(u,s,"global"in j?j.global:this==b,j.state)}function d(a){var b,c=a.length,d=this,e=0,f=d.i=d.j=0,g=d.S=[];for(c||(a=[c++]);e<l;)g[e]=e++;for(e=0;e<l;e++)g[e]=g[f=s&f+a[e%c]+(b=g[e])],g[f]=b;(d.g=function(a){for(var b,c=0,e=d.i,f=d.j,g=d.S;a--;)b=g[e=s&e+1],c=c*l+g[s&(g[e]=g[f=s&f+b])+(g[f]=b)];return d.i=e,d.j=f,c})(l)}function e(a,b){return b.i=a.i,b.j=a.j,b.S=a.S.slice(),b}function f(a,b){var c,d=[],e=typeof a;if(b&&"object"==e)for(c in a)if(a.hasOwnProperty(c))try{d.push(f(a[c],b-1))}catch(a){}return d.length?d:"string"==e?a:a+"\0"}function g(a,b){for(var c,d=a+"",e=0;e<d.length;)b[s&e]=s&(c^=19*b[s&e])+d.charCodeAt(e++);return i(b)}function h(){try{if(j)return i(j.randomBytes(l));var b=new Uint8Array(l);return(k.crypto||k.msCrypto).getRandomValues(b),i(b)}catch(b){var c=k.navigator,d=c&&c.plugins;return[+new Date,k,d,k.screen,i(a)]}}function i(a){return String.fromCharCode.apply(0,a)}var j,k=this,l=256,m=6,n=52,o="random",p=b.pow(l,m),q=b.pow(2,n),r=2*q,s=l-1;if(b["seed"+o]=c,g(b.random(),a),"object"==typeof module&&module.exports){module.exports=c;try{j=require("crypto")}catch(a){}}else"function"==typeof define&&define.amd&&define('seekrandom',function(){return c})}([],Math);
    /* jshint ignore:end */
  
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/random"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_reader', '$coerce_to!', '$reseed', '$new_seed', '$rand', '$seed', '$new', '$===', '$==', '$state', '$encode', '$join', '$map', '$times', '$chr', '$raise']);
  
  self.$require("corelib/random/seedrandom.js");
  return (function($base, $super, $parent_nesting) {
    function $Random(){};
    var self = $Random = $klass($base, $super, 'Random', $Random);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Random_initialize_1, TMP_Random_reseed_2, TMP_Random_new_seed_3, TMP_Random_rand_4, TMP_Random_srand_5, TMP_Random_$eq$eq_6, TMP_Random_bytes_8, TMP_Random_rand_9;

    
    self.$attr_reader("seed", "state");
    
    Opal.defn(self, '$initialize', TMP_Random_initialize_1 = function $$initialize(seed) {
      var self = this;

      if (seed == null) {
        seed = Opal.const_get_relative($nesting, 'Random').$new_seed();
      }
      
      seed = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](seed, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      self.state = seed;
      return self.$reseed(seed);
    }, TMP_Random_initialize_1.$$arity = -1);
    
    Opal.defn(self, '$reseed', TMP_Random_reseed_2 = function $$reseed(seed) {
      var self = this;

      
      self.seed = seed;
      return self.$rng = new Math.seedrandom(seed);;
    }, TMP_Random_reseed_2.$$arity = 1);
    var $seed_generator = new Math.seedrandom('opal', { entropy: true });;
    Opal.defs(self, '$new_seed', TMP_Random_new_seed_3 = function $$new_seed() {
      var self = this;

      
      return Math.abs($seed_generator.int32());
    
    }, TMP_Random_new_seed_3.$$arity = 0);
    Opal.defs(self, '$rand', TMP_Random_rand_4 = function $$rand(limit) {
      var self = this;

      return Opal.const_get_relative($nesting, 'DEFAULT').$rand(limit)
    }, TMP_Random_rand_4.$$arity = -1);
    Opal.defs(self, '$srand', TMP_Random_srand_5 = function $$srand(n) {
      var self = this, previous_seed = nil;

      if (n == null) {
        n = Opal.const_get_relative($nesting, 'Random').$new_seed();
      }
      
      n = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](n, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      previous_seed = Opal.const_get_relative($nesting, 'DEFAULT').$seed();
      Opal.const_get_relative($nesting, 'DEFAULT').$reseed(n);
      return previous_seed;
    }, TMP_Random_srand_5.$$arity = -1);
    Opal.const_set($nesting[0], 'DEFAULT', self.$new(self.$new_seed()));
    
    Opal.defn(self, '$==', TMP_Random_$eq$eq_6 = function(other) {
      var $a, self = this;

      
      if ($truthy(Opal.const_get_relative($nesting, 'Random')['$==='](other))) {
        } else {
        return false
      };
      return (($a = self.$seed()['$=='](other.$seed())) ? self.$state()['$=='](other.$state()) : self.$seed()['$=='](other.$seed()));
    }, TMP_Random_$eq$eq_6.$$arity = 1);
    
    Opal.defn(self, '$bytes', TMP_Random_bytes_8 = function $$bytes(length) {
      var TMP_7, self = this;

      
      length = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](length, Opal.const_get_relative($nesting, 'Integer'), "to_int");
      return $send(length.$times(), 'map', [], (TMP_7 = function(){var self = TMP_7.$$s || this;

      return self.$rand(255).$chr()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7)).$join().$encode(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Encoding'), 'ASCII_8BIT'));
    }, TMP_Random_bytes_8.$$arity = 1);
    return (Opal.defn(self, '$rand', TMP_Random_rand_9 = function $$rand(limit) {
      var self = this;

      
      function randomFloat() {
        self.state++;
        return self.$rng.quick();
      }

      function randomInt() {
        return Math.floor(randomFloat() * limit);
      }

      function randomRange() {
        var min = limit.begin,
            max = limit.end;

        if (min === nil || max === nil) {
          return nil;
        }

        var length = max - min;

        if (length < 0) {
          return nil;
        }

        if (length === 0) {
          return min;
        }

        if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {
          length++;
        }

        return self.$rand(length) + min;
      }

      if (limit == null) {
        return randomFloat();
      } else if (limit.$$is_range) {
        return randomRange();
      } else if (limit.$$is_number) {
        if (limit <= 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        if (limit % 1 === 0) {
          // integer
          return randomInt();
        } else {
          return randomFloat() * limit;
        }
      } else {
        limit = Opal.const_get_relative($nesting, 'Opal')['$coerce_to!'](limit, Opal.const_get_relative($nesting, 'Integer'), "to_int");

        if (limit <= 0) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        return randomInt();
      }
    
    }, TMP_Random_rand_9.$$arity = -1), nil) && 'rand';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["corelib/unsupported"] = function(Opal) {
  var TMP_public_30, TMP_private_31, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$raise', '$warn', '$%']);
  
  
  var warnings = {};

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      Opal.const_get_relative($nesting, 'Kernel').$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }
;
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_$lt$lt_1, TMP_String_capitalize$B_2, TMP_String_chomp$B_3, TMP_String_chop$B_4, TMP_String_downcase$B_5, TMP_String_gsub$B_6, TMP_String_lstrip$B_7, TMP_String_next$B_8, TMP_String_reverse$B_9, TMP_String_slice$B_10, TMP_String_squeeze$B_11, TMP_String_strip$B_12, TMP_String_sub$B_13, TMP_String_succ$B_14, TMP_String_swapcase$B_15, TMP_String_tr$B_16, TMP_String_tr_s$B_17, TMP_String_upcase$B_18;

    
    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";;
    
    Opal.defn(self, '$<<', TMP_String_$lt$lt_1 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("<<"))
    }, TMP_String_$lt$lt_1.$$arity = -1);
    
    Opal.defn(self, '$capitalize!', TMP_String_capitalize$B_2 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("capitalize!"))
    }, TMP_String_capitalize$B_2.$$arity = -1);
    
    Opal.defn(self, '$chomp!', TMP_String_chomp$B_3 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("chomp!"))
    }, TMP_String_chomp$B_3.$$arity = -1);
    
    Opal.defn(self, '$chop!', TMP_String_chop$B_4 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("chop!"))
    }, TMP_String_chop$B_4.$$arity = -1);
    
    Opal.defn(self, '$downcase!', TMP_String_downcase$B_5 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("downcase!"))
    }, TMP_String_downcase$B_5.$$arity = -1);
    
    Opal.defn(self, '$gsub!', TMP_String_gsub$B_6 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("gsub!"))
    }, TMP_String_gsub$B_6.$$arity = -1);
    
    Opal.defn(self, '$lstrip!', TMP_String_lstrip$B_7 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("lstrip!"))
    }, TMP_String_lstrip$B_7.$$arity = -1);
    
    Opal.defn(self, '$next!', TMP_String_next$B_8 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("next!"))
    }, TMP_String_next$B_8.$$arity = -1);
    
    Opal.defn(self, '$reverse!', TMP_String_reverse$B_9 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("reverse!"))
    }, TMP_String_reverse$B_9.$$arity = -1);
    
    Opal.defn(self, '$slice!', TMP_String_slice$B_10 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("slice!"))
    }, TMP_String_slice$B_10.$$arity = -1);
    
    Opal.defn(self, '$squeeze!', TMP_String_squeeze$B_11 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("squeeze!"))
    }, TMP_String_squeeze$B_11.$$arity = -1);
    
    Opal.defn(self, '$strip!', TMP_String_strip$B_12 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("strip!"))
    }, TMP_String_strip$B_12.$$arity = -1);
    
    Opal.defn(self, '$sub!', TMP_String_sub$B_13 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("sub!"))
    }, TMP_String_sub$B_13.$$arity = -1);
    
    Opal.defn(self, '$succ!', TMP_String_succ$B_14 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("succ!"))
    }, TMP_String_succ$B_14.$$arity = -1);
    
    Opal.defn(self, '$swapcase!', TMP_String_swapcase$B_15 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("swapcase!"))
    }, TMP_String_swapcase$B_15.$$arity = -1);
    
    Opal.defn(self, '$tr!', TMP_String_tr$B_16 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("tr!"))
    }, TMP_String_tr$B_16.$$arity = -1);
    
    Opal.defn(self, '$tr_s!', TMP_String_tr_s$B_17 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("tr_s!"))
    }, TMP_String_tr_s$B_17.$$arity = -1);
    return (Opal.defn(self, '$upcase!', TMP_String_upcase$B_18 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), (ERROR)['$%']("upcase!"))
    }, TMP_String_upcase$B_18.$$arity = -1), nil) && 'upcase!';
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_freeze_19, TMP_Kernel_frozen$q_20;

    
    var ERROR = "Object freezing is not supported by Opal";;
    
    Opal.defn(self, '$freeze', TMP_Kernel_freeze_19 = function $$freeze() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_Kernel_freeze_19.$$arity = 0);
    
    Opal.defn(self, '$frozen?', TMP_Kernel_frozen$q_20 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_Kernel_frozen$q_20.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_taint_21, TMP_Kernel_untaint_22, TMP_Kernel_tainted$q_23;

    
    var ERROR = "Object tainting is not supported by Opal";;
    
    Opal.defn(self, '$taint', TMP_Kernel_taint_21 = function $$taint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_Kernel_taint_21.$$arity = 0);
    
    Opal.defn(self, '$untaint', TMP_Kernel_untaint_22 = function $$untaint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_Kernel_untaint_22.$$arity = 0);
    
    Opal.defn(self, '$tainted?', TMP_Kernel_tainted$q_23 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_Kernel_tainted$q_23.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_public_24, TMP_Module_private_class_method_25, TMP_Module_private_method_defined$q_26, TMP_Module_private_constant_27;

    
    
    Opal.defn(self, '$public', TMP_Module_public_24 = function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    
    }, TMP_Module_public_24.$$arity = -1);
    Opal.alias(self, "private", "public");
    Opal.alias(self, "protected", "public");
    Opal.alias(self, "nesting", "public");
    
    Opal.defn(self, '$private_class_method', TMP_Module_private_class_method_25 = function $$private_class_method($a_rest) {
      var self = this;

      return self
    }, TMP_Module_private_class_method_25.$$arity = -1);
    Opal.alias(self, "public_class_method", "private_class_method");
    
    Opal.defn(self, '$private_method_defined?', TMP_Module_private_method_defined$q_26 = function(obj) {
      var self = this;

      return false
    }, TMP_Module_private_method_defined$q_26.$$arity = 1);
    
    Opal.defn(self, '$private_constant', TMP_Module_private_constant_27 = function $$private_constant($a_rest) {
      var self = this;

      return nil
    }, TMP_Module_private_constant_27.$$arity = -1);
    Opal.alias(self, "protected_method_defined?", "private_method_defined?");
    Opal.alias(self, "public_instance_methods", "instance_methods");
    return Opal.alias(self, "public_method_defined?", "method_defined?");
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_private_methods_28;

    
    
    Opal.defn(self, '$private_methods', TMP_Kernel_private_methods_28 = function $$private_methods($a_rest) {
      var self = this;

      return []
    }, TMP_Kernel_private_methods_28.$$arity = -1);
    Opal.alias(self, "private_instance_methods", "private_methods");
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_eval_29;

    
    Opal.defn(self, '$eval', TMP_Kernel_eval_29 = function($a_rest) {
      var self = this;

      return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "" + "To use Kernel#eval, you must first require 'opal-parser'. " + ("" + "See https://github.com/opal/opal/blob/" + (Opal.const_get_relative($nesting, 'RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."))
    }, TMP_Kernel_eval_29.$$arity = -1)
  })($nesting[0], $nesting);
  Opal.defs(self, '$public', TMP_public_30 = function($a_rest) {
    var self = this;

    return nil
  }, TMP_public_30.$$arity = -1);
  return Opal.defs(self, '$private', TMP_private_31 = function($a_rest) {
    var self = this;

    return nil
  }, TMP_private_31.$$arity = -1);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["opal"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("opal/mini");
  self.$require("corelib/string/inheritance");
  self.$require("corelib/string/encoding");
  self.$require("corelib/math");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/dir");
  self.$require("corelib/file");
  self.$require("corelib/process");
  self.$require("corelib/random");
  return self.$require("corelib/unsupported");
};

  Opal.require('opal');
}

// UMD Module
(function (root, factory) {
  if (typeof module === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory;
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register a named module.
    define('asciidoctor/latex', [], function () {
      return factory();
    });
  } else {
    // Browser globals (root is window)
    root.AsciidoctorLatex = factory;
  }
// eslint-disable-next-line no-unused-vars
}(this, function () {
/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'VERSION', "1.5.0.17.dev")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["set"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Set_$$_1, TMP_Set_initialize_2, TMP_Set_dup_4, TMP_Set_$_5, TMP_Set_inspect_6, TMP_Set_$eq$eq_8, TMP_Set_add_9, TMP_Set_classify_10, TMP_Set_collect$B_13, TMP_Set_delete_15, TMP_Set_delete$q_16, TMP_Set_delete_if_17, TMP_Set_add$q_20, TMP_Set_each_21, TMP_Set_empty$q_22, TMP_Set_eql$q_24, TMP_Set_clear_25, TMP_Set_include$q_26, TMP_Set_merge_28, TMP_Set_replace_29, TMP_Set_size_30, TMP_Set_subtract_32, TMP_Set_$_33, TMP_Set_superset$q_35, TMP_Set_proper_superset$q_37, TMP_Set_subset$q_39, TMP_Set_proper_subset$q_41, TMP_Set_to_a_42;

    def.hash = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', TMP_Set_$$_1 = function($a_rest) {
      var self = this, ary;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      ary = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        ary[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$new(ary)
    }, TMP_Set_$$_1.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Set_initialize_2 = function $$initialize(enum$) {
      var TMP_3, self = this, $iter = TMP_Set_initialize_2.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil;
      }
      if ($iter) TMP_Set_initialize_2.$$p = null;
      
      self.hash = Opal.const_get_relative($nesting, 'Hash').$new();
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy(Opal.const_get_relative($nesting, 'Enumerable')['$==='](enum$))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], (TMP_3 = function(item){var self = TMP_3.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
        } else {
        return self.$merge(enum$)
      };
    }, TMP_Set_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$dup', TMP_Set_dup_4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_Set_dup_4.$$arity = 0);
    
    Opal.defn(self, '$-', TMP_Set_$_5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_Set_$_5.$$arity = 1);
    Opal.alias(self, "difference", "-");
    
    Opal.defn(self, '$inspect', TMP_Set_inspect_6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, TMP_Set_inspect_6.$$arity = 0);
    
    Opal.defn(self, '$==', TMP_Set_$eq$eq_8 = function(other) {
      var $a, TMP_7, self = this;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy(($truthy($a = other['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? self.$size()['$=='](other.$size()) : $a))) {
        return $send(other, 'all?', [], (TMP_7 = function(o){var self = TMP_7.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))
        } else {
        return false
      }
    }, TMP_Set_$eq$eq_8.$$arity = 1);
    
    Opal.defn(self, '$add', TMP_Set_add_9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, TMP_Set_add_9.$$arity = 1);
    Opal.alias(self, "<<", "add");
    
    Opal.defn(self, '$classify', TMP_Set_classify_10 = function $$classify() {
      var TMP_11, TMP_12, self = this, $iter = TMP_Set_classify_10.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Set_classify_10.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_11 = function(h, k){var self = TMP_11.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
      
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
      $send(self, 'each', [], (TMP_12 = function(item){var self = TMP_12.$$s || this;
if (item == null) item = nil;
      return result['$[]'](Opal.yield1(block, item)).$add(item)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
      return result;
    }, TMP_Set_classify_10.$$arity = 0);
    
    Opal.defn(self, '$collect!', TMP_Set_collect$B_13 = function() {
      var TMP_14, self = this, $iter = TMP_Set_collect$B_13.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Set_collect$B_13.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return result['$<<'](Opal.yield1(block, item))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
      return self.$replace(result);
    }, TMP_Set_collect$B_13.$$arity = 0);
    Opal.alias(self, "map!", "collect!");
    
    Opal.defn(self, '$delete', TMP_Set_delete_15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, TMP_Set_delete_15.$$arity = 1);
    
    Opal.defn(self, '$delete?', TMP_Set_delete$q_16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
        } else {
        return nil
      }
    }, TMP_Set_delete$q_16.$$arity = 1);
    
    Opal.defn(self, '$delete_if', TMP_Set_delete_if_17 = function $$delete_if() {try {

      var $a, TMP_18, TMP_19, self = this, $iter = TMP_Set_delete_if_17.$$p, $yield = $iter || nil;

      if ($iter) TMP_Set_delete_if_17.$$p = null;
      
      ($truthy($a = ($yield !== nil)) ? $a : Opal.ret(self.$enum_for("delete_if")));
      $send($send(self, 'select', [], (TMP_18 = function(o){var self = TMP_18.$$s || this;
if (o == null) o = nil;
      return Opal.yield1($yield, o);}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18)), 'each', [], (TMP_19 = function(o){var self = TMP_19.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Set_delete_if_17.$$arity = 0);
    
    Opal.defn(self, '$add?', TMP_Set_add$q_20 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
        } else {
        return self.$add(o)
      }
    }, TMP_Set_add$q_20.$$arity = 1);
    
    Opal.defn(self, '$each', TMP_Set_each_21 = function $$each() {
      var self = this, $iter = TMP_Set_each_21.$$p, block = $iter || nil;

      if ($iter) TMP_Set_each_21.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, TMP_Set_each_21.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Set_empty$q_22 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, TMP_Set_empty$q_22.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Set_eql$q_24 = function(other) {
      var TMP_23, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], (TMP_23 = function(){var self = TMP_23.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23)))
    }, TMP_Set_eql$q_24.$$arity = 1);
    
    Opal.defn(self, '$clear', TMP_Set_clear_25 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, TMP_Set_clear_25.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Set_include$q_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, TMP_Set_include$q_26.$$arity = 1);
    Opal.alias(self, "member?", "include?");
    
    Opal.defn(self, '$merge', TMP_Set_merge_28 = function $$merge(enum$) {
      var TMP_27, self = this;

      
      $send(enum$, 'each', [], (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27));
      return self;
    }, TMP_Set_merge_28.$$arity = 1);
    
    Opal.defn(self, '$replace', TMP_Set_replace_29 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_Set_replace_29.$$arity = 1);
    
    Opal.defn(self, '$size', TMP_Set_size_30 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, TMP_Set_size_30.$$arity = 0);
    Opal.alias(self, "length", "size");
    
    Opal.defn(self, '$subtract', TMP_Set_subtract_32 = function $$subtract(enum$) {
      var TMP_31, self = this;

      
      $send(enum$, 'each', [], (TMP_31 = function(item){var self = TMP_31.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
      return self;
    }, TMP_Set_subtract_32.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Set_$_33 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_Set_$_33.$$arity = 1);
    
    Opal.defn(self, '$superset?', TMP_Set_superset$q_35 = function(set) {
      var $a, TMP_34, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_34 = function(o){var self = TMP_34.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34));
    }, TMP_Set_superset$q_35.$$arity = 1);
    Opal.alias(self, ">=", "superset?");
    
    Opal.defn(self, '$proper_superset?', TMP_Set_proper_superset$q_37 = function(set) {
      var $a, TMP_36, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_36 = function(o){var self = TMP_36.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
    }, TMP_Set_proper_superset$q_37.$$arity = 1);
    Opal.alias(self, ">", "proper_superset?");
    
    Opal.defn(self, '$subset?', TMP_Set_subset$q_39 = function(set) {
      var $a, TMP_38, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_38 = function(o){var self = TMP_38.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));
    }, TMP_Set_subset$q_39.$$arity = 1);
    Opal.alias(self, "<=", "subset?");
    
    Opal.defn(self, '$proper_subset?', TMP_Set_proper_subset$q_41 = function(set) {
      var $a, TMP_40, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_40 = function(o){var self = TMP_40.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));
    }, TMP_Set_proper_subset$q_41.$$arity = 1);
    Opal.alias(self, "<", "proper_subset?");
    Opal.alias(self, "+", "|");
    Opal.alias(self, "union", "|");
    return (Opal.defn(self, '$to_a', TMP_Set_to_a_42 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, TMP_Set_to_a_42.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_set_43;

    
    Opal.defn(self, '$to_set', TMP_Enumerable_to_set_43 = function $$to_set(klass, $a_rest) {
      var self = this, args, $iter = TMP_Enumerable_to_set_43.$$p, block = $iter || nil;

      if (klass == null) {
        klass = Opal.const_get_relative($nesting, 'Set');
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_to_set_43.$$p = null;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc())
    }, TMP_Enumerable_to_set_43.$$arity = -1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/opal_ext/file"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$new', '$attr_reader', '$delete', '$gsub', '$==', '$read', '$size', '$to_enum', '$chomp', '$each_line', '$readlines', '$split', '$===']);
  
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_open_1;

    
    Opal.defn(self, '$open', TMP_Kernel_open_1 = function $$open(path, $a_rest) {
      var self = this, rest, $iter = TMP_Kernel_open_1.$$p, $yield = $iter || nil, file = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      rest = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        rest[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_open_1.$$p = null;
      
      file = $send(Opal.const_get_relative($nesting, 'File'), 'new', [path].concat(Opal.to_a(rest)));
      if (($yield !== nil)) {
        return Opal.yield1($yield, file);
        } else {
        return file
      };
    }, TMP_Kernel_open_1.$$arity = -2)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_File_initialize_2, TMP_File_read_3, TMP_File_each_line_4, TMP_File_readlines_5, TMP_File_readlines_6, TMP_File_file$q_7, TMP_File_readable$q_8, TMP_File_read_9;

    def.eof = def.path = nil;
    
    self.$attr_reader("eof");
    self.$attr_reader("lineno");
    self.$attr_reader("path");
    
    Opal.defn(self, '$initialize', TMP_File_initialize_2 = function $$initialize(path, flags) {
      var self = this, encoding_flag_regexp = nil;

      if (flags == null) {
        flags = "r";
      }
      
      self.path = path;
      self.contents = nil;
      self.eof = false;
      self.lineno = 0;
      flags = flags.$delete("b");
      encoding_flag_regexp = /:(.*)/;
      flags = flags.$gsub(encoding_flag_regexp, "");
      self.flags = flags;
      if (Opal.const_get_relative($nesting, 'JAVASCRIPT_IO_MODULE')['$==']("node")) {
        return (self.fd = require('fs').openSync(path, flags))
        } else {
        return nil
      };
    }, TMP_File_initialize_2.$$arity = -2);
    
    Opal.defn(self, '$read', TMP_File_read_3 = function $$read() {
      var self = this, res = nil;

      if ($truthy(self.eof)) {
        return ""
        } else {
        
        res = Opal.const_get_relative($nesting, 'File').$read(self.path);
        self.eof = true;
        self.lineno = res.$size();
        return res;
      }
    }, TMP_File_read_3.$$arity = 0);
    
    Opal.defn(self, '$each_line', TMP_File_each_line_4 = function $$each_line(separator) {
      var self = this, $iter = TMP_File_each_line_4.$$p, block = $iter || nil, lines = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ($iter) TMP_File_each_line_4.$$p = null;
      
      if ($truthy(self.eof)) {
        return (function() {if ((block !== nil)) {
          return self
          } else {
          return [].$to_enum()
        }; return nil; })()};
      if ((block !== nil)) {
        
        lines = Opal.const_get_relative($nesting, 'File').$read(self.path);
        
        self.eof = false;
        self.lineno = 0;
        var chomped  = lines.$chomp(),
            trailing = lines.length != chomped.length,
            splitted = chomped.split(separator);

        for (var i = 0, length = splitted.length; i < length; i++) {
          self.lineno += 1;
          if (i < length - 1 || trailing) {
            Opal.yield1(block, splitted[i] + separator);
          }
          else {
            Opal.yield1(block, splitted[i]);
          }
        }
        self.eof = true;
      ;
        return self;
        } else {
        return self.$read().$each_line()
      };
    }, TMP_File_each_line_4.$$arity = -1);
    
    Opal.defn(self, '$readlines', TMP_File_readlines_5 = function $$readlines() {
      var self = this;

      return Opal.const_get_relative($nesting, 'File').$readlines(self.path)
    }, TMP_File_readlines_5.$$arity = 0);
    Opal.defs(self, '$readlines', TMP_File_readlines_6 = function $$readlines(path, separator) {
      var self = this, content = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      
      content = Opal.const_get_relative($nesting, 'File').$read(path);
      return content.$split(separator);
    }, TMP_File_readlines_6.$$arity = -2);
    Opal.defs(self, '$file?', TMP_File_file$q_7 = function(path) {
      var self = this;

      return true
    }, TMP_File_file$q_7.$$arity = 1);
    Opal.defs(self, '$readable?', TMP_File_readable$q_8 = function(path) {
      var self = this;

      return true
    }, TMP_File_readable$q_8.$$arity = 1);
    return Opal.defs(self, '$read', TMP_File_read_9 = function $$read(path) {
      var self = this, $case = nil;

      return (function() {$case = Opal.const_get_relative($nesting, 'JAVASCRIPT_IO_MODULE');
      if ("node"['$===']($case)) {return require('fs').readFileSync(path, 'utf8');}
      else if ("phantomjs"['$===']($case)) {return require('fs').read(path);}
      else if ("java_nio"['$===']($case)) {
        var Paths = Java.type('java.nio.file.Paths');
        var Files = Java.type('java.nio.file.Files');
        var lines = Files.readAllLines(Paths.get(path), Java.type('java.nio.charset.StandardCharsets').UTF_8);
        var data = [];
        lines.forEach(function(line) { data.push(line); });
        return data.join("\n");
      }
      else if ("xmlhttprequest"['$===']($case)) {
        var data = '';
        var status = -1;
        try {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', path, false);
          xhr.addEventListener('load', function() {
            status = this.status;
            // status is 0 for local file mode (i.e., file://)
            if (status == 0 || status == 200) {
              data = this.responseText;
            }
          });
          xhr.overrideMimeType('text/plain');
          xhr.send();
        }
        catch (e) {
          status = 0;
        }
        // assume that no data in local file mode means it doesn't exist
        if (status == 404 || (status == 0 && data == '')) {
          throw Opal.const_get_relative($nesting, 'IOError').$new('No such file or directory: ' + path);
        }
        return data;
      }
      else if ("spidermonkey"['$===']($case)) {return read(path);}
      else {return ""}})()
    }, TMP_File_read_9.$$arity = 1);
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IO_read_10;

    return Opal.defs(self, '$read', TMP_IO_read_10 = function $$read(path) {
      var self = this;

      return Opal.const_get_relative($nesting, 'File').$read(path)
    }, TMP_IO_read_10.$$arity = 1)
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/opal_ext/match_data"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MatchData_$$$eq_1;

    def.matches = nil;
    return (Opal.defn(self, '$[]=', TMP_MatchData_$$$eq_1 = function(idx, val) {
      var self = this, $writer = nil;

      
      $writer = [idx, val];
      $send(self.matches, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, TMP_MatchData_$$$eq_1.$$arity = 2), nil) && '[]='
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/opal_ext/kernel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_freeze_1;

    
    Opal.defn(self, '$freeze', TMP_Kernel_freeze_1 = function $$freeze() {
      var self = this;

      return self
    }, TMP_Kernel_freeze_1.$$arity = 0)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/opal_ext/thread_safe"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $ThreadSafe, self = $ThreadSafe = $module($base, 'ThreadSafe');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Cache(){};
      var self = $Cache = $klass($base, $super, 'Cache', $Cache);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_qualified('::', 'Hash'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/opal_ext/string"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$method_defined?', '$<', '$length', '$bytes', '$to_s', '$byteslice', '$==', '$with_index', '$select', '$[]', '$even?', '$_original_unpack']);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_limit_bytesize_1, TMP_String_unpack_3;

    
    if ($truthy(self['$method_defined?']("limit_bytesize"))) {
      } else {
      
      Opal.defn(self, '$limit_bytesize', TMP_String_limit_bytesize_1 = function $$limit_bytesize(size) {
        var self = this, result = nil;

        
        if ($truthy($rb_lt(size, self.$bytes().$length()))) {
          } else {
          return self.$to_s()
        };
        result = self.$byteslice(0, size);
        return result.$to_s();
      }, TMP_String_limit_bytesize_1.$$arity = 1)
    };
    if ($truthy(self['$method_defined?']("limit"))) {
      } else {
      Opal.alias(self, "limit", "limit_bytesize")
    };
    Opal.alias(self, "_original_unpack", "unpack");
    return (Opal.defn(self, '$unpack', TMP_String_unpack_3 = function $$unpack(format) {
      var TMP_2, self = this;

      if (format['$==']("C3")) {
        return $send(self['$[]'](0, 3).$bytes().$select(), 'with_index', [], (TMP_2 = function(_, i){var self = TMP_2.$$s || this;
if (_ == null) _ = nil;if (i == null) i = nil;
        return i['$even?']()}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2))
        } else {
        return self.$_original_unpack(format)
      }
    }, TMP_String_unpack_3.$$arity = 1), nil) && 'unpack';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/opal_ext/nashorn/io"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send, $gvars = Opal.gvars, $writer = nil;
  if ($gvars.stdout == null) $gvars.stdout = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;

  Opal.add_stubs(['$write_proc=', '$-']);
  
  
  $writer = [function(s){print(s)}];
  $send($gvars.stdout, 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [function(s){print(s)}];
  $send($gvars.stderr, 'write_proc=', Opal.to_a($writer));
  return $writer[$rb_minus($writer["length"], 1)];;
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/opal_ext/electron/io"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send, $gvars = Opal.gvars, $writer = nil;
  if ($gvars.stdout == null) $gvars.stdout = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;

  Opal.add_stubs(['$write_proc=', '$-']);
  
  
  $writer = [function(s){console.log(s)}];
  $send($gvars.stdout, 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [function(s){console.error(s)}];
  $send($gvars.stderr, 'write_proc=', Opal.to_a($writer));
  return $writer[$rb_minus($writer["length"], 1)];;
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/opal_ext/node/file"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$exist?']);
  return (function($base, $super, $parent_nesting) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_File_readable$q_1;

    return Opal.defs(self, '$readable?', TMP_File_readable$q_1 = function(path) {
      var self = this;

      
      if ($truthy(self['$exist?'](path))) {
        } else {
        return false
      };
      return "" + "\n" + "      var fs = require('fs');\n" + "      try {\n" + "        fs.accessSync(path, fs.R_OK);\n" + "        return true;\n" + "      } catch (error) {\n" + "        return false;\n" + "      }\n" + "    ";
    }, TMP_File_readable$q_1.$$arity = 1)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/opal_ext"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$==']);
  
  
  var isNode = typeof process === 'object' && typeof process.versions === 'object' && process.browser != true,
      isElectron = typeof navigator === 'object' && typeof navigator.userAgent === 'string' && typeof navigator.userAgent.indexOf('Electron') !== -1,
      isBrowser = typeof window === 'object',
      isNashorn = typeof Java === 'object' && Java.type,
      isRhino = typeof java === 'object',
      isPhantomJS = typeof window === 'object' && typeof window.phantom === 'object',
      isWebWorker = typeof importScripts === 'function',
      isSpiderMonkey = typeof JSRuntime === 'object',
      platform,
      engine,
      framework,
      ioModule;

  // Load common modules
  Opal.load("pathname");
  Opal.load("base64");

  if (typeof moduleConfig === 'object' && typeof moduleConfig.runtime === 'object') {
    var runtime = moduleConfig.runtime;
    platform = runtime.platform;
    engine = runtime.engine;
    framework = runtime.framework;
    ioModule = runtime.ioModule;
  }

  if (typeof platform === 'undefined') {
    // Try to automatically detect the JavaScript platform, engine and framework
    if (isNode) {
      platform = platform || 'node';
      engine = engine || 'v8';
      if (isElectron) {
        framework = framework || 'electron';
      }
    }
    else if (isNashorn) {
      platform = plaform || 'java';
      engine = engine || 'nashorn';
    }
    else if (isRhino) {
      platform = platform || 'java';
      engine = engine || 'rhino';
    }
    else if (isSpiderMonkey) {
      platform = platform || 'standalone';
      framework = framework || 'spidermonkey';
    }
    else if (isBrowser) {
      platform = platform || 'browser';
      if (isPhantomJS) {
        framework = framework || 'phantomjs';
      }
    }
    // NOTE: WebWorker are not limited to browser
    if (isWebWorker) {
      framework = framework || 'webworker';
    }
  }

  if (typeof platform === 'undefined') {
    throw new Error('Unable to automatically detect the JavaScript platform, please configure Asciidoctor.js: `Asciidoctor({runtime: {platform: \'node\'}})`');
  }

  // Optional information
  if (typeof framework === 'undefined') {
    framework = '';
  }
  if (typeof engine === 'undefined') {
    engine = '';
  }

  // IO Module
  if (typeof ioModule !== 'undefined') {
    if (ioModule != 'spidermonkey'
         && ioModule != 'phantomjs'
         && ioModule != 'node'
         && ioModule != 'java_nio'
         && ioModule != 'xmlhttprequest') {
      throw new Error('Invalid IO module, `config.ioModule` must be one of: spidermonkey, phantomjs, node, java_nio or xmlhttprequest');
    }
  } else {
    if (framework === 'spidermonkey') {
      ioModule = 'spidermonkey';
    } else if (framework === 'phantomjs') {
      ioModule = 'phantomjs';
    } else if (platform === 'node') {
      ioModule = 'node';
    } else if (engine === 'nashorn') {
      ioModule = 'java_nio'
    } else if (platform === 'browser' || typeof XmlHTTPRequest !== 'undefined') {
      ioModule = 'xmlhttprequest'
    } else {
      throw new Error('Unable to automatically detect the IO module, please configure Asciidoctor.js: `Asciidoctor({runtime: {ioModule: \'node\'}})`');
    }
  }

;
  Opal.const_set($nesting[0], 'JAVASCRIPT_IO_MODULE', ioModule);
  Opal.const_set($nesting[0], 'JAVASCRIPT_PLATFORM', platform);
  Opal.const_set($nesting[0], 'JAVASCRIPT_ENGINE', engine);
  Opal.const_set($nesting[0], 'JAVASCRIPT_FRAMEWORK', framework);
  self.$require("asciidoctor/js/opal_ext/file");
  self.$require("asciidoctor/js/opal_ext/match_data");
  self.$require("asciidoctor/js/opal_ext/kernel");
  self.$require("asciidoctor/js/opal_ext/thread_safe");
  self.$require("asciidoctor/js/opal_ext/string");
  if (Opal.const_get_relative($nesting, 'JAVASCRIPT_ENGINE')['$==']("nashorn")) {
    self.$require("asciidoctor/js/opal_ext/nashorn/io")};
  if (Opal.const_get_relative($nesting, 'JAVASCRIPT_FRAMEWORK')['$==']("electron")) {
    self.$require("asciidoctor/js/opal_ext/electron/io")};
  if (Opal.const_get_relative($nesting, 'JAVASCRIPT_PLATFORM')['$==']("node")) {
    
    self.$require("asciidoctor/js/opal_ext/node/file");
    return Opal.load("nodejs");
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/rx"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'P_L', "A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢴऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々〆〱-〵〻〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿕ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛥꜗ-ꜟꜢ-ꞈꞋ-ꞭꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ");
    Opal.const_set($nesting[0], 'P_Nl', "ᛮ-ᛰⅠ-ↂↅ-ↈ〇〡-〩〸-〺ꛦ-ꛯ");
    Opal.const_set($nesting[0], 'P_Nd', "0-9٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯෦-෯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９");
    Opal.const_set($nesting[0], 'P_Pc', "_‿⁀⁔︳︴﹍-﹏＿");
    Opal.const_set($nesting[0], 'CC_ALPHA', "" + (Opal.const_get_relative($nesting, 'P_L')) + (Opal.const_get_relative($nesting, 'P_Nl')));
    Opal.const_set($nesting[0], 'CG_ALPHA', "" + "[" + (Opal.const_get_relative($nesting, 'CC_ALPHA')) + "]");
    Opal.const_set($nesting[0], 'CC_ALNUM', "" + (Opal.const_get_relative($nesting, 'CC_ALPHA')) + (Opal.const_get_relative($nesting, 'P_Nd')));
    Opal.const_set($nesting[0], 'CG_ALNUM', "" + "[" + (Opal.const_get_relative($nesting, 'CC_ALNUM')) + "]");
    Opal.const_set($nesting[0], 'CC_WORD', "" + (Opal.const_get_relative($nesting, 'CC_ALNUM')) + (Opal.const_get_relative($nesting, 'P_Pc')));
    Opal.const_set($nesting[0], 'CG_WORD', "" + "[" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "]");
    Opal.const_set($nesting[0], 'CG_BLANK', "[ \\t]");
    Opal.const_set($nesting[0], 'CC_EOL', "(?=\\n|$)");
    Opal.const_set($nesting[0], 'CG_GRAPH', "[^\\s\\x00-\\x1F\\x7F]");
    Opal.const_set($nesting[0], 'CC_ALL', "[\\s\\S]");
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["strscan"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$anchor', '$scan_until', '$length', '$size', '$rest', '$pos=', '$-', '$private']);
  return (function($base, $super, $parent_nesting) {
    function $StringScanner(){};
    var self = $StringScanner = $klass($base, $super, 'StringScanner', $StringScanner);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StringScanner_initialize_1, TMP_StringScanner_beginning_of_line$q_2, TMP_StringScanner_scan_3, TMP_StringScanner_scan_until_4, TMP_StringScanner_$$_5, TMP_StringScanner_check_6, TMP_StringScanner_check_until_7, TMP_StringScanner_peek_8, TMP_StringScanner_eos$q_9, TMP_StringScanner_exist$q_10, TMP_StringScanner_skip_11, TMP_StringScanner_skip_until_12, TMP_StringScanner_get_byte_13, TMP_StringScanner_match$q_14, TMP_StringScanner_pos$eq_15, TMP_StringScanner_matched_size_16, TMP_StringScanner_post_match_17, TMP_StringScanner_pre_match_18, TMP_StringScanner_reset_19, TMP_StringScanner_rest_20, TMP_StringScanner_rest$q_21, TMP_StringScanner_rest_size_22, TMP_StringScanner_terminate_23, TMP_StringScanner_unscan_24, TMP_StringScanner_anchor_25;

    def.pos = def.string = def.working = def.matched = def.prev_pos = def.match = nil;
    
    self.$attr_reader("pos");
    self.$attr_reader("matched");
    
    Opal.defn(self, '$initialize', TMP_StringScanner_initialize_1 = function $$initialize(string) {
      var self = this;

      
      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return (self.match = []);
    }, TMP_StringScanner_initialize_1.$$arity = 1);
    self.$attr_reader("string");
    
    Opal.defn(self, '$beginning_of_line?', TMP_StringScanner_beginning_of_line$q_2 = function() {
      var self = this;

      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n"
    }, TMP_StringScanner_beginning_of_line$q_2.$$arity = 0);
    Opal.alias(self, "bol?", "beginning_of_line?");
    
    Opal.defn(self, '$scan', TMP_StringScanner_scan_3 = function $$scan(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else if (typeof(result) === 'object') {
        self.prev_pos = self.pos;
        self.pos     += result[0].length;
        self.working  = self.working.substring(result[0].length);
        self.matched  = result[0];
        self.match    = result;

        return result[0];
      }
      else if (typeof(result) === 'string') {
        self.pos     += result.length;
        self.working  = self.working.substring(result.length);

        return result;
      }
      else {
        return nil;
      }
    ;
    }, TMP_StringScanner_scan_3.$$arity = 1);
    
    Opal.defn(self, '$scan_until', TMP_StringScanner_scan_until_4 = function $$scan_until(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var pos     = self.pos,
          working = self.working,
          result;

      while (true) {
        result   = pattern.exec(working);
        pos     += 1;
        working  = working.substr(1);

        if (result == null) {
          if (working.length === 0) {
            return self.matched = nil;
          }

          continue;
        }

        self.matched  = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);
        self.prev_pos = pos - 1;
        self.pos      = pos;
        self.working  = working.substr(result[0].length);

        return self.matched;
      }
    ;
    }, TMP_StringScanner_scan_until_4.$$arity = 1);
    
    Opal.defn(self, '$[]', TMP_StringScanner_$$_5 = function(idx) {
      var self = this;

      
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      if (match[idx] == null) {
        return nil;
      }

      return match[idx];
    
    }, TMP_StringScanner_$$_5.$$arity = 1);
    
    Opal.defn(self, '$check', TMP_StringScanner_check_6 = function $$check(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
    ;
    }, TMP_StringScanner_check_6.$$arity = 1);
    
    Opal.defn(self, '$check_until', TMP_StringScanner_check_until_7 = function $$check_until(pattern) {
      var self = this;

      
      var prev_pos = self.prev_pos,
          pos      = self.pos;

      var result = self.$scan_until(pattern);

      if (result !== nil) {
        self.matched = result.substr(-1);
        self.working = self.string.substr(pos);
      }

      self.prev_pos = prev_pos;
      self.pos      = pos;

      return result;
    
    }, TMP_StringScanner_check_until_7.$$arity = 1);
    
    Opal.defn(self, '$peek', TMP_StringScanner_peek_8 = function $$peek(length) {
      var self = this;

      return self.working.substring(0, length)
    }, TMP_StringScanner_peek_8.$$arity = 1);
    
    Opal.defn(self, '$eos?', TMP_StringScanner_eos$q_9 = function() {
      var self = this;

      return self.working.length === 0
    }, TMP_StringScanner_eos$q_9.$$arity = 0);
    
    Opal.defn(self, '$exist?', TMP_StringScanner_exist$q_10 = function(pattern) {
      var self = this;

      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else if (result.index == 0) {
        return 0;
      }
      else {
        return result.index + 1;
      }
    
    }, TMP_StringScanner_exist$q_10.$$arity = 1);
    
    Opal.defn(self, '$skip', TMP_StringScanner_skip_11 = function $$skip(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else {
        var match_str = result[0];
        var match_len = match_str.length;

        self.matched   = match_str;
        self.prev_pos  = self.pos;
        self.pos      += match_len;
        self.working   = self.working.substring(match_len);

        return match_len;
      }
    ;
    }, TMP_StringScanner_skip_11.$$arity = 1);
    
    Opal.defn(self, '$skip_until', TMP_StringScanner_skip_until_12 = function $$skip_until(pattern) {
      var self = this;

      
      var result = self.$scan_until(pattern);

      if (result === nil) {
        return nil;
      }
      else {
        self.matched = result.substr(-1);

        return result.length;
      }
    
    }, TMP_StringScanner_skip_until_12.$$arity = 1);
    
    Opal.defn(self, '$get_byte', TMP_StringScanner_get_byte_13 = function $$get_byte() {
      var self = this;

      
      var result = nil;

      if (self.pos < self.string.length) {
        self.prev_pos  = self.pos;
        self.pos      += 1;
        result      = self.matched = self.working.substring(0, 1);
        self.working   = self.working.substring(1);
      }
      else {
        self.matched = nil;
      }

      return result;
    
    }, TMP_StringScanner_get_byte_13.$$arity = 0);
    Opal.alias(self, "getch", "get_byte");
    
    Opal.defn(self, '$match?', TMP_StringScanner_match$q_14 = function(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else {
        self.prev_pos = self.pos;

        return result[0].length;
      }
    ;
    }, TMP_StringScanner_match$q_14.$$arity = 1);
    
    Opal.defn(self, '$pos=', TMP_StringScanner_pos$eq_15 = function(pos) {
      var self = this;

      
      
      if (pos < 0) {
        pos += self.string.$length();
      }
    ;
      self.pos = pos;
      return (self.working = self.string.slice(pos));
    }, TMP_StringScanner_pos$eq_15.$$arity = 1);
    
    Opal.defn(self, '$matched_size', TMP_StringScanner_matched_size_16 = function $$matched_size() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.matched.length
    
    }, TMP_StringScanner_matched_size_16.$$arity = 0);
    
    Opal.defn(self, '$post_match', TMP_StringScanner_post_match_17 = function $$post_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(self.pos);
    
    }, TMP_StringScanner_post_match_17.$$arity = 0);
    
    Opal.defn(self, '$pre_match', TMP_StringScanner_pre_match_18 = function $$pre_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(0, self.prev_pos);
    
    }, TMP_StringScanner_pre_match_18.$$arity = 0);
    
    Opal.defn(self, '$reset', TMP_StringScanner_reset_19 = function $$reset() {
      var self = this;

      
      self.working = self.string;
      self.matched = nil;
      return (self.pos = 0);
    }, TMP_StringScanner_reset_19.$$arity = 0);
    
    Opal.defn(self, '$rest', TMP_StringScanner_rest_20 = function $$rest() {
      var self = this;

      return self.working
    }, TMP_StringScanner_rest_20.$$arity = 0);
    
    Opal.defn(self, '$rest?', TMP_StringScanner_rest$q_21 = function() {
      var self = this;

      return self.working.length !== 0
    }, TMP_StringScanner_rest$q_21.$$arity = 0);
    
    Opal.defn(self, '$rest_size', TMP_StringScanner_rest_size_22 = function $$rest_size() {
      var self = this;

      return self.$rest().$size()
    }, TMP_StringScanner_rest_size_22.$$arity = 0);
    
    Opal.defn(self, '$terminate', TMP_StringScanner_terminate_23 = function $$terminate() {
      var self = this, $writer = nil;

      
      self.match = nil;
      
      $writer = [self.string.$length()];
      $send(self, 'pos=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, TMP_StringScanner_terminate_23.$$arity = 0);
    
    Opal.defn(self, '$unscan', TMP_StringScanner_unscan_24 = function $$unscan() {
      var self = this;

      
      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    }, TMP_StringScanner_unscan_24.$$arity = 0);
    self.$private();
    return (Opal.defn(self, '$anchor', TMP_StringScanner_anchor_25 = function $$anchor(pattern) {
      var self = this;

      
      var flags = pattern.toString().match(/\/([^\/]+)$/);
      flags = flags ? flags[1] : undefined;
      return new RegExp('^(?:' + pattern.source + ')', flags);
    
    }, TMP_StringScanner_anchor_25.$$arity = 1), nil) && 'anchor';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("asciidoctor/js/opal_ext");
  self.$require("asciidoctor/js/rx");
  return self.$require("strscan");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/converter/base"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$node_name', '$empty?', '$send', '$content']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      var $Converter, self = $Converter = $module($base, 'Converter');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      nil
    })($nesting[0], $nesting);
    (function($base, $super, $parent_nesting) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$include(Opal.const_get_relative($nesting, 'Converter'))
    })(Opal.const_get_relative($nesting, 'Converter'), null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $BuiltIn(){};
      var self = $BuiltIn = $klass($base, $super, 'BuiltIn', $BuiltIn);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BuiltIn_initialize_1, TMP_BuiltIn_convert_2, TMP_BuiltIn_content_3, TMP_BuiltIn_skip_4;

      
      
      Opal.defn(self, '$initialize', TMP_BuiltIn_initialize_1 = function $$initialize(backend, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        return nil
      }, TMP_BuiltIn_initialize_1.$$arity = -2);
      
      Opal.defn(self, '$convert', TMP_BuiltIn_convert_2 = function $$convert(node, transform, opts) {
        var $a, self = this;

        if (transform == null) {
          transform = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        
        transform = ($truthy($a = transform) ? $a : node.$node_name());
        if ($truthy(opts['$empty?']())) {
          
          return self.$send(transform, node);
          } else {
          
          return self.$send(transform, node, opts);
        };
      }, TMP_BuiltIn_convert_2.$$arity = -2);
      Opal.alias(self, "handles?", "respond_to?");
      
      Opal.defn(self, '$content', TMP_BuiltIn_content_3 = function $$content(node) {
        var self = this;

        return node.$content()
      }, TMP_BuiltIn_content_3.$$arity = 1);
      Opal.alias(self, "pass", "content");
      return (Opal.defn(self, '$skip', TMP_BuiltIn_skip_4 = function $$skip(node) {
        var self = this;

        return nil
      }, TMP_BuiltIn_skip_4.$$arity = 1), nil) && 'skip';
    })(Opal.const_get_relative($nesting, 'Converter'), null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/converter/factory"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$new', '$require', '$to_s', '$warn', '$register', '$default', '$resolve', '$create', '$converters', '$unregister_all', '$attr_reader', '$each', '$[]=', '$-', '$==', '$[]', '$clear', '$===', '$key?']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Converter, self = $Converter = $module($base, 'Converter');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Factory(){};
        var self = $Factory = $klass($base, $super, 'Factory', $Factory);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Factory_initialize_7, TMP_Factory_register_9, TMP_Factory_resolve_10, TMP_Factory_unregister_all_11, TMP_Factory_create_12;

        def.converters = def.star_converter = nil;
        
        self.__default__ = nil;
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_default_1, TMP_register_2, TMP_resolve_3, TMP_create_4, TMP_converters_5, TMP_unregister_all_6;

          
          
          Opal.defn(self, '$default', TMP_default_1 = function(initialize_singleton) {
            var $a, $b, self = this;
            if (self.__default__ == null) self.__default__ = nil;

            if (initialize_singleton == null) {
              initialize_singleton = true;
            }
            
            if ($truthy(initialize_singleton)) {
              } else {
              return ($truthy($a = self.__default__) ? $a : self.$new())
            };
            return (self.__default__ = ($truthy($a = self.__default__) ? $a : (function() { try {
              
              if ($truthy((($b = Opal.const_get_qualified('::', 'ThreadSafe', 'skip_raise')) ? 'constant' : nil))) {
                } else {
                self.$require("thread_safe".$to_s())
              };
              return self.$new(Opal.const_get_qualified(Opal.const_get_qualified('::', 'ThreadSafe'), 'Cache').$new());
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_qualified('::', 'LoadError')])) {
                try {
                  
                  self.$warn("asciidoctor: WARNING: gem 'thread_safe' is not installed. This gem is recommended when registering custom converters.");
                  return self.$new();
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }})()));
          }, TMP_default_1.$$arity = -1);
          
          Opal.defn(self, '$register', TMP_register_2 = function $$register(converter, backends) {
            var self = this;

            if (backends == null) {
              backends = ["*"];
            }
            return self.$default().$register(converter, backends)
          }, TMP_register_2.$$arity = -2);
          
          Opal.defn(self, '$resolve', TMP_resolve_3 = function $$resolve(backend) {
            var self = this;

            return self.$default().$resolve(backend)
          }, TMP_resolve_3.$$arity = 1);
          
          Opal.defn(self, '$create', TMP_create_4 = function $$create(backend, opts) {
            var self = this;

            if (opts == null) {
              opts = $hash2([], {});
            }
            return self.$default().$create(backend, opts)
          }, TMP_create_4.$$arity = -2);
          
          Opal.defn(self, '$converters', TMP_converters_5 = function $$converters() {
            var self = this;

            return self.$default().$converters()
          }, TMP_converters_5.$$arity = 0);
          return (Opal.defn(self, '$unregister_all', TMP_unregister_all_6 = function $$unregister_all() {
            var self = this;

            return self.$default().$unregister_all()
          }, TMP_unregister_all_6.$$arity = 0), nil) && 'unregister_all';
        })(Opal.get_singleton_class(self), $nesting);
        self.$attr_reader("converters");
        
        Opal.defn(self, '$initialize', TMP_Factory_initialize_7 = function $$initialize(converters) {
          var $a, self = this;

          if (converters == null) {
            converters = nil;
          }
          
          self.converters = ($truthy($a = converters) ? $a : $hash2([], {}));
          return (self.star_converter = nil);
        }, TMP_Factory_initialize_7.$$arity = -1);
        
        Opal.defn(self, '$register', TMP_Factory_register_9 = function $$register(converter, backends) {
          var TMP_8, self = this;

          if (backends == null) {
            backends = ["*"];
          }
          
          $send(backends, 'each', [], (TMP_8 = function(backend){var self = TMP_8.$$s || this, $writer = nil;
            if (self.converters == null) self.converters = nil;
if (backend == null) backend = nil;
          
            
            $writer = [backend, converter];
            $send(self.converters, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (backend['$==']("*")) {
              return (self.star_converter = converter)
              } else {
              return nil
            };}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
          return nil;
        }, TMP_Factory_register_9.$$arity = -2);
        
        Opal.defn(self, '$resolve', TMP_Factory_resolve_10 = function $$resolve(backend) {
          var $a, $b, self = this;

          return ($truthy($a = self.converters) ? ($truthy($b = self.converters['$[]'](backend)) ? $b : self.star_converter) : $a)
        }, TMP_Factory_resolve_10.$$arity = 1);
        
        Opal.defn(self, '$unregister_all', TMP_Factory_unregister_all_11 = function $$unregister_all() {
          var self = this;

          
          self.converters.$clear();
          return (self.star_converter = nil);
        }, TMP_Factory_unregister_all_11.$$arity = 0);
        return (Opal.defn(self, '$create', TMP_Factory_create_12 = function $$create(backend, opts) {
          var $a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l, $m, $n, $o, $p, $q, $r, self = this, converter = nil, base_converter = nil, $case = nil, template_converter = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          
          if ($truthy((converter = self.$resolve(backend)))) {
            return (function() {if ($truthy(Opal.const_get_qualified('::', 'Class')['$==='](converter))) {
              
              return converter.$new(backend, opts);
              } else {
              return converter
            }; return nil; })()};
          base_converter = (function() {$case = backend;
          if ("html5"['$===']($case)) {
          if ($truthy((($c = Opal.const_get_qualified('::', 'Asciidoctor', 'skip_raise')) && ($b = Opal.const_get_qualified($c, 'Converter', 'skip_raise')) && ($a = Opal.const_get_qualified($b, 'Html5Converter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
            self.$require("asciidoctor/converter/html5".$to_s())
          };
          return Opal.const_get_relative($nesting, 'Html5Converter').$new(backend, opts);}
          else if ("docbook5"['$===']($case)) {
          if ($truthy((($f = Opal.const_get_qualified('::', 'Asciidoctor', 'skip_raise')) && ($e = Opal.const_get_qualified($f, 'Converter', 'skip_raise')) && ($d = Opal.const_get_qualified($e, 'DocBook5Converter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
            self.$require("asciidoctor/converter/docbook5".$to_s())
          };
          return Opal.const_get_relative($nesting, 'DocBook5Converter').$new(backend, opts);}
          else if ("docbook45"['$===']($case)) {
          if ($truthy((($i = Opal.const_get_qualified('::', 'Asciidoctor', 'skip_raise')) && ($h = Opal.const_get_qualified($i, 'Converter', 'skip_raise')) && ($g = Opal.const_get_qualified($h, 'DocBook45Converter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
            self.$require("asciidoctor/converter/docbook45".$to_s())
          };
          return Opal.const_get_relative($nesting, 'DocBook45Converter').$new(backend, opts);}
          else if ("manpage"['$===']($case)) {
          if ($truthy((($l = Opal.const_get_qualified('::', 'Asciidoctor', 'skip_raise')) && ($k = Opal.const_get_qualified($l, 'Converter', 'skip_raise')) && ($j = Opal.const_get_qualified($k, 'ManPageConverter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
            self.$require("asciidoctor/converter/manpage".$to_s())
          };
          return Opal.const_get_relative($nesting, 'ManPageConverter').$new(backend, opts);}
          else { return nil }})();
          if ($truthy(opts['$key?']("template_dirs"))) {
            } else {
            return base_converter
          };
          if ($truthy((($o = Opal.const_get_qualified('::', 'Asciidoctor', 'skip_raise')) && ($n = Opal.const_get_qualified($o, 'Converter', 'skip_raise')) && ($m = Opal.const_get_qualified($n, 'TemplateConverter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
            self.$require("asciidoctor/converter/template".$to_s())
          };
          if ($truthy((($r = Opal.const_get_qualified('::', 'Asciidoctor', 'skip_raise')) && ($q = Opal.const_get_qualified($r, 'Converter', 'skip_raise')) && ($p = Opal.const_get_qualified($q, 'CompositeConverter', 'skip_raise')) ? 'constant' : nil))) {
            } else {
            self.$require("asciidoctor/converter/composite".$to_s())
          };
          template_converter = Opal.const_get_relative($nesting, 'TemplateConverter').$new(backend, opts['$[]']("template_dirs"), opts);
          return Opal.const_get_relative($nesting, 'CompositeConverter').$new(backend, template_converter, base_converter);
        }, TMP_Factory_create_12.$$arity = -2), nil) && 'create';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/converter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$==', '$send', '$include?', '$setup_backend_info', '$raise', '$class', '$sub', '$[]', '$[]=', '$backend_info', '$-', '$extend', '$include', '$respond_to?', '$write', '$chomp', '$open', '$require']);
  
  (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      var $Converter, self = $Converter = $module($base, 'Converter');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Converter_initialize_11, TMP_Converter_convert_12;

      
      (function($base, $parent_nesting) {
        var $Config, self = $Config = $module($base, 'Config');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Config_register_for_3;

        
        Opal.defn(self, '$register_for', TMP_Config_register_for_3 = function $$register_for($a_rest) {
          var TMP_1, TMP_2, self = this, backends, metaclass = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          backends = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            backends[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          Opal.const_get_relative($nesting, 'Factory').$register(self, backends);
          metaclass = (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting);

            return self
          })(Opal.get_singleton_class(self), $nesting);
          if (backends['$=='](["*"])) {
            $send(metaclass, 'send', ["define_method", "converts?"], (TMP_1 = function(name){var self = TMP_1.$$s || this;
if (name == null) name = nil;
            return true}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1))
            } else {
            $send(metaclass, 'send', ["define_method", "converts?"], (TMP_2 = function(name){var self = TMP_2.$$s || this;
if (name == null) name = nil;
            return backends['$include?'](name)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))
          };
          return nil;
        }, TMP_Config_register_for_3.$$arity = -1)
      })($nesting[0], $nesting);
      (function($base, $parent_nesting) {
        var $BackendInfo, self = $BackendInfo = $module($base, 'BackendInfo');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BackendInfo_backend_info_4, TMP_BackendInfo_setup_backend_info_5, TMP_BackendInfo_filetype_6, TMP_BackendInfo_basebackend_7, TMP_BackendInfo_outfilesuffix_8, TMP_BackendInfo_htmlsyntax_9;

        
        
        Opal.defn(self, '$backend_info', TMP_BackendInfo_backend_info_4 = function $$backend_info() {
          var $a, self = this;
          if (self.backend_info == null) self.backend_info = nil;

          return (self.backend_info = ($truthy($a = self.backend_info) ? $a : self.$setup_backend_info()))
        }, TMP_BackendInfo_backend_info_4.$$arity = 0);
        
        Opal.defn(self, '$setup_backend_info', TMP_BackendInfo_setup_backend_info_5 = function $$setup_backend_info() {
          var self = this, base = nil, ext = nil, type = nil, syntax = nil;
          if (self.backend == null) self.backend = nil;

          
          if ($truthy(self.backend)) {
            } else {
            self.$raise(Opal.const_get_qualified('::', 'ArgumentError'), "" + "Cannot determine backend for converter: " + (self.$class()))
          };
          base = self.backend.$sub(Opal.const_get_relative($nesting, 'TrailingDigitsRx'), "");
          if ($truthy((ext = Opal.const_get_relative($nesting, 'DEFAULT_EXTENSIONS')['$[]'](base)))) {
            type = ext['$[]']($range(1, -1, false))
            } else {
            
            base = "html";
            ext = ".html";
            type = "html";
            syntax = "html";
          };
          return $hash2(["basebackend", "outfilesuffix", "filetype", "htmlsyntax"], {"basebackend": base, "outfilesuffix": ext, "filetype": type, "htmlsyntax": syntax});
        }, TMP_BackendInfo_setup_backend_info_5.$$arity = 0);
        
        Opal.defn(self, '$filetype', TMP_BackendInfo_filetype_6 = function $$filetype(value) {
          var self = this, $writer = nil;

          if (value == null) {
            value = nil;
          }
          if ($truthy(value)) {
            
            $writer = ["filetype", value];
            $send(self.$backend_info(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return self.$backend_info()['$[]']("filetype")
          }
        }, TMP_BackendInfo_filetype_6.$$arity = -1);
        
        Opal.defn(self, '$basebackend', TMP_BackendInfo_basebackend_7 = function $$basebackend(value) {
          var self = this, $writer = nil;

          if (value == null) {
            value = nil;
          }
          if ($truthy(value)) {
            
            $writer = ["basebackend", value];
            $send(self.$backend_info(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return self.$backend_info()['$[]']("basebackend")
          }
        }, TMP_BackendInfo_basebackend_7.$$arity = -1);
        
        Opal.defn(self, '$outfilesuffix', TMP_BackendInfo_outfilesuffix_8 = function $$outfilesuffix(value) {
          var self = this, $writer = nil;

          if (value == null) {
            value = nil;
          }
          if ($truthy(value)) {
            
            $writer = ["outfilesuffix", value];
            $send(self.$backend_info(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return self.$backend_info()['$[]']("outfilesuffix")
          }
        }, TMP_BackendInfo_outfilesuffix_8.$$arity = -1);
        
        Opal.defn(self, '$htmlsyntax', TMP_BackendInfo_htmlsyntax_9 = function $$htmlsyntax(value) {
          var self = this, $writer = nil;

          if (value == null) {
            value = nil;
          }
          if ($truthy(value)) {
            
            $writer = ["htmlsyntax", value];
            $send(self.$backend_info(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return self.$backend_info()['$[]']("htmlsyntax")
          }
        }, TMP_BackendInfo_htmlsyntax_9.$$arity = -1);
      })($nesting[0], $nesting);
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_included_10;

        return (Opal.defn(self, '$included', TMP_included_10 = function $$included(converter) {
          var self = this;

          return converter.$extend(Opal.const_get_relative($nesting, 'Config'))
        }, TMP_included_10.$$arity = 1), nil) && 'included'
      })(Opal.get_singleton_class(self), $nesting);
      self.$include(Opal.const_get_relative($nesting, 'Config'));
      self.$include(Opal.const_get_relative($nesting, 'BackendInfo'));
      
      Opal.defn(self, '$initialize', TMP_Converter_initialize_11 = function $$initialize(backend, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        self.backend = backend;
        return self.$setup_backend_info();
      }, TMP_Converter_initialize_11.$$arity = -2);
      
      Opal.defn(self, '$convert', TMP_Converter_convert_12 = function $$convert(node, transform, opts) {
        var self = this;

        if (transform == null) {
          transform = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
      }, TMP_Converter_convert_12.$$arity = -2);
      Opal.alias(self, "convert_with_options", "convert");
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var $Writer, self = $Writer = $module($base, 'Writer');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Writer_write_14;

      
      Opal.defn(self, '$write', TMP_Writer_write_14 = function $$write(output, target) {
        var TMP_13, self = this;

        
        if ($truthy(target['$respond_to?']("write"))) {
          
          target.$write(output.$chomp());
          target.$write(Opal.const_get_relative($nesting, 'EOL'));
          } else {
          $send(Opal.const_get_qualified('::', 'File'), 'open', [target, "w"], (TMP_13 = function(f){var self = TMP_13.$$s || this;
if (f == null) f = nil;
          return f.$write(output)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))
        };
        return nil;
      }, TMP_Writer_write_14.$$arity = 2)
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var $VoidWriter, self = $VoidWriter = $module($base, 'VoidWriter');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_VoidWriter_write_15;

      
      self.$include(Opal.const_get_relative($nesting, 'Writer'));
      
      Opal.defn(self, '$write', TMP_VoidWriter_write_15 = function $$write(output, target) {
        var self = this;

        return nil
      }, TMP_VoidWriter_write_15.$$arity = 2);
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
  self.$require("asciidoctor/converter/base");
  return self.$require("asciidoctor/converter/factory");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/converter/composite"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$each', '$compact', '$flatten', '$respond_to?', '$composed', '$node_name', '$convert', '$converter_for', '$[]', '$find_converter', '$[]=', '$-', '$handles?', '$raise']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $CompositeConverter(){};
      var self = $CompositeConverter = $klass($base, $super, 'CompositeConverter', $CompositeConverter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CompositeConverter_initialize_2, TMP_CompositeConverter_convert_3, TMP_CompositeConverter_converter_for_4, TMP_CompositeConverter_find_converter_6;

      def.converter_map = def.converters = nil;
      
      self.$attr_reader("converters");
      
      Opal.defn(self, '$initialize', TMP_CompositeConverter_initialize_2 = function $$initialize(backend, $a_rest) {
        var TMP_1, self = this, converters;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        converters = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          converters[$arg_idx - 1] = arguments[$arg_idx];
        }
        
        self.backend = backend;
        $send((self.converters = converters.$flatten().$compact()), 'each', [], (TMP_1 = function(converter){var self = TMP_1.$$s || this;
if (converter == null) converter = nil;
        if ($truthy(converter['$respond_to?']("composed"))) {
            return converter.$composed(self)
            } else {
            return nil
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        return (self.converter_map = $hash2([], {}));
      }, TMP_CompositeConverter_initialize_2.$$arity = -2);
      
      Opal.defn(self, '$convert', TMP_CompositeConverter_convert_3 = function $$convert(node, transform, opts) {
        var $a, self = this;

        if (transform == null) {
          transform = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        
        transform = ($truthy($a = transform) ? $a : node.$node_name());
        return self.$converter_for(transform).$convert(node, transform, opts);
      }, TMP_CompositeConverter_convert_3.$$arity = -2);
      Opal.alias(self, "convert_with_options", "convert");
      
      Opal.defn(self, '$converter_for', TMP_CompositeConverter_converter_for_4 = function $$converter_for(transform) {
        var $a, self = this, $writer = nil;

        return ($truthy($a = self.converter_map['$[]'](transform)) ? $a : (($writer = [transform, self.$find_converter(transform)]), $send(self.converter_map, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
      }, TMP_CompositeConverter_converter_for_4.$$arity = 1);
      return (Opal.defn(self, '$find_converter', TMP_CompositeConverter_find_converter_6 = function $$find_converter(transform) {try {

        var TMP_5, self = this;

        
        $send(self.converters, 'each', [], (TMP_5 = function(candidate){var self = TMP_5.$$s || this;
if (candidate == null) candidate = nil;
        if ($truthy(candidate['$handles?'](transform))) {
            Opal.ret(candidate)
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
        return self.$raise("" + "Could not find a converter to handle transform: " + (transform));
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_CompositeConverter_find_converter_6.$$arity = 1), nil) && 'find_converter';
    })(Opal.const_get_relative($nesting, 'Converter'), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Converter'), 'Base'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/converter/html5"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$default=', '$-', '$==', '$[]', '$instance', '$empty?', '$attr', '$>=', '$safe', '$attr?', '$<<', '$doctitle', '$include?', '$normalize_web_path', '$embed_primary_stylesheet', '$read_asset', '$normalize_system_path', '$===', '$coderay_stylesheet_name', '$embed_coderay_stylesheet', '$pygments_stylesheet_name', '$embed_pygments_stylesheet', '$docinfo', '$id', '$sections?', '$doctype', '$*', '$noheader', '$outline', '$has_header?', '$notitle', '$title', '$header', '$sub_macros', '$>', '$to_i', '$each', '$downcase', '$concat', '$content', '$footnotes?', '$!', '$footnotes', '$index', '$text', '$nofooter', '$inspect', '$!=', '$document', '$sections', '$level', '$special', '$numbered', '$caption', '$<=', '$sectnum', '$<', '$captioned_title', '$+', '$role', '$title?', '$icon_uri', '$compact', '$media_uri', '$option?', '$append_boolean_attribute', '$style', '$each_with_index', '$items', '$text?', '$blocks?', '$chomp', '$read_svg_contents', '$image_uri', '$to_sym', '$start_with?', '$end_with?', '$list_marker_keyword', '$parent', '$warn', '$context', '$times', '$size', '$columns', '$select', '$rows', '$colspan', '$rowspan', '$role?', '$insert', '$split', '$target', '$type', '$attributes', '$references', '$join', '$map', '$chop', '$read_contents', '$sub', '$gsub', '$match', '$length']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Html5Converter(){};
      var self = $Html5Converter = $klass($base, $super, 'Html5Converter', $Html5Converter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Html5Converter_initialize_1, TMP_Html5Converter_document_4, TMP_Html5Converter_embedded_6, TMP_Html5Converter_outline_8, TMP_Html5Converter_section_9, TMP_Html5Converter_admonition_10, TMP_Html5Converter_audio_11, TMP_Html5Converter_colist_14, TMP_Html5Converter_dlist_21, TMP_Html5Converter_example_22, TMP_Html5Converter_floating_title_23, TMP_Html5Converter_image_24, TMP_Html5Converter_listing_25, TMP_Html5Converter_literal_26, TMP_Html5Converter_stem_27, TMP_Html5Converter_olist_29, TMP_Html5Converter_open_30, TMP_Html5Converter_page_break_31, TMP_Html5Converter_paragraph_32, TMP_Html5Converter_preamble_33, TMP_Html5Converter_quote_34, TMP_Html5Converter_thematic_break_35, TMP_Html5Converter_sidebar_36, TMP_Html5Converter_table_44, TMP_Html5Converter_toc_45, TMP_Html5Converter_ulist_47, TMP_Html5Converter_verse_48, TMP_Html5Converter_video_49, TMP_Html5Converter_inline_anchor_50, TMP_Html5Converter_inline_break_51, TMP_Html5Converter_inline_button_52, TMP_Html5Converter_inline_callout_53, TMP_Html5Converter_inline_footnote_54, TMP_Html5Converter_inline_image_57, TMP_Html5Converter_inline_indexterm_58, TMP_Html5Converter_inline_kbd_60, TMP_Html5Converter_inline_menu_62, TMP_Html5Converter_inline_quoted_63, TMP_Html5Converter_append_boolean_attribute_64, TMP_Html5Converter_read_svg_contents_66, $writer = nil;

      def.xml_mode = def.void_element_slash = def.stylesheets = nil;
      
      
      $writer = [[nil, nil, nil]];
      $send(Opal.const_set($nesting[0], 'QUOTE_TAGS', $hash2(["emphasis", "strong", "monospaced", "superscript", "subscript", "double", "single", "mark", "asciimath", "latexmath"], {"emphasis": ["<em>", "</em>", true], "strong": ["<strong>", "</strong>", true], "monospaced": ["<code>", "</code>", true], "superscript": ["<sup>", "</sup>", true], "subscript": ["<sub>", "</sub>", true], "double": ["&#8220;", "&#8221;", false], "single": ["&#8216;", "&#8217;", false], "mark": ["<mark>", "</mark>", true], "asciimath": ["\\$", "\\$", false], "latexmath": ["\\(", "\\)", false]})), 'default=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.const_set($nesting[0], 'SvgPreambleRx', /^.*?(?=<svg\b)/m);
      Opal.const_set($nesting[0], 'SvgStartTagRx', /^<svg[^>]*>/);
      Opal.const_set($nesting[0], 'DimensionAttributeRx', /\s(?:width|height|style)=(["']).*?\1/);
      
      Opal.defn(self, '$initialize', TMP_Html5Converter_initialize_1 = function $$initialize(backend, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        self.xml_mode = opts['$[]']("htmlsyntax")['$==']("xml");
        self.void_element_slash = (function() {if ($truthy(self.xml_mode)) {
          return "/"
          } else {
          return nil
        }; return nil; })();
        return (self.stylesheets = Opal.const_get_relative($nesting, 'Stylesheets').$instance());
      }, TMP_Html5Converter_initialize_1.$$arity = -2);
      
      Opal.defn(self, '$document', TMP_Html5Converter_document_4 = function $$document(node) {
        var $a, $b, $c, TMP_2, TMP_3, self = this, result = nil, slash = nil, br = nil, asset_uri_scheme = nil, cdn_base = nil, linkcss = nil, lang_attribute = nil, webfonts = nil, iconfont_stylesheet = nil, $case = nil, highlighter = nil, pygments_style = nil, docinfo_content = nil, body_attrs = nil, sectioned = nil, details = nil, authorcount = nil, highlightjs_path = nil, prettify_path = nil, eqnums_val = nil, eqnums_opt = nil;

        
        result = [];
        slash = self.void_element_slash;
        br = "" + "<br" + (slash) + ">";
        if ($truthy((asset_uri_scheme = node.$attr("asset-uri-scheme", "https"))['$empty?']())) {
          } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        cdn_base = "" + (asset_uri_scheme) + "//cdnjs.cloudflare.com/ajax/libs";
        linkcss = ($truthy($a = $rb_ge(node.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE'))) ? $a : node['$attr?']("linkcss"));
        result['$<<']("<!DOCTYPE html>");
        lang_attribute = (function() {if ($truthy(node['$attr?']("nolang"))) {
          return nil
          } else {
          return "" + " lang=\"" + (node.$attr("lang", "en")) + "\""
        }; return nil; })();
        result['$<<']("" + "<html" + ((function() {if ($truthy(self.xml_mode)) {
          return " xmlns=\"http://www.w3.org/1999/xhtml\""
          } else {
          return nil
        }; return nil; })()) + (lang_attribute) + ">");
        result['$<<']("" + "<head>\n" + "<meta charset=\"" + (node.$attr("encoding", "UTF-8")) + "\"" + (slash) + ">\n" + "<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"" + (slash) + "><![endif]-->\n" + "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"" + (slash) + ">\n" + "<meta name=\"generator\" content=\"Asciidoctor " + (node.$attr("asciidoctor-version")) + "\"" + (slash) + ">");
        if ($truthy(node['$attr?']("app-name"))) {
          result['$<<']("" + "<meta name=\"application-name\" content=\"" + (node.$attr("app-name")) + "\"" + (slash) + ">")};
        if ($truthy(node['$attr?']("description"))) {
          result['$<<']("" + "<meta name=\"description\" content=\"" + (node.$attr("description")) + "\"" + (slash) + ">")};
        if ($truthy(node['$attr?']("keywords"))) {
          result['$<<']("" + "<meta name=\"keywords\" content=\"" + (node.$attr("keywords")) + "\"" + (slash) + ">")};
        if ($truthy(node['$attr?']("authors"))) {
          result['$<<']("" + "<meta name=\"author\" content=\"" + (node.$attr("authors")) + "\"" + (slash) + ">")};
        if ($truthy(node['$attr?']("copyright"))) {
          result['$<<']("" + "<meta name=\"copyright\" content=\"" + (node.$attr("copyright")) + "\"" + (slash) + ">")};
        result['$<<']("" + "<title>" + (node.$doctitle($hash2(["sanitize", "use_fallback"], {"sanitize": true, "use_fallback": true}))) + "</title>");
        if ($truthy(Opal.const_get_relative($nesting, 'DEFAULT_STYLESHEET_KEYS')['$include?'](node.$attr("stylesheet")))) {
          
          if ($truthy((webfonts = node.$attr("webfonts")))) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (asset_uri_scheme) + "//fonts.googleapis.com/css?family=" + ((function() {if ($truthy(webfonts['$empty?']())) {
              return "Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"
              } else {
              return webfonts
            }; return nil; })()) + "\"" + (slash) + ">")};
          if ($truthy(linkcss)) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(Opal.const_get_relative($nesting, 'DEFAULT_STYLESHEET_NAME'), node.$attr("stylesdir", ""), false)) + "\"" + (slash) + ">")
            } else {
            result['$<<'](self.stylesheets.$embed_primary_stylesheet())
          };
        } else if ($truthy(node['$attr?']("stylesheet"))) {
          if ($truthy(linkcss)) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(node.$attr("stylesheet"), node.$attr("stylesdir", ""))) + "\"" + (slash) + ">")
            } else {
            result['$<<']("" + "<style>\n" + (node.$read_asset(node.$normalize_system_path(node.$attr("stylesheet"), node.$attr("stylesdir", "")), $hash2(["warn_on_failure"], {"warn_on_failure": true}))) + "\n" + "</style>")
          }};
        if ($truthy(node['$attr?']("icons", "font"))) {
          if ($truthy(node['$attr?']("iconfont-remote"))) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$attr("iconfont-cdn", "" + (cdn_base) + "/font-awesome/4.6.3/css/font-awesome.min.css")) + "\"" + (slash) + ">")
            } else {
            
            iconfont_stylesheet = "" + (node.$attr("iconfont-name", "font-awesome")) + ".css";
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(iconfont_stylesheet, node.$attr("stylesdir", ""), false)) + "\"" + (slash) + ">");
          }};
        $case = (highlighter = node.$attr("source-highlighter"));
        if ("coderay"['$===']($case)) {if (node.$attr("coderay-css", "class")['$==']("class")) {
          if ($truthy(linkcss)) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(self.stylesheets.$coderay_stylesheet_name(), node.$attr("stylesdir", ""), false)) + "\"" + (slash) + ">")
            } else {
            result['$<<'](self.stylesheets.$embed_coderay_stylesheet())
          }}}
        else if ("pygments"['$===']($case)) {if (node.$attr("pygments-css", "class")['$==']("class")) {
          
          pygments_style = node.$attr("pygments-style");
          if ($truthy(linkcss)) {
            result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(self.stylesheets.$pygments_stylesheet_name(pygments_style), node.$attr("stylesdir", ""), false)) + "\"" + (slash) + ">")
            } else {
            result['$<<'](self.stylesheets.$embed_pygments_stylesheet(pygments_style))
          };}};
        if ($truthy((docinfo_content = node.$docinfo())['$empty?']())) {
          } else {
          result['$<<'](docinfo_content)
        };
        result['$<<']("</head>");
        body_attrs = [];
        if ($truthy(node.$id())) {
          body_attrs['$<<']("" + "id=\"" + (node.$id()) + "\"")};
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (sectioned = node['$sections?']())) ? node['$attr?']("toc-class") : $c)) ? node['$attr?']("toc") : $b)) ? node['$attr?']("toc-placement", "auto") : $a))) {
          body_attrs['$<<']("" + "class=\"" + (node.$doctype()) + " " + (node.$attr("toc-class")) + " toc-" + (node.$attr("toc-position", "header")) + "\"")
          } else {
          body_attrs['$<<']("" + "class=\"" + (node.$doctype()) + "\"")
        };
        if ($truthy(node['$attr?']("max-width"))) {
          body_attrs['$<<']("" + "style=\"max-width: " + (node.$attr("max-width")) + ";\"")};
        result['$<<']("" + "<body " + ($rb_times(body_attrs, " ")) + ">");
        if ($truthy(node.$noheader())) {
          } else {
          
          result['$<<']("<div id=\"header\">");
          if (node.$doctype()['$==']("manpage")) {
            
            result['$<<']("" + "<h1>" + (node.$doctitle()) + " Manual Page</h1>");
            if ($truthy(($truthy($a = ($truthy($b = sectioned) ? node['$attr?']("toc") : $b)) ? node['$attr?']("toc-placement", "auto") : $a))) {
              result['$<<']("" + "<div id=\"toc\" class=\"" + (node.$attr("toc-class", "toc")) + "\">\n" + "<div id=\"toctitle\">" + (node.$attr("toc-title")) + "</div>\n" + (self.$outline(node)) + "\n" + "</div>")};
            result['$<<']("" + "<h2>" + (node.$attr("manname-title")) + "</h2>\n" + "<div class=\"sectionbody\">\n" + "<p>" + (node.$attr("manname")) + " - " + (node.$attr("manpurpose")) + "</p>\n" + "</div>");
            } else {
            
            if ($truthy(node['$has_header?']())) {
              
              if ($truthy(node.$notitle())) {
                } else {
                result['$<<']("" + "<h1>" + (node.$header().$title()) + "</h1>")
              };
              details = [];
              if ($truthy(node['$attr?']("author"))) {
                
                details['$<<']("" + "<span id=\"author\" class=\"author\">" + (node.$attr("author")) + "</span>" + (br));
                if ($truthy(node['$attr?']("email"))) {
                  details['$<<']("" + "<span id=\"email\" class=\"email\">" + (node.$sub_macros(node.$attr("email"))) + "</span>" + (br))};
                if ($truthy($rb_gt((authorcount = node.$attr("authorcount").$to_i()), 1))) {
                  $send(Opal.Range.$new(2, authorcount, false), 'each', [], (TMP_2 = function(idx){var self = TMP_2.$$s || this;
if (idx == null) idx = nil;
                  
                    details['$<<']("" + "<span id=\"author" + (idx) + "\" class=\"author\">" + (node.$attr("" + "author_" + (idx))) + "</span>" + (br));
                    if ($truthy(node['$attr?']("" + "email_" + (idx)))) {
                      return details['$<<']("" + "<span id=\"email" + (idx) + "\" class=\"email\">" + (node.$sub_macros(node.$attr("" + "email_" + (idx)))) + "</span>" + (br))
                      } else {
                      return nil
                    };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))};};
              if ($truthy(node['$attr?']("revnumber"))) {
                details['$<<']("" + "<span id=\"revnumber\">" + (($truthy($a = node.$attr("version-label")) ? $a : "").$downcase()) + " " + (node.$attr("revnumber")) + ((function() {if ($truthy(node['$attr?']("revdate"))) {
                  return ","
                  } else {
                  return ""
                }; return nil; })()) + "</span>")};
              if ($truthy(node['$attr?']("revdate"))) {
                details['$<<']("" + "<span id=\"revdate\">" + (node.$attr("revdate")) + "</span>")};
              if ($truthy(node['$attr?']("revremark"))) {
                details['$<<']("" + (br) + "<span id=\"revremark\">" + (node.$attr("revremark")) + "</span>")};
              if ($truthy(details['$empty?']())) {
                } else {
                
                result['$<<']("<div class=\"details\">");
                result.$concat(details);
                result['$<<']("</div>");
              };};
            if ($truthy(($truthy($a = ($truthy($b = sectioned) ? node['$attr?']("toc") : $b)) ? node['$attr?']("toc-placement", "auto") : $a))) {
              result['$<<']("" + "<div id=\"toc\" class=\"" + (node.$attr("toc-class", "toc")) + "\">\n" + "<div id=\"toctitle\">" + (node.$attr("toc-title")) + "</div>\n" + (self.$outline(node)) + "\n" + "</div>")};
          };
          result['$<<']("</div>");
        };
        result['$<<']("" + "<div id=\"content\">\n" + (node.$content()) + "\n" + "</div>");
        if ($truthy(($truthy($a = node['$footnotes?']()) ? node['$attr?']("nofootnotes")['$!']() : $a))) {
          
          result['$<<']("" + "<div id=\"footnotes\">\n" + "<hr" + (slash) + ">");
          $send(node.$footnotes(), 'each', [], (TMP_3 = function(footnote){var self = TMP_3.$$s || this;
if (footnote == null) footnote = nil;
          return result['$<<']("" + "<div class=\"footnote\" id=\"_footnote_" + (footnote.$index()) + "\">\n" + "<a href=\"#_footnoteref_" + (footnote.$index()) + "\">" + (footnote.$index()) + "</a>. " + (footnote.$text()) + "\n" + "</div>")}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
          result['$<<']("</div>");};
        if ($truthy(node.$nofooter())) {
          } else {
          
          result['$<<']("<div id=\"footer\">");
          result['$<<']("<div id=\"footer-text\">");
          if ($truthy(node['$attr?']("revnumber"))) {
            result['$<<']("" + (node.$attr("version-label")) + " " + (node.$attr("revnumber")) + (br))};
          if ($truthy(($truthy($a = node['$attr?']("last-update-label")) ? node['$attr?']("reproducible")['$!']() : $a))) {
            result['$<<']("" + (node.$attr("last-update-label")) + " " + (node.$attr("docdatetime")))};
          result['$<<']("</div>");
          result['$<<']("</div>");
        };
        if ($truthy((docinfo_content = node.$docinfo("footer"))['$empty?']())) {
          } else {
          result['$<<'](docinfo_content)
        };
        $case = highlighter;
        if ("highlightjs"['$===']($case) || "highlight.js"['$===']($case)) {
        highlightjs_path = node.$attr("highlightjsdir", "" + (cdn_base) + "/highlight.js/8.9.1");
        result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (highlightjs_path) + "/styles/" + (node.$attr("highlightjs-theme", "github")) + ".min.css\"" + (slash) + ">");
        result['$<<']("" + "<script src=\"" + (highlightjs_path) + "/highlight.min.js\"></script>\n" + "<script>hljs.initHighlighting()</script>");}
        else if ("prettify"['$===']($case)) {
        prettify_path = node.$attr("prettifydir", "" + (cdn_base) + "/prettify/r298");
        result['$<<']("" + "<link rel=\"stylesheet\" href=\"" + (prettify_path) + "/" + (node.$attr("prettify-theme", "prettify")) + ".min.css\"" + (slash) + ">");
        result['$<<']("" + "<script src=\"" + (prettify_path) + "/prettify.min.js\"></script>\n" + "<script>prettyPrint()</script>");};
        if ($truthy(node['$attr?']("stem"))) {
          
          eqnums_val = node.$attr("eqnums", "none");
          if ($truthy(eqnums_val['$empty?']())) {
            eqnums_val = "AMS"};
          eqnums_opt = "" + " equationNumbers: { autoNumber: \"" + (eqnums_val) + "\" } ";
          result['$<<']("" + "<script type=\"text/x-mathjax-config\">\n" + "MathJax.Hub.Config({\n" + "  messageStyle: \"none\",\n" + "  tex2jax: {\n" + "    inlineMath: [" + (Opal.const_get_relative($nesting, 'INLINE_MATH_DELIMITERS')['$[]']("latexmath").$inspect()) + "],\n" + "    displayMath: [" + (Opal.const_get_relative($nesting, 'BLOCK_MATH_DELIMITERS')['$[]']("latexmath").$inspect()) + "],\n" + "    ignoreClass: \"nostem|nolatexmath\"\n" + "  },\n" + "  asciimath2jax: {\n" + "    delimiters: [" + (Opal.const_get_relative($nesting, 'BLOCK_MATH_DELIMITERS')['$[]']("asciimath").$inspect()) + "],\n" + "    ignoreClass: \"nostem|noasciimath\"\n" + "  },\n" + "  TeX: {" + (eqnums_opt) + "}\n" + "});\n" + "</script>\n" + "<script src=\"" + (cdn_base) + "/mathjax/2.6.0/MathJax.js?config=TeX-MML-AM_HTMLorMML\"></script>");};
        result['$<<']("</body>");
        result['$<<']("</html>");
        return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'));
      }, TMP_Html5Converter_document_4.$$arity = 1);
      
      Opal.defn(self, '$embedded', TMP_Html5Converter_embedded_6 = function $$embedded(node) {
        var $a, $b, $c, TMP_5, self = this, result = nil, id_attr = nil, toc_p = nil;

        
        result = [];
        if (node.$doctype()['$==']("manpage")) {
          
          if ($truthy(node.$notitle())) {
            } else {
            
            id_attr = (function() {if ($truthy(node.$id())) {
              return "" + " id=\"" + (node.$id()) + "\""
              } else {
              return nil
            }; return nil; })();
            result['$<<']("" + "<h1" + (id_attr) + ">" + (node.$doctitle()) + " Manual Page</h1>");
          };
          result['$<<']("" + "<h2>" + (node.$attr("manname-title")) + "</h2>\n" + "<div class=\"sectionbody\">\n" + "<p>" + (node.$attr("manname")) + " - " + (node.$attr("manpurpose")) + "</p>\n" + "</div>");
        } else if ($truthy(($truthy($a = node['$has_header?']()) ? node.$notitle()['$!']() : $a))) {
          
          id_attr = (function() {if ($truthy(node.$id())) {
            return "" + " id=\"" + (node.$id()) + "\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("" + "<h1" + (id_attr) + ">" + (node.$header().$title()) + "</h1>");};
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = node['$sections?']()) ? node['$attr?']("toc") : $c)) ? (toc_p = node.$attr("toc-placement"))['$!=']("macro") : $b)) ? toc_p['$!=']("preamble") : $a))) {
          result['$<<']("" + "<div id=\"toc\" class=\"toc\">\n" + "<div id=\"toctitle\">" + (node.$attr("toc-title")) + "</div>\n" + (self.$outline(node)) + "\n" + "</div>")};
        result['$<<'](node.$content());
        if ($truthy(($truthy($a = node['$footnotes?']()) ? node['$attr?']("nofootnotes")['$!']() : $a))) {
          
          result['$<<']("" + "<div id=\"footnotes\">\n" + "<hr" + (self.void_element_slash) + ">");
          $send(node.$footnotes(), 'each', [], (TMP_5 = function(footnote){var self = TMP_5.$$s || this;
if (footnote == null) footnote = nil;
          return result['$<<']("" + "<div class=\"footnote\" id=\"_footnote_" + (footnote.$index()) + "\">\n" + "<a href=\"#_footnoteref_" + (footnote.$index()) + "\">" + (footnote.$index()) + "</a>. " + (footnote.$text()) + "\n" + "</div>")}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
          result['$<<']("</div>");};
        return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'));
      }, TMP_Html5Converter_embedded_6.$$arity = 1);
      
      Opal.defn(self, '$outline', TMP_Html5Converter_outline_8 = function $$outline(node, opts) {
        var $a, TMP_7, self = this, sectnumlevels = nil, toclevels = nil, result = nil, sections = nil, slevel = nil, first_section = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        if ($truthy(node['$sections?']())) {
          } else {
          return nil
        };
        sectnumlevels = ($truthy($a = opts['$[]']("sectnumlevels")) ? $a : node.$document().$attr("sectnumlevels", 3).$to_i());
        toclevels = ($truthy($a = opts['$[]']("toclevels")) ? $a : node.$document().$attr("toclevels", 2).$to_i());
        result = [];
        sections = node.$sections();
        slevel = (first_section = sections['$[]'](0)).$level();
        if ($truthy((($a = slevel['$=='](0)) ? first_section.$special() : slevel['$=='](0)))) {
          slevel = 1};
        result['$<<']("" + "<ul class=\"sectlevel" + (slevel) + "\">");
        $send(sections, 'each', [], (TMP_7 = function(section){var self = TMP_7.$$s || this, $b, $c, section_num = nil, child_toc_level = nil;
if (section == null) section = nil;
        
          section_num = (function() {if ($truthy(($truthy($b = ($truthy($c = section.$numbered()) ? section.$caption()['$!']() : $c)) ? $rb_le(section.$level(), sectnumlevels) : $b))) {
            return "" + (section.$sectnum()) + " "
            } else {
            return nil
          }; return nil; })();
          if ($truthy(($truthy($b = $rb_lt(section.$level(), toclevels)) ? (child_toc_level = self.$outline(section, $hash2(["toclevels", "secnumlevels"], {"toclevels": toclevels, "secnumlevels": sectnumlevels}))) : $b))) {
            
            result['$<<']("" + "<li><a href=\"#" + (section.$id()) + "\">" + (section_num) + (section.$captioned_title()) + "</a>");
            result['$<<'](child_toc_level);
            return result['$<<']("</li>");
            } else {
            return result['$<<']("" + "<li><a href=\"#" + (section.$id()) + "\">" + (section_num) + (section.$captioned_title()) + "</a></li>")
          };}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        result['$<<']("</ul>");
        return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'));
      }, TMP_Html5Converter_outline_8.$$arity = -2);
      
      Opal.defn(self, '$section', TMP_Html5Converter_section_9 = function $$section(node) {
        var $a, $b, self = this, slevel = nil, htag = nil, id_attr = nil, anchor = nil, link_start = nil, link_end = nil, id = nil, doc = nil, class_attr = nil, role = nil, sectnum = nil;

        
        slevel = node.$level();
        if ($truthy((($a = slevel['$=='](0)) ? node.$special() : slevel['$=='](0)))) {
          slevel = 1};
        htag = "" + "h" + ($rb_plus(slevel, 1));
        id_attr = (anchor = (link_start = (link_end = nil)));
        if ($truthy(node.$id())) {
          
          id_attr = "" + " id=\"" + ((id = node.$id())) + "\"";
          if ($truthy((doc = node.$document())['$attr?']("sectanchors"))) {
            anchor = "" + "<a class=\"anchor\" href=\"#" + (id) + "\"></a>"};
          if ($truthy(doc['$attr?']("sectlinks"))) {
            
            link_start = "" + "<a class=\"link\" href=\"#" + (id) + "\">";
            link_end = "</a>";};};
        if (slevel['$=='](0)) {
          return "" + "<h1" + (id_attr) + " class=\"sect0\">" + (anchor) + (link_start) + (node.$title()) + (link_end) + "</h1>\n" + (node.$content())
          } else {
          
          class_attr = (function() {if ($truthy((role = node.$role()))) {
            return "" + " class=\"sect" + (slevel) + " " + (role) + "\""
            } else {
            return "" + " class=\"sect" + (slevel) + "\""
          }; return nil; })();
          sectnum = (function() {if ($truthy(($truthy($a = ($truthy($b = node.$numbered()) ? node.$caption()['$!']() : $b)) ? $rb_le(slevel, node.$document().$attr("sectnumlevels", 3).$to_i()) : $a))) {
            return "" + (node.$sectnum()) + " "
            } else {
            return nil
          }; return nil; })();
          return "" + "<div" + (class_attr) + ">\n" + "<" + (htag) + (id_attr) + ">" + (anchor) + (link_start) + (sectnum) + (node.$captioned_title()) + (link_end) + "</" + (htag) + ">\n" + ((function() {if (slevel['$=='](1)) {
            return "" + "<div class=\"sectionbody\">\n" + (node.$content()) + "\n</div>"
            } else {
            return node.$content()
          }; return nil; })()) + "\n" + "</div>";
        };
      }, TMP_Html5Converter_section_9.$$arity = 1);
      
      Opal.defn(self, '$admonition', TMP_Html5Converter_admonition_10 = function $$admonition(node) {
        var $a, self = this, id_attr = nil, name = nil, title_element = nil, caption = nil, role = nil;

        
        id_attr = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        name = node.$attr("name");
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        caption = (function() {if ($truthy(node.$document()['$attr?']("icons"))) {
          if ($truthy(($truthy($a = node.$document()['$attr?']("icons", "font")) ? node['$attr?']("icon")['$!']() : $a))) {
            return "" + "<i class=\"fa icon-" + (name) + "\" title=\"" + (node.$caption()) + "\"></i>"
            } else {
            return "" + "<img src=\"" + (node.$icon_uri(name)) + "\" alt=\"" + (node.$caption()) + "\"" + (self.void_element_slash) + ">"
          }
          } else {
          return "" + "<div class=\"title\">" + (node.$caption()) + "</div>"
        }; return nil; })();
        return "" + "<div" + (id_attr) + " class=\"admonitionblock " + (name) + (($truthy($a = (role = node.$role())) ? "" + " " + (role) : $a)) + "\">\n" + "<table>\n" + "<tr>\n" + "<td class=\"icon\">\n" + (caption) + "\n" + "</td>\n" + "<td class=\"content\">\n" + (title_element) + (node.$content()) + "\n" + "</td>\n" + "</tr>\n" + "</table>\n" + "</div>";
      }, TMP_Html5Converter_admonition_10.$$arity = 1);
      
      Opal.defn(self, '$audio', TMP_Html5Converter_audio_11 = function $$audio(node) {
        var self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil;

        
        xml = self.xml_mode;
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["audioblock", node.$role()].$compact();
        class_attribute = "" + " class=\"" + ($rb_times(classes, " ")) + "\"";
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$captioned_title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "" + "<div" + (id_attribute) + (class_attribute) + ">\n" + (title_element) + "<div class=\"content\">\n" + "<audio src=\"" + (node.$media_uri(node.$attr("target"))) + "\"" + ((function() {if ($truthy(node['$option?']("autoplay"))) {
          
          return self.$append_boolean_attribute("autoplay", xml);
          } else {
          return nil
        }; return nil; })()) + ((function() {if ($truthy(node['$option?']("nocontrols"))) {
          return nil
          } else {
          
          return self.$append_boolean_attribute("controls", xml);
        }; return nil; })()) + ((function() {if ($truthy(node['$option?']("loop"))) {
          
          return self.$append_boolean_attribute("loop", xml);
          } else {
          return nil
        }; return nil; })()) + ">\n" + "Your browser does not support the audio tag.\n" + "</audio>\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_audio_11.$$arity = 1);
      
      Opal.defn(self, '$colist', TMP_Html5Converter_colist_14 = function $$colist(node) {
        var TMP_12, TMP_13, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, font_icons = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["colist", node.$style(), node.$role()].$compact();
        class_attribute = "" + " class=\"" + ($rb_times(classes, " ")) + "\"";
        result['$<<']("" + "<div" + (id_attribute) + (class_attribute) + ">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<div class=\"title\">" + (node.$title()) + "</div>")};
        if ($truthy(node.$document()['$attr?']("icons"))) {
          
          result['$<<']("<table>");
          font_icons = node.$document()['$attr?']("icons", "font");
          $send(node.$items(), 'each_with_index', [], (TMP_12 = function(item, i){var self = TMP_12.$$s || this, num = nil, num_element = nil;
            if (self.void_element_slash == null) self.void_element_slash = nil;
if (item == null) item = nil;if (i == null) i = nil;
          
            num = $rb_plus(i, 1);
            num_element = (function() {if ($truthy(font_icons)) {
              return "" + "<i class=\"conum\" data-value=\"" + (num) + "\"></i><b>" + (num) + "</b>"
              } else {
              return "" + "<img src=\"" + (node.$icon_uri("" + "callouts/" + (num))) + "\" alt=\"" + (num) + "\"" + (self.void_element_slash) + ">"
            }; return nil; })();
            return result['$<<']("" + "<tr>\n" + "<td>" + (num_element) + "</td>\n" + "<td>" + (item.$text()) + "</td>\n" + "</tr>");}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12));
          result['$<<']("</table>");
          } else {
          
          result['$<<']("<ol>");
          $send(node.$items(), 'each', [], (TMP_13 = function(item){var self = TMP_13.$$s || this;
if (item == null) item = nil;
          return result['$<<']("" + "<li>\n" + "<p>" + (item.$text()) + "</p>\n" + "</li>")}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13));
          result['$<<']("</ol>");
        };
        result['$<<']("</div>");
        return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'));
      }, TMP_Html5Converter_colist_14.$$arity = 1);
      
      Opal.defn(self, '$dlist', TMP_Html5Converter_dlist_21 = function $$dlist(node) {
        var TMP_15, $a, TMP_17, TMP_19, self = this, result = nil, id_attribute = nil, classes = nil, $case = nil, class_attribute = nil, slash = nil, col_style_attribute = nil, dt_style_attribute = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = (function() {$case = node.$style();
        if ("qanda"['$===']($case)) {return ["qlist", "qanda", node.$role()]}
        else if ("horizontal"['$===']($case)) {return ["hdlist", node.$role()]}
        else {return ["dlist", node.$style(), node.$role()]}})().$compact();
        class_attribute = "" + " class=\"" + ($rb_times(classes, " ")) + "\"";
        result['$<<']("" + "<div" + (id_attribute) + (class_attribute) + ">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<div class=\"title\">" + (node.$title()) + "</div>")};
        $case = node.$style();
        if ("qanda"['$===']($case)) {
        result['$<<']("<ol>");
        $send(node.$items(), 'each', [], (TMP_15 = function(terms, dd){var self = TMP_15.$$s || this, TMP_16;
if (terms == null) terms = nil;if (dd == null) dd = nil;
        
          result['$<<']("<li>");
          $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_16 = function(dt){var self = TMP_16.$$s || this;
if (dt == null) dt = nil;
          return result['$<<']("" + "<p><em>" + (dt.$text()) + "</em></p>")}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
          if ($truthy(dd)) {
            
            if ($truthy(dd['$text?']())) {
              result['$<<']("" + "<p>" + (dd.$text()) + "</p>")};
            if ($truthy(dd['$blocks?']())) {
              result['$<<'](dd.$content())};};
          return result['$<<']("</li>");}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15));
        result['$<<']("</ol>");}
        else if ("horizontal"['$===']($case)) {
        slash = self.void_element_slash;
        result['$<<']("<table>");
        if ($truthy(($truthy($a = node['$attr?']("labelwidth")) ? $a : node['$attr?']("itemwidth")))) {
          
          result['$<<']("<colgroup>");
          col_style_attribute = (function() {if ($truthy(node['$attr?']("labelwidth"))) {
            return "" + " style=\"width: " + (node.$attr("labelwidth").$chomp("%")) + "%;\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("" + "<col" + (col_style_attribute) + (slash) + ">");
          col_style_attribute = (function() {if ($truthy(node['$attr?']("itemwidth"))) {
            return "" + " style=\"width: " + (node.$attr("itemwidth").$chomp("%")) + "%;\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("" + "<col" + (col_style_attribute) + (slash) + ">");
          result['$<<']("</colgroup>");};
        $send(node.$items(), 'each', [], (TMP_17 = function(terms, dd){var self = TMP_17.$$s || this, TMP_18, terms_array = nil, last_term = nil;
if (terms == null) terms = nil;if (dd == null) dd = nil;
        
          result['$<<']("<tr>");
          result['$<<']("" + "<td class=\"hdlist1" + ((function() {if ($truthy(node['$option?']("strong"))) {
            return " strong"
            } else {
            return nil
          }; return nil; })()) + "\">");
          terms_array = [].concat(Opal.to_a(terms));
          last_term = terms_array['$[]'](-1);
          $send(terms_array, 'each', [], (TMP_18 = function(dt){var self = TMP_18.$$s || this;
if (dt == null) dt = nil;
          
            result['$<<'](dt.$text());
            if ($truthy(dt['$!='](last_term))) {
              return result['$<<']("" + "<br" + (slash) + ">")
              } else {
              return nil
            };}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18));
          result['$<<']("</td>");
          result['$<<']("<td class=\"hdlist2\">");
          if ($truthy(dd)) {
            
            if ($truthy(dd['$text?']())) {
              result['$<<']("" + "<p>" + (dd.$text()) + "</p>")};
            if ($truthy(dd['$blocks?']())) {
              result['$<<'](dd.$content())};};
          result['$<<']("</td>");
          return result['$<<']("</tr>");}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17));
        result['$<<']("</table>");}
        else {
        result['$<<']("<dl>");
        dt_style_attribute = (function() {if ($truthy(node.$style())) {
          return nil
          } else {
          return " class=\"hdlist1\""
        }; return nil; })();
        $send(node.$items(), 'each', [], (TMP_19 = function(terms, dd){var self = TMP_19.$$s || this, TMP_20;
if (terms == null) terms = nil;if (dd == null) dd = nil;
        
          $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_20 = function(dt){var self = TMP_20.$$s || this;
if (dt == null) dt = nil;
          return result['$<<']("" + "<dt" + (dt_style_attribute) + ">" + (dt.$text()) + "</dt>")}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20));
          if ($truthy(dd)) {
            
            result['$<<']("<dd>");
            if ($truthy(dd['$text?']())) {
              result['$<<']("" + "<p>" + (dd.$text()) + "</p>")};
            if ($truthy(dd['$blocks?']())) {
              result['$<<'](dd.$content())};
            return result['$<<']("</dd>");
            } else {
            return nil
          };}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19));
        result['$<<']("</dl>");};
        result['$<<']("</div>");
        return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'));
      }, TMP_Html5Converter_dlist_21.$$arity = 1);
      
      Opal.defn(self, '$example', TMP_Html5Converter_example_22 = function $$example(node) {
        var self = this, id_attribute = nil, title_element = nil, role = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$captioned_title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "" + "<div" + (id_attribute) + " class=\"" + ((function() {if ($truthy((role = node.$role()))) {
          return $rb_times(["exampleblock", role], " ")
          } else {
          return "exampleblock"
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (node.$content()) + "\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_example_22.$$arity = 1);
      
      Opal.defn(self, '$floating_title', TMP_Html5Converter_floating_title_23 = function $$floating_title(node) {
        var self = this, tag_name = nil, id_attribute = nil, classes = nil;

        
        tag_name = "" + "h" + ($rb_plus(node.$level(), 1));
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = [node.$style(), node.$role()].$compact();
        return "" + "<" + (tag_name) + (id_attribute) + " class=\"" + ($rb_times(classes, " ")) + "\">" + (node.$title()) + "</" + (tag_name) + ">";
      }, TMP_Html5Converter_floating_title_23.$$arity = 1);
      
      Opal.defn(self, '$image', TMP_Html5Converter_image_24 = function $$image(node) {
        var $a, $b, $c, self = this, target = nil, width_attr = nil, height_attr = nil, svg = nil, obj = nil, img = nil, fallback = nil, link = nil, id_attr = nil, classes = nil, class_attr = nil, styles = nil, style_attr = nil, title_el = nil;

        
        target = node.$attr("target");
        width_attr = (function() {if ($truthy(node['$attr?']("width"))) {
          return "" + " width=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        height_attr = (function() {if ($truthy(node['$attr?']("height"))) {
          return "" + " height=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = node['$attr?']("format", "svg", false)) ? $c : target['$include?'](".svg"))) ? $rb_lt(node.$document().$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE')) : $b)) ? ($truthy($b = (svg = node['$option?']("inline"))) ? $b : (obj = node['$option?']("interactive"))) : $a))) {
          if ($truthy(svg)) {
            img = ($truthy($a = self.$read_svg_contents(node, target)) ? $a : "" + "<span class=\"alt\">" + (node.$attr("alt")) + "</span>")
          } else if ($truthy(obj)) {
            
            fallback = (function() {if ($truthy(node['$attr?']("fallback"))) {
              return "" + "<img src=\"" + (node.$image_uri(node.$attr("fallback"))) + "\" alt=\"" + (node.$attr("alt")) + "\"" + (width_attr) + (height_attr) + (self.void_element_slash) + ">"
              } else {
              return "" + "<span class=\"alt\">" + (node.$attr("alt")) + "</span>"
            }; return nil; })();
            img = "" + "<object type=\"image/svg+xml\" data=\"" + (node.$image_uri(target)) + "\"" + (width_attr) + (height_attr) + ">" + (fallback) + "</object>";}};
        img = ($truthy($a = img) ? $a : "" + "<img src=\"" + (node.$image_uri(target)) + "\" alt=\"" + (node.$attr("alt")) + "\"" + (width_attr) + (height_attr) + (self.void_element_slash) + ">");
        if ($truthy((link = node.$attr("link")))) {
          img = "" + "<a class=\"image\" href=\"" + (link) + "\">" + (img) + "</a>"};
        id_attr = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["imageblock", node.$role()].$compact();
        class_attr = "" + " class=\"" + ($rb_times(classes, " ")) + "\"";
        styles = [];
        if ($truthy(node['$attr?']("align"))) {
          styles['$<<']("" + "text-align: " + (node.$attr("align")))};
        if ($truthy(node['$attr?']("float"))) {
          styles['$<<']("" + "float: " + (node.$attr("float")))};
        style_attr = (function() {if ($truthy(styles['$empty?']())) {
          return nil
          } else {
          return "" + " style=\"" + ($rb_times(styles, ";")) + "\""
        }; return nil; })();
        title_el = (function() {if ($truthy(node['$title?']())) {
          return "" + "\n<div class=\"title\">" + (node.$captioned_title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        return "" + "<div" + (id_attr) + (class_attr) + (style_attr) + ">\n" + "<div class=\"content\">\n" + (img) + "\n" + "</div>" + (title_el) + "\n" + "</div>";
      }, TMP_Html5Converter_image_24.$$arity = 1);
      
      Opal.defn(self, '$listing', TMP_Html5Converter_listing_25 = function $$listing(node) {
        var $a, self = this, nowrap = nil, language = nil, code_attrs = nil, $case = nil, pre_class = nil, pre_start = nil, pre_end = nil, id_attribute = nil, title_element = nil, role = nil;

        
        nowrap = ($truthy($a = node.$document()['$attr?']("prewrap")['$!']()) ? $a : node['$option?']("nowrap"));
        if (node.$style()['$==']("source")) {
          
          if ($truthy((language = node.$attr("language", nil, false)))) {
            code_attrs = "" + " data-lang=\"" + (language) + "\""
            } else {
            code_attrs = nil
          };
          $case = node.$document().$attr("source-highlighter");
          if ("coderay"['$===']($case)) {pre_class = "" + " class=\"CodeRay highlight" + ((function() {if ($truthy(nowrap)) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + "\""}
          else if ("pygments"['$===']($case)) {pre_class = "" + " class=\"pygments highlight" + ((function() {if ($truthy(nowrap)) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + "\""}
          else if ("highlightjs"['$===']($case) || "highlight.js"['$===']($case)) {
          pre_class = "" + " class=\"highlightjs highlight" + ((function() {if ($truthy(nowrap)) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + "\"";
          if ($truthy(language)) {
            code_attrs = "" + " class=\"language-" + (language) + "\"" + (code_attrs)};}
          else if ("prettify"['$===']($case)) {
          pre_class = "" + " class=\"prettyprint highlight" + ((function() {if ($truthy(nowrap)) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + ((function() {if ($truthy(node['$attr?']("linenums"))) {
            return " linenums"
            } else {
            return nil
          }; return nil; })()) + "\"";
          if ($truthy(language)) {
            code_attrs = "" + " class=\"language-" + (language) + "\"" + (code_attrs)};}
          else if ("html-pipeline"['$===']($case)) {
          pre_class = (function() {if ($truthy(language)) {
            return "" + " lang=\"" + (language) + "\""
            } else {
            return nil
          }; return nil; })();
          code_attrs = nil;}
          else {
          pre_class = "" + " class=\"highlight" + ((function() {if ($truthy(nowrap)) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + "\"";
          if ($truthy(language)) {
            code_attrs = "" + " class=\"language-" + (language) + "\"" + (code_attrs)};};
          pre_start = "" + "<pre" + (pre_class) + "><code" + (code_attrs) + ">";
          pre_end = "</code></pre>";
          } else {
          
          pre_start = "" + "<pre" + ((function() {if ($truthy(nowrap)) {
            return " class=\"nowrap\""
            } else {
            return nil
          }; return nil; })()) + ">";
          pre_end = "</pre>";
        };
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$captioned_title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "" + "<div" + (id_attribute) + " class=\"listingblock" + (($truthy($a = (role = node.$role())) ? "" + " " + (role) : $a)) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (pre_start) + (node.$content()) + (pre_end) + "\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_listing_25.$$arity = 1);
      
      Opal.defn(self, '$literal', TMP_Html5Converter_literal_26 = function $$literal(node) {
        var $a, self = this, id_attribute = nil, title_element = nil, nowrap = nil, role = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        nowrap = ($truthy($a = node.$document()['$attr?']("prewrap")['$!']()) ? $a : node['$option?']("nowrap"));
        return "" + "<div" + (id_attribute) + " class=\"literalblock" + (($truthy($a = (role = node.$role())) ? "" + " " + (role) : $a)) + "\">\n" + (title_element) + "<div class=\"content\">\n" + "<pre" + ((function() {if ($truthy(nowrap)) {
          return " class=\"nowrap\""
          } else {
          return nil
        }; return nil; })()) + ">" + (node.$content()) + "</pre>\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_literal_26.$$arity = 1);
      
      Opal.defn(self, '$stem', TMP_Html5Converter_stem_27 = function $$stem(node) {
        var $a, $b, self = this, id_attribute = nil, title_element = nil, open = nil, close = nil, equation = nil, role = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        $b = Opal.const_get_relative($nesting, 'BLOCK_MATH_DELIMITERS')['$[]'](node.$style().$to_sym()), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(($truthy($a = (equation = node.$content())['$start_with?'](open)) ? equation['$end_with?'](close) : $a))) {
          } else {
          equation = "" + (open) + (equation) + (close)
        };
        return "" + "<div" + (id_attribute) + " class=\"" + ((function() {if ($truthy((role = node.$role()))) {
          return $rb_times(["stemblock", role], " ")
          } else {
          return "stemblock"
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (equation) + "\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_stem_27.$$arity = 1);
      
      Opal.defn(self, '$olist', TMP_Html5Converter_olist_29 = function $$olist(node) {
        var TMP_28, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, type_attribute = nil, keyword = nil, start_attribute = nil, reversed_attribute = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["olist", node.$style(), node.$role()].$compact();
        class_attribute = "" + " class=\"" + ($rb_times(classes, " ")) + "\"";
        result['$<<']("" + "<div" + (id_attribute) + (class_attribute) + ">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<div class=\"title\">" + (node.$title()) + "</div>")};
        type_attribute = (function() {if ($truthy((keyword = node.$list_marker_keyword()))) {
          return "" + " type=\"" + (keyword) + "\""
          } else {
          return nil
        }; return nil; })();
        start_attribute = (function() {if ($truthy(node['$attr?']("start"))) {
          return "" + " start=\"" + (node.$attr("start")) + "\""
          } else {
          return nil
        }; return nil; })();
        reversed_attribute = (function() {if ($truthy(node['$option?']("reversed"))) {
          
          return self.$append_boolean_attribute("reversed", self.xml_mode);
          } else {
          return nil
        }; return nil; })();
        result['$<<']("" + "<ol class=\"" + (node.$style()) + "\"" + (type_attribute) + (start_attribute) + (reversed_attribute) + ">");
        $send(node.$items(), 'each', [], (TMP_28 = function(item){var self = TMP_28.$$s || this;
if (item == null) item = nil;
        
          result['$<<']("<li>");
          result['$<<']("" + "<p>" + (item.$text()) + "</p>");
          if ($truthy(item['$blocks?']())) {
            result['$<<'](item.$content())};
          return result['$<<']("</li>");}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28));
        result['$<<']("</ol>");
        result['$<<']("</div>");
        return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'));
      }, TMP_Html5Converter_olist_29.$$arity = 1);
      
      Opal.defn(self, '$open', TMP_Html5Converter_open_30 = function $$open(node) {
        var $a, $b, $c, self = this, style = nil, id_attr = nil, title_el = nil, role = nil;

        if ((style = node.$style())['$==']("abstract")) {
          if ($truthy((($a = node.$parent()['$=='](node.$document())) ? node.$document().$doctype()['$==']("book") : node.$parent()['$=='](node.$document())))) {
            
            self.$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
            return "";
            } else {
            
            id_attr = (function() {if ($truthy(node.$id())) {
              return "" + " id=\"" + (node.$id()) + "\""
              } else {
              return nil
            }; return nil; })();
            title_el = (function() {if ($truthy(node['$title?']())) {
              return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
              } else {
              return nil
            }; return nil; })();
            return "" + "<div" + (id_attr) + " class=\"quoteblock abstract" + (($truthy($a = (role = node.$role())) ? "" + " " + (role) : $a)) + "\">\n" + (title_el) + "<blockquote>\n" + (node.$content()) + "\n" + "</blockquote>\n" + "</div>";
          }
        } else if ($truthy((($a = style['$==']("partintro")) ? ($truthy($b = ($truthy($c = $rb_gt(node.$level(), 0)) ? $c : node.$parent().$context()['$!=']("section"))) ? $b : node.$document().$doctype()['$!=']("book")) : style['$==']("partintro")))) {
          
          self.$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a book part. Excluding block content.");
          return "";
          } else {
          
          id_attr = (function() {if ($truthy(node.$id())) {
            return "" + " id=\"" + (node.$id()) + "\""
            } else {
            return nil
          }; return nil; })();
          title_el = (function() {if ($truthy(node['$title?']())) {
            return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
            } else {
            return nil
          }; return nil; })();
          return "" + "<div" + (id_attr) + " class=\"openblock" + ((function() {if ($truthy(($truthy($a = style) ? style['$!=']("open") : $a))) {
            return "" + " " + (style)
            } else {
            return ""
          }; return nil; })()) + (($truthy($a = (role = node.$role())) ? "" + " " + (role) : $a)) + "\">\n" + (title_el) + "<div class=\"content\">\n" + (node.$content()) + "\n" + "</div>\n" + "</div>";
        }
      }, TMP_Html5Converter_open_30.$$arity = 1);
      
      Opal.defn(self, '$page_break', TMP_Html5Converter_page_break_31 = function $$page_break(node) {
        var self = this;

        return "<div style=\"page-break-after: always;\"></div>"
      }, TMP_Html5Converter_page_break_31.$$arity = 1);
      
      Opal.defn(self, '$paragraph', TMP_Html5Converter_paragraph_32 = function $$paragraph(node) {
        var self = this, class_attribute = nil, attributes = nil;

        
        class_attribute = (function() {if ($truthy(node.$role())) {
          return "" + "class=\"paragraph " + (node.$role()) + "\""
          } else {
          return "class=\"paragraph\""
        }; return nil; })();
        attributes = (function() {if ($truthy(node.$id())) {
          return "" + "id=\"" + (node.$id()) + "\" " + (class_attribute)
          } else {
          return class_attribute
        }; return nil; })();
        if ($truthy(node['$title?']())) {
          return "" + "<div " + (attributes) + ">\n" + "<div class=\"title\">" + (node.$title()) + "</div>\n" + "<p>" + (node.$content()) + "</p>\n" + "</div>"
          } else {
          return "" + "<div " + (attributes) + ">\n" + "<p>" + (node.$content()) + "</p>\n" + "</div>"
        };
      }, TMP_Html5Converter_paragraph_32.$$arity = 1);
      
      Opal.defn(self, '$preamble', TMP_Html5Converter_preamble_33 = function $$preamble(node) {
        var $a, $b, self = this, doc = nil, toc = nil;

        
        if ($truthy(($truthy($a = ($truthy($b = (doc = node.$document())['$attr?']("toc-placement", "preamble")) ? doc['$sections?']() : $b)) ? doc['$attr?']("toc") : $a))) {
          toc = "" + "\n" + "<div id=\"toc\" class=\"" + (doc.$attr("toc-class", "toc")) + "\">\n" + "<div id=\"toctitle\">" + (doc.$attr("toc-title")) + "</div>\n" + (self.$outline(doc)) + "\n" + "</div>"
          } else {
          toc = nil
        };
        return "" + "<div id=\"preamble\">\n" + "<div class=\"sectionbody\">\n" + (node.$content()) + "\n" + "</div>" + (toc) + "\n" + "</div>";
      }, TMP_Html5Converter_preamble_33.$$arity = 1);
      
      Opal.defn(self, '$quote', TMP_Html5Converter_quote_34 = function $$quote(node) {
        var $a, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["quoteblock", node.$role()].$compact();
        class_attribute = "" + " class=\"" + ($rb_times(classes, " ")) + "\"";
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "\n<div class=\"title\">" + (node.$title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        attribution = (function() {if ($truthy(node['$attr?']("attribution"))) {
          
          return node.$attr("attribution");
          } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(node['$attr?']("citetitle"))) {
          
          return node.$attr("citetitle");
          } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          cite_element = (function() {if ($truthy(citetitle)) {
            return "" + "<cite>" + (citetitle) + "</cite>"
            } else {
            return nil
          }; return nil; })();
          attribution_text = (function() {if ($truthy(attribution)) {
            return "" + "&#8212; " + (attribution) + ((function() {if ($truthy(citetitle)) {
              return "" + "<br" + (self.void_element_slash) + ">\n"
              } else {
              return nil
            }; return nil; })())
            } else {
            return nil
          }; return nil; })();
          attribution_element = "" + "\n<div class=\"attribution\">\n" + (attribution_text) + (cite_element) + "\n</div>";
          } else {
          attribution_element = nil
        };
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<blockquote>\n" + (node.$content()) + "\n" + "</blockquote>" + (attribution_element) + "\n" + "</div>";
      }, TMP_Html5Converter_quote_34.$$arity = 1);
      
      Opal.defn(self, '$thematic_break', TMP_Html5Converter_thematic_break_35 = function $$thematic_break(node) {
        var self = this;

        return "" + "<hr" + (self.void_element_slash) + ">"
      }, TMP_Html5Converter_thematic_break_35.$$arity = 1);
      
      Opal.defn(self, '$sidebar', TMP_Html5Converter_sidebar_36 = function $$sidebar(node) {
        var self = this, id_attribute = nil, title_element = nil, role = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "<div class=\"title\">" + (node.$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "" + "<div" + (id_attribute) + " class=\"" + ((function() {if ($truthy((role = node.$role()))) {
          return $rb_times(["sidebarblock", role], " ")
          } else {
          return "sidebarblock"
        }; return nil; })()) + "\">\n" + "<div class=\"content\">\n" + (title_element) + (node.$content()) + "\n" + "</div>\n" + "</div>";
      }, TMP_Html5Converter_sidebar_36.$$arity = 1);
      
      Opal.defn(self, '$table', TMP_Html5Converter_table_44 = function $$table(node) {
        var $a, TMP_37, TMP_38, TMP_39, TMP_40, self = this, result = nil, id_attribute = nil, classes = nil, styles = nil, role = nil, class_attribute = nil, style_attribute = nil, slash = nil, tag = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["tableblock", "" + "frame-" + (node.$attr("frame", "all")), "" + "grid-" + (node.$attr("grid", "all"))];
        styles = [];
        if ($truthy(($truthy($a = node['$option?']("autowidth")) ? node['$attr?']("width", nil, false)['$!']() : $a))) {
        } else if ($truthy(node['$attr?']("tablepcwidth", 100))) {
          classes['$<<']("spread")
          } else {
          styles['$<<']("" + "width: " + (node.$attr("tablepcwidth")) + "%;")
        };
        if ($truthy((role = node.$role()))) {
          classes['$<<'](role)};
        class_attribute = "" + " class=\"" + ($rb_times(classes, " ")) + "\"";
        if ($truthy(node['$attr?']("float"))) {
          styles['$<<']("" + "float: " + (node.$attr("float")) + ";")};
        style_attribute = (function() {if ($truthy(styles['$empty?']())) {
          return nil
          } else {
          return "" + " style=\"" + ($rb_times(styles, " ")) + "\""
        }; return nil; })();
        result['$<<']("" + "<table" + (id_attribute) + (class_attribute) + (style_attribute) + ">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<caption class=\"title\">" + (node.$captioned_title()) + "</caption>")};
        if ($truthy($rb_gt(node.$attr("rowcount"), 0))) {
          
          slash = self.void_element_slash;
          result['$<<']("<colgroup>");
          if ($truthy(node['$option?']("autowidth"))) {
            
            tag = "" + "<col" + (slash) + ">";
            $send(node.$columns().$size(), 'times', [], (TMP_37 = function(){var self = TMP_37.$$s || this;

            return result['$<<'](tag)}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37));
            } else {
            $send(node.$columns(), 'each', [], (TMP_38 = function(col){var self = TMP_38.$$s || this;
if (col == null) col = nil;
            return result['$<<']("" + "<col style=\"width: " + (col.$attr("colpcwidth")) + "%;\"" + (slash) + ">")}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38))
          };
          result['$<<']("</colgroup>");
          $send($send(["head", "foot", "body"], 'select', [], (TMP_39 = function(tsec){var self = TMP_39.$$s || this;
if (tsec == null) tsec = nil;
          return node.$rows()['$[]'](tsec)['$empty?']()['$!']()}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39)), 'each', [], (TMP_40 = function(tsec){var self = TMP_40.$$s || this, TMP_41;
if (tsec == null) tsec = nil;
          
            result['$<<']("" + "<t" + (tsec) + ">");
            $send(node.$rows()['$[]'](tsec), 'each', [], (TMP_41 = function(row){var self = TMP_41.$$s || this, TMP_42;
if (row == null) row = nil;
            
              result['$<<']("<tr>");
              $send(row, 'each', [], (TMP_42 = function(cell){var self = TMP_42.$$s || this, TMP_43, $b, cell_content = nil, $case = nil, cell_tag_name = nil, cell_class_attribute = nil, cell_colspan_attribute = nil, cell_rowspan_attribute = nil, cell_style_attribute = nil;
if (cell == null) cell = nil;
              
                if (tsec['$==']("head")) {
                  cell_content = cell.$text()
                  } else {
                  $case = cell.$style();
                  if ("asciidoc"['$===']($case)) {cell_content = "" + "<div>" + (cell.$content()) + "</div>"}
                  else if ("verse"['$===']($case)) {cell_content = "" + "<div class=\"verse\">" + (cell.$text()) + "</div>"}
                  else if ("literal"['$===']($case)) {cell_content = "" + "<div class=\"literal\"><pre>" + (cell.$text()) + "</pre></div>"}
                  else {
                  cell_content = "";
                  $send(cell.$content(), 'each', [], (TMP_43 = function(text){var self = TMP_43.$$s || this;
if (text == null) text = nil;
                  return (cell_content = "" + (cell_content) + "<p class=\"tableblock\">" + (text) + "</p>")}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43));}
                };
                cell_tag_name = (function() {if ($truthy(($truthy($b = tsec['$==']("head")) ? $b : cell.$style()['$==']("header")))) {
                  return "th"
                  } else {
                  return "td"
                }; return nil; })();
                cell_class_attribute = "" + " class=\"tableblock halign-" + (cell.$attr("halign")) + " valign-" + (cell.$attr("valign")) + "\"";
                cell_colspan_attribute = (function() {if ($truthy(cell.$colspan())) {
                  return "" + " colspan=\"" + (cell.$colspan()) + "\""
                  } else {
                  return nil
                }; return nil; })();
                cell_rowspan_attribute = (function() {if ($truthy(cell.$rowspan())) {
                  return "" + " rowspan=\"" + (cell.$rowspan()) + "\""
                  } else {
                  return nil
                }; return nil; })();
                cell_style_attribute = (function() {if ($truthy(node.$document()['$attr?']("cellbgcolor"))) {
                  return "" + " style=\"background-color: " + (node.$document().$attr("cellbgcolor")) + ";\""
                  } else {
                  return nil
                }; return nil; })();
                return result['$<<']("" + "<" + (cell_tag_name) + (cell_class_attribute) + (cell_colspan_attribute) + (cell_rowspan_attribute) + (cell_style_attribute) + ">" + (cell_content) + "</" + (cell_tag_name) + ">");}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42));
              return result['$<<']("</tr>");}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41));
            return result['$<<']("" + "</t" + (tsec) + ">");}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));};
        result['$<<']("</table>");
        return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'));
      }, TMP_Html5Converter_table_44.$$arity = 1);
      
      Opal.defn(self, '$toc', TMP_Html5Converter_toc_45 = function $$toc(node) {
        var $a, $b, self = this, doc = nil, id_attr = nil, title_id_attr = nil, title = nil, levels = nil, role = nil;

        
        if ($truthy(($truthy($a = ($truthy($b = (doc = node.$document())['$attr?']("toc-placement", "macro")) ? doc['$sections?']() : $b)) ? doc['$attr?']("toc") : $a))) {
          } else {
          return "<!-- toc disabled -->"
        };
        if ($truthy(node.$id())) {
          
          id_attr = "" + " id=\"" + (node.$id()) + "\"";
          title_id_attr = "" + " id=\"" + (node.$id()) + "title\"";
          } else {
          
          id_attr = " id=\"toc\"";
          title_id_attr = " id=\"toctitle\"";
        };
        title = (function() {if ($truthy(node['$title?']())) {
          return node.$title()
          } else {
          
          return doc.$attr("toc-title");
        }; return nil; })();
        levels = (function() {if ($truthy(node['$attr?']("levels"))) {
          return node.$attr("levels").$to_i()
          } else {
          return nil
        }; return nil; })();
        role = (function() {if ($truthy(node['$role?']())) {
          return node.$role()
          } else {
          
          return doc.$attr("toc-class", "toc");
        }; return nil; })();
        return "" + "<div" + (id_attr) + " class=\"" + (role) + "\">\n" + "<div" + (title_id_attr) + " class=\"title\">" + (title) + "</div>\n" + (self.$outline(doc, $hash2(["toclevels"], {"toclevels": levels}))) + "\n" + "</div>";
      }, TMP_Html5Converter_toc_45.$$arity = 1);
      
      Opal.defn(self, '$ulist', TMP_Html5Converter_ulist_47 = function $$ulist(node) {
        var TMP_46, self = this, result = nil, id_attribute = nil, div_classes = nil, marker_checked = nil, marker_unchecked = nil, checklist = nil, ul_class_attribute = nil;

        
        result = [];
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        div_classes = ["ulist", node.$style(), node.$role()].$compact();
        marker_checked = nil;
        marker_unchecked = nil;
        if ($truthy((checklist = node['$option?']("checklist")))) {
          
          div_classes.$insert(1, "checklist");
          ul_class_attribute = " class=\"checklist\"";
          if ($truthy(node['$option?']("interactive"))) {
            if ($truthy(self.xml_mode)) {
              
              marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked=\"checked\"/> ";
              marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\"/> ";
              } else {
              
              marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked> ";
              marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\"> ";
            }
          } else if ($truthy(node.$document()['$attr?']("icons", "font"))) {
            
            marker_checked = "<i class=\"fa fa-check-square-o\"></i> ";
            marker_unchecked = "<i class=\"fa fa-square-o\"></i> ";
            } else {
            
            marker_checked = "&#10003; ";
            marker_unchecked = "&#10063; ";
          };
          } else {
          ul_class_attribute = (function() {if ($truthy(node.$style())) {
            return "" + " class=\"" + (node.$style()) + "\""
            } else {
            return nil
          }; return nil; })()
        };
        result['$<<']("" + "<div" + (id_attribute) + " class=\"" + ($rb_times(div_classes, " ")) + "\">");
        if ($truthy(node['$title?']())) {
          result['$<<']("" + "<div class=\"title\">" + (node.$title()) + "</div>")};
        result['$<<']("" + "<ul" + (ul_class_attribute) + ">");
        $send(node.$items(), 'each', [], (TMP_46 = function(item){var self = TMP_46.$$s || this, $a;
if (item == null) item = nil;
        
          result['$<<']("<li>");
          if ($truthy(($truthy($a = checklist) ? item['$attr?']("checkbox") : $a))) {
            result['$<<']("" + "<p>" + ((function() {if ($truthy(item['$attr?']("checked"))) {
              return marker_checked
              } else {
              return marker_unchecked
            }; return nil; })()) + (item.$text()) + "</p>")
            } else {
            result['$<<']("" + "<p>" + (item.$text()) + "</p>")
          };
          if ($truthy(item['$blocks?']())) {
            result['$<<'](item.$content())};
          return result['$<<']("</li>");}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46));
        result['$<<']("</ul>");
        result['$<<']("</div>");
        return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'));
      }, TMP_Html5Converter_ulist_47.$$arity = 1);
      
      Opal.defn(self, '$verse', TMP_Html5Converter_verse_48 = function $$verse(node) {
        var $a, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;

        
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["verseblock", node.$role()].$compact();
        class_attribute = "" + " class=\"" + ($rb_times(classes, " ")) + "\"";
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "\n<div class=\"title\">" + (node.$title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        attribution = (function() {if ($truthy(node['$attr?']("attribution"))) {
          
          return node.$attr("attribution");
          } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(node['$attr?']("citetitle"))) {
          
          return node.$attr("citetitle");
          } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          cite_element = (function() {if ($truthy(citetitle)) {
            return "" + "<cite>" + (citetitle) + "</cite>"
            } else {
            return nil
          }; return nil; })();
          attribution_text = (function() {if ($truthy(attribution)) {
            return "" + "&#8212; " + (attribution) + ((function() {if ($truthy(citetitle)) {
              return "" + "<br" + (self.void_element_slash) + ">\n"
              } else {
              return nil
            }; return nil; })())
            } else {
            return nil
          }; return nil; })();
          attribution_element = "" + "\n<div class=\"attribution\">\n" + (attribution_text) + (cite_element) + "\n</div>";
          } else {
          attribution_element = nil
        };
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<pre class=\"content\">" + (node.$content()) + "</pre>" + (attribution_element) + "\n" + "</div>";
      }, TMP_Html5Converter_verse_48.$$arity = 1);
      
      Opal.defn(self, '$video', TMP_Html5Converter_video_49 = function $$video(node) {
        var $a, $b, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, width_attribute = nil, height_attribute = nil, $case = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, autoplay_param = nil, loop_param = nil, rel_param_val = nil, start_param = nil, end_param = nil, controls_param = nil, fs_param = nil, fs_attribute = nil, modest_param = nil, theme_param = nil, hl_param = nil, target = nil, list = nil, list_param = nil, playlist = nil, poster_attribute = nil, poster = nil, start_t = nil, end_t = nil, time_anchor = nil;

        
        xml = self.xml_mode;
        id_attribute = (function() {if ($truthy(node.$id())) {
          return "" + " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["videoblock", node.$role()].$compact();
        class_attribute = "" + " class=\"" + ($rb_times(classes, " ")) + "\"";
        title_element = (function() {if ($truthy(node['$title?']())) {
          return "" + "\n<div class=\"title\">" + (node.$captioned_title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        width_attribute = (function() {if ($truthy(node['$attr?']("width"))) {
          return "" + " width=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        height_attribute = (function() {if ($truthy(node['$attr?']("height"))) {
          return "" + " height=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        return (function() {$case = node.$attr("poster");
        if ("vimeo"['$===']($case)) {
        if ($truthy((asset_uri_scheme = node.$document().$attr("asset-uri-scheme", "https"))['$empty?']())) {
          } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        start_anchor = (function() {if ($truthy(node['$attr?']("start", nil, false))) {
          return "" + "#at=" + (node.$attr("start"))
          } else {
          return nil
        }; return nil; })();
        delimiter = "?";
        autoplay_param = (function() {if ($truthy(node['$option?']("autoplay"))) {
          return "" + (delimiter) + "autoplay=1"
          } else {
          return nil
        }; return nil; })();
        if ($truthy(autoplay_param)) {
          delimiter = "&amp;"};
        loop_param = (function() {if ($truthy(node['$option?']("loop"))) {
          return "" + (delimiter) + "loop=1"
          } else {
          return nil
        }; return nil; })();
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<div class=\"content\">\n" + "<iframe" + (width_attribute) + (height_attribute) + " src=\"" + (asset_uri_scheme) + "//player.vimeo.com/video/" + (node.$attr("target")) + (start_anchor) + (autoplay_param) + (loop_param) + "\" frameborder=\"0\"" + ((function() {if ($truthy(node['$option?']("nofullscreen"))) {
          return nil
          } else {
          
          return self.$append_boolean_attribute("allowfullscreen", xml);
        }; return nil; })()) + "></iframe>\n" + "</div>\n" + "</div>";}
        else if ("youtube"['$===']($case)) {
        if ($truthy((asset_uri_scheme = node.$document().$attr("asset-uri-scheme", "https"))['$empty?']())) {
          } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        rel_param_val = (function() {if ($truthy(node['$option?']("related"))) {
          return 1
          } else {
          return 0
        }; return nil; })();
        start_param = (function() {if ($truthy(node['$attr?']("start", nil, false))) {
          return "" + "&amp;start=" + (node.$attr("start"))
          } else {
          return nil
        }; return nil; })();
        end_param = (function() {if ($truthy(node['$attr?']("end", nil, false))) {
          return "" + "&amp;end=" + (node.$attr("end"))
          } else {
          return nil
        }; return nil; })();
        autoplay_param = (function() {if ($truthy(node['$option?']("autoplay"))) {
          return "&amp;autoplay=1"
          } else {
          return nil
        }; return nil; })();
        loop_param = (function() {if ($truthy(node['$option?']("loop"))) {
          return "&amp;loop=1"
          } else {
          return nil
        }; return nil; })();
        controls_param = (function() {if ($truthy(node['$option?']("nocontrols"))) {
          return "&amp;controls=0"
          } else {
          return nil
        }; return nil; })();
        if ($truthy(node['$option?']("nofullscreen"))) {
          
          fs_param = "&amp;fs=0";
          fs_attribute = nil;
          } else {
          
          fs_param = nil;
          fs_attribute = self.$append_boolean_attribute("allowfullscreen", xml);
        };
        modest_param = (function() {if ($truthy(node['$option?']("modest"))) {
          return "&amp;modestbranding=1"
          } else {
          return nil
        }; return nil; })();
        theme_param = (function() {if ($truthy(node['$attr?']("theme", nil, false))) {
          return "" + "&amp;theme=" + (node.$attr("theme"))
          } else {
          return nil
        }; return nil; })();
        hl_param = (function() {if ($truthy(node['$attr?']("lang"))) {
          return "" + "&amp;hl=" + (node.$attr("lang"))
          } else {
          return nil
        }; return nil; })();
        $b = node.$attr("target").$split("/", 2), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (list = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy((list = ($truthy($a = list) ? $a : node.$attr("list", nil, false))))) {
          list_param = "" + "&amp;list=" + (list)
          } else {
          
          $b = target.$split(",", 2), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (playlist = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy((playlist = ($truthy($a = playlist) ? $a : node.$attr("playlist", nil, false))))) {
            list_param = "" + "&amp;playlist=" + (playlist)
            } else {
            list_param = (function() {if ($truthy(loop_param)) {
              return "" + "&amp;playlist=" + (target)
              } else {
              return nil
            }; return nil; })()
          };
        };
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<div class=\"content\">\n" + "<iframe" + (width_attribute) + (height_attribute) + " src=\"" + (asset_uri_scheme) + "//www.youtube.com/embed/" + (target) + "?rel=" + (rel_param_val) + (start_param) + (end_param) + (autoplay_param) + (loop_param) + (controls_param) + (list_param) + (fs_param) + (modest_param) + (theme_param) + (hl_param) + "\" frameborder=\"0\"" + (fs_attribute) + "></iframe>\n" + "</div>\n" + "</div>";}
        else {
        poster_attribute = (function() {if ($truthy(("" + ((poster = node.$attr("poster"))))['$empty?']())) {
          return nil
          } else {
          return "" + " poster=\"" + (node.$media_uri(poster)) + "\""
        }; return nil; })();
        start_t = node.$attr("start", nil, false);
        end_t = node.$attr("end", nil, false);
        time_anchor = (function() {if ($truthy(($truthy($a = start_t) ? $a : end_t))) {
          return "" + "#t=" + (start_t) + ((function() {if ($truthy(end_t)) {
            return ","
            } else {
            return nil
          }; return nil; })()) + (end_t)
          } else {
          return nil
        }; return nil; })();
        return "" + "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n" + "<div class=\"content\">\n" + "<video src=\"" + (node.$media_uri(node.$attr("target"))) + (time_anchor) + "\"" + (width_attribute) + (height_attribute) + (poster_attribute) + ((function() {if ($truthy(node['$option?']("autoplay"))) {
          
          return self.$append_boolean_attribute("autoplay", xml);
          } else {
          return nil
        }; return nil; })()) + ((function() {if ($truthy(node['$option?']("nocontrols"))) {
          return nil
          } else {
          
          return self.$append_boolean_attribute("controls", xml);
        }; return nil; })()) + ((function() {if ($truthy(node['$option?']("loop"))) {
          
          return self.$append_boolean_attribute("loop", xml);
          } else {
          return nil
        }; return nil; })()) + ">\n" + "Your browser does not support the video tag.\n" + "</video>\n" + "</div>\n" + "</div>";}})();
      }, TMP_Html5Converter_video_49.$$arity = 1);
      
      Opal.defn(self, '$inline_anchor', TMP_Html5Converter_inline_anchor_50 = function $$inline_anchor(node) {
        var $a, $b, self = this, target = nil, $case = nil, refid = nil, text = nil, attrs = nil, role = nil;

        
        target = node.$target();
        return (function() {$case = node.$type();
        if ("xref"['$===']($case)) {
        refid = ($truthy($a = node.$attributes()['$[]']("refid")) ? $a : target);
        text = ($truthy($a = node.$text()) ? $a : ($truthy($b = node.$document().$references()['$[]']("ids")['$[]'](refid)) ? $b : "" + "[" + (refid) + "]"));
        return "" + "<a href=\"" + (target) + "\">" + (text) + "</a>";}
        else if ("ref"['$===']($case)) {return "" + "<a id=\"" + (target) + "\"></a>"}
        else if ("link"['$===']($case)) {
        attrs = [];
        if ($truthy(node.$id())) {
          attrs['$<<']("" + " id=\"" + (node.$id()) + "\"")};
        if ($truthy((role = node.$role()))) {
          attrs['$<<']("" + " class=\"" + (role) + "\"")};
        if ($truthy(node['$attr?']("title", nil, false))) {
          attrs['$<<']("" + " title=\"" + (node.$attr("title")) + "\"")};
        if ($truthy(node['$attr?']("window", nil, false))) {
          attrs['$<<']("" + " target=\"" + (node.$attr("window")) + "\"")};
        return "" + "<a href=\"" + (target) + "\"" + (attrs.$join()) + ">" + (node.$text()) + "</a>";}
        else if ("bibref"['$===']($case)) {return "" + "<a id=\"" + (target) + "\"></a>[" + (target) + "]"}
        else {return self.$warn("" + "asciidoctor: WARNING: unknown anchor type: " + (node.$type().$inspect()))}})();
      }, TMP_Html5Converter_inline_anchor_50.$$arity = 1);
      
      Opal.defn(self, '$inline_break', TMP_Html5Converter_inline_break_51 = function $$inline_break(node) {
        var self = this;

        return "" + (node.$text()) + "<br" + (self.void_element_slash) + ">"
      }, TMP_Html5Converter_inline_break_51.$$arity = 1);
      
      Opal.defn(self, '$inline_button', TMP_Html5Converter_inline_button_52 = function $$inline_button(node) {
        var self = this;

        return "" + "<b class=\"button\">" + (node.$text()) + "</b>"
      }, TMP_Html5Converter_inline_button_52.$$arity = 1);
      
      Opal.defn(self, '$inline_callout', TMP_Html5Converter_inline_callout_53 = function $$inline_callout(node) {
        var self = this, src = nil;

        if ($truthy(node.$document()['$attr?']("icons", "font"))) {
          return "" + "<i class=\"conum\" data-value=\"" + (node.$text()) + "\"></i><b>(" + (node.$text()) + ")</b>"
        } else if ($truthy(node.$document()['$attr?']("icons"))) {
          
          src = node.$icon_uri("" + "callouts/" + (node.$text()));
          return "" + "<img src=\"" + (src) + "\" alt=\"" + (node.$text()) + "\"" + (self.void_element_slash) + ">";
          } else {
          return "" + "<b class=\"conum\">(" + (node.$text()) + ")</b>"
        }
      }, TMP_Html5Converter_inline_callout_53.$$arity = 1);
      
      Opal.defn(self, '$inline_footnote', TMP_Html5Converter_inline_footnote_54 = function $$inline_footnote(node) {
        var self = this, index = nil, id_attr = nil;

        if ($truthy((index = node.$attr("index")))) {
          if (node.$type()['$==']("xref")) {
            return "" + "<sup class=\"footnoteref\">[<a class=\"footnote\" href=\"#_footnote_" + (index) + "\" title=\"View footnote.\">" + (index) + "</a>]</sup>"
            } else {
            
            id_attr = (function() {if ($truthy(node.$id())) {
              return "" + " id=\"_footnote_" + (node.$id()) + "\""
              } else {
              return nil
            }; return nil; })();
            return "" + "<sup class=\"footnote\"" + (id_attr) + ">[<a id=\"_footnoteref_" + (index) + "\" class=\"footnote\" href=\"#_footnote_" + (index) + "\" title=\"View footnote.\">" + (index) + "</a>]</sup>";
          }
        } else if (node.$type()['$==']("xref")) {
          return "" + "<sup class=\"footnoteref red\" title=\"Unresolved footnote reference.\">[" + (node.$text()) + "]</sup>"
          } else {
          return nil
        }
      }, TMP_Html5Converter_inline_footnote_54.$$arity = 1);
      
      Opal.defn(self, '$inline_image', TMP_Html5Converter_inline_image_57 = function $$inline_image(node) {
        var $a, TMP_55, TMP_56, $b, $c, $d, self = this, type = nil, class_attr_val = nil, title_attr = nil, img = nil, target = nil, attrs = nil, svg = nil, obj = nil, fallback = nil, window_attr = nil, role = nil, style_attr = nil;

        
        if ($truthy((($a = (type = node.$type())['$==']("icon")) ? node.$document()['$attr?']("icons", "font") : (type = node.$type())['$==']("icon")))) {
          
          class_attr_val = "" + "fa fa-" + (node.$target());
          $send($hash2(["size", "rotate", "flip"], {"size": "fa-", "rotate": "fa-rotate-", "flip": "fa-flip-"}), 'each', [], (TMP_55 = function(key, prefix){var self = TMP_55.$$s || this;
if (key == null) key = nil;if (prefix == null) prefix = nil;
          if ($truthy(node['$attr?'](key))) {
              return (class_attr_val = "" + (class_attr_val) + " " + (prefix) + (node.$attr(key)))
              } else {
              return nil
            }}, TMP_55.$$s = self, TMP_55.$$arity = 2, TMP_55));
          title_attr = (function() {if ($truthy(node['$attr?']("title"))) {
            return "" + " title=\"" + (node.$attr("title")) + "\""
            } else {
            return nil
          }; return nil; })();
          img = "" + "<i class=\"" + (class_attr_val) + "\"" + (title_attr) + "></i>";
        } else if ($truthy((($a = type['$==']("icon")) ? node.$document()['$attr?']("icons")['$!']() : type['$==']("icon")))) {
          img = "" + "[" + (node.$attr("alt")) + "]"
          } else {
          
          target = node.$target();
          attrs = $send(["width", "height", "title"], 'map', [], (TMP_56 = function(name){var self = TMP_56.$$s || this;
if (name == null) name = nil;
          if ($truthy(node['$attr?'](name))) {
              return "" + " " + (name) + "=\"" + (node.$attr(name)) + "\""
              } else {
              return nil
            }}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56)).$join();
          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = type['$!=']("icon")) ? ($truthy($d = node['$attr?']("format", "svg", false)) ? $d : target['$include?'](".svg")) : $c)) ? $rb_lt(node.$document().$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE')) : $b)) ? ($truthy($b = (svg = node['$option?']("inline"))) ? $b : (obj = node['$option?']("interactive"))) : $a))) {
            if ($truthy(svg)) {
              img = ($truthy($a = self.$read_svg_contents(node, target)) ? $a : "" + "<span class=\"alt\">" + (node.$attr("alt")) + "</span>")
            } else if ($truthy(obj)) {
              
              fallback = (function() {if ($truthy(node['$attr?']("fallback"))) {
                return "" + "<img src=\"" + (node.$image_uri(node.$attr("fallback"))) + "\" alt=\"" + (node.$attr("alt")) + "\"" + (attrs) + (self.void_element_slash) + ">"
                } else {
                return "" + "<span class=\"alt\">" + (node.$attr("alt")) + "</span>"
              }; return nil; })();
              img = "" + "<object type=\"image/svg+xml\" data=\"" + (node.$image_uri(target)) + "\"" + (attrs) + ">" + (fallback) + "</object>";}};
          img = ($truthy($a = img) ? $a : "" + "<img src=\"" + ((function() {if (type['$==']("icon")) {
            
            return node.$icon_uri(target);
            } else {
            
            return node.$image_uri(target);
          }; return nil; })()) + "\" alt=\"" + (node.$attr("alt")) + "\"" + (attrs) + (self.void_element_slash) + ">");
        };
        if ($truthy(node['$attr?']("link"))) {
          
          window_attr = (function() {if ($truthy(node['$attr?']("window"))) {
            return "" + " target=\"" + (node.$attr("window")) + "\""
            } else {
            return nil
          }; return nil; })();
          img = "" + "<a class=\"image\" href=\"" + (node.$attr("link")) + "\"" + (window_attr) + ">" + (img) + "</a>";};
        class_attr_val = (function() {if ($truthy((role = node.$role()))) {
          return "" + (type) + " " + (role)
          } else {
          return type
        }; return nil; })();
        style_attr = (function() {if ($truthy(node['$attr?']("float"))) {
          return "" + " style=\"float: " + (node.$attr("float")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "" + "<span class=\"" + (class_attr_val) + "\"" + (style_attr) + ">" + (img) + "</span>";
      }, TMP_Html5Converter_inline_image_57.$$arity = 1);
      
      Opal.defn(self, '$inline_indexterm', TMP_Html5Converter_inline_indexterm_58 = function $$inline_indexterm(node) {
        var self = this;

        if (node.$type()['$==']("visible")) {
          return node.$text()
          } else {
          return ""
        }
      }, TMP_Html5Converter_inline_indexterm_58.$$arity = 1);
      
      Opal.defn(self, '$inline_kbd', TMP_Html5Converter_inline_kbd_60 = function $$inline_kbd(node) {
        var TMP_59, self = this, keys = nil, key_combo = nil;

        if ((keys = node.$attr("keys")).$size()['$=='](1)) {
          return "" + "<kbd>" + (keys['$[]'](0)) + "</kbd>"
          } else {
          
          key_combo = $send(keys, 'map', [], (TMP_59 = function(key){var self = TMP_59.$$s || this;
if (key == null) key = nil;
          return "" + "<kbd>" + (key) + "</kbd>+"}, TMP_59.$$s = self, TMP_59.$$arity = 1, TMP_59)).$join().$chop();
          return "" + "<span class=\"keyseq\">" + (key_combo) + "</span>";
        }
      }, TMP_Html5Converter_inline_kbd_60.$$arity = 1);
      
      Opal.defn(self, '$inline_menu', TMP_Html5Converter_inline_menu_62 = function $$inline_menu(node) {
        var TMP_61, self = this, menu = nil, submenus = nil, submenu_path = nil, menuitem = nil;

        
        menu = node.$attr("menu");
        if ($truthy((submenus = node.$attr("submenus"))['$empty?']()['$!']())) {
          
          submenu_path = $send(submenus, 'map', [], (TMP_61 = function(submenu){var self = TMP_61.$$s || this;
if (submenu == null) submenu = nil;
          return "" + "<span class=\"submenu\">" + (submenu) + "</span>&#160;&#9656; "}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61)).$join().$chop();
          return "" + "<span class=\"menuseq\"><span class=\"menu\">" + (menu) + "</span>&#160;&#9656; " + (submenu_path) + " <span class=\"menuitem\">" + (node.$attr("menuitem")) + "</span></span>";
        } else if ($truthy((menuitem = node.$attr("menuitem")))) {
          return "" + "<span class=\"menuseq\"><span class=\"menu\">" + (menu) + "</span>&#160;&#9656; <span class=\"menuitem\">" + (menuitem) + "</span></span>"
          } else {
          return "" + "<span class=\"menu\">" + (menu) + "</span>"
        };
      }, TMP_Html5Converter_inline_menu_62.$$arity = 1);
      
      Opal.defn(self, '$inline_quoted', TMP_Html5Converter_inline_quoted_63 = function $$inline_quoted(node) {
        var $a, $b, self = this, open = nil, close = nil, is_tag = nil, role = nil, quoted_text = nil;

        
        $b = Opal.const_get_relative($nesting, 'QUOTE_TAGS')['$[]'](node.$type()), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), (is_tag = ($a[2] == null ? nil : $a[2])), $b;
        if ($truthy((role = node.$role()))) {
          if ($truthy(is_tag)) {
            quoted_text = "" + (open.$chop()) + " class=\"" + (role) + "\">" + (node.$text()) + (close)
            } else {
            quoted_text = "" + "<span class=\"" + (role) + "\">" + (open) + (node.$text()) + (close) + "</span>"
          }
          } else {
          quoted_text = "" + (open) + (node.$text()) + (close)
        };
        if ($truthy(node.$id())) {
          return "" + "<a id=\"" + (node.$id()) + "\"></a>" + (quoted_text)
          } else {
          return quoted_text
        };
      }, TMP_Html5Converter_inline_quoted_63.$$arity = 1);
      
      Opal.defn(self, '$append_boolean_attribute', TMP_Html5Converter_append_boolean_attribute_64 = function $$append_boolean_attribute(name, xml) {
        var self = this;

        if ($truthy(xml)) {
          return "" + " " + (name) + "=\"" + (name) + "\""
          } else {
          return "" + " " + (name)
        }
      }, TMP_Html5Converter_append_boolean_attribute_64.$$arity = 2);
      return (Opal.defn(self, '$read_svg_contents', TMP_Html5Converter_read_svg_contents_66 = function $$read_svg_contents(node, target) {
        var TMP_65, self = this, svg = nil, old_start_tag = nil, new_start_tag = nil;

        
        if ($truthy((svg = node.$read_contents(target, $hash2(["start", "normalize", "label"], {"start": node.$document().$attr("imagesdir"), "normalize": true, "label": "SVG"}))))) {
          
          if ($truthy(svg['$start_with?']("<svg"))) {
            } else {
            svg = svg.$sub(Opal.const_get_relative($nesting, 'SvgPreambleRx'), "")
          };
          old_start_tag = (new_start_tag = nil);
          $send(["width", "height"], 'each', [], (TMP_65 = function(dim){var self = TMP_65.$$s || this;
if (dim == null) dim = nil;
          if ($truthy(node['$attr?'](dim))) {
              
              if ($truthy(new_start_tag)) {
                } else {
                new_start_tag = (old_start_tag = svg.$match(Opal.const_get_relative($nesting, 'SvgStartTagRx'))['$[]'](0)).$gsub(Opal.const_get_relative($nesting, 'DimensionAttributeRx'), "")
              };
              return (new_start_tag = "" + (new_start_tag.$chop()) + " " + (dim) + "=\"" + (node.$attr(dim)) + "px\">");
              } else {
              return nil
            }}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65));
          if ($truthy(new_start_tag)) {
            svg = "" + (new_start_tag) + (svg['$[]'](Opal.Range.$new(old_start_tag.$length(), -1, false)))};};
        return svg;
      }, TMP_Html5Converter_read_svg_contents_66.$$arity = 2), nil) && 'read_svg_contents';
    })(Opal.const_get_relative($nesting, 'Converter'), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Converter'), 'BuiltIn'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/extensions"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $range = Opal.range, $hash = Opal.hash;

  Opal.add_stubs(['$[]=', '$config', '$-', '$nil_or_empty?', '$name', '$grep', '$constants', '$include', '$const_get', '$extend', '$attr_reader', '$merge', '$class', '$update', '$raise', '$new', '$create_block', '$===', '$has_more_lines?', '$next_block', '$dup', '$<<', '$each', '$define_method', '$send', '$insert', '$call', '$attr_accessor', '$[]', '$option', '$to_set', '$flatten', '$resolve_regexp', '$==', '$attr', '$method', '$register', '$+', '$values', '$groups', '$arity', '$instance_exec', '$to_proc', '$activate', '$add_document_processor', '$!', '$any?', '$select', '$add_syntax_processor', '$to_sym', '$include?', '$private', '$tr', '$to_s', '$join', '$map', '$split', '$upcase', '$chr', '$instance_variable_get', '$instance_variable_set', '$resolve_args', '$freeze', '$process_block_given?', '$source_location', '$class_for_name', '$<', '$update_config', '$unshift', '$as_symbol', '$name=', '$pop', '$size', '$>', '$fill', '$-@', '$next_auto_id', '$generate_name', '$length', '$empty?', '$const_defined?']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Extensions, self = $Extensions = $module($base, 'Extensions');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        function $Processor(){};
        var self = $Processor = $klass($base, $super, 'Processor', $Processor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Processor_initialize_4, TMP_Processor_update_config_5, TMP_Processor_process_6, TMP_Processor_create_block_7, TMP_Processor_create_image_block_8, TMP_Processor_create_inline_9, TMP_Processor_parse_content_10, TMP_Processor_11;

        def.config = nil;
        
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_config_1, TMP_option_2, TMP_use_dsl_3;

          
          
          Opal.defn(self, '$config', TMP_config_1 = function $$config() {
            var $a, self = this;
            if (self.config == null) self.config = nil;

            return (self.config = ($truthy($a = self.config) ? $a : $hash2([], {})))
          }, TMP_config_1.$$arity = 0);
          
          Opal.defn(self, '$option', TMP_option_2 = function $$option(key, default_value) {
            var self = this, $writer = nil;

            
            $writer = [key, default_value];
            $send(self.$config(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_option_2.$$arity = 2);
          
          Opal.defn(self, '$use_dsl', TMP_use_dsl_3 = function $$use_dsl() {
            var self = this;

            if ($truthy(self.$name()['$nil_or_empty?']())) {
              if ($truthy((Opal.Module.$$nesting = $nesting, self.$constants()).$grep("DSL"))) {
                return self.$include(self.$const_get("DSL"))
                } else {
                return nil
              }
            } else if ($truthy((Opal.Module.$$nesting = $nesting, self.$constants()).$grep("DSL"))) {
              return self.$extend(self.$const_get("DSL"))
              } else {
              return nil
            }
          }, TMP_use_dsl_3.$$arity = 0);
          Opal.alias(self, "extend_dsl", "use_dsl");
          return Opal.alias(self, "include_dsl", "use_dsl");
        })(Opal.get_singleton_class(self), $nesting);
        self.$attr_reader("config");
        
        Opal.defn(self, '$initialize', TMP_Processor_initialize_4 = function $$initialize(config) {
          var self = this;

          if (config == null) {
            config = $hash2([], {});
          }
          return (self.config = self.$class().$config().$merge(config))
        }, TMP_Processor_initialize_4.$$arity = -1);
        
        Opal.defn(self, '$update_config', TMP_Processor_update_config_5 = function $$update_config(config) {
          var self = this;

          return self.config.$update(config)
        }, TMP_Processor_update_config_5.$$arity = 1);
        
        Opal.defn(self, '$process', TMP_Processor_process_6 = function $$process($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
        }, TMP_Processor_process_6.$$arity = -1);
        
        Opal.defn(self, '$create_block', TMP_Processor_create_block_7 = function $$create_block(parent, context, source, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return Opal.const_get_relative($nesting, 'Block').$new(parent, context, $hash2(["source", "attributes"], {"source": source, "attributes": attrs}).$merge(opts))
        }, TMP_Processor_create_block_7.$$arity = -5);
        
        Opal.defn(self, '$create_image_block', TMP_Processor_create_image_block_8 = function $$create_image_block(parent, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return self.$create_block(parent, "image", nil, attrs, opts)
        }, TMP_Processor_create_image_block_8.$$arity = -3);
        
        Opal.defn(self, '$create_inline', TMP_Processor_create_inline_9 = function $$create_inline(parent, context, text, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return Opal.const_get_relative($nesting, 'Inline').$new(parent, context, text, opts)
        }, TMP_Processor_create_inline_9.$$arity = -4);
        
        Opal.defn(self, '$parse_content', TMP_Processor_parse_content_10 = function $$parse_content(parent, content, attributes) {
          var $a, self = this, reader = nil, block = nil;

          if (attributes == null) {
            attributes = nil;
          }
          
          reader = (function() {if ($truthy(Opal.const_get_relative($nesting, 'Reader')['$==='](content))) {
            return content
            } else {
            
            return Opal.const_get_relative($nesting, 'Reader').$new(content);
          }; return nil; })();
          while ($truthy(reader['$has_more_lines?']())) {
            
            block = Opal.const_get_relative($nesting, 'Parser').$next_block(reader, parent, (function() {if ($truthy(attributes)) {
              return attributes.$dup()
              } else {
              return $hash2([], {})
            }; return nil; })());
            if ($truthy(block)) {
              parent['$<<'](block)};
          };
          return parent;
        }, TMP_Processor_parse_content_10.$$arity = -3);
        return $send([["create_paragraph", "create_block", "paragraph"], ["create_open_block", "create_block", "open"], ["create_example_block", "create_block", "example"], ["create_pass_block", "create_block", "pass"], ["create_listing_block", "create_block", "listing"], ["create_literal_block", "create_block", "literal"], ["create_anchor", "create_inline", "anchor"]], 'each', [], (TMP_Processor_11 = function(method_name, delegate_method_name, context){var self = TMP_Processor_11.$$s || this, TMP_12;
if (method_name == null) method_name = nil;if (delegate_method_name == null) delegate_method_name = nil;if (context == null) context = nil;
        return $send(self, 'define_method', [method_name], (TMP_12 = function($a_rest){var self = TMP_12.$$s || this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(self, 'send', [delegate_method_name].concat(Opal.to_a(args.$dup().$insert(1, context))))}, TMP_12.$$s = self, TMP_12.$$arity = -1, TMP_12))}, TMP_Processor_11.$$s = self, TMP_Processor_11.$$arity = 3, TMP_Processor_11));
      })($nesting[0], null, $nesting);
      (function($base, $parent_nesting) {
        var $ProcessorDsl, self = $ProcessorDsl = $module($base, 'ProcessorDsl');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ProcessorDsl_option_13, TMP_ProcessorDsl_process_14, TMP_ProcessorDsl_process_block_given$q_15;

        
        
        Opal.defn(self, '$option', TMP_ProcessorDsl_option_13 = function $$option(key, value) {
          var self = this, $writer = nil;

          
          $writer = [key, value];
          $send(self.$config(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_ProcessorDsl_option_13.$$arity = 2);
        
        Opal.defn(self, '$process', TMP_ProcessorDsl_process_14 = function $$process($a_rest) {
          var self = this, args, $iter = TMP_ProcessorDsl_process_14.$$p, block = $iter || nil;
          if (self.process_block == null) self.process_block = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_ProcessorDsl_process_14.$$p = null;
          if ((block !== nil)) {
            return (self.process_block = block)
          } else if ($truthy(self.process_block)) {
            return $send(self.process_block, 'call', Opal.to_a(args))
            } else {
            return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
          }
        }, TMP_ProcessorDsl_process_14.$$arity = -1);
        
        Opal.defn(self, '$process_block_given?', TMP_ProcessorDsl_process_block_given$q_15 = function() {
          var $a, self = this;

          return (($a = self['process_block'], $a != null && $a !== nil) ? 'instance-variable' : nil)
        }, TMP_ProcessorDsl_process_block_given$q_15.$$arity = 0);
      })($nesting[0], $nesting);
      (function($base, $super, $parent_nesting) {
        function $Preprocessor(){};
        var self = $Preprocessor = $klass($base, $super, 'Preprocessor', $Preprocessor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Preprocessor_process_16;

        return (Opal.defn(self, '$process', TMP_Preprocessor_process_16 = function $$process(document, reader) {
          var self = this;

          return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
        }, TMP_Preprocessor_process_16.$$arity = 2), nil) && 'process'
      })($nesting[0], Opal.const_get_relative($nesting, 'Processor'), $nesting);
      Opal.const_set(Opal.const_get_relative($nesting, 'Preprocessor'), 'DSL', Opal.const_get_relative($nesting, 'ProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $Treeprocessor(){};
        var self = $Treeprocessor = $klass($base, $super, 'Treeprocessor', $Treeprocessor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Treeprocessor_process_17;

        return (Opal.defn(self, '$process', TMP_Treeprocessor_process_17 = function $$process(document) {
          var self = this;

          return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
        }, TMP_Treeprocessor_process_17.$$arity = 1), nil) && 'process'
      })($nesting[0], Opal.const_get_relative($nesting, 'Processor'), $nesting);
      Opal.const_set(Opal.const_get_relative($nesting, 'Treeprocessor'), 'DSL', Opal.const_get_relative($nesting, 'ProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $Postprocessor(){};
        var self = $Postprocessor = $klass($base, $super, 'Postprocessor', $Postprocessor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Postprocessor_process_18;

        return (Opal.defn(self, '$process', TMP_Postprocessor_process_18 = function $$process(document, output) {
          var self = this;

          return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
        }, TMP_Postprocessor_process_18.$$arity = 2), nil) && 'process'
      })($nesting[0], Opal.const_get_relative($nesting, 'Processor'), $nesting);
      Opal.const_set(Opal.const_get_relative($nesting, 'Postprocessor'), 'DSL', Opal.const_get_relative($nesting, 'ProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $IncludeProcessor(){};
        var self = $IncludeProcessor = $klass($base, $super, 'IncludeProcessor', $IncludeProcessor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IncludeProcessor_process_19, TMP_IncludeProcessor_handles$q_20;

        
        
        Opal.defn(self, '$process', TMP_IncludeProcessor_process_19 = function $$process(document, reader, target, attributes) {
          var self = this;

          return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
        }, TMP_IncludeProcessor_process_19.$$arity = 4);
        return (Opal.defn(self, '$handles?', TMP_IncludeProcessor_handles$q_20 = function(target) {
          var self = this;

          return true
        }, TMP_IncludeProcessor_handles$q_20.$$arity = 1), nil) && 'handles?';
      })($nesting[0], Opal.const_get_relative($nesting, 'Processor'), $nesting);
      Opal.const_set(Opal.const_get_relative($nesting, 'IncludeProcessor'), 'DSL', Opal.const_get_relative($nesting, 'ProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $DocinfoProcessor(){};
        var self = $DocinfoProcessor = $klass($base, $super, 'DocinfoProcessor', $DocinfoProcessor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DocinfoProcessor_initialize_21, TMP_DocinfoProcessor_process_22;

        def.config = nil;
        
        self.$attr_accessor("location");
        
        Opal.defn(self, '$initialize', TMP_DocinfoProcessor_initialize_21 = function $$initialize(config) {
          var $a, self = this, $iter = TMP_DocinfoProcessor_initialize_21.$$p, $yield = $iter || nil, $writer = nil;

          if (config == null) {
            config = $hash2([], {});
          }
          if ($iter) TMP_DocinfoProcessor_initialize_21.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_DocinfoProcessor_initialize_21, false), [config], null);
          return ($truthy($a = self.config['$[]']("location")) ? $a : (($writer = ["location", "head"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        }, TMP_DocinfoProcessor_initialize_21.$$arity = -1);
        return (Opal.defn(self, '$process', TMP_DocinfoProcessor_process_22 = function $$process(document) {
          var self = this;

          return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
        }, TMP_DocinfoProcessor_process_22.$$arity = 1), nil) && 'process';
      })($nesting[0], Opal.const_get_relative($nesting, 'Processor'), $nesting);
      (function($base, $parent_nesting) {
        var $DocinfoProcessorDsl, self = $DocinfoProcessorDsl = $module($base, 'DocinfoProcessorDsl');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DocinfoProcessorDsl_at_location_23;

        
        self.$include(Opal.const_get_relative($nesting, 'ProcessorDsl'));
        
        Opal.defn(self, '$at_location', TMP_DocinfoProcessorDsl_at_location_23 = function $$at_location(value) {
          var self = this;

          return self.$option("location", value)
        }, TMP_DocinfoProcessorDsl_at_location_23.$$arity = 1);
      })($nesting[0], $nesting);
      Opal.const_set(Opal.const_get_relative($nesting, 'DocinfoProcessor'), 'DSL', Opal.const_get_relative($nesting, 'DocinfoProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $BlockProcessor(){};
        var self = $BlockProcessor = $klass($base, $super, 'BlockProcessor', $BlockProcessor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BlockProcessor_initialize_24, TMP_BlockProcessor_process_25;

        def.config = nil;
        
        self.$attr_accessor("name");
        
        Opal.defn(self, '$initialize', TMP_BlockProcessor_initialize_24 = function $$initialize(name, config) {
          var $a, self = this, $iter = TMP_BlockProcessor_initialize_24.$$p, $yield = $iter || nil, $case = nil, $writer = nil;

          if (name == null) {
            name = nil;
          }
          if (config == null) {
            config = $hash2([], {});
          }
          if ($iter) TMP_BlockProcessor_initialize_24.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_BlockProcessor_initialize_24, false), [config], null);
          self.name = ($truthy($a = name) ? $a : self.config['$[]']("name"));
          $case = self.config['$[]']("contexts");
          if (Opal.const_get_qualified('::', 'NilClass')['$===']($case)) {($truthy($a = self.config['$[]']("contexts")) ? $a : (($writer = ["contexts", ["open", "paragraph"].$to_set()]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))}
          else if (Opal.const_get_qualified('::', 'Symbol')['$===']($case)) {
          $writer = ["contexts", [self.config['$[]']("contexts")].$to_set()];
          $send(self.config, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else {
          $writer = ["contexts", self.config['$[]']("contexts").$to_set()];
          $send(self.config, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
          return ($truthy($a = self.config['$[]']("content_model")) ? $a : (($writer = ["content_model", "compound"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        }, TMP_BlockProcessor_initialize_24.$$arity = -1);
        return (Opal.defn(self, '$process', TMP_BlockProcessor_process_25 = function $$process(parent, reader, attributes) {
          var self = this;

          return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
        }, TMP_BlockProcessor_process_25.$$arity = 3), nil) && 'process';
      })($nesting[0], Opal.const_get_relative($nesting, 'Processor'), $nesting);
      (function($base, $parent_nesting) {
        var $BlockProcessorDsl, self = $BlockProcessorDsl = $module($base, 'BlockProcessorDsl');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BlockProcessorDsl_named_26, TMP_BlockProcessorDsl_contexts_27, TMP_BlockProcessorDsl_content_model_28, TMP_BlockProcessorDsl_positional_attributes_29, TMP_BlockProcessorDsl_default_attrs_30;

        
        self.$include(Opal.const_get_relative($nesting, 'ProcessorDsl'));
        
        Opal.defn(self, '$named', TMP_BlockProcessorDsl_named_26 = function $$named(value) {
          var self = this;

          if ($truthy(Opal.const_get_relative($nesting, 'Processor')['$==='](self))) {
            return (self.name = value)
            } else {
            return self.$option("name", value)
          }
        }, TMP_BlockProcessorDsl_named_26.$$arity = 1);
        Opal.alias(self, "match_name", "named");
        Opal.alias(self, "bind_to", "named");
        
        Opal.defn(self, '$contexts', TMP_BlockProcessorDsl_contexts_27 = function $$contexts($a_rest) {
          var self = this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$option("contexts", value.$flatten())
        }, TMP_BlockProcessorDsl_contexts_27.$$arity = -1);
        Opal.alias(self, "on_contexts", "contexts");
        Opal.alias(self, "on_context", "contexts");
        
        Opal.defn(self, '$content_model', TMP_BlockProcessorDsl_content_model_28 = function $$content_model(value) {
          var self = this;

          return self.$option("content_model", value)
        }, TMP_BlockProcessorDsl_content_model_28.$$arity = 1);
        Opal.alias(self, "parse_content_as", "content_model");
        
        Opal.defn(self, '$positional_attributes', TMP_BlockProcessorDsl_positional_attributes_29 = function $$positional_attributes($a_rest) {
          var self = this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$option("pos_attrs", value.$flatten())
        }, TMP_BlockProcessorDsl_positional_attributes_29.$$arity = -1);
        Opal.alias(self, "pos_attrs", "positional_attributes");
        Opal.alias(self, "name_attributes", "positional_attributes");
        Opal.alias(self, "name_positional_attributes", "positional_attributes");
        
        Opal.defn(self, '$default_attrs', TMP_BlockProcessorDsl_default_attrs_30 = function $$default_attrs(value) {
          var self = this;

          return self.$option("default_attrs", value)
        }, TMP_BlockProcessorDsl_default_attrs_30.$$arity = 1);
        Opal.alias(self, "seed_attributes_with", "default_attrs");
      })($nesting[0], $nesting);
      Opal.const_set(Opal.const_get_relative($nesting, 'BlockProcessor'), 'DSL', Opal.const_get_relative($nesting, 'BlockProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $MacroProcessor(){};
        var self = $MacroProcessor = $klass($base, $super, 'MacroProcessor', $MacroProcessor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MacroProcessor_initialize_31, TMP_MacroProcessor_process_32;

        def.config = nil;
        
        self.$attr_accessor("name");
        
        Opal.defn(self, '$initialize', TMP_MacroProcessor_initialize_31 = function $$initialize(name, config) {
          var $a, self = this, $iter = TMP_MacroProcessor_initialize_31.$$p, $yield = $iter || nil, $writer = nil;

          if (name == null) {
            name = nil;
          }
          if (config == null) {
            config = $hash2([], {});
          }
          if ($iter) TMP_MacroProcessor_initialize_31.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_MacroProcessor_initialize_31, false), [config], null);
          self.name = ($truthy($a = name) ? $a : self.config['$[]']("name"));
          return ($truthy($a = self.config['$[]']("content_model")) ? $a : (($writer = ["content_model", "attributes"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        }, TMP_MacroProcessor_initialize_31.$$arity = -1);
        return (Opal.defn(self, '$process', TMP_MacroProcessor_process_32 = function $$process(parent, target, attributes) {
          var self = this;

          return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
        }, TMP_MacroProcessor_process_32.$$arity = 3), nil) && 'process';
      })($nesting[0], Opal.const_get_relative($nesting, 'Processor'), $nesting);
      (function($base, $parent_nesting) {
        var $MacroProcessorDsl, self = $MacroProcessorDsl = $module($base, 'MacroProcessorDsl');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MacroProcessorDsl_named_33, TMP_MacroProcessorDsl_content_model_34, TMP_MacroProcessorDsl_positional_attributes_35, TMP_MacroProcessorDsl_default_attrs_36;

        
        self.$include(Opal.const_get_relative($nesting, 'ProcessorDsl'));
        
        Opal.defn(self, '$named', TMP_MacroProcessorDsl_named_33 = function $$named(value) {
          var self = this;

          if ($truthy(Opal.const_get_relative($nesting, 'Processor')['$==='](self))) {
            return (self.name = value)
            } else {
            return self.$option("name", value)
          }
        }, TMP_MacroProcessorDsl_named_33.$$arity = 1);
        Opal.alias(self, "match_name", "named");
        Opal.alias(self, "bind_to", "named");
        
        Opal.defn(self, '$content_model', TMP_MacroProcessorDsl_content_model_34 = function $$content_model(value) {
          var self = this;

          return self.$option("content_model", value)
        }, TMP_MacroProcessorDsl_content_model_34.$$arity = 1);
        Opal.alias(self, "parse_content_as", "content_model");
        
        Opal.defn(self, '$positional_attributes', TMP_MacroProcessorDsl_positional_attributes_35 = function $$positional_attributes($a_rest) {
          var self = this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$option("pos_attrs", value.$flatten())
        }, TMP_MacroProcessorDsl_positional_attributes_35.$$arity = -1);
        Opal.alias(self, "pos_attrs", "positional_attributes");
        Opal.alias(self, "name_attributes", "positional_attributes");
        Opal.alias(self, "name_positional_attributes", "positional_attributes");
        
        Opal.defn(self, '$default_attrs', TMP_MacroProcessorDsl_default_attrs_36 = function $$default_attrs(value) {
          var self = this;

          return self.$option("default_attrs", value)
        }, TMP_MacroProcessorDsl_default_attrs_36.$$arity = 1);
        Opal.alias(self, "seed_attributes_with", "default_attrs");
      })($nesting[0], $nesting);
      (function($base, $super, $parent_nesting) {
        function $BlockMacroProcessor(){};
        var self = $BlockMacroProcessor = $klass($base, $super, 'BlockMacroProcessor', $BlockMacroProcessor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], Opal.const_get_relative($nesting, 'MacroProcessor'), $nesting);
      Opal.const_set(Opal.const_get_relative($nesting, 'BlockMacroProcessor'), 'DSL', Opal.const_get_relative($nesting, 'MacroProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $InlineMacroProcessor(){};
        var self = $InlineMacroProcessor = $klass($base, $super, 'InlineMacroProcessor', $InlineMacroProcessor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InlineMacroProcessor_regexp_37, TMP_InlineMacroProcessor_resolve_regexp_38;

        def.config = def.name = nil;
        
        
        Opal.defn(self, '$regexp', TMP_InlineMacroProcessor_regexp_37 = function $$regexp() {
          var $a, self = this, $writer = nil;

          return ($truthy($a = self.config['$[]']("regexp")) ? $a : (($writer = ["regexp", self.$resolve_regexp(self.name, self.config['$[]']("format"))]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, TMP_InlineMacroProcessor_regexp_37.$$arity = 0);
        return (Opal.defn(self, '$resolve_regexp', TMP_InlineMacroProcessor_resolve_regexp_38 = function $$resolve_regexp(name, format) {
          var self = this;

          if (format['$==']("short")) {
            return new RegExp("" + "\\\\?" + (name) + ":\\[((?:\\\\\\]|[^\\]])*?)\\]")
            } else {
            return new RegExp("" + "\\\\?" + (name) + ":(\\S+?)\\[((?:\\\\\\]|[^\\]])*?)\\]")
          }
        }, TMP_InlineMacroProcessor_resolve_regexp_38.$$arity = 2), nil) && 'resolve_regexp';
      })($nesting[0], Opal.const_get_relative($nesting, 'MacroProcessor'), $nesting);
      (function($base, $parent_nesting) {
        var $InlineMacroProcessorDsl, self = $InlineMacroProcessorDsl = $module($base, 'InlineMacroProcessorDsl');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InlineMacroProcessorDsl_using_format_39, TMP_InlineMacroProcessorDsl_match_40;

        
        self.$include(Opal.const_get_relative($nesting, 'MacroProcessorDsl'));
        
        Opal.defn(self, '$using_format', TMP_InlineMacroProcessorDsl_using_format_39 = function $$using_format(value) {
          var self = this;

          return self.$option("format", value)
        }, TMP_InlineMacroProcessorDsl_using_format_39.$$arity = 1);
        
        Opal.defn(self, '$match', TMP_InlineMacroProcessorDsl_match_40 = function $$match(value) {
          var self = this;

          return self.$option("regexp", value)
        }, TMP_InlineMacroProcessorDsl_match_40.$$arity = 1);
      })($nesting[0], $nesting);
      Opal.const_set(Opal.const_get_relative($nesting, 'InlineMacroProcessor'), 'DSL', Opal.const_get_relative($nesting, 'InlineMacroProcessorDsl'));
      (function($base, $super, $parent_nesting) {
        function $Extension(){};
        var self = $Extension = $klass($base, $super, 'Extension', $Extension);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Extension_initialize_41;

        
        self.$attr("kind");
        self.$attr("config");
        self.$attr("instance");
        return (Opal.defn(self, '$initialize', TMP_Extension_initialize_41 = function $$initialize(kind, instance, config) {
          var self = this;

          
          self.kind = kind;
          self.instance = instance;
          return (self.config = config);
        }, TMP_Extension_initialize_41.$$arity = 3), nil) && 'initialize';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        function $ProcessorExtension(){};
        var self = $ProcessorExtension = $klass($base, $super, 'ProcessorExtension', $ProcessorExtension);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ProcessorExtension_initialize_42;

        
        self.$attr("process_method");
        return (Opal.defn(self, '$initialize', TMP_ProcessorExtension_initialize_42 = function $$initialize(kind, instance, process_method) {
          var $a, self = this, $iter = TMP_ProcessorExtension_initialize_42.$$p, $yield = $iter || nil;

          if (process_method == null) {
            process_method = nil;
          }
          if ($iter) TMP_ProcessorExtension_initialize_42.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ProcessorExtension_initialize_42, false), [kind, instance, instance.$config()], null);
          return (self.process_method = ($truthy($a = process_method) ? $a : instance.$method("process")));
        }, TMP_ProcessorExtension_initialize_42.$$arity = -3), nil) && 'initialize';
      })($nesting[0], Opal.const_get_relative($nesting, 'Extension'), $nesting);
      (function($base, $super, $parent_nesting) {
        function $Group(){};
        var self = $Group = $klass($base, $super, 'Group', $Group);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Group_activate_44;

        
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_register_43;

          return (Opal.defn(self, '$register', TMP_register_43 = function $$register(name) {
            var self = this;

            if (name == null) {
              name = nil;
            }
            return Opal.const_get_relative($nesting, 'Extensions').$register(name, self)
          }, TMP_register_43.$$arity = -1), nil) && 'register'
        })(Opal.get_singleton_class(self), $nesting);
        return (Opal.defn(self, '$activate', TMP_Group_activate_44 = function $$activate(registry) {
          var self = this;

          return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
        }, TMP_Group_activate_44.$$arity = 1), nil) && 'activate';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        function $Registry(){};
        var self = $Registry = $klass($base, $super, 'Registry', $Registry);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Registry_initialize_45, TMP_Registry_activate_47, TMP_Registry_preprocessor_48, TMP_Registry_preprocessors$q_49, TMP_Registry_preprocessors_50, TMP_Registry_treeprocessor_51, TMP_Registry_treeprocessors$q_52, TMP_Registry_treeprocessors_53, TMP_Registry_postprocessor_54, TMP_Registry_postprocessors$q_55, TMP_Registry_postprocessors_56, TMP_Registry_include_processor_57, TMP_Registry_include_processors$q_58, TMP_Registry_include_processors_59, TMP_Registry_docinfo_processor_60, TMP_Registry_docinfo_processors$q_62, TMP_Registry_docinfo_processors_64, TMP_Registry_block_65, TMP_Registry_blocks$q_66, TMP_Registry_registered_for_block$q_67, TMP_Registry_find_block_extension_68, TMP_Registry_block_macro_69, TMP_Registry_block_macros$q_70, TMP_Registry_registered_for_block_macro$q_71, TMP_Registry_find_block_macro_extension_72, TMP_Registry_inline_macro_73, TMP_Registry_inline_macros$q_74, TMP_Registry_registered_for_inline_macro$q_75, TMP_Registry_find_inline_macro_extension_76, TMP_Registry_inline_macros_77, TMP_Registry_add_document_processor_78, TMP_Registry_add_syntax_processor_80, TMP_Registry_resolve_args_82, TMP_Registry_as_symbol_83;

        def.groups = def.preprocessor_extensions = def.treeprocessor_extensions = def.postprocessor_extensions = def.include_processor_extensions = def.docinfo_processor_extensions = def.block_extensions = def.block_macro_extensions = def.inline_macro_extensions = nil;
        
        self.$attr_reader("document");
        self.$attr_reader("groups");
        
        Opal.defn(self, '$initialize', TMP_Registry_initialize_45 = function $$initialize(groups) {
          var self = this;

          if (groups == null) {
            groups = $hash2([], {});
          }
          
          self.groups = groups;
          self.preprocessor_extensions = (self.treeprocessor_extensions = (self.postprocessor_extensions = (self.include_processor_extensions = (self.docinfo_processor_extensions = nil))));
          self.block_extensions = (self.block_macro_extensions = (self.inline_macro_extensions = nil));
          return (self.document = nil);
        }, TMP_Registry_initialize_45.$$arity = -1);
        
        Opal.defn(self, '$activate', TMP_Registry_activate_47 = function $$activate(document) {
          var TMP_46, self = this;

          
          self.document = document;
          $send($rb_plus(Opal.const_get_relative($nesting, 'Extensions').$groups().$values(), self.groups.$values()), 'each', [], (TMP_46 = function(group){var self = TMP_46.$$s || this, $case = nil;
if (group == null) group = nil;
          return (function() {$case = group;
            if (Opal.const_get_qualified('::', 'Proc')['$===']($case)) {return (function() {$case = group.$arity();
            if ((0)['$===']($case) || (-1)['$===']($case)) {return $send(self, 'instance_exec', [], group.$to_proc())}
            else if ((1)['$===']($case)) {return group.$call(self)}
            else { return nil }})()}
            else if (Opal.const_get_qualified('::', 'Class')['$===']($case)) {return group.$new().$activate(self)}
            else {return group.$activate(self)}})()}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46));
          return self;
        }, TMP_Registry_activate_47.$$arity = 1);
        
        Opal.defn(self, '$preprocessor', TMP_Registry_preprocessor_48 = function $$preprocessor($a_rest) {
          var self = this, args, $iter = TMP_Registry_preprocessor_48.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Registry_preprocessor_48.$$p = null;
          return $send(self, 'add_document_processor', ["preprocessor", args], block.$to_proc())
        }, TMP_Registry_preprocessor_48.$$arity = -1);
        
        Opal.defn(self, '$preprocessors?', TMP_Registry_preprocessors$q_49 = function() {
          var self = this;

          return self.preprocessor_extensions['$!']()['$!']()
        }, TMP_Registry_preprocessors$q_49.$$arity = 0);
        
        Opal.defn(self, '$preprocessors', TMP_Registry_preprocessors_50 = function $$preprocessors() {
          var self = this;

          return self.preprocessor_extensions
        }, TMP_Registry_preprocessors_50.$$arity = 0);
        
        Opal.defn(self, '$treeprocessor', TMP_Registry_treeprocessor_51 = function $$treeprocessor($a_rest) {
          var self = this, args, $iter = TMP_Registry_treeprocessor_51.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Registry_treeprocessor_51.$$p = null;
          return $send(self, 'add_document_processor', ["treeprocessor", args], block.$to_proc())
        }, TMP_Registry_treeprocessor_51.$$arity = -1);
        
        Opal.defn(self, '$treeprocessors?', TMP_Registry_treeprocessors$q_52 = function() {
          var self = this;

          return self.treeprocessor_extensions['$!']()['$!']()
        }, TMP_Registry_treeprocessors$q_52.$$arity = 0);
        
        Opal.defn(self, '$treeprocessors', TMP_Registry_treeprocessors_53 = function $$treeprocessors() {
          var self = this;

          return self.treeprocessor_extensions
        }, TMP_Registry_treeprocessors_53.$$arity = 0);
        
        Opal.defn(self, '$postprocessor', TMP_Registry_postprocessor_54 = function $$postprocessor($a_rest) {
          var self = this, args, $iter = TMP_Registry_postprocessor_54.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Registry_postprocessor_54.$$p = null;
          return $send(self, 'add_document_processor', ["postprocessor", args], block.$to_proc())
        }, TMP_Registry_postprocessor_54.$$arity = -1);
        
        Opal.defn(self, '$postprocessors?', TMP_Registry_postprocessors$q_55 = function() {
          var self = this;

          return self.postprocessor_extensions['$!']()['$!']()
        }, TMP_Registry_postprocessors$q_55.$$arity = 0);
        
        Opal.defn(self, '$postprocessors', TMP_Registry_postprocessors_56 = function $$postprocessors() {
          var self = this;

          return self.postprocessor_extensions
        }, TMP_Registry_postprocessors_56.$$arity = 0);
        
        Opal.defn(self, '$include_processor', TMP_Registry_include_processor_57 = function $$include_processor($a_rest) {
          var self = this, args, $iter = TMP_Registry_include_processor_57.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Registry_include_processor_57.$$p = null;
          return $send(self, 'add_document_processor', ["include_processor", args], block.$to_proc())
        }, TMP_Registry_include_processor_57.$$arity = -1);
        
        Opal.defn(self, '$include_processors?', TMP_Registry_include_processors$q_58 = function() {
          var self = this;

          return self.include_processor_extensions['$!']()['$!']()
        }, TMP_Registry_include_processors$q_58.$$arity = 0);
        
        Opal.defn(self, '$include_processors', TMP_Registry_include_processors_59 = function $$include_processors() {
          var self = this;

          return self.include_processor_extensions
        }, TMP_Registry_include_processors_59.$$arity = 0);
        
        Opal.defn(self, '$docinfo_processor', TMP_Registry_docinfo_processor_60 = function $$docinfo_processor($a_rest) {
          var self = this, args, $iter = TMP_Registry_docinfo_processor_60.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Registry_docinfo_processor_60.$$p = null;
          return $send(self, 'add_document_processor', ["docinfo_processor", args], block.$to_proc())
        }, TMP_Registry_docinfo_processor_60.$$arity = -1);
        
        Opal.defn(self, '$docinfo_processors?', TMP_Registry_docinfo_processors$q_62 = function(location) {
          var TMP_61, self = this;

          if (location == null) {
            location = nil;
          }
          if ($truthy(self.docinfo_processor_extensions)) {
            if ($truthy(location)) {
              return $send(self.docinfo_processor_extensions, 'any?', [], (TMP_61 = function(ext){var self = TMP_61.$$s || this;
if (ext == null) ext = nil;
              return ext.$config()['$[]']("location")['$=='](location)}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61))
              } else {
              return true
            }
            } else {
            return false
          }
        }, TMP_Registry_docinfo_processors$q_62.$$arity = -1);
        
        Opal.defn(self, '$docinfo_processors', TMP_Registry_docinfo_processors_64 = function $$docinfo_processors(location) {
          var TMP_63, self = this;

          if (location == null) {
            location = nil;
          }
          if ($truthy(self.docinfo_processor_extensions)) {
            if ($truthy(location)) {
              return $send(self.docinfo_processor_extensions, 'select', [], (TMP_63 = function(ext){var self = TMP_63.$$s || this;
if (ext == null) ext = nil;
              return ext.$config()['$[]']("location")['$=='](location)}, TMP_63.$$s = self, TMP_63.$$arity = 1, TMP_63))
              } else {
              return self.docinfo_processor_extensions
            }
            } else {
            return nil
          }
        }, TMP_Registry_docinfo_processors_64.$$arity = -1);
        
        Opal.defn(self, '$block', TMP_Registry_block_65 = function $$block($a_rest) {
          var self = this, args, $iter = TMP_Registry_block_65.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Registry_block_65.$$p = null;
          return $send(self, 'add_syntax_processor', ["block", args], block.$to_proc())
        }, TMP_Registry_block_65.$$arity = -1);
        
        Opal.defn(self, '$blocks?', TMP_Registry_blocks$q_66 = function() {
          var self = this;

          return self.block_extensions['$!']()['$!']()
        }, TMP_Registry_blocks$q_66.$$arity = 0);
        
        Opal.defn(self, '$registered_for_block?', TMP_Registry_registered_for_block$q_67 = function(name, context) {
          var self = this, ext = nil;

          if ($truthy((ext = self.block_extensions['$[]'](name.$to_sym())))) {
            if ($truthy(ext.$config()['$[]']("contexts")['$include?'](context))) {
              return ext
              } else {
              return false
            }
            } else {
            return false
          }
        }, TMP_Registry_registered_for_block$q_67.$$arity = 2);
        
        Opal.defn(self, '$find_block_extension', TMP_Registry_find_block_extension_68 = function $$find_block_extension(name) {
          var self = this;

          return self.block_extensions['$[]'](name.$to_sym())
        }, TMP_Registry_find_block_extension_68.$$arity = 1);
        
        Opal.defn(self, '$block_macro', TMP_Registry_block_macro_69 = function $$block_macro($a_rest) {
          var self = this, args, $iter = TMP_Registry_block_macro_69.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Registry_block_macro_69.$$p = null;
          return $send(self, 'add_syntax_processor', ["block_macro", args], block.$to_proc())
        }, TMP_Registry_block_macro_69.$$arity = -1);
        
        Opal.defn(self, '$block_macros?', TMP_Registry_block_macros$q_70 = function() {
          var self = this;

          return self.block_macro_extensions['$!']()['$!']()
        }, TMP_Registry_block_macros$q_70.$$arity = 0);
        
        Opal.defn(self, '$registered_for_block_macro?', TMP_Registry_registered_for_block_macro$q_71 = function(name) {
          var self = this, ext = nil;

          if ($truthy((ext = self.block_macro_extensions['$[]'](name.$to_sym())))) {
            return ext
            } else {
            return false
          }
        }, TMP_Registry_registered_for_block_macro$q_71.$$arity = 1);
        
        Opal.defn(self, '$find_block_macro_extension', TMP_Registry_find_block_macro_extension_72 = function $$find_block_macro_extension(name) {
          var self = this;

          return self.block_macro_extensions['$[]'](name.$to_sym())
        }, TMP_Registry_find_block_macro_extension_72.$$arity = 1);
        
        Opal.defn(self, '$inline_macro', TMP_Registry_inline_macro_73 = function $$inline_macro($a_rest) {
          var self = this, args, $iter = TMP_Registry_inline_macro_73.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Registry_inline_macro_73.$$p = null;
          return $send(self, 'add_syntax_processor', ["inline_macro", args], block.$to_proc())
        }, TMP_Registry_inline_macro_73.$$arity = -1);
        
        Opal.defn(self, '$inline_macros?', TMP_Registry_inline_macros$q_74 = function() {
          var self = this;

          return self.inline_macro_extensions['$!']()['$!']()
        }, TMP_Registry_inline_macros$q_74.$$arity = 0);
        
        Opal.defn(self, '$registered_for_inline_macro?', TMP_Registry_registered_for_inline_macro$q_75 = function(name) {
          var self = this, ext = nil;

          if ($truthy((ext = self.inline_macro_extensions['$[]'](name.$to_sym())))) {
            return ext
            } else {
            return false
          }
        }, TMP_Registry_registered_for_inline_macro$q_75.$$arity = 1);
        
        Opal.defn(self, '$find_inline_macro_extension', TMP_Registry_find_inline_macro_extension_76 = function $$find_inline_macro_extension(name) {
          var self = this;

          return self.inline_macro_extensions['$[]'](name.$to_sym())
        }, TMP_Registry_find_inline_macro_extension_76.$$arity = 1);
        
        Opal.defn(self, '$inline_macros', TMP_Registry_inline_macros_77 = function $$inline_macros() {
          var self = this;

          return self.inline_macro_extensions.$values()
        }, TMP_Registry_inline_macros_77.$$arity = 0);
        self.$private();
        
        Opal.defn(self, '$add_document_processor', TMP_Registry_add_document_processor_78 = function $$add_document_processor(kind, args) {
          var TMP_79, $a, $b, $c, self = this, $iter = TMP_Registry_add_document_processor_78.$$p, block = $iter || nil, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, extension = nil, config = nil, processor = nil, processor_instance = nil;

          if ($iter) TMP_Registry_add_document_processor_78.$$p = null;
          
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_symbol = $send(kind_name.$split(" "), 'map', [], (TMP_79 = function(word){var self = TMP_79.$$s || this;
if (word == null) word = nil;
          return "" + (word.$chr().$upcase()) + (word['$[]']($range(1, -1, false)))}, TMP_79.$$s = self, TMP_79.$$arity = 1, TMP_79)).$join().$to_sym();
          kind_class = Opal.const_get_relative($nesting, 'Extensions').$const_get(kind_class_symbol);
          kind_java_class = (function() {if ($truthy((($a = Opal.const_get_qualified('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil))) {
            
            return Opal.const_get_qualified(Opal.const_get_qualified('::', 'AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol);
            } else {
            return nil
          }; return nil; })();
          kind_store = ($truthy($b = self.$instance_variable_get(((("" + "@") + (kind)) + "_extensions").$to_sym())) ? $b : self.$instance_variable_set(((("" + "@") + (kind)) + "_extensions").$to_sym(), []));
          extension = (function() {if ((block !== nil)) {
            
            config = self.$resolve_args(args, 1);
            processor = kind_class.$new(config);
            if ($truthy(kind_class.$constants().$grep("DSL"))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            $send(processor, 'instance_exec', [], block.$to_proc());
            processor.$freeze();
            if ($truthy(processor['$process_block_given?']())) {
              } else {
              self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("" + "No block specified to process " + (kind_name) + " extension at " + (block.$source_location())))
            };
            return Opal.const_get_relative($nesting, 'ProcessorExtension').$new(kind, processor);
            } else {
            
            $c = self.$resolve_args(args, 2), $b = Opal.to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;
            if ($truthy(($truthy($b = Opal.const_get_qualified('::', 'Class')['$==='](processor)) ? $b : ($truthy($c = Opal.const_get_qualified('::', 'String')['$==='](processor)) ? (processor = Opal.const_get_relative($nesting, 'Extensions').$class_for_name(processor)) : $c)))) {
              
              if ($truthy(($truthy($b = $rb_lt(processor, kind_class)) ? $b : ($truthy($c = kind_java_class) ? $rb_lt(processor, kind_java_class) : $c)))) {
                } else {
                self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("" + "Invalid type for " + (kind_name) + " extension: " + (processor)))
              };
              processor_instance = processor.$new(config);
              processor_instance.$freeze();
              return Opal.const_get_relative($nesting, 'ProcessorExtension').$new(kind, processor_instance);
            } else if ($truthy(($truthy($b = kind_class['$==='](processor)) ? $b : ($truthy($c = kind_java_class) ? kind_java_class['$==='](processor) : $c)))) {
              
              processor.$update_config(config);
              processor.$freeze();
              return Opal.const_get_relative($nesting, 'ProcessorExtension').$new(kind, processor);
              } else {
              return self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("" + "Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          }; return nil; })();
          if (extension.$config()['$[]']("position")['$=='](">>")) {
            return kind_store.$unshift(extension)
            } else {
            return kind_store['$<<'](extension)
          };
        }, TMP_Registry_add_document_processor_78.$$arity = 2);
        
        Opal.defn(self, '$add_syntax_processor', TMP_Registry_add_syntax_processor_80 = function $$add_syntax_processor(kind, args) {
          var TMP_81, $a, $b, $c, self = this, $iter = TMP_Registry_add_syntax_processor_80.$$p, block = $iter || nil, kind_name = nil, kind_class_basename = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, name = nil, config = nil, processor = nil, $writer = nil, processor_instance = nil;

          if ($iter) TMP_Registry_add_syntax_processor_80.$$p = null;
          
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_basename = $send(kind_name.$split(" "), 'map', [], (TMP_81 = function(word){var self = TMP_81.$$s || this;
if (word == null) word = nil;
          return "" + (word.$chr().$upcase()) + (word['$[]']($range(1, -1, false)))}, TMP_81.$$s = self, TMP_81.$$arity = 1, TMP_81)).$join();
          kind_class_symbol = (("" + (kind_class_basename)) + "Processor").$to_sym();
          kind_class = Opal.const_get_relative($nesting, 'Extensions').$const_get(kind_class_symbol);
          kind_java_class = (function() {if ($truthy((($a = Opal.const_get_qualified('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil))) {
            
            return Opal.const_get_qualified(Opal.const_get_qualified('::', 'AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol);
            } else {
            return nil
          }; return nil; })();
          kind_store = ($truthy($b = self.$instance_variable_get(((("" + "@") + (kind)) + "_extensions").$to_sym())) ? $b : self.$instance_variable_set(((("" + "@") + (kind)) + "_extensions").$to_sym(), $hash2([], {})));
          if ((block !== nil)) {
            
            $c = self.$resolve_args(args, 2), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;
            processor = kind_class.$new(self.$as_symbol(name), config);
            if ($truthy(kind_class.$constants().$grep("DSL"))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            if (block.$arity()['$=='](1)) {
              Opal.yield1(block, processor)
              } else {
              $send(processor, 'instance_exec', [], block.$to_proc())
            };
            if ($truthy((name = self.$as_symbol(processor.$name())))) {
              } else {
              self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("" + "No name specified for " + (kind_name) + " extension at " + (block.$source_location())))
            };
            if ($truthy(processor['$process_block_given?']())) {
              } else {
              self.$raise(Opal.const_get_qualified('::', 'NoMethodError').$new("" + "No block specified to process " + (kind_name) + " extension at " + (block.$source_location())))
            };
            processor.$freeze();
            
            $writer = [name, Opal.const_get_relative($nesting, 'ProcessorExtension').$new(kind, processor)];
            $send(kind_store, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
            } else {
            
            $c = self.$resolve_args(args, 3), $b = Opal.to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (name = ($b[1] == null ? nil : $b[1])), (config = ($b[2] == null ? nil : $b[2])), $c;
            if ($truthy(($truthy($b = Opal.const_get_qualified('::', 'Class')['$==='](processor)) ? $b : ($truthy($c = Opal.const_get_qualified('::', 'String')['$==='](processor)) ? (processor = Opal.const_get_relative($nesting, 'Extensions').$class_for_name(processor)) : $c)))) {
              
              if ($truthy(($truthy($b = $rb_lt(processor, kind_class)) ? $b : ($truthy($c = kind_java_class) ? $rb_lt(processor, kind_java_class) : $c)))) {
                } else {
                self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("" + "Class specified for " + (kind_name) + " extension does not inherit from " + (kind_class) + ": " + (processor)))
              };
              processor_instance = processor.$new(self.$as_symbol(name), config);
              if ($truthy((name = self.$as_symbol(processor_instance.$name())))) {
                } else {
                self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("" + "No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.$freeze();
              
              $writer = [name, Opal.const_get_relative($nesting, 'ProcessorExtension').$new(kind, processor_instance)];
              $send(kind_store, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            } else if ($truthy(($truthy($b = kind_class['$==='](processor)) ? $b : ($truthy($c = kind_java_class) ? kind_java_class['$==='](processor) : $c)))) {
              
              processor.$update_config(config);
              if ($truthy((name = (function() {if ($truthy(name)) {
                
                
                $writer = [self.$as_symbol(name)];
                $send(processor, 'name=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
                } else {
                
                return self.$as_symbol(processor.$name());
              }; return nil; })()))) {
                } else {
                self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("" + "No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.$freeze();
              
              $writer = [name, Opal.const_get_relative($nesting, 'ProcessorExtension').$new(kind, processor)];
              $send(kind_store, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
              } else {
              return self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("" + "Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          };
        }, TMP_Registry_add_syntax_processor_80.$$arity = 2);
        
        Opal.defn(self, '$resolve_args', TMP_Registry_resolve_args_82 = function $$resolve_args(args, expect) {
          var self = this, opts = nil, num_args = nil, missing = nil;

          
          opts = (function() {if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](args['$[]'](-1)))) {
            return args.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          if (expect['$=='](1)) {
            return opts};
          num_args = args.$size();
          if ($truthy($rb_gt((missing = $rb_minus($rb_minus(expect, 1), num_args)), 0))) {
            args.$fill(nil, num_args, missing)
          } else if ($truthy($rb_lt(missing, 0))) {
            args.$pop(missing['$-@']())};
          args['$<<'](opts);
          return args;
        }, TMP_Registry_resolve_args_82.$$arity = 2);
        return (Opal.defn(self, '$as_symbol', TMP_Registry_as_symbol_83 = function $$as_symbol(name) {
          var self = this;

          if ($truthy(name)) {
            return name.$to_sym()
            } else {
            return nil
          }
        }, TMP_Registry_as_symbol_83.$$arity = 1), nil) && 'as_symbol';
      })($nesting[0], null, $nesting);
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_generate_name_84, TMP_next_auto_id_85, TMP_groups_86, TMP_build_registry_87, TMP_register_88, TMP_unregister_all_89, TMP_resolve_class_90, TMP_class_for_name_92;

        
        
        Opal.defn(self, '$generate_name', TMP_generate_name_84 = function $$generate_name() {
          var self = this;

          return "" + "extgrp" + (self.$next_auto_id())
        }, TMP_generate_name_84.$$arity = 0);
        
        Opal.defn(self, '$next_auto_id', TMP_next_auto_id_85 = function $$next_auto_id() {
          var $a, self = this;
          if (self.auto_id == null) self.auto_id = nil;

          
          self.auto_id = ($truthy($a = self.auto_id) ? $a : -1);
          return (self.auto_id = $rb_plus(self.auto_id, 1));
        }, TMP_next_auto_id_85.$$arity = 0);
        
        Opal.defn(self, '$groups', TMP_groups_86 = function $$groups() {
          var $a, self = this;
          if (self.groups == null) self.groups = nil;

          return (self.groups = ($truthy($a = self.groups) ? $a : $hash2([], {})))
        }, TMP_groups_86.$$arity = 0);
        
        Opal.defn(self, '$build_registry', TMP_build_registry_87 = function $$build_registry(name) {
          var $a, self = this, $iter = TMP_build_registry_87.$$p, block = $iter || nil;

          if (name == null) {
            name = nil;
          }
          if ($iter) TMP_build_registry_87.$$p = null;
          if ((block !== nil)) {
            
            name = ($truthy($a = name) ? $a : self.$generate_name());
            return Opal.const_get_relative($nesting, 'Registry').$new($hash(name, block));
            } else {
            return Opal.const_get_relative($nesting, 'Registry').$new()
          }
        }, TMP_build_registry_87.$$arity = -1);
        
        Opal.defn(self, '$register', TMP_register_88 = function $$register($a_rest) {
          var $b, self = this, args, $iter = TMP_register_88.$$p, block = $iter || nil, argc = nil, resolved_group = nil, group = nil, $case = nil, name = nil, $writer = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_register_88.$$p = null;
          
          argc = args.$length();
          resolved_group = (function() {if ((block !== nil)) {
            return block
          } else if ($truthy((group = args.$pop())['$!']())) {
            return self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("Extension group to register not specified"))
            } else {
            return (function() {$case = group;
            if (Opal.const_get_qualified('::', 'Class')['$===']($case)) {return group}
            else if (Opal.const_get_qualified('::', 'String')['$===']($case)) {return self.$class_for_name(group)}
            else if (Opal.const_get_qualified('::', 'Symbol')['$===']($case)) {return self.$class_for_name(group.$to_s())}
            else {return group}})()
          }; return nil; })();
          name = ($truthy($b = args.$pop()) ? $b : self.$generate_name());
          if ($truthy(args['$empty?']())) {
            } else {
            self.$raise(Opal.const_get_qualified('::', 'ArgumentError').$new("" + "Wrong number of arguments (" + (argc) + " for 1..2)"))
          };
          
          $writer = [name, resolved_group];
          $send(self.$groups(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, TMP_register_88.$$arity = -1);
        
        Opal.defn(self, '$unregister_all', TMP_unregister_all_89 = function $$unregister_all() {
          var self = this;

          return (self.groups = $hash2([], {}))
        }, TMP_unregister_all_89.$$arity = 0);
        
        Opal.defn(self, '$resolve_class', TMP_resolve_class_90 = function $$resolve_class(object) {
          var self = this;

          if ($truthy(Opal.const_get_qualified('::', 'Class')['$==='](object))) {
            return object
            } else {
            
            return self.$class_for_name(object.$to_s());
          }
        }, TMP_resolve_class_90.$$arity = 1);
        return (Opal.defn(self, '$class_for_name', TMP_class_for_name_92 = function $$class_for_name(qualified_name) {
          var TMP_91, self = this, resolved_class = nil;

          
          resolved_class = Opal.const_get_qualified('::', 'Object');
          $send(qualified_name.$split("::"), 'each', [], (TMP_91 = function(name){var self = TMP_91.$$s || this;
if (name == null) name = nil;
          if ($truthy(name['$empty?']())) {
              return nil
            } else if ($truthy(resolved_class['$const_defined?'](name))) {
              return (resolved_class = resolved_class.$const_get(name))
              } else {
              return self.$raise("" + "Could not resolve class for name: " + (qualified_name))
            }}, TMP_91.$$s = self, TMP_91.$$arity = 1, TMP_91));
          return resolved_class;
        }, TMP_class_for_name_92.$$arity = 1), nil) && 'class_for_name';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/js/postscript"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("asciidoctor/converter/composite");
  self.$require("asciidoctor/converter/html5");
  return self.$require("asciidoctor/extensions");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/opal_ext"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("asciidoctor/js");
  self.$require("asciidoctor/converter");
  return self.$require("asciidoctor/js/postscript");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "1.5.5")
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/timings"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$now', '$[]=', '$-', '$delete', '$>', '$+', '$[]', '$puts', '$%', '$to_f', '$read_parse', '$convert', '$read_parse_convert']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Timings(){};
      var self = $Timings = $klass($base, $super, 'Timings', $Timings);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Timings_initialize_1, TMP_Timings_start_2, TMP_Timings_record_3, TMP_Timings_read_parse_4, TMP_Timings_convert_5, TMP_Timings_read_parse_convert_6, TMP_Timings_total_7, TMP_Timings_print_report_8;

      def.timers = def.log = nil;
      
      
      Opal.defn(self, '$initialize', TMP_Timings_initialize_1 = function $$initialize() {
        var self = this;

        
        self.log = $hash2([], {});
        return (self.timers = $hash2([], {}));
      }, TMP_Timings_initialize_1.$$arity = 0);
      
      Opal.defn(self, '$start', TMP_Timings_start_2 = function $$start(key) {
        var self = this, $writer = nil;

        
        $writer = [key, Opal.const_get_qualified('::', 'Time').$now()];
        $send(self.timers, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_Timings_start_2.$$arity = 1);
      
      Opal.defn(self, '$record', TMP_Timings_record_3 = function $$record(key) {
        var self = this, $writer = nil;

        
        $writer = [key, $rb_minus(Opal.const_get_qualified('::', 'Time').$now(), self.timers.$delete(key))];
        $send(self.log, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_Timings_record_3.$$arity = 1);
      
      Opal.defn(self, '$read_parse', TMP_Timings_read_parse_4 = function $$read_parse() {
        var $a, self = this, time = nil;

        if ($truthy($rb_gt((time = $rb_plus(($truthy($a = self.log['$[]']("read")) ? $a : 0), ($truthy($a = self.log['$[]']("parse")) ? $a : 0))), 0))) {
          return time
          } else {
          return nil
        }
      }, TMP_Timings_read_parse_4.$$arity = 0);
      
      Opal.defn(self, '$convert', TMP_Timings_convert_5 = function $$convert() {
        var $a, self = this;

        return ($truthy($a = self.log['$[]']("convert")) ? $a : 0)
      }, TMP_Timings_convert_5.$$arity = 0);
      
      Opal.defn(self, '$read_parse_convert', TMP_Timings_read_parse_convert_6 = function $$read_parse_convert() {
        var $a, self = this, time = nil;

        if ($truthy($rb_gt((time = $rb_plus($rb_plus(($truthy($a = self.log['$[]']("read")) ? $a : 0), ($truthy($a = self.log['$[]']("parse")) ? $a : 0)), ($truthy($a = self.log['$[]']("convert")) ? $a : 0))), 0))) {
          return time
          } else {
          return nil
        }
      }, TMP_Timings_read_parse_convert_6.$$arity = 0);
      
      Opal.defn(self, '$total', TMP_Timings_total_7 = function $$total() {
        var $a, self = this, time = nil;

        if ($truthy($rb_gt((time = $rb_plus($rb_plus($rb_plus(($truthy($a = self.log['$[]']("read")) ? $a : 0), ($truthy($a = self.log['$[]']("parse")) ? $a : 0)), ($truthy($a = self.log['$[]']("convert")) ? $a : 0)), ($truthy($a = self.log['$[]']("write")) ? $a : 0))), 0))) {
          return time
          } else {
          return nil
        }
      }, TMP_Timings_total_7.$$arity = 0);
      return (Opal.defn(self, '$print_report', TMP_Timings_print_report_8 = function $$print_report(to, subject) {
        var self = this;
        if ($gvars.stdout == null) $gvars.stdout = nil;

        if (to == null) {
          to = $gvars.stdout;
        }
        if (subject == null) {
          subject = nil;
        }
        
        if ($truthy(subject)) {
          to.$puts("" + "Input file: " + (subject))};
        to.$puts("" + "  Time to read and parse source: " + ("%05.5f"['$%'](self.$read_parse().$to_f())));
        to.$puts("" + "  Time to convert document: " + ("%05.5f"['$%'](self.$convert().$to_f())));
        return to.$puts("" + "  Total time (read, parse and convert): " + ("%05.5f"['$%'](self.$read_parse_convert().$to_f())));
      }, TMP_Timings_print_report_8.$$arity = -1), nil) && 'print_report';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/core_ext/nil_or_empty"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$method_defined?']);
  
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
      } else {
      return Opal.alias(self, "nil_or_empty?", "nil?")
    }
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
      } else {
      return Opal.alias(self, "nil_or_empty?", "empty?")
    }
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
      } else {
      return Opal.alias(self, "nil_or_empty?", "empty?")
    }
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
      } else {
      return Opal.alias(self, "nil_or_empty?", "empty?")
    }
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$method_defined?']("nil_or_empty?"))) {
      return nil
      } else {
      return Opal.alias(self, "nil_or_empty?", "nil?")
    }
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/core_ext/string/limit"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$method_defined?', '$<', '$bytesize', '$valid_encoding?', '$force_encoding', '$byteslice', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_limit_1;

    if ($truthy(self['$method_defined?']("limit"))) {
      return nil
      } else {
      return (Opal.defn(self, '$limit', TMP_String_limit_1 = function $$limit(size) {
        var $a, self = this, result = nil;

        
        if ($truthy($rb_lt(size, self.$bytesize()))) {
          } else {
          return self
        };
        while (!($truthy((result = self.$byteslice(0, size)).$force_encoding(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_8'))['$valid_encoding?']()))) {
          size = $rb_minus(size, 1)
        };
        return result;
      }, TMP_String_limit_1.$$arity = 1), nil) && 'limit'
    }
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/core_ext"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$!=']);
  
  self.$require("asciidoctor/core_ext/nil_or_empty");
  if ($truthy(Opal.const_get_relative($nesting, 'RUBY_MIN_VERSION_1_9'))) {
    return self.$require("asciidoctor/core_ext/string/limit")
  } else if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
    return nil
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/helpers"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$==', '$===', '$fail', '$warn', '$chomp', '$message', '$class', '$normalize_lines_from_string', '$normalize_lines_array', '$empty?', '$to_a', '$bytes', '$[]', '$map', '$lines', '$encode', '$force_encoding', '$join', '$rstrip', '$[]=', '$-', '$encoding', '$nil_or_empty?', '$each_line', '$include?', '$=~', '$gsub', '$each_byte', '$sprintf', '$extname', '$-@', '$length', '$basename', '$directory?', '$dirname', '$!', '$!=', '$mkdir_p', '$mkdir']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_require_library_1, TMP_Helpers_normalize_lines_2, TMP_Helpers_normalize_lines_array_7, TMP_Helpers_normalize_lines_from_string_9, TMP_Helpers_uriish$q_10, TMP_Helpers_uri_prefix_11, TMP_Helpers_encode_uri_14, TMP_Helpers_rootname_15, TMP_Helpers_basename_16, TMP_Helpers_mkdir_p_17;

      
      Opal.defs(self, '$require_library', TMP_Helpers_require_library_1 = function $$require_library(name, gem_name, on_failure) {
        var self = this, e = nil, $case = nil;

        if (gem_name == null) {
          gem_name = true;
        }
        if (on_failure == null) {
          on_failure = "abort";
        }
        try {
          return self.$require(name)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_qualified('::', 'LoadError')])) {e = $err;
            try {
              if ($truthy(gem_name)) {
                
                if (gem_name['$=='](true)) {
                  gem_name = name};
                return (function() {$case = on_failure;
                if ("abort"['$===']($case)) {return self.$fail("" + "asciidoctor: FAILED: required gem '" + (gem_name) + "' is not installed. Processing aborted.")}
                else if ("warn"['$===']($case)) {return self.$warn("" + "asciidoctor: WARNING: optional gem '" + (gem_name) + "' is not installed. Functionality disabled.")}
                else { return nil }})();
                } else {
                return (function() {$case = on_failure;
                if ("abort"['$===']($case)) {return self.$fail("" + "asciidoctor: FAILED: " + (e.$message().$chomp(".")) + ". Processing aborted.")}
                else if ("warn"['$===']($case)) {return self.$warn("" + "asciidoctor: WARNING: " + (e.$message().$chomp(".")) + ". Functionality disabled.")}
                else { return nil }})()
              }
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_Helpers_require_library_1.$$arity = -2);
      Opal.defs(self, '$normalize_lines', TMP_Helpers_normalize_lines_2 = function $$normalize_lines(data) {
        var self = this;

        if (data.$class()['$=='](Opal.const_get_qualified('::', 'String'))) {
          
          return self.$normalize_lines_from_string(data);
          } else {
          
          return self.$normalize_lines_array(data);
        }
      }, TMP_Helpers_normalize_lines_2.$$arity = 1);
      Opal.defs(self, '$normalize_lines_array', TMP_Helpers_normalize_lines_array_7 = function $$normalize_lines_array(data) {
        var TMP_3, TMP_4, TMP_5, TMP_6, self = this, leading_bytes = nil, first_line = nil, utf8 = nil, leading_2_bytes = nil, $writer = nil;

        
        if ($truthy(data['$empty?']())) {
          return []};
        leading_bytes = (first_line = data['$[]'](0))['$[]']($range(0, 2, false)).$bytes().$to_a();
        if ($truthy(Opal.const_get_relative($nesting, 'COERCE_ENCODING'))) {
          
          utf8 = Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_8');
          if ((leading_2_bytes = leading_bytes['$[]']($range(0, 1, false)))['$=='](Opal.const_get_relative($nesting, 'BOM_BYTES_UTF_16LE'))) {
            return $send(data.$join().$force_encoding(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_16LE'))['$[]']($range(1, -1, false)).$encode(utf8).$lines(), 'map', [], (TMP_3 = function(line){var self = TMP_3.$$s || this;
if (line == null) line = nil;
            return line.$rstrip()}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
          } else if (leading_2_bytes['$=='](Opal.const_get_relative($nesting, 'BOM_BYTES_UTF_16BE'))) {
            
            
            $writer = [0, first_line.$force_encoding(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_16BE'))['$[]']($range(1, -1, false))];
            $send(data, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send(data, 'map', [], (TMP_4 = function(line){var self = TMP_4.$$s || this;
if (line == null) line = nil;
            return "" + (line.$force_encoding(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_16BE')).$encode(utf8).$rstrip())}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
          } else if (leading_bytes['$[]']($range(0, 2, false))['$=='](Opal.const_get_relative($nesting, 'BOM_BYTES_UTF_8'))) {
            
            $writer = [0, first_line.$force_encoding(utf8)['$[]']($range(1, -1, false))];
            $send(data, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return $send(data, 'map', [], (TMP_5 = function(line){var self = TMP_5.$$s || this;
if (line == null) line = nil;
          if (line.$encoding()['$=='](utf8)) {
              return line.$rstrip()
              } else {
              return line.$force_encoding(utf8).$rstrip()
            }}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
          } else {
          
          if (leading_bytes['$=='](Opal.const_get_relative($nesting, 'BOM_BYTES_UTF_8'))) {
            
            $writer = [0, first_line['$[]']($range(3, -1, false))];
            $send(data, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return $send(data, 'map', [], (TMP_6 = function(line){var self = TMP_6.$$s || this;
if (line == null) line = nil;
          return line.$rstrip()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
        };
      }, TMP_Helpers_normalize_lines_array_7.$$arity = 1);
      Opal.defs(self, '$normalize_lines_from_string', TMP_Helpers_normalize_lines_from_string_9 = function $$normalize_lines_from_string(data) {
        var TMP_8, self = this, utf8 = nil, leading_bytes = nil, leading_2_bytes = nil;

        
        if ($truthy(data['$nil_or_empty?']())) {
          return []};
        if ($truthy(Opal.const_get_relative($nesting, 'COERCE_ENCODING'))) {
          
          utf8 = Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_8');
          leading_bytes = data['$[]']($range(0, 2, false)).$bytes().$to_a();
          if ((leading_2_bytes = leading_bytes['$[]']($range(0, 1, false)))['$=='](Opal.const_get_relative($nesting, 'BOM_BYTES_UTF_16LE'))) {
            data = data.$force_encoding(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_16LE'))['$[]']($range(1, -1, false)).$encode(utf8)
          } else if (leading_2_bytes['$=='](Opal.const_get_relative($nesting, 'BOM_BYTES_UTF_16BE'))) {
            data = data.$force_encoding(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_16BE'))['$[]']($range(1, -1, false)).$encode(utf8)
          } else if (leading_bytes['$[]']($range(0, 2, false))['$=='](Opal.const_get_relative($nesting, 'BOM_BYTES_UTF_8'))) {
            data = (function() {if (data.$encoding()['$=='](utf8)) {
              return data['$[]']($range(1, -1, false))
              } else {
              return data.$force_encoding(utf8)['$[]']($range(1, -1, false))
            }; return nil; })()
          } else if (data.$encoding()['$=='](utf8)) {
            } else {
            data = data.$force_encoding(utf8)
          };
        } else if (data['$[]']($range(0, 2, false)).$bytes().$to_a()['$=='](Opal.const_get_relative($nesting, 'BOM_BYTES_UTF_8'))) {
          data = data['$[]']($range(3, -1, false))};
        return $send(data.$each_line(), 'map', [], (TMP_8 = function(line){var self = TMP_8.$$s || this;
if (line == null) line = nil;
        return line.$rstrip()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
      }, TMP_Helpers_normalize_lines_from_string_9.$$arity = 1);
      Opal.defs(self, '$uriish?', TMP_Helpers_uriish$q_10 = function(str) {
        var $a, self = this;

        return ($truthy($a = str['$include?'](":")) ? str['$=~'](Opal.const_get_relative($nesting, 'UriSniffRx')) : $a)
      }, TMP_Helpers_uriish$q_10.$$arity = 1);
      Opal.defs(self, '$uri_prefix', TMP_Helpers_uri_prefix_11 = function $$uri_prefix(str) {
        var $a, self = this;

        if ($truthy(($truthy($a = str['$include?'](":")) ? str['$=~'](Opal.const_get_relative($nesting, 'UriSniffRx')) : $a))) {
          return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))
          } else {
          return nil
        }
      }, TMP_Helpers_uri_prefix_11.$$arity = 1);
      Opal.const_set($nesting[0], 'REGEXP_ENCODE_URI_CHARS', /[^\w\-.!~*';:@=+$,()\[\]]/);
      Opal.defs(self, '$encode_uri', TMP_Helpers_encode_uri_14 = function $$encode_uri(str) {
        var TMP_12, self = this;

        return $send(str, 'gsub', [Opal.const_get_relative($nesting, 'REGEXP_ENCODE_URI_CHARS')], (TMP_12 = function(){var self = TMP_12.$$s || this, $a, TMP_13;

        return $send((($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$each_byte(), 'map', [], (TMP_13 = function(c){var self = TMP_13.$$s || this;
if (c == null) c = nil;
          return self.$sprintf("%%%02X", c)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13)).$join()}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12))
      }, TMP_Helpers_encode_uri_14.$$arity = 1);
      Opal.defs(self, '$rootname', TMP_Helpers_rootname_15 = function $$rootname(file_name) {
        var self = this, ext = nil;

        if ($truthy((ext = Opal.const_get_qualified('::', 'File').$extname(file_name))['$empty?']())) {
          return file_name
          } else {
          return file_name['$[]'](Opal.Range.$new(0,ext.$length()['$-@'](), true))
        }
      }, TMP_Helpers_rootname_15.$$arity = 1);
      Opal.defs(self, '$basename', TMP_Helpers_basename_16 = function $$basename(file_name, drop_extname) {
        var self = this;

        if (drop_extname == null) {
          drop_extname = false;
        }
        if ($truthy(drop_extname)) {
          return Opal.const_get_qualified('::', 'File').$basename(file_name, Opal.const_get_qualified('::', 'File').$extname(file_name))
          } else {
          return Opal.const_get_qualified('::', 'File').$basename(file_name)
        }
      }, TMP_Helpers_basename_16.$$arity = -2);
      Opal.defs(self, '$mkdir_p', TMP_Helpers_mkdir_p_17 = function $$mkdir_p(dir) {
        var $a, self = this, parent_dir = nil;

        if ($truthy(Opal.const_get_qualified('::', 'File')['$directory?'](dir))) {
          return nil
          } else {
          
          parent_dir = Opal.const_get_qualified('::', 'File').$dirname(dir);
          if ($truthy(($truthy($a = Opal.const_get_qualified('::', 'File')['$directory?']((parent_dir = Opal.const_get_qualified('::', 'File').$dirname(dir)))['$!']()) ? parent_dir['$!='](".") : $a))) {
            self.$mkdir_p(parent_dir)};
          return Opal.const_get_qualified('::', 'Dir').$mkdir(dir);
        }
      }, TMP_Helpers_mkdir_p_17.$$arity = 1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/substitutors"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars, $range = Opal.range;

  Opal.add_stubs(['$join', '$keys', '$[]', '$+', '$attr_reader', '$!', '$==', '$===', '$each', '$has_key?', '$<<', '$empty?', '$*', '$include?', '$extract_passthroughs', '$sub_specialchars', '$sub_quotes', '$sub_attributes', '$split', '$sub_replacements', '$sub_macros', '$highlight_source', '$sub_callouts', '$sub_post_replacements', '$warn', '$restore_passthroughs', '$apply_subs', '$compat_mode', '$gsub', '$nil_or_empty?', '$size', '$unescape_brackets', '$resolve_pass_subs', '$[]=', '$-', '$>', '$end_with?', '$parse_attributes', '$start_with?', '$to_sym', '$attributes', '$document', '$basebackend?', '$to_i', '$convert', '$new', '$clear', '$convert_quoted_text', '$do_replacement', '$tr', '$length', '$store_attribute', '$fetch', '$attribute_undefined', '$counter', '$key?', '$downcase', '$attribute_missing', '$unescape_bracketed_text', '$inject', '$strip', '$map', '$pop', '$rstrip', '$extensions', '$inline_macros?', '$inline_macros', '$regexp', '$instance', '$config', '$process_method', '$register', '$basename', '$split_simple_csv', '$normalize_string', '$!=', '$!~', '$delete', '$chop', '$attr?', '$sub', '$chomp', '$encode_uri', '$sub_inline_xrefs', '$sub_inline_anchors', '$find', '$references', '$id', '$index', '$text', '$rootname', '$key', '$escape', '$attr', '$read_next_id', '$callouts', '$push', '$parse_quoted_text_attributes', '$shorthand_property_syntax', '$shift', '$concat', '$parse_into', '$parse', '$each_char', '$=~', '$chr', '$dup', '$&', '$resolve_subs', '$nil?', '$require_library', '$set_attr', '$sub_source', '$resolve_highlight_lines', '$highlight', '$to_a', '$uniq', '$sort', '$option?', '$resolve_block_subs']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Substitutors, self = $Substitutors = $module($base, 'Substitutors');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Substitutors_apply_subs_3, TMP_Substitutors_apply_normal_subs_4, TMP_Substitutors_apply_title_subs_5, TMP_Substitutors_apply_header_subs_6, TMP_Substitutors_extract_passthroughs_10, TMP_Substitutors_restore_passthroughs_12, TMP_Substitutors_sub_specialchars_14, TMP_Substitutors_sub_quotes_17, TMP_Substitutors_sub_replacements_20, TMP_Substitutors_do_replacement_21, TMP_Substitutors_sub_attributes_24, TMP_Substitutors_sub_macros_40, TMP_Substitutors_sub_inline_anchors_43, TMP_Substitutors_sub_inline_xrefs_46, TMP_Substitutors_sub_callouts_48, TMP_Substitutors_sub_post_replacements_51, TMP_Substitutors_convert_quoted_text_52, TMP_Substitutors_parse_quoted_text_attributes_53, TMP_Substitutors_parse_attributes_54, TMP_Substitutors_unescape_bracketed_text_55, TMP_Substitutors_normalize_string_56, TMP_Substitutors_unescape_brackets_57, TMP_Substitutors_split_simple_csv_60, TMP_Substitutors_resolve_subs_62, TMP_Substitutors_resolve_block_subs_63, TMP_Substitutors_resolve_pass_subs_64, TMP_Substitutors_highlight_source_69, TMP_Substitutors_resolve_highlight_lines_71, TMP_Substitutors_sub_source_72, TMP_Substitutors_lock_in_subs_74;

      
      Opal.const_set($nesting[0], 'SPECIAL_CHARS', $hash2(["&", "<", ">"], {"&": "&amp;", "<": "&lt;", ">": "&gt;"}));
      Opal.const_set($nesting[0], 'SPECIAL_CHARS_PATTERN', new RegExp("" + "[" + (Opal.const_get_relative($nesting, 'SPECIAL_CHARS').$keys().$join()) + "]"));
      Opal.const_set($nesting[0], 'SUBS', $hash2(["basic", "normal", "verbatim", "title", "header", "pass"], {"basic": ["specialcharacters"], "normal": ["specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"], "verbatim": ["specialcharacters", "callouts"], "title": ["specialcharacters", "quotes", "replacements", "macros", "attributes", "post_replacements"], "header": ["specialcharacters", "attributes"], "pass": []}));
      Opal.const_set($nesting[0], 'COMPOSITE_SUBS', $hash2(["none", "normal", "verbatim", "specialchars"], {"none": [], "normal": Opal.const_get_relative($nesting, 'SUBS')['$[]']("normal"), "verbatim": Opal.const_get_relative($nesting, 'SUBS')['$[]']("verbatim"), "specialchars": ["specialcharacters"]}));
      Opal.const_set($nesting[0], 'SUB_SYMBOLS', $hash2(["a", "m", "n", "p", "q", "r", "c", "v"], {"a": "attributes", "m": "macros", "n": "normal", "p": "post_replacements", "q": "quotes", "r": "replacements", "c": "specialcharacters", "v": "verbatim"}));
      Opal.const_set($nesting[0], 'SUB_OPTIONS', $hash2(["block", "inline"], {"block": $rb_plus($rb_plus(Opal.const_get_relative($nesting, 'COMPOSITE_SUBS').$keys(), Opal.const_get_relative($nesting, 'SUBS')['$[]']("normal")), ["callouts"]), "inline": $rb_plus(Opal.const_get_relative($nesting, 'COMPOSITE_SUBS').$keys(), Opal.const_get_relative($nesting, 'SUBS')['$[]']("normal"))}));
      Opal.const_set($nesting[0], 'SUB_HIGHLIGHT', ["coderay", "pygments"]);
      Opal.const_set($nesting[0], 'PASS_START', "\u0096");
      Opal.const_set($nesting[0], 'PASS_END', "\u0097");
      Opal.const_set($nesting[0], 'PASS_MATCH', /\u0096(\d+)\u0097/);
      Opal.const_set($nesting[0], 'PASS_MATCH_HI', /<span[^>]*>\u0096<\/span>[^\d]*(\d+)[^\d]*<span[^>]*>\u0097<\/span>/);
      self.$attr_reader("passthroughs");
      
      Opal.defn(self, '$apply_subs', TMP_Substitutors_apply_subs_3 = function $$apply_subs(source, subs, expand) {
        var $a, TMP_1, TMP_2, self = this, effective_subs = nil, text = nil, multiline = nil, has_passthroughs = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        if (subs == null) {
          subs = "normal";
        }
        if (expand == null) {
          expand = false;
        }
        
        if ($truthy(subs['$!']())) {
          return source
        } else if (subs['$==']("normal")) {
          subs = Opal.const_get_relative($nesting, 'SUBS')['$[]']("normal")
        } else if ($truthy(expand)) {
          if ($truthy(Opal.const_get_qualified('::', 'Symbol')['$==='](subs))) {
            subs = ($truthy($a = Opal.const_get_relative($nesting, 'COMPOSITE_SUBS')['$[]'](subs)) ? $a : [subs])
            } else {
            
            effective_subs = [];
            $send(subs, 'each', [], (TMP_1 = function(key){var self = TMP_1.$$s || this;
if (key == null) key = nil;
            if ($truthy(Opal.const_get_relative($nesting, 'COMPOSITE_SUBS')['$has_key?'](key))) {
                return (effective_subs = $rb_plus(effective_subs, Opal.const_get_relative($nesting, 'COMPOSITE_SUBS')['$[]'](key)))
                } else {
                return effective_subs['$<<'](key)
              }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
            subs = effective_subs;
          }};
        if ($truthy(subs['$empty?']())) {
          return source};
        text = (function() {if ($truthy((multiline = Opal.const_get_qualified('::', 'Array')['$==='](source)))) {
          return $rb_times(source, Opal.const_get_relative($nesting, 'EOL'))
          } else {
          return source
        }; return nil; })();
        if ($truthy((has_passthroughs = subs['$include?']("macros")))) {
          
          text = self.$extract_passthroughs(text);
          if ($truthy(self.passthroughs['$empty?']())) {
            has_passthroughs = false};};
        $send(subs, 'each', [], (TMP_2 = function(type){var self = TMP_2.$$s || this, $case = nil;
if (type == null) type = nil;
        return (function() {$case = type;
          if ("specialcharacters"['$===']($case)) {return (text = self.$sub_specialchars(text))}
          else if ("quotes"['$===']($case)) {return (text = self.$sub_quotes(text))}
          else if ("attributes"['$===']($case)) {return (text = $rb_times(self.$sub_attributes(text.$split(Opal.const_get_relative($nesting, 'EOL'))), Opal.const_get_relative($nesting, 'EOL')))}
          else if ("replacements"['$===']($case)) {return (text = self.$sub_replacements(text))}
          else if ("macros"['$===']($case)) {return (text = self.$sub_macros(text))}
          else if ("highlight"['$===']($case)) {return (text = self.$highlight_source(text, subs['$include?']("callouts")))}
          else if ("callouts"['$===']($case)) {if ($truthy(subs['$include?']("highlight"))) {
            return nil
            } else {
            return (text = self.$sub_callouts(text))
          }}
          else if ("post_replacements"['$===']($case)) {return (text = self.$sub_post_replacements(text))}
          else {return self.$warn("" + "asciidoctor: WARNING: unknown substitution type " + (type))}})()}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        if ($truthy(has_passthroughs)) {
          text = self.$restore_passthroughs(text)};
        if ($truthy(multiline)) {
          
          return text.$split(Opal.const_get_relative($nesting, 'EOL'));
          } else {
          return text
        };
      }, TMP_Substitutors_apply_subs_3.$$arity = -2);
      
      Opal.defn(self, '$apply_normal_subs', TMP_Substitutors_apply_normal_subs_4 = function $$apply_normal_subs(lines) {
        var self = this;

        return self.$apply_subs((function() {if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](lines))) {
          return $rb_times(lines, Opal.const_get_relative($nesting, 'EOL'))
          } else {
          return lines
        }; return nil; })())
      }, TMP_Substitutors_apply_normal_subs_4.$$arity = 1);
      
      Opal.defn(self, '$apply_title_subs', TMP_Substitutors_apply_title_subs_5 = function $$apply_title_subs(title) {
        var self = this;

        return self.$apply_subs(title, Opal.const_get_relative($nesting, 'SUBS')['$[]']("title"))
      }, TMP_Substitutors_apply_title_subs_5.$$arity = 1);
      
      Opal.defn(self, '$apply_header_subs', TMP_Substitutors_apply_header_subs_6 = function $$apply_header_subs(text) {
        var self = this;

        return self.$apply_subs(text, Opal.const_get_relative($nesting, 'SUBS')['$[]']("header"))
      }, TMP_Substitutors_apply_header_subs_6.$$arity = 1);
      
      Opal.defn(self, '$extract_passthroughs', TMP_Substitutors_extract_passthroughs_10 = function $$extract_passthroughs(text) {
        var $a, $b, TMP_7, TMP_8, TMP_9, self = this, compat_mode = nil, pass_inline_char1 = nil, pass_inline_char2 = nil, pass_inline_rx = nil;
        if (self.document == null) self.document = nil;

        
        compat_mode = self.document.$compat_mode();
        if ($truthy(($truthy($a = ($truthy($b = text['$include?']("++")) ? $b : text['$include?']("$$"))) ? $a : text['$include?']("ss:")))) {
          text = $send(text, 'gsub', [Opal.const_get_relative($nesting, 'PassInlineMacroRx')], (TMP_7 = function(){var self = TMP_7.$$s || this, $c, m = nil, preceding = nil, boundary = nil, $writer = nil, pass_key = nil, attributes = nil, escape_count = nil, content = nil, old_behavior = nil, subs = nil;
            if (self.passthroughs == null) self.passthroughs = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            preceding = nil;
            if ($truthy((boundary = m['$[]'](4))['$nil_or_empty?']())) {
              
              if (m['$[]'](6)['$==']("\\")) {
                return m['$[]'](0)['$[]']($range(1, -1, false));};
              
              $writer = [(pass_key = self.passthroughs.$size()), $hash2(["text", "subs"], {"text": self.$unescape_brackets(m['$[]'](8)), "subs": (function() {if ($truthy(m['$[]'](7)['$nil_or_empty?']())) {
                return []
                } else {
                
                return self.$resolve_pass_subs(m['$[]'](7));
              }; return nil; })()})];
              $send(self.passthroughs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              } else {
              
              if ($truthy(($truthy($c = compat_mode) ? boundary['$==']("++") : $c))) {
                return (function() {if ($truthy(m['$[]'](2)['$nil_or_empty?']())) {
                  return "" + (m['$[]'](1)) + (m['$[]'](3)) + "++" + (self.$extract_passthroughs(m['$[]'](5))) + "++"
                  } else {
                  return "" + (m['$[]'](1)) + "[" + (m['$[]'](2)) + "]" + (m['$[]'](3)) + "++" + (self.$extract_passthroughs(m['$[]'](5))) + "++"
                }; return nil; })();};
              attributes = m['$[]'](2);
              if ($truthy(Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL'))) {
                if (attributes['$==']("")) {
                  attributes = nil}};
              escape_count = m['$[]'](3).$size();
              content = m['$[]'](5);
              old_behavior = false;
              if ($truthy(attributes)) {
                if ($truthy($rb_gt(escape_count, 0))) {
                  return "" + (m['$[]'](1)) + "[" + (attributes) + "]" + ($rb_times("\\", $rb_minus(escape_count, 1))) + (boundary) + (m['$[]'](5)) + (boundary) + ")";
                } else if (m['$[]'](1)['$==']("\\")) {
                  
                  preceding = "" + "[" + (attributes) + "]";
                  attributes = nil;
                  } else {
                  
                  if ($truthy((($c = boundary['$==']("++")) ? attributes['$end_with?']("x-") : boundary['$==']("++")))) {
                    
                    old_behavior = true;
                    attributes = attributes['$[]']($range(0, -2, true));};
                  attributes = self.$parse_attributes(attributes);
                }
              } else if ($truthy($rb_gt(escape_count, 0))) {
                return "" + (m['$[]'](1)) + "[" + (attributes) + "]" + ($rb_times("\\", $rb_minus(escape_count, 1))) + (boundary) + (m['$[]'](5)) + (boundary);};
              subs = (function() {if (boundary['$==']("+++")) {
                return []
                } else {
                return ["specialcharacters"]
              }; return nil; })();
              pass_key = self.passthroughs.$size();
              if ($truthy(attributes)) {
                if ($truthy(old_behavior)) {
                  
                  $writer = [pass_key, $hash2(["text", "subs", "type", "attributes"], {"text": content, "subs": Opal.const_get_relative($nesting, 'SUBS')['$[]']("normal"), "type": "monospaced", "attributes": attributes})];
                  $send(self.passthroughs, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  } else {
                  
                  $writer = [pass_key, $hash2(["text", "subs", "type", "attributes"], {"text": content, "subs": subs, "type": "unquoted", "attributes": attributes})];
                  $send(self.passthroughs, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }
                } else {
                
                $writer = [pass_key, $hash2(["text", "subs"], {"text": content, "subs": subs})];
                $send(self.passthroughs, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
            };
            return "" + (preceding) + (Opal.const_get_relative($nesting, 'PASS_START')) + (pass_key) + (Opal.const_get_relative($nesting, 'PASS_END'));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))};
        $b = Opal.const_get_relative($nesting, 'PassInlineRx')['$[]'](compat_mode), $a = Opal.to_ary($b), (pass_inline_char1 = ($a[0] == null ? nil : $a[0])), (pass_inline_char2 = ($a[1] == null ? nil : $a[1])), (pass_inline_rx = ($a[2] == null ? nil : $a[2])), $b;
        if ($truthy(($truthy($a = text['$include?'](pass_inline_char1)) ? $a : ($truthy($b = pass_inline_char2) ? text['$include?'](pass_inline_char2) : $b)))) {
          text = $send(text, 'gsub', [pass_inline_rx], (TMP_8 = function(){var self = TMP_8.$$s || this, $c, m = nil, preceding = nil, attributes = nil, escape_mark = nil, format_mark = nil, content = nil, old_behavior = nil, pass_key = nil, $writer = nil, subs = nil;
            if (self.passthroughs == null) self.passthroughs = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            preceding = m['$[]'](1);
            attributes = m['$[]'](2);
            escape_mark = (function() {if ($truthy(m['$[]'](3)['$start_with?']("\\"))) {
              return "\\"
              } else {
              return nil
            }; return nil; })();
            format_mark = m['$[]'](4);
            content = m['$[]'](5);
            if ($truthy(Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL'))) {
              if (attributes['$==']("")) {
                attributes = nil}};
            if ($truthy(compat_mode)) {
              old_behavior = true
            } else if ($truthy((old_behavior = ($truthy($c = attributes) ? attributes['$end_with?']("x-") : $c)))) {
              attributes = attributes['$[]']($range(0, -2, true))};
            if ($truthy(attributes)) {
              
              if ($truthy((($c = format_mark['$==']("`")) ? old_behavior['$!']() : format_mark['$==']("`")))) {
                return "" + (preceding) + "[" + (attributes) + "]" + (escape_mark) + "`" + (self.$extract_passthroughs(content)) + "`";};
              if ($truthy(escape_mark)) {
                return "" + (preceding) + "[" + (attributes) + "]" + (m['$[]'](3)['$[]']($range(1, -1, false)));
              } else if (preceding['$==']("\\")) {
                
                preceding = "" + "[" + (attributes) + "]";
                attributes = nil;
                } else {
                attributes = self.$parse_attributes(attributes)
              };
            } else if ($truthy((($c = format_mark['$==']("`")) ? old_behavior['$!']() : format_mark['$==']("`")))) {
              return "" + (preceding) + (escape_mark) + "`" + (self.$extract_passthroughs(content)) + "`";
            } else if ($truthy(escape_mark)) {
              return "" + (preceding) + (m['$[]'](3)['$[]']($range(1, -1, false)));};
            pass_key = self.passthroughs.$size();
            if ($truthy(compat_mode)) {
              
              $writer = [pass_key, $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": ["specialcharacters"], "attributes": attributes, "type": "monospaced"})];
              $send(self.passthroughs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            } else if ($truthy(attributes)) {
              if ($truthy(old_behavior)) {
                
                subs = (function() {if (format_mark['$==']("`")) {
                  return ["specialcharacters"]
                  } else {
                  return Opal.const_get_relative($nesting, 'SUBS')['$[]']("normal")
                }; return nil; })();
                
                $writer = [pass_key, $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": subs, "attributes": attributes, "type": "monospaced"})];
                $send(self.passthroughs, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                } else {
                
                $writer = [pass_key, $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": ["specialcharacters"], "attributes": attributes, "type": "unquoted"})];
                $send(self.passthroughs, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }
              } else {
              
              $writer = [pass_key, $hash2(["text", "subs"], {"text": content, "subs": ["specialcharacters"]})];
              $send(self.passthroughs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            return "" + (preceding) + (Opal.const_get_relative($nesting, 'PASS_START')) + (pass_key) + (Opal.const_get_relative($nesting, 'PASS_END'));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))};
        if ($truthy(($truthy($a = text['$include?'](":")) ? ($truthy($b = text['$include?']("stem:")) ? $b : text['$include?']("math:")) : $a))) {
          text = $send(text, 'gsub', [Opal.const_get_relative($nesting, 'StemInlineMacroRx')], (TMP_9 = function(){var self = TMP_9.$$s || this, m = nil, type = nil, default_stem_type = nil, content = nil, subs = nil, $writer = nil, pass_key = nil;
            if (self.document == null) self.document = nil;
            if (self.passthroughs == null) self.passthroughs = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if ((type = m['$[]'](1).$to_sym())['$==']("stem")) {
              type = (function() {if ($truthy((default_stem_type = self.$document().$attributes()['$[]']("stem"))['$nil_or_empty?']())) {
                return "asciimath"
                } else {
                return default_stem_type
              }; return nil; })().$to_sym()};
            content = self.$unescape_brackets(m['$[]'](3));
            if ($truthy(m['$[]'](2)['$nil_or_empty?']())) {
              subs = (function() {if ($truthy(self.document['$basebackend?']("html"))) {
                return ["specialcharacters"]
                } else {
                return []
              }; return nil; })()
              } else {
              subs = self.$resolve_pass_subs(m['$[]'](2))
            };
            
            $writer = [(pass_key = self.passthroughs.$size()), $hash2(["text", "subs", "type"], {"text": content, "subs": subs, "type": type})];
            $send(self.passthroughs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return "" + (Opal.const_get_relative($nesting, 'PASS_START')) + (pass_key) + (Opal.const_get_relative($nesting, 'PASS_END'));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9))};
        return text;
      }, TMP_Substitutors_extract_passthroughs_10.$$arity = 1);
      
      Opal.defn(self, '$restore_passthroughs', TMP_Substitutors_restore_passthroughs_12 = function $$restore_passthroughs(text, outer) {
        var $a, $b, TMP_11, self = this;
        if (self.passthroughs == null) self.passthroughs = nil;

        if (outer == null) {
          outer = true;
        }
        return (function() { try {
        
        if ($truthy(($truthy($a = outer) ? ($truthy($b = self.passthroughs['$empty?']()) ? $b : text['$include?'](Opal.const_get_relative($nesting, 'PASS_START'))['$!']()) : $a))) {
          return text};
        return $send(text, 'gsub', [Opal.const_get_relative($nesting, 'PASS_MATCH')], (TMP_11 = function(){var self = TMP_11.$$s || this, pass = nil, subbed_text = nil, subs = nil, type = nil;
          if (self.passthroughs == null) self.passthroughs = nil;
          if ($gvars["~"] == null) $gvars["~"] = nil;

        
          pass = self.passthroughs['$[]']($gvars["~"]['$[]'](1).$to_i());
          subbed_text = (function() {if ($truthy((subs = pass['$[]']("subs")))) {
            return self.$apply_subs(pass['$[]']("text"), subs)
            } else {
            return pass['$[]']("text")
          }; return nil; })();
          if ($truthy((type = pass['$[]']("type")))) {
            subbed_text = Opal.const_get_relative($nesting, 'Inline').$new(self, "quoted", subbed_text, $hash2(["type", "attributes"], {"type": type, "attributes": pass['$[]']("attributes")})).$convert()};
          if ($truthy(subbed_text['$include?'](Opal.const_get_relative($nesting, 'PASS_START')))) {
            return self.$restore_passthroughs(subbed_text, false)
            } else {
            return subbed_text
          };}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
        } finally {
          (function() {if ($truthy(outer)) {
            return self.passthroughs.$clear()
            } else {
            return nil
          }; return nil; })()
        }; })()
      }, TMP_Substitutors_restore_passthroughs_12.$$arity = -2);
      
      Opal.defn(self, '$sub_specialchars', TMP_Substitutors_sub_specialchars_14 = function $$sub_specialchars(text) {
        var TMP_13, self = this;

        if ($truthy(Opal.const_get_relative($nesting, 'SUPPORTS_GSUB_RESULT_HASH'))) {
          return text.$gsub(Opal.const_get_relative($nesting, 'SPECIAL_CHARS_PATTERN'), Opal.const_get_relative($nesting, 'SPECIAL_CHARS'))
          } else {
          return $send(text, 'gsub', [Opal.const_get_relative($nesting, 'SPECIAL_CHARS_PATTERN')], (TMP_13 = function(){var self = TMP_13.$$s || this, $a;

          return Opal.const_get_relative($nesting, 'SPECIAL_CHARS')['$[]']((($a = $gvars['~']) === nil ? nil : $a['$[]'](0)))}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))
        }
      }, TMP_Substitutors_sub_specialchars_14.$$arity = 1);
      Opal.alias(self, "sub_specialcharacters", "sub_specialchars");
      if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
        
        
        Opal.defn(self, '$sub_quotes', TMP_Substitutors_sub_quotes_17 = function $$sub_quotes(text) {
          var TMP_15, self = this;
          if (self.document == null) self.document = nil;

          
          $send(Opal.const_get_relative($nesting, 'QUOTE_SUBS')['$[]'](self.document.$compat_mode()), 'each', [], (TMP_15 = function(type, scope, pattern){var self = TMP_15.$$s || this, TMP_16;
if (type == null) type = nil;if (scope == null) scope = nil;if (pattern == null) pattern = nil;
          return (text = $send(text, 'gsub', [pattern], (TMP_16 = function(){var self = TMP_16.$$s || this;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            return self.$convert_quoted_text($gvars["~"], type, scope)}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16)))}, TMP_15.$$s = self, TMP_15.$$arity = 3, TMP_15));
          return text;
        }, TMP_Substitutors_sub_quotes_17.$$arity = 1);
        
        Opal.defn(self, '$sub_replacements', TMP_Substitutors_sub_replacements_20 = function $$sub_replacements(text) {
          var TMP_18, self = this;

          
          $send(Opal.const_get_relative($nesting, 'REPLACEMENTS'), 'each', [], (TMP_18 = function(pattern, replacement, restore){var self = TMP_18.$$s || this, TMP_19;
if (pattern == null) pattern = nil;if (replacement == null) replacement = nil;if (restore == null) restore = nil;
          return (text = $send(text, 'gsub', [pattern], (TMP_19 = function(){var self = TMP_19.$$s || this;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            return self.$do_replacement($gvars["~"], replacement, restore)}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19)))}, TMP_18.$$s = self, TMP_18.$$arity = 3, TMP_18));
          return text;
        }, TMP_Substitutors_sub_replacements_20.$$arity = 1);
        } else {
        nil
      };
      
      Opal.defn(self, '$do_replacement', TMP_Substitutors_do_replacement_21 = function $$do_replacement(m, replacement, restore) {
        var self = this, matched = nil, $case = nil;

        if ($truthy((matched = m['$[]'](0))['$include?']("\\"))) {
          return matched.$tr("\\", "")
          } else {
          return (function() {$case = restore;
          if ("none"['$===']($case)) {return replacement}
          else if ("leading"['$===']($case)) {return "" + (m['$[]'](1)) + (replacement)}
          else if ("bounding"['$===']($case)) {return "" + (m['$[]'](1)) + (replacement) + (m['$[]'](2))}
          else { return nil }})()
        }
      }, TMP_Substitutors_do_replacement_21.$$arity = 3);
      
      Opal.defn(self, '$sub_attributes', TMP_Substitutors_sub_attributes_24 = function $$sub_attributes(data, opts) {
        var TMP_22, self = this, string_data = nil, doc_attrs = nil, attribute_missing = nil, result = nil;
        if (self.document == null) self.document = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        if ($truthy(data['$nil_or_empty?']())) {
          return data};
        if ($truthy((string_data = Opal.const_get_qualified('::', 'String')['$==='](data)))) {
          data = [data]};
        doc_attrs = self.document.$attributes();
        attribute_missing = nil;
        result = [];
        (function(){var $brk = Opal.new_brk(); try {return $send(data, 'each', [], (TMP_22 = function(line){var self = TMP_22.$$s || this, TMP_23, $a, $b, reject = nil, reject_if_empty = nil;
if (line == null) line = nil;
        
          reject = false;
          reject_if_empty = false;
          if ($truthy(line['$include?']("{"))) {
            line = (function(){var $brk = Opal.new_brk(); try {return $send(line, 'gsub', [Opal.const_get_relative($nesting, 'AttributeReferenceRx')], (TMP_23 = function(){var self = TMP_23.$$s || this, $a, $b, $c, m = nil, offset = nil, directive = nil, expr = nil, $case = nil, args = nil, _ = nil, value = nil, val = nil, key = nil;
              if (self.document == null) self.document = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            
              m = $gvars["~"];
              if ($truthy(($truthy($a = m['$[]'](1)['$==']("\\")) ? $a : m['$[]'](4)['$==']("\\")))) {
                return "" + "{" + (m['$[]'](2)) + "}"
              } else if ($truthy(m['$[]'](3)['$nil_or_empty?']()['$!']())) {
                
                offset = $rb_plus((directive = m['$[]'](3)).$length(), 1);
                expr = m['$[]'](2)['$[]'](Opal.Range.$new(offset, -1, false));
                return (function() {$case = directive;
                if ("set"['$===']($case)) {
                args = expr.$split(":");
                $b = Opal.const_get_relative($nesting, 'Parser').$store_attribute(args['$[]'](0), ($truthy($c = args['$[]'](1)) ? $c : ""), self.document), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
                if ($truthy(value)) {
                } else if (doc_attrs.$fetch("attribute-undefined", Opal.const_get_relative($nesting, 'Compliance').$attribute_undefined())['$==']("drop-line")) {
                  
                  reject = true;
                  
                  Opal.brk("", $brk);};
                reject_if_empty = true;
                return "";}
                else if ("counter"['$===']($case) || "counter2"['$===']($case)) {
                args = expr.$split(":");
                val = self.document.$counter(args['$[]'](0), args['$[]'](1));
                if (directive['$==']("counter2")) {
                  
                  reject_if_empty = true;
                  return "";
                  } else {
                  return val
                };}
                else {
                self.$warn("" + "asciidoctor: WARNING: illegal attribute directive: " + (m['$[]'](3)));
                return m['$[]'](0);}})();
              } else if ($truthy(doc_attrs['$key?']((key = m['$[]'](2).$downcase())))) {
                return doc_attrs['$[]'](key)
              } else if ($truthy(Opal.const_get_relative($nesting, 'INTRINSIC_ATTRIBUTES')['$key?'](key))) {
                return Opal.const_get_relative($nesting, 'INTRINSIC_ATTRIBUTES')['$[]'](key)
                } else {
                return (function() {$case = (attribute_missing = ($truthy($a = attribute_missing) ? $a : ($truthy($b = opts['$[]']("attribute_missing")) ? $b : doc_attrs.$fetch("attribute-missing", Opal.const_get_relative($nesting, 'Compliance').$attribute_missing()))));
                if ("skip"['$===']($case)) {return m['$[]'](0)}
                else if ("drop-line"['$===']($case)) {
                self.$warn("" + "asciidoctor: WARNING: dropping line containing reference to missing attribute: " + (key));
                reject = true;
                
                Opal.brk("", $brk);}
                else if ("warn"['$===']($case)) {
                self.$warn("" + "asciidoctor: WARNING: skipping reference to missing attribute: " + (key));
                return m['$[]'](0);}
                else {
                reject_if_empty = true;
                return "";}})()
              };}, TMP_23.$$s = self, TMP_23.$$brk = $brk, TMP_23.$$arity = 0, TMP_23))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()};
          if ($truthy(($truthy($a = reject) ? $a : ($truthy($b = reject_if_empty) ? line['$empty?']() : $b)))) {
            return nil
            } else {
            return result['$<<'](line)
          };}, TMP_22.$$s = self, TMP_22.$$brk = $brk, TMP_22.$$arity = 1, TMP_22))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        if ($truthy(string_data)) {
          return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'))
          } else {
          return result
        };
      }, TMP_Substitutors_sub_attributes_24.$$arity = -2);
      
      Opal.defn(self, '$sub_macros', TMP_Substitutors_sub_macros_40 = function $$sub_macros(source) {
        var $a, $b, TMP_25, TMP_27, TMP_29, TMP_31, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, self = this, found = nil, $writer = nil, found_colon = nil, use_link_attrs = nil, experimental = nil, result = nil, extensions = nil;
        if (self.document == null) self.document = nil;

        
        if ($truthy(source['$nil_or_empty?']())) {
          return source};
        found = $hash2([], {});
        
        $writer = ["square_bracket", source['$include?']("[")];
        $send(found, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["round_bracket", source['$include?']("(")];
        $send(found, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["colon", (found_colon = source['$include?'](":"))];
        $send(found, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["macroish", ($truthy($a = found['$[]']("square_bracket")) ? found_colon : $a)];
        $send(found, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["macroish_short_form", ($truthy($a = ($truthy($b = found['$[]']("square_bracket")) ? found_colon : $b)) ? source['$include?'](":[") : $a)];
        $send(found, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        use_link_attrs = self.document.$attributes()['$has_key?']("linkattrs");
        experimental = self.document.$attributes()['$has_key?']("experimental");
        result = "" + (source);
        if ($truthy(experimental)) {
          
          if ($truthy(($truthy($a = found['$[]']("macroish_short_form")) ? ($truthy($b = result['$include?']("kbd:")) ? $b : result['$include?']("btn:")) : $a))) {
            result = $send(result, 'gsub', [Opal.const_get_relative($nesting, 'KbdBtnInlineMacroRx')], (TMP_25 = function(){var self = TMP_25.$$s || this, TMP_26, m = nil, captured = nil, keys = nil, label = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            
              m = $gvars["~"];
              if ($truthy((captured = m['$[]'](0))['$start_with?']("\\"))) {
                return captured['$[]']($range(1, -1, false));};
              if ($truthy(captured['$start_with?']("kbd"))) {
                
                keys = self.$unescape_bracketed_text(m['$[]'](1));
                if (keys['$==']("+")) {
                  keys = ["+"]
                  } else {
                  keys = $send(keys.$split(Opal.const_get_relative($nesting, 'KbdDelimiterRx')), 'inject', [[]], (TMP_26 = function(c, key){var self = TMP_26.$$s || this;
if (c == null) c = nil;if (key == null) key = nil;
                  
                    if ($truthy(key['$end_with?']("++"))) {
                      
                      c['$<<'](key['$[]']($range(0, -3, false)).$strip());
                      c['$<<']("+");
                      } else {
                      c['$<<'](key.$strip())
                    };
                    return c;}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26))
                };
                return Opal.const_get_relative($nesting, 'Inline').$new(self, "kbd", nil, $hash2(["attributes"], {"attributes": $hash2(["keys"], {"keys": keys})})).$convert();
              } else if ($truthy(captured['$start_with?']("btn"))) {
                
                label = self.$unescape_bracketed_text(m['$[]'](1));
                return Opal.const_get_relative($nesting, 'Inline').$new(self, "button", label).$convert();
                } else {
                return nil
              };}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25))};
          if ($truthy(($truthy($a = found['$[]']("macroish")) ? result['$include?']("menu:") : $a))) {
            result = $send(result, 'gsub', [Opal.const_get_relative($nesting, 'MenuInlineMacroRx')], (TMP_27 = function(){var self = TMP_27.$$s || this, TMP_28, m = nil, captured = nil, menu = nil, items = nil, submenus = nil, menuitem = nil, delim = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            
              m = $gvars["~"];
              if ($truthy((captured = m['$[]'](0))['$start_with?']("\\"))) {
                return captured['$[]']($range(1, -1, false));};
              menu = m['$[]'](1);
              items = m['$[]'](2);
              if ($truthy(items['$!']())) {
                
                submenus = [];
                menuitem = nil;
              } else if ($truthy((delim = (function() {if ($truthy(items['$include?']("&gt;"))) {
                return "&gt;"
                } else {
                
                if ($truthy(items['$include?'](","))) {
                  return ","
                  } else {
                  return nil
                };
              }; return nil; })()))) {
                
                submenus = $send(items.$split(delim), 'map', [], (TMP_28 = function(it){var self = TMP_28.$$s || this;
if (it == null) it = nil;
                return it.$strip()}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28));
                menuitem = submenus.$pop();
                } else {
                
                submenus = [];
                menuitem = items.$rstrip();
              };
              return Opal.const_get_relative($nesting, 'Inline').$new(self, "menu", nil, $hash2(["attributes"], {"attributes": $hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).$convert();}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27))};
          if ($truthy(($truthy($a = result['$include?']("\"")) ? result['$include?']("&gt;") : $a))) {
            result = $send(result, 'gsub', [Opal.const_get_relative($nesting, 'MenuInlineRx')], (TMP_29 = function(){var self = TMP_29.$$s || this, $c, $d, TMP_30, m = nil, captured = nil, input = nil, menu = nil, submenus = nil, menuitem = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            
              m = $gvars["~"];
              if ($truthy((captured = m['$[]'](0))['$start_with?']("\\"))) {
                return captured['$[]']($range(1, -1, false));};
              input = m['$[]'](1);
              $d = $send(input.$split("&gt;"), 'map', [], (TMP_30 = function(it){var self = TMP_30.$$s || this;
if (it == null) it = nil;
              return it.$strip()}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30)), $c = Opal.to_ary($d), (menu = ($c[0] == null ? nil : $c[0])), (submenus = $slice.call($c, 1)), $d;
              menuitem = submenus.$pop();
              return Opal.const_get_relative($nesting, 'Inline').$new(self, "menu", nil, $hash2(["attributes"], {"attributes": $hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).$convert();}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))};};
        if ($truthy(($truthy($a = (extensions = self.document.$extensions())) ? extensions['$inline_macros?']() : $a))) {
          $send(extensions.$inline_macros(), 'each', [], (TMP_31 = function(extension){var self = TMP_31.$$s || this, TMP_32;
if (extension == null) extension = nil;
          return (result = $send(result, 'gsub', [extension.$instance().$regexp()], (TMP_32 = function(){var self = TMP_32.$$s || this, $c, m = nil, target = nil, attributes = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            
              m = $gvars["~"];
              if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
                return m['$[]'](0)['$[]']($range(1, -1, false));};
              target = m['$[]'](1);
              attributes = (function() {if (extension.$config()['$[]']("format")['$==']("short")) {
                return $hash2([], {})
              } else if (extension.$config()['$[]']("content_model")['$==']("attributes")) {
                return self.$parse_attributes(m['$[]'](2), ($truthy($c = extension.$config()['$[]']("pos_attrs")) ? $c : []), $hash2(["sub_input", "unescape_input"], {"sub_input": true, "unescape_input": true}))
                } else {
                return $hash2(["text"], {"text": self.$unescape_bracketed_text(m['$[]'](2))})
              }; return nil; })();
              return extension.$process_method()['$[]'](self, target, attributes);}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32)))}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31))};
        if ($truthy(($truthy($a = found['$[]']("macroish")) ? ($truthy($b = result['$include?']("image:")) ? $b : result['$include?']("icon:")) : $a))) {
          result = $send(result, 'gsub', [Opal.const_get_relative($nesting, 'ImageInlineMacroRx')], (TMP_33 = function(){var self = TMP_33.$$s || this, $c, m = nil, raw_attrs = nil, type = nil, posattrs = nil, target = nil, attrs = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            raw_attrs = self.$unescape_bracketed_text(m['$[]'](2));
            if ($truthy(m['$[]'](0)['$start_with?']("icon:"))) {
              
              type = "icon";
              posattrs = ["size"];
              } else {
              
              type = "image";
              posattrs = ["alt", "width", "height"];
            };
            target = self.$sub_attributes(m['$[]'](1));
            if (type['$==']("icon")) {
              } else {
              self.document.$register("images", target)
            };
            attrs = self.$parse_attributes(raw_attrs, posattrs);
            ($truthy($c = attrs['$[]']("alt")) ? $c : (($writer = ["alt", Opal.const_get_relative($nesting, 'Helpers').$basename(target, true).$tr("_-", " ")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            return Opal.const_get_relative($nesting, 'Inline').$new(self, "image", nil, $hash2(["type", "target", "attributes"], {"type": type, "target": target, "attributes": attrs})).$convert();}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33))};
        if ($truthy(($truthy($a = found['$[]']("macroish_short_form")) ? $a : found['$[]']("round_bracket")))) {
          result = $send(result, 'gsub', [Opal.const_get_relative($nesting, 'IndextermInlineMacroRx')], (TMP_34 = function(){var self = TMP_34.$$s || this, $c, m = nil, num_brackets = nil, text_in_brackets = nil, macro_name = nil, terms = nil, text = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if ($truthy(Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL'))) {
              if (m['$[]'](1)['$==']("")) {
                
                $writer = [1, nil];
                $send(m, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];}};
            num_brackets = 0;
            text_in_brackets = nil;
            if ($truthy((macro_name = m['$[]'](1)))) {
              } else {
              
              text_in_brackets = m['$[]'](3);
              if ($truthy(($truthy($c = text_in_brackets['$start_with?']("(")) ? text_in_brackets['$end_with?'](")") : $c))) {
                
                text_in_brackets = text_in_brackets['$[]']($range(1, -1, true));
                num_brackets = 3;
                } else {
                num_brackets = 2
              };
            };
            if ($truthy(($truthy($c = macro_name['$==']("indexterm")) ? $c : num_brackets['$=='](3)))) {
              
              if ($truthy(macro_name['$!']())) {
                terms = self.$split_simple_csv(self.$normalize_string(text_in_brackets))
                } else {
                terms = self.$split_simple_csv(self.$normalize_string(m['$[]'](2), true))
              };
              self.document.$register("indexterms", [].concat(Opal.to_a(terms)));
              return Opal.const_get_relative($nesting, 'Inline').$new(self, "indexterm", nil, $hash2(["attributes"], {"attributes": $hash2(["terms"], {"terms": terms})})).$convert();
              } else {
              
              if ($truthy(macro_name['$!']())) {
                text = self.$normalize_string(text_in_brackets)
                } else {
                text = self.$normalize_string(m['$[]'](2), true)
              };
              self.document.$register("indexterms", [text]);
              return Opal.const_get_relative($nesting, 'Inline').$new(self, "indexterm", text, $hash2(["type"], {"type": "visible"})).$convert();
            };}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34))};
        if ($truthy(($truthy($a = found_colon) ? result['$include?']("://") : $a))) {
          result = $send(result, 'gsub', [Opal.const_get_relative($nesting, 'LinkInlineRx')], (TMP_35 = function(){var self = TMP_35.$$s || this, $c, $d, $e, m = nil, prefix = nil, target = nil, suffix = nil, $case = nil, link_opts = nil, attrs = nil, text = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](2)['$start_with?']("\\"))) {
              return "" + (m['$[]'](1)) + (m['$[]'](2)['$[]']($range(1, -1, false))) + (m['$[]'](3));};
            if ($truthy(Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL'))) {
              if (m['$[]'](3)['$==']("")) {
                
                $writer = [3, nil];
                $send(m, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];}};
            if ($truthy((($c = m['$[]'](1)['$==']("link:")) ? m['$[]'](3)['$!']() : m['$[]'](1)['$==']("link:")))) {
              return m['$[]'](0);};
            prefix = (function() {if ($truthy(m['$[]'](1)['$!=']("link:"))) {
              return m['$[]'](1)
              } else {
              return ""
            }; return nil; })();
            target = m['$[]'](2);
            suffix = "";
            if ($truthy(($truthy($c = m['$[]'](3)) ? $c : target['$!~'](Opal.const_get_relative($nesting, 'UriTerminator'))))) {
              } else {
              $case = $gvars["~"]['$[]'](0);
              if (")"['$===']($case)) {
              target = target['$[]']($range(0, -2, false));
              suffix = ")";}
              else if (";"['$===']($case)) {if ($truthy(($truthy($c = prefix['$start_with?']("&lt;")) ? target['$end_with?']("&gt;") : $c))) {
                
                prefix = prefix['$[]']($range(4, -1, false));
                target = target['$[]']($range(0, -5, false));
              } else if ($truthy(target['$end_with?'](");"))) {
                
                target = target['$[]']($range(0, -3, false));
                suffix = ");";
                } else {
                
                target = target['$[]']($range(0, -2, false));
                suffix = ";";
              }}
              else if (":"['$===']($case)) {if ($truthy(target['$end_with?']("):"))) {
                
                target = target['$[]']($range(0, -3, false));
                suffix = "):";
                } else {
                
                target = target['$[]']($range(0, -2, false));
                suffix = ":";
              }}
            };
            self.document.$register("links", target);
            link_opts = $hash2(["type", "target"], {"type": "link", "target": target});
            attrs = nil;
            if ($truthy(m['$[]'](3)['$nil_or_empty?']())) {
              text = ""
              } else {
              
              if ($truthy(($truthy($c = use_link_attrs) ? ($truthy($d = m['$[]'](3)['$start_with?']("\"")) ? $d : ($truthy($e = m['$[]'](3)['$include?'](",")) ? m['$[]'](3)['$include?']("=") : $e)) : $c))) {
                
                attrs = self.$parse_attributes(self.$sub_attributes(m['$[]'](3).$gsub("\\]", "]")), []);
                if ($truthy(attrs['$has_key?']("id"))) {
                  
                  $writer = ["id", attrs.$delete("id")];
                  $send(link_opts, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
                text = ($truthy($c = attrs['$[]'](1)) ? $c : "");
                } else {
                text = self.$sub_attributes(m['$[]'](3).$gsub("\\]", "]"))
              };
              if ($truthy(text['$end_with?']("^"))) {
                
                text = text.$chop();
                if ($truthy(attrs)) {
                  ($truthy($c = attrs['$[]']("window")) ? $c : (($writer = ["window", "_blank"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
                  } else {
                  attrs = $hash2(["window"], {"window": "_blank"})
                };};
            };
            if ($truthy(text['$empty?']())) {
              
              if ($truthy(self.document['$attr?']("hide-uri-scheme"))) {
                text = target.$sub(Opal.const_get_relative($nesting, 'UriSniffRx'), "")
                } else {
                text = target
              };
              if ($truthy(attrs)) {
                
                $writer = ["role", (("" + "bare ") + (attrs['$[]']("role"))).$chomp(" ")];
                $send(attrs, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                } else {
                attrs = $hash2(["role"], {"role": "bare"})
              };};
            if ($truthy(attrs)) {
              
              $writer = ["attributes", attrs];
              $send(link_opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            return "" + (prefix) + (Opal.const_get_relative($nesting, 'Inline').$new(self, "anchor", text, link_opts).$convert()) + (suffix);}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35))};
        if ($truthy(($truthy($a = ($truthy($b = found['$[]']("macroish")) ? result['$include?']("link:") : $b)) ? $a : result['$include?']("mailto:")))) {
          result = $send(result, 'gsub', [Opal.const_get_relative($nesting, 'LinkInlineMacroRx')], (TMP_36 = function(){var self = TMP_36.$$s || this, $c, $d, m = nil, raw_target = nil, mailto = nil, target = nil, link_opts = nil, attrs = nil, text = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            raw_target = m['$[]'](1);
            mailto = m['$[]'](0)['$start_with?']("mailto:");
            target = (function() {if ($truthy(mailto)) {
              return "" + "mailto:" + (raw_target)
              } else {
              return raw_target
            }; return nil; })();
            link_opts = $hash2(["type", "target"], {"type": "link", "target": target});
            attrs = nil;
            text = (function() {if ($truthy(($truthy($c = use_link_attrs) ? ($truthy($d = m['$[]'](2)['$start_with?']("\"")) ? $d : m['$[]'](2)['$include?'](",")) : $c))) {
              
              attrs = self.$parse_attributes(self.$sub_attributes(m['$[]'](2).$gsub("\\]", "]")), []);
              if ($truthy(attrs['$key?']("id"))) {
                
                $writer = ["id", attrs.$delete("id")];
                $send(link_opts, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(mailto)) {
                if ($truthy(attrs['$key?'](2))) {
                  
                  target = (($writer = ["target", "" + (target) + "?subject=" + (Opal.const_get_relative($nesting, 'Helpers').$encode_uri(attrs['$[]'](2)))]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
                  if ($truthy(attrs['$key?'](3))) {
                    target = (($writer = ["target", "" + (target) + "&amp;body=" + (Opal.const_get_relative($nesting, 'Helpers').$encode_uri(attrs['$[]'](3)))]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])};}};
              return attrs['$[]'](1);
              } else {
              return self.$sub_attributes(m['$[]'](2).$gsub("\\]", "]"))
            }; return nil; })();
            self.document.$register("links", target);
            if ($truthy(text['$end_with?']("^"))) {
              
              text = text.$chop();
              if ($truthy(attrs)) {
                ($truthy($c = attrs['$[]']("window")) ? $c : (($writer = ["window", "_blank"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
                } else {
                attrs = $hash2(["window"], {"window": "_blank"})
              };};
            if ($truthy(text['$empty?']())) {
              if ($truthy(mailto)) {
                text = raw_target
                } else {
                
                if ($truthy(self.document['$attr?']("hide-uri-scheme"))) {
                  text = raw_target.$sub(Opal.const_get_relative($nesting, 'UriSniffRx'), "")
                  } else {
                  text = raw_target
                };
                if ($truthy(attrs)) {
                  
                  $writer = ["role", (("" + "bare ") + (attrs['$[]']("role"))).$chomp(" ")];
                  $send(attrs, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                  } else {
                  attrs = $hash2(["role"], {"role": "bare"})
                };
              }};
            if ($truthy(attrs)) {
              
              $writer = ["attributes", attrs];
              $send(link_opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            return Opal.const_get_relative($nesting, 'Inline').$new(self, "anchor", text, link_opts).$convert();}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36))};
        if ($truthy(result['$include?']("@"))) {
          result = $send(result, 'gsub', [Opal.const_get_relative($nesting, 'EmailInlineMacroRx')], (TMP_37 = function(){var self = TMP_37.$$s || this, m = nil, address = nil, lead = nil, $case = nil, target = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            address = m['$[]'](0);
            if ($truthy((lead = m['$[]'](1)))) {
              $case = lead;
              if ("\\"['$===']($case)) {return address['$[]']($range(1, -1, false));}
              else {return address;}};
            target = "" + "mailto:" + (address);
            self.document.$register("links", target);
            return Opal.const_get_relative($nesting, 'Inline').$new(self, "anchor", address, $hash2(["type", "target"], {"type": "link", "target": target})).$convert();}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37))};
        if ($truthy(($truthy($a = found['$[]']("macroish_short_form")) ? result['$include?']("footnote") : $a))) {
          result = $send(result, 'gsub', [Opal.const_get_relative($nesting, 'FootnoteInlineMacroRx')], (TMP_38 = function(){var self = TMP_38.$$s || this, $c, $d, TMP_39, m = nil, id = nil, text = nil, index = nil, type = nil, target = nil, footnote = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if (m['$[]'](1)['$==']("footnote")) {
              
              id = nil;
              text = self.$restore_passthroughs(self.$sub_inline_xrefs(self.$sub_inline_anchors(self.$normalize_string(m['$[]'](2), true))), false);
              index = self.document.$counter("footnote-number");
              self.document.$register("footnotes", Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Document'), 'Footnote').$new(index, id, text));
              type = nil;
              target = nil;
              } else {
              
              $d = m['$[]'](2).$split(",", 2), $c = Opal.to_ary($d), (id = ($c[0] == null ? nil : $c[0])), (text = ($c[1] == null ? nil : $c[1])), $d;
              id = id.$strip();
              if ($truthy(text['$nil_or_empty?']())) {
                
                if ($truthy((footnote = $send(self.document.$references()['$[]']("footnotes"), 'find', [], (TMP_39 = function(fn){var self = TMP_39.$$s || this;
if (fn == null) fn = nil;
                return fn.$id()['$=='](id)}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39))))) {
                  
                  index = footnote.$index();
                  text = footnote.$text();
                  } else {
                  
                  index = nil;
                  text = id;
                };
                target = id;
                id = nil;
                type = "xref";
                } else {
                
                text = self.$restore_passthroughs(self.$sub_inline_xrefs(self.$sub_inline_anchors(self.$normalize_string(text, true))), false);
                index = self.document.$counter("footnote-number");
                self.document.$register("footnotes", Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Document'), 'Footnote').$new(index, id, text));
                type = "ref";
                target = nil;
              };
            };
            return Opal.const_get_relative($nesting, 'Inline').$new(self, "footnote", text, $hash2(["attributes", "id", "target", "type"], {"attributes": $hash2(["index"], {"index": index}), "id": id, "target": target, "type": type})).$convert();}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38))};
        return self.$sub_inline_xrefs(self.$sub_inline_anchors(result, found), found);
      }, TMP_Substitutors_sub_macros_40.$$arity = 1);
      
      Opal.defn(self, '$sub_inline_anchors', TMP_Substitutors_sub_inline_anchors_43 = function $$sub_inline_anchors(text, found) {
        var $a, $b, TMP_41, $c, TMP_42, self = this;

        if (found == null) {
          found = nil;
        }
        
        if ($truthy(($truthy($a = ($truthy($b = found['$!']()) ? $b : found['$[]']("square_bracket"))) ? text['$include?']("[[[") : $a))) {
          text = $send(text, 'gsub', [Opal.const_get_relative($nesting, 'InlineBiblioAnchorRx')], (TMP_41 = function(){var self = TMP_41.$$s || this, m = nil, id = nil, reftext = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            id = (reftext = m['$[]'](1));
            return Opal.const_get_relative($nesting, 'Inline').$new(self, "anchor", reftext, $hash2(["type", "target"], {"type": "bibref", "target": id})).$convert();}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41))};
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = found['$!']()) ? $c : found['$[]']("square_bracket"))) ? text['$include?']("[[") : $b)) ? $a : ($truthy($b = ($truthy($c = found['$!']()) ? $c : found['$[]']("macroish"))) ? text['$include?']("anchor:") : $b)))) {
          text = $send(text, 'gsub', [Opal.const_get_relative($nesting, 'InlineAnchorRx')], (TMP_42 = function(){var self = TMP_42.$$s || this, $d, $e, m = nil, $writer = nil, id = nil, reftext = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if ($truthy(Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL'))) {
              
              if (m['$[]'](1)['$==']("")) {
                
                $writer = [1, nil];
                $send(m, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if (m['$[]'](2)['$==']("")) {
                
                $writer = [2, nil];
                $send(m, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if (m['$[]'](4)['$==']("")) {
                
                $writer = [4, nil];
                $send(m, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};};
            id = ($truthy($d = m['$[]'](1)) ? $d : m['$[]'](3));
            reftext = ($truthy($d = ($truthy($e = m['$[]'](2)) ? $e : m['$[]'](4))) ? $d : "" + "[" + (id) + "]");
            return Opal.const_get_relative($nesting, 'Inline').$new(self, "anchor", reftext, $hash2(["type", "target"], {"type": "ref", "target": id})).$convert();}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42))};
        return text;
      }, TMP_Substitutors_sub_inline_anchors_43.$$arity = -2);
      
      Opal.defn(self, '$sub_inline_xrefs', TMP_Substitutors_sub_inline_xrefs_46 = function $$sub_inline_xrefs(text, found) {
        var $a, $b, TMP_44, self = this;

        if (found == null) {
          found = nil;
        }
        
        if ($truthy(($truthy($a = ($truthy($b = found['$!']()) ? $b : found['$[]']("macroish"))) ? $a : text['$include?']("&lt;&lt;")))) {
          text = $send(text, 'gsub', [Opal.const_get_relative($nesting, 'XrefInlineMacroRx')], (TMP_44 = function(){var self = TMP_44.$$s || this, $c, $d, TMP_45, $e, m = nil, $writer = nil, id = nil, reftext = nil, path = nil, fragment = nil, refid = nil, target = nil, resolved_id = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if ($truthy(Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL'))) {
              if (m['$[]'](1)['$==']("")) {
                
                $writer = [1, nil];
                $send(m, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];}};
            if ($truthy(m['$[]'](1))) {
              
              $d = $send(m['$[]'](1).$split(",", 2), 'map', [], (TMP_45 = function(it){var self = TMP_45.$$s || this;
if (it == null) it = nil;
              return it.$strip()}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45)), $c = Opal.to_ary($d), (id = ($c[0] == null ? nil : $c[0])), (reftext = ($c[1] == null ? nil : $c[1])), $d;
              id = id.$sub(Opal.const_get_relative($nesting, 'DoubleQuotedRx'), "\\2");
              reftext = (function() {if ($truthy(reftext['$nil_or_empty?']())) {
                return nil
                } else {
                return reftext.$sub(Opal.const_get_relative($nesting, 'DoubleQuotedMultiRx'), "\\2")
              }; return nil; })();
              } else {
              
              id = m['$[]'](2);
              if ($truthy(m['$[]'](3)['$nil_or_empty?']())) {
                } else {
                reftext = m['$[]'](3)
              };
            };
            if ($truthy(id['$include?']("#"))) {
              $d = id.$split("#"), $c = Opal.to_ary($d), (path = ($c[0] == null ? nil : $c[0])), (fragment = ($c[1] == null ? nil : $c[1])), $d
              } else {
              
              path = nil;
              fragment = id;
            };
            if ($truthy(path)) {
              
              path = Opal.const_get_relative($nesting, 'Helpers').$rootname(path);
              if ($truthy(($truthy($c = self.document.$attributes()['$[]']("docname")['$=='](path)) ? $c : self.document.$references()['$[]']("includes")['$include?'](path)))) {
                
                refid = fragment;
                path = nil;
                target = "" + "#" + (fragment);
                } else {
                
                refid = (function() {if ($truthy(fragment)) {
                  return "" + (path) + "#" + (fragment)
                  } else {
                  return path
                }; return nil; })();
                path = "" + (self.document.$attributes()['$[]']("relfileprefix")) + (path) + (self.document.$attributes().$fetch("outfilesuffix", ".html"));
                target = (function() {if ($truthy(fragment)) {
                  return "" + (path) + "#" + (fragment)
                  } else {
                  return path
                }; return nil; })();
              };
              } else {
              
              if ($truthy(($truthy($c = ($truthy($d = self.document.$references()['$[]']("ids")['$has_key?'](fragment)['$!']()) ? ($truthy($e = fragment['$include?'](" ")) ? $e : fragment.$downcase()['$!='](fragment)) : $d)) ? (resolved_id = (function() {if ($truthy(Opal.const_get_relative($nesting, 'RUBY_MIN_VERSION_1_9'))) {
                
                return self.document.$references()['$[]']("ids").$key(fragment);
                } else {
                
                return self.document.$references()['$[]']("ids").$index(fragment);
              }; return nil; })()) : $c))) {
                fragment = resolved_id};
              refid = fragment;
              target = "" + "#" + (fragment);
            };
            return Opal.const_get_relative($nesting, 'Inline').$new(self, "anchor", reftext, $hash2(["type", "target", "attributes"], {"type": "xref", "target": target, "attributes": $hash2(["path", "fragment", "refid"], {"path": path, "fragment": fragment, "refid": refid})})).$convert();}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44))};
        return text;
      }, TMP_Substitutors_sub_inline_xrefs_46.$$arity = -2);
      
      Opal.defn(self, '$sub_callouts', TMP_Substitutors_sub_callouts_48 = function $$sub_callouts(text) {
        var TMP_47, self = this, callout_rx = nil;

        
        callout_rx = (function() {if ($truthy(self['$attr?']("line-comment"))) {
          return new RegExp("" + "(?:" + (Opal.const_get_qualified('::', 'Regexp').$escape(self.$attr("line-comment"))) + " )?" + (Opal.const_get_relative($nesting, 'CalloutSourceRxt')))
          } else {
          return Opal.const_get_relative($nesting, 'CalloutSourceRx')
        }; return nil; })();
        return $send(text, 'gsub', [callout_rx], (TMP_47 = function(){var self = TMP_47.$$s || this, m = nil;
          if (self.document == null) self.document = nil;
          if ($gvars["~"] == null) $gvars["~"] = nil;

        
          m = $gvars["~"];
          if (m['$[]'](1)['$==']("\\")) {
            return m['$[]'](0).$sub("\\", "");};
          return Opal.const_get_relative($nesting, 'Inline').$new(self, "callout", m['$[]'](3), $hash2(["id"], {"id": self.document.$callouts().$read_next_id()})).$convert();}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47));
      }, TMP_Substitutors_sub_callouts_48.$$arity = 1);
      
      Opal.defn(self, '$sub_post_replacements', TMP_Substitutors_sub_post_replacements_51 = function $$sub_post_replacements(text) {
        var $a, TMP_49, TMP_50, self = this, lines = nil, last = nil;
        if (self.document == null) self.document = nil;
        if (self.attributes == null) self.attributes = nil;

        if ($truthy(($truthy($a = self.document.$attributes()['$has_key?']("hardbreaks")) ? $a : self.attributes['$has_key?']("hardbreaks-option")))) {
          
          lines = text.$split(Opal.const_get_relative($nesting, 'EOL'));
          if (lines.$size()['$=='](1)) {
            return text};
          last = lines.$pop();
          return $rb_times($send(lines, 'map', [], (TMP_49 = function(line){var self = TMP_49.$$s || this;
if (line == null) line = nil;
          return Opal.const_get_relative($nesting, 'Inline').$new(self, "break", line.$rstrip().$chomp(Opal.const_get_relative($nesting, 'LINE_BREAK')), $hash2(["type"], {"type": "line"})).$convert()}, TMP_49.$$s = self, TMP_49.$$arity = 1, TMP_49)).$push(last), Opal.const_get_relative($nesting, 'EOL'));
        } else if ($truthy(text['$include?']("+"))) {
          return $send(text, 'gsub', [Opal.const_get_relative($nesting, 'LineBreakRx')], (TMP_50 = function(){var self = TMP_50.$$s || this;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          return Opal.const_get_relative($nesting, 'Inline').$new(self, "break", $gvars["~"]['$[]'](1), $hash2(["type"], {"type": "line"})).$convert()}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50))
          } else {
          return text
        }
      }, TMP_Substitutors_sub_post_replacements_51.$$arity = 1);
      
      Opal.defn(self, '$convert_quoted_text', TMP_Substitutors_convert_quoted_text_52 = function $$convert_quoted_text(match, type, scope) {
        var $a, self = this, unescaped_attrs = nil, attrs = nil, attributes = nil, id = nil;

        
        unescaped_attrs = nil;
        if ($truthy(match['$[]'](0)['$start_with?']("\\"))) {
          if ($truthy((($a = scope['$==']("constrained")) ? (attrs = match['$[]'](2))['$nil_or_empty?']()['$!']() : scope['$==']("constrained")))) {
            unescaped_attrs = "" + "[" + (attrs) + "]"
            } else {
            return match['$[]'](0)['$[]']($range(1, -1, false))
          }};
        if (scope['$==']("constrained")) {
          if ($truthy(unescaped_attrs)) {
            return "" + (unescaped_attrs) + (Opal.const_get_relative($nesting, 'Inline').$new(self, "quoted", match['$[]'](3), $hash2(["type"], {"type": type})).$convert())
            } else {
            
            if ($truthy((attributes = self.$parse_quoted_text_attributes(match['$[]'](2))))) {
              
              id = attributes.$delete("id");
              if (type['$==']("mark")) {
                type = "unquoted"};
              } else {
              id = nil
            };
            return "" + (match['$[]'](1)) + (Opal.const_get_relative($nesting, 'Inline').$new(self, "quoted", match['$[]'](3), $hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).$convert());
          }
          } else {
          
          if ($truthy((attributes = self.$parse_quoted_text_attributes(match['$[]'](1))))) {
            
            id = attributes.$delete("id");
            if (type['$==']("mark")) {
              type = "unquoted"};
            } else {
            id = nil
          };
          return Opal.const_get_relative($nesting, 'Inline').$new(self, "quoted", match['$[]'](2), $hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).$convert();
        };
      }, TMP_Substitutors_convert_quoted_text_52.$$arity = 3);
      
      Opal.defn(self, '$parse_quoted_text_attributes', TMP_Substitutors_parse_quoted_text_attributes_53 = function $$parse_quoted_text_attributes(str) {
        var $a, $b, self = this, _ = nil, segments = nil, id = nil, more_roles = nil, roles = nil, attrs = nil, $writer = nil;

        
        if ($truthy(str)) {
          } else {
          return nil
        };
        if ($truthy(str['$empty?']())) {
          return $hash2([], {})};
        if ($truthy(str['$include?']("{"))) {
          str = self.$sub_attributes(str)};
        str = str.$strip();
        if ($truthy(str['$include?'](","))) {
          $b = str.$split(",", 2), $a = Opal.to_ary($b), (str = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b};
        if ($truthy(str['$empty?']())) {
          return $hash2([], {})
        } else if ($truthy(($truthy($a = ($truthy($b = str['$start_with?'](".")) ? $b : str['$start_with?']("#"))) ? Opal.const_get_relative($nesting, 'Compliance').$shorthand_property_syntax() : $a))) {
          
          segments = str.$split("#", 2);
          if ($truthy($rb_gt(segments.$length(), 1))) {
            $b = segments['$[]'](1).$split("."), $a = Opal.to_ary($b), (id = ($a[0] == null ? nil : $a[0])), (more_roles = $slice.call($a, 1)), $b
            } else {
            
            id = nil;
            more_roles = [];
          };
          roles = (function() {if ($truthy(segments['$[]'](0)['$empty?']())) {
            return []
            } else {
            return segments['$[]'](0).$split(".")
          }; return nil; })();
          if ($truthy($rb_gt(roles.$length(), 1))) {
            roles.$shift()};
          if ($truthy($rb_gt(more_roles.$length(), 0))) {
            roles.$concat(more_roles)};
          attrs = $hash2([], {});
          if ($truthy(id)) {
            
            $writer = ["id", id];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(roles['$empty?']())) {
            } else {
            
            $writer = ["role", $rb_times(roles, " ")];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          return attrs;
          } else {
          return $hash2(["role"], {"role": str})
        };
      }, TMP_Substitutors_parse_quoted_text_attributes_53.$$arity = 1);
      
      Opal.defn(self, '$parse_attributes', TMP_Substitutors_parse_attributes_54 = function $$parse_attributes(attrline, posattrs, opts) {
        var self = this, block = nil, into = nil;
        if (self.document == null) self.document = nil;

        if (posattrs == null) {
          posattrs = ["role"];
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        
        if ($truthy(attrline)) {
          } else {
          return nil
        };
        if ($truthy(attrline['$empty?']())) {
          return $hash2([], {})};
        if ($truthy(opts['$[]']("sub_input"))) {
          attrline = self.document.$sub_attributes(attrline)};
        if ($truthy(opts['$[]']("unescape_input"))) {
          attrline = self.$unescape_bracketed_text(attrline)};
        block = nil;
        if ($truthy(opts.$fetch("sub_result", true))) {
          block = self};
        if ($truthy((into = opts['$[]']("into")))) {
          return Opal.const_get_relative($nesting, 'AttributeList').$new(attrline, block).$parse_into(into, posattrs)
          } else {
          return Opal.const_get_relative($nesting, 'AttributeList').$new(attrline, block).$parse(posattrs)
        };
      }, TMP_Substitutors_parse_attributes_54.$$arity = -2);
      
      Opal.defn(self, '$unescape_bracketed_text', TMP_Substitutors_unescape_bracketed_text_55 = function $$unescape_bracketed_text(text) {
        var self = this;

        
        if ($truthy(text['$empty?']())) {
          return ""};
        return text.$strip().$tr(Opal.const_get_relative($nesting, 'EOL'), " ").$gsub("\\]", "]");
      }, TMP_Substitutors_unescape_bracketed_text_55.$$arity = 1);
      
      Opal.defn(self, '$normalize_string', TMP_Substitutors_normalize_string_56 = function $$normalize_string(str, unescape_brackets) {
        var self = this;

        if (unescape_brackets == null) {
          unescape_brackets = false;
        }
        if ($truthy(str['$empty?']())) {
          return ""
        } else if ($truthy(unescape_brackets)) {
          return self.$unescape_brackets(str.$strip().$tr(Opal.const_get_relative($nesting, 'EOL'), " "))
          } else {
          return str.$strip().$tr(Opal.const_get_relative($nesting, 'EOL'), " ")
        }
      }, TMP_Substitutors_normalize_string_56.$$arity = -2);
      
      Opal.defn(self, '$unescape_brackets', TMP_Substitutors_unescape_brackets_57 = function $$unescape_brackets(str) {
        var self = this;

        if ($truthy(str['$empty?']())) {
          return ""
          } else {
          return str.$gsub("\\]", "]")
        }
      }, TMP_Substitutors_unescape_brackets_57.$$arity = 1);
      
      Opal.defn(self, '$split_simple_csv', TMP_Substitutors_split_simple_csv_60 = function $$split_simple_csv(str) {
        var TMP_58, TMP_59, self = this, values = nil, current = nil, quote_open = nil;

        
        if ($truthy(str['$empty?']())) {
          values = []
        } else if ($truthy(str['$include?']("\""))) {
          
          values = [];
          current = [];
          quote_open = false;
          $send(str, 'each_char', [], (TMP_58 = function(c){var self = TMP_58.$$s || this, $case = nil;
if (c == null) c = nil;
          return (function() {$case = c;
            if (","['$===']($case)) {if ($truthy(quote_open)) {
              return current.$push(c)
              } else {
              
              values['$<<'](current.$join().$strip());
              return (current = []);
            }}
            else if ("\""['$===']($case)) {return (quote_open = quote_open['$!']())}
            else {return current.$push(c)}})()}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58));
          values['$<<'](current.$join().$strip());
          } else {
          values = $send(str.$split(","), 'map', [], (TMP_59 = function(it){var self = TMP_59.$$s || this;
if (it == null) it = nil;
          return it.$strip()}, TMP_59.$$s = self, TMP_59.$$arity = 1, TMP_59))
        };
        return values;
      }, TMP_Substitutors_split_simple_csv_60.$$arity = 1);
      
      Opal.defn(self, '$resolve_subs', TMP_Substitutors_resolve_subs_62 = function $$resolve_subs(subs, type, defaults, subject) {
        var TMP_61, self = this, candidates = nil, modifiers_present = nil, resolved = nil, invalid = nil;

        if (type == null) {
          type = "block";
        }
        if (defaults == null) {
          defaults = nil;
        }
        if (subject == null) {
          subject = nil;
        }
        
        if ($truthy(subs['$nil_or_empty?']())) {
          return []};
        candidates = nil;
        modifiers_present = Opal.const_get_relative($nesting, 'SubModifierSniffRx')['$=~'](subs);
        $send(subs.$tr(" ", "").$split(","), 'each', [], (TMP_61 = function(key){var self = TMP_61.$$s || this, $a, $b, modifier_operation = nil, first = nil, resolved_keys = nil, resolved_key = nil, candidate = nil, $case = nil;
if (key == null) key = nil;
        
          modifier_operation = nil;
          if ($truthy(modifiers_present)) {
            if ((first = key.$chr())['$==']("+")) {
              
              modifier_operation = "append";
              key = key['$[]']($range(1, -1, false));
            } else if (first['$==']("-")) {
              
              modifier_operation = "remove";
              key = key['$[]']($range(1, -1, false));
            } else if ($truthy(key['$end_with?']("+"))) {
              
              modifier_operation = "prepend";
              key = key.$chop();}};
          key = key.$to_sym();
          if ($truthy((($a = type['$==']("inline")) ? ($truthy($b = key['$==']("verbatim")) ? $b : key['$==']("v")) : type['$==']("inline")))) {
            resolved_keys = ["specialcharacters"]
          } else if ($truthy(Opal.const_get_relative($nesting, 'COMPOSITE_SUBS')['$key?'](key))) {
            resolved_keys = Opal.const_get_relative($nesting, 'COMPOSITE_SUBS')['$[]'](key)
          } else if ($truthy(($truthy($a = (($b = type['$==']("inline")) ? key.$length()['$=='](1) : type['$==']("inline"))) ? Opal.const_get_relative($nesting, 'SUB_SYMBOLS')['$key?'](key) : $a))) {
            
            resolved_key = Opal.const_get_relative($nesting, 'SUB_SYMBOLS')['$[]'](key);
            if ($truthy((candidate = Opal.const_get_relative($nesting, 'COMPOSITE_SUBS')['$[]'](resolved_key)))) {
              resolved_keys = candidate
              } else {
              resolved_keys = [resolved_key]
            };
            } else {
            resolved_keys = [key]
          };
          if ($truthy(modifier_operation)) {
            
            candidates = ($truthy($a = candidates) ? $a : (function() {if ($truthy(defaults)) {
              return defaults.$dup()
              } else {
              return []
            }; return nil; })());
            return (function() {$case = modifier_operation;
            if ("append"['$===']($case)) {return (candidates = $rb_plus(candidates, resolved_keys))}
            else if ("prepend"['$===']($case)) {return (candidates = $rb_plus(resolved_keys, candidates))}
            else if ("remove"['$===']($case)) {return (candidates = $rb_minus(candidates, resolved_keys))}
            else { return nil }})();
            } else {
            
            candidates = ($truthy($a = candidates) ? $a : []);
            return (candidates = $rb_plus(candidates, resolved_keys));
          };}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61));
        resolved = candidates['$&'](Opal.const_get_relative($nesting, 'SUB_OPTIONS')['$[]'](type));
        if ($truthy($rb_minus(candidates, resolved)['$empty?']())) {
          } else {
          
          invalid = $rb_minus(candidates, resolved);
          self.$warn("" + "asciidoctor: WARNING: invalid substitution type" + ((function() {if ($truthy($rb_gt(invalid.$size(), 1))) {
            return "s"
            } else {
            return ""
          }; return nil; })()) + ((function() {if ($truthy(subject)) {
            return " for "
            } else {
            return nil
          }; return nil; })()) + (subject) + ": " + ($rb_times(invalid, ", ")));
        };
        return resolved;
      }, TMP_Substitutors_resolve_subs_62.$$arity = -2);
      
      Opal.defn(self, '$resolve_block_subs', TMP_Substitutors_resolve_block_subs_63 = function $$resolve_block_subs(subs, defaults, subject) {
        var self = this;

        return self.$resolve_subs(subs, "block", defaults, subject)
      }, TMP_Substitutors_resolve_block_subs_63.$$arity = 3);
      
      Opal.defn(self, '$resolve_pass_subs', TMP_Substitutors_resolve_pass_subs_64 = function $$resolve_pass_subs(subs) {
        var self = this;

        return self.$resolve_subs(subs, "inline", nil, "passthrough macro")
      }, TMP_Substitutors_resolve_pass_subs_64.$$arity = 1);
      
      Opal.defn(self, '$highlight_source', TMP_Substitutors_highlight_source_69 = function $$highlight_source(source, process_callouts, highlighter) {
        var $a, $b, $c, TMP_65, TMP_67, self = this, $case = nil, highlighter_loaded = nil, lineno = nil, callout_on_last = nil, callout_marks = nil, last = nil, callout_rx = nil, linenums_mode = nil, highlight_lines = nil, result = nil, lexer = nil, opts = nil, $writer = nil, reached_code = nil;
        if (self.document == null) self.document = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        if (highlighter == null) {
          highlighter = nil;
        }
        
        $case = (highlighter = ($truthy($a = highlighter) ? $a : self.document.$attributes()['$[]']("source-highlighter")));
        if ("coderay"['$===']($case)) {if ($truthy(($truthy($a = (highlighter_loaded = (($b = Opal.const_get_qualified('::', 'CodeRay', 'skip_raise')) ? 'constant' : nil))) ? $a : self.document.$attributes()['$[]']("coderay-unavailable")))) {
        } else if ($truthy(Opal.const_get_relative($nesting, 'Helpers').$require_library("coderay", true, "warn")['$nil?']())) {
          self.document.$set_attr("coderay-unavailable", "")
          } else {
          highlighter_loaded = true
        }}
        else if ("pygments"['$===']($case)) {if ($truthy(($truthy($a = (highlighter_loaded = (($c = Opal.const_get_qualified('::', 'Pygments', 'skip_raise')) ? 'constant' : nil))) ? $a : self.document.$attributes()['$[]']("pygments-unavailable")))) {
        } else if ($truthy(Opal.const_get_relative($nesting, 'Helpers').$require_library("pygments", "pygments.rb", "warn")['$nil?']())) {
          self.document.$set_attr("pygments-unavailable", "")
          } else {
          highlighter_loaded = true
        }}
        else {highlighter_loaded = false};
        if ($truthy(highlighter_loaded)) {
          } else {
          return self.$sub_source(source, process_callouts)
        };
        lineno = 0;
        callout_on_last = false;
        if ($truthy(process_callouts)) {
          
          callout_marks = $hash2([], {});
          last = -1;
          callout_rx = (function() {if ($truthy(self['$attr?']("line-comment"))) {
            return new RegExp("" + "(?:" + (Opal.const_get_qualified('::', 'Regexp').$escape(self.$attr("line-comment"))) + " )?" + (Opal.const_get_relative($nesting, 'CalloutExtractRxt')))
            } else {
            return Opal.const_get_relative($nesting, 'CalloutExtractRx')
          }; return nil; })();
          source = $rb_times($send(source.$split(Opal.const_get_relative($nesting, 'EOL')), 'map', [], (TMP_65 = function(line){var self = TMP_65.$$s || this, TMP_66;
if (line == null) line = nil;
          
            lineno = $rb_plus(lineno, 1);
            return $send(line, 'gsub', [callout_rx], (TMP_66 = function(){var self = TMP_66.$$s || this, $d, m = nil, $writer = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            
              m = $gvars["~"];
              if (m['$[]'](1)['$==']("\\")) {
                return m['$[]'](0).$sub("\\", "")
                } else {
                
                ($truthy($d = callout_marks['$[]'](lineno)) ? $d : (($writer = [lineno, []]), $send(callout_marks, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](m['$[]'](3));
                last = lineno;
                return nil;
              };}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66));}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65)), Opal.const_get_relative($nesting, 'EOL'));
          callout_on_last = last['$=='](lineno);
          if ($truthy(callout_marks['$empty?']())) {
            callout_marks = nil};
          } else {
          callout_marks = nil
        };
        linenums_mode = nil;
        highlight_lines = nil;
        $case = highlighter;
        if ("coderay"['$===']($case)) {
        if ($truthy((linenums_mode = (function() {if ($truthy(self['$attr?']("linenums"))) {
          return ($truthy($a = self.document.$attributes()['$[]']("coderay-linenums-mode")) ? $a : "table").$to_sym()
          } else {
          return nil
        }; return nil; })()))) {
          if ($truthy(self['$attr?']("highlight", nil, false))) {
            highlight_lines = self.$resolve_highlight_lines(self.$attr("highlight", nil, false))}};
        result = Opal.const_get_qualified(Opal.const_get_qualified('::', 'CodeRay'), 'Duo')['$[]'](self.$attr("language", "text", false).$to_sym(), "html", $hash2(["css", "line_numbers", "line_number_anchors", "highlight_lines", "bold_every"], {"css": ($truthy($a = self.document.$attributes()['$[]']("coderay-css")) ? $a : "class").$to_sym(), "line_numbers": linenums_mode, "line_number_anchors": false, "highlight_lines": highlight_lines, "bold_every": false})).$highlight(source);}
        else if ("pygments"['$===']($case)) {
        lexer = ($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified('::', 'Pygments'), 'Lexer')['$[]'](self.$attr("language", nil, false))) ? $a : Opal.const_get_qualified(Opal.const_get_qualified('::', 'Pygments'), 'Lexer')['$[]']("text"));
        opts = $hash2(["cssclass", "classprefix", "nobackground"], {"cssclass": "pyhl", "classprefix": "tok-", "nobackground": true});
        if (($truthy($a = self.document.$attributes()['$[]']("pygments-css")) ? $a : "class")['$==']("class")) {
          } else {
          
          
          $writer = ["noclasses", true];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["style", ($truthy($a = self.document.$attributes()['$[]']("pygments-style")) ? $a : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Stylesheets'), 'DEFAULT_PYGMENTS_STYLE'))];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        };
        if ($truthy(self['$attr?']("highlight", nil, false))) {
          if ($truthy((highlight_lines = self.$resolve_highlight_lines(self.$attr("highlight", nil, false)))['$empty?']())) {
            } else {
            
            $writer = ["hl_lines", $rb_times(highlight_lines, " ")];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }};
        if ($truthy(self['$attr?']("linenums"))) {
          if ((($writer = ["linenos", ($truthy($a = self.document.$attributes()['$[]']("pygments-linenums-mode")) ? $a : "table")]), $send(opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])['$==']("table")) {
            
            linenums_mode = "table";
            result = lexer.$highlight(source, $hash2(["options"], {"options": opts})).$sub(/<div class="pyhl">(.*)<\/div>/m, "\\1").$gsub(/<pre[^>]*>(.*?)<\/pre>\s*/m, "\\1");
            } else {
            result = lexer.$highlight(source, $hash2(["options"], {"options": opts})).$sub(/<div class="pyhl"><pre[^>]*>(.*?)<\/pre><\/div>/m, "\\1")
          }
          } else {
          
          
          $writer = ["nowrap", true];
          $send(opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          result = lexer.$highlight(source, $hash2(["options"], {"options": opts}));
        };};
        if ($truthy(self.passthroughs['$empty?']())) {
          } else {
          result = result.$gsub(Opal.const_get_relative($nesting, 'PASS_MATCH_HI'), "" + (Opal.const_get_relative($nesting, 'PASS_START')) + "\\1" + (Opal.const_get_relative($nesting, 'PASS_END')))
        };
        if ($truthy(($truthy($a = process_callouts) ? callout_marks : $a))) {
          
          lineno = 0;
          reached_code = linenums_mode['$!=']("table");
          return $rb_times($send(result.$split(Opal.const_get_relative($nesting, 'EOL')), 'map', [], (TMP_67 = function(line){var self = TMP_67.$$s || this, $d, TMP_68, conums = nil, tail = nil, pos = nil, conums_markup = nil;
            if (self.document == null) self.document = nil;
if (line == null) line = nil;
          
            if ($truthy(reached_code)) {
              } else {
              
              if ($truthy(line['$include?']("<td class=\"code\">"))) {
                } else {
                return line;
              };
              reached_code = true;
            };
            lineno = $rb_plus(lineno, 1);
            if ($truthy((conums = callout_marks.$delete(lineno)))) {
              
              tail = nil;
              if ($truthy(($truthy($d = callout_on_last) ? callout_marks['$empty?']() : $d))) {
                if ($truthy((pos = line.$index("</pre>")))) {
                  
                  tail = line['$[]'](Opal.Range.$new(pos, -1, false));
                  line = "" + (line['$[]'](Opal.Range.$new(0,pos, true)).$chomp(" ")) + " ";
                  } else {
                  line = "" + (line.$chomp(" ")) + " "
                }};
              if (conums.$size()['$=='](1)) {
                return "" + (line) + (Opal.const_get_relative($nesting, 'Inline').$new(self, "callout", conums['$[]'](0), $hash2(["id"], {"id": self.document.$callouts().$read_next_id()})).$convert()) + (tail)
                } else {
                
                conums_markup = $rb_times($send(conums, 'map', [], (TMP_68 = function(conum){var self = TMP_68.$$s || this;
                  if (self.document == null) self.document = nil;
if (conum == null) conum = nil;
                return Opal.const_get_relative($nesting, 'Inline').$new(self, "callout", conum, $hash2(["id"], {"id": self.document.$callouts().$read_next_id()})).$convert()}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68)), " ");
                return "" + (line) + (conums_markup) + (tail);
              };
              } else {
              return line
            };}, TMP_67.$$s = self, TMP_67.$$arity = 1, TMP_67)), Opal.const_get_relative($nesting, 'EOL'));
          } else {
          return result
        };
      }, TMP_Substitutors_highlight_source_69.$$arity = -3);
      
      Opal.defn(self, '$resolve_highlight_lines', TMP_Substitutors_resolve_highlight_lines_71 = function $$resolve_highlight_lines(spec) {
        var TMP_70, self = this, lines = nil;

        
        lines = [];
        $send(spec.$delete(" ").$split(Opal.const_get_relative($nesting, 'DataDelimiterRx')), 'map', [], (TMP_70 = function(entry){var self = TMP_70.$$s || this, $a, $b, negate = nil, s = nil, e = nil, line_nums = nil;
if (entry == null) entry = nil;
        
          negate = false;
          if ($truthy(entry['$start_with?']("!"))) {
            
            entry = entry['$[]']($range(1, -1, false));
            negate = true;};
          if ($truthy(entry['$include?']("-"))) {
            
            $b = entry.$split("-", 2), $a = Opal.to_ary($b), (s = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;
            line_nums = Opal.Range.$new(s.$to_i(), e.$to_i(), false).$to_a();
            if ($truthy(negate)) {
              return (lines = $rb_minus(lines, line_nums))
              } else {
              return lines.$concat(line_nums)
            };
          } else if ($truthy(negate)) {
            return lines.$delete(entry.$to_i())
            } else {
            return lines['$<<'](entry.$to_i())
          };}, TMP_70.$$s = self, TMP_70.$$arity = 1, TMP_70));
        return lines.$sort().$uniq();
      }, TMP_Substitutors_resolve_highlight_lines_71.$$arity = 1);
      
      Opal.defn(self, '$sub_source', TMP_Substitutors_sub_source_72 = function $$sub_source(source, process_callouts) {
        var self = this;

        return (function() {if ($truthy(process_callouts)) {
          return self.$sub_callouts(self.$sub_specialchars(source))
          } else {
          return self.$sub_specialchars(source)
        }; return nil; })()
      }, TMP_Substitutors_sub_source_72.$$arity = 2);
      
      Opal.defn(self, '$lock_in_subs', TMP_Substitutors_lock_in_subs_74 = function $$lock_in_subs() {
        var $a, $b, $c, $d, TMP_73, self = this, default_subs = nil, $case = nil, custom_subs = nil;
        if (self.default_subs == null) self.default_subs = nil;
        if (self.content_model == null) self.content_model = nil;
        if (self.context == null) self.context = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.style == null) self.style = nil;
        if (self.document == null) self.document = nil;
        if (self.subs == null) self.subs = nil;

        
        if ($truthy(self.default_subs)) {
          default_subs = self.default_subs
          } else {
          $case = self.content_model;
          if ("simple"['$===']($case)) {default_subs = Opal.const_get_relative($nesting, 'SUBS')['$[]']("normal")}
          else if ("verbatim"['$===']($case)) {if ($truthy(($truthy($a = self.context['$==']("listing")) ? $a : (($b = self.context['$==']("literal")) ? self['$option?']("listparagraph")['$!']() : self.context['$==']("literal"))))) {
            default_subs = Opal.const_get_relative($nesting, 'SUBS')['$[]']("verbatim")
          } else if (self.context['$==']("verse")) {
            default_subs = Opal.const_get_relative($nesting, 'SUBS')['$[]']("normal")
            } else {
            default_subs = Opal.const_get_relative($nesting, 'SUBS')['$[]']("basic")
          }}
          else if ("raw"['$===']($case)) {if (self.context['$==']("stem")) {
            default_subs = Opal.const_get_relative($nesting, 'SUBS')['$[]']("basic")
            } else {
            default_subs = Opal.const_get_relative($nesting, 'SUBS')['$[]']("pass")
          }}
          else {return nil}
        };
        if ($truthy((custom_subs = self.attributes['$[]']("subs")))) {
          self.subs = self.$resolve_block_subs(custom_subs, default_subs, self.context)
          } else {
          self.subs = default_subs.$dup()
        };
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (($d = self.context['$==']("listing")) ? self.style['$==']("source") : self.context['$==']("listing"))) ? self.attributes['$[]']("language") : $c)) ? self.document['$basebackend?']("html") : $b)) ? Opal.const_get_relative($nesting, 'SUB_HIGHLIGHT')['$include?'](self.document.$attributes()['$[]']("source-highlighter")) : $a))) {
          return (self.subs = $send(self.subs, 'map', [], (TMP_73 = function(sub){var self = TMP_73.$$s || this;
if (sub == null) sub = nil;
          if (sub['$==']("specialcharacters")) {
              return "highlight"
              } else {
              return sub
            }}, TMP_73.$$s = self, TMP_73.$$arity = 1, TMP_73)))
          } else {
          return nil
        };
      }, TMP_Substitutors_lock_in_subs_74.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/abstract_node"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$include', '$attr_reader', '$attr_accessor', '$==', '$document', '$to_s', '$key?', '$dup', '$[]', '$raise', '$===', '$attributes', '$nil?', '$has_key?', '$[]=', '$-', '$update', '$converter', '$include?', '$split', '$*', '$push', '$delete', '$attr?', '$empty?', '$extname', '$image_uri', '$attr', '$normalize_web_path', '$<', '$safe', '$uriish?', '$generate_data_uri_from_uri', '$generate_data_uri', '$normalize_system_path', '$readable?', '$warn', '$respond_to?', '$binread', '$open', '$read', '$encode64', '$require_library', '$!', '$content_type', '$web_path', '$new', '$open_uri', '$normalize_lines_from_string', '$fetch', '$read_asset', '$!=', '$is_root?', '$join', '$base_dir', '$system_path']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $AbstractNode(){};
      var self = $AbstractNode = $klass($base, $super, 'AbstractNode', $AbstractNode);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AbstractNode_initialize_1, TMP_AbstractNode_parent$eq_2, TMP_AbstractNode_inline$q_3, TMP_AbstractNode_block$q_4, TMP_AbstractNode_attr_5, TMP_AbstractNode_attr$q_6, TMP_AbstractNode_set_attr_7, TMP_AbstractNode_set_option_8, TMP_AbstractNode_option$q_9, TMP_AbstractNode_update_attributes_10, TMP_AbstractNode_converter_11, TMP_AbstractNode_role$q_12, TMP_AbstractNode_role_13, TMP_AbstractNode_has_role$q_14, TMP_AbstractNode_roles_15, TMP_AbstractNode_add_role_16, TMP_AbstractNode_remove_role_17, TMP_AbstractNode_reftext$q_18, TMP_AbstractNode_reftext_19, TMP_AbstractNode_icon_uri_20, TMP_AbstractNode_media_uri_21, TMP_AbstractNode_image_uri_22, TMP_AbstractNode_generate_data_uri_24, TMP_AbstractNode_generate_data_uri_from_uri_26, TMP_AbstractNode_read_contents_28, TMP_AbstractNode_read_asset_29, TMP_AbstractNode_normalize_web_path_30, TMP_AbstractNode_normalize_system_path_31, TMP_AbstractNode_normalize_asset_path_32, TMP_AbstractNode_is_uri$q_33;

      def.document = def.attributes = def.path_resolver = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Substitutors'));
      self.$attr_reader("parent");
      self.$attr_reader("document");
      self.$attr_reader("context");
      self.$attr_reader("node_name");
      self.$attr_accessor("id");
      self.$attr_reader("attributes");
      
      Opal.defn(self, '$initialize', TMP_AbstractNode_initialize_1 = function $$initialize(parent, context, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        if (context['$==']("document")) {
          self.document = parent
        } else if ($truthy(parent)) {
          
          self.parent = parent;
          self.document = parent.$document();
          } else {
          
          self.parent = nil;
          self.document = nil;
        };
        self.context = context;
        self.node_name = context.$to_s();
        self.attributes = (function() {if ($truthy(opts['$key?']("attributes"))) {
          return opts['$[]']("attributes").$dup()
          } else {
          return $hash2([], {})
        }; return nil; })();
        return (self.passthroughs = $hash2([], {}));
      }, TMP_AbstractNode_initialize_1.$$arity = -3);
      
      Opal.defn(self, '$parent=', TMP_AbstractNode_parent$eq_2 = function(parent) {
        var self = this;

        
        self.parent = parent;
        self.document = parent.$document();
        return nil;
      }, TMP_AbstractNode_parent$eq_2.$$arity = 1);
      
      Opal.defn(self, '$inline?', TMP_AbstractNode_inline$q_3 = function() {
        var self = this;

        return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
      }, TMP_AbstractNode_inline$q_3.$$arity = 0);
      
      Opal.defn(self, '$block?', TMP_AbstractNode_block$q_4 = function() {
        var self = this;

        return self.$raise(Opal.const_get_qualified('::', 'NotImplementedError'))
      }, TMP_AbstractNode_block$q_4.$$arity = 0);
      
      Opal.defn(self, '$attr', TMP_AbstractNode_attr_5 = function $$attr(name, default_value, inherit) {
        var $a, $b, self = this;

        if (default_value == null) {
          default_value = nil;
        }
        if (inherit == null) {
          inherit = true;
        }
        
        if ($truthy(Opal.const_get_qualified('::', 'Symbol')['$==='](name))) {
          name = name.$to_s()};
        if (self['$=='](self.document)) {
          inherit = false};
        if ($truthy(inherit)) {
          return ($truthy($a = ($truthy($b = self.attributes['$[]'](name)) ? $b : self.document.$attributes()['$[]'](name))) ? $a : default_value)
          } else {
          return ($truthy($a = self.attributes['$[]'](name)) ? $a : default_value)
        };
      }, TMP_AbstractNode_attr_5.$$arity = -2);
      
      Opal.defn(self, '$attr?', TMP_AbstractNode_attr$q_6 = function(name, expect, inherit) {
        var $a, $b, self = this;

        if (expect == null) {
          expect = nil;
        }
        if (inherit == null) {
          inherit = true;
        }
        
        if ($truthy(Opal.const_get_qualified('::', 'Symbol')['$==='](name))) {
          name = name.$to_s()};
        if (self['$=='](self.document)) {
          inherit = false};
        if ($truthy(expect['$nil?']())) {
          return ($truthy($a = self.attributes['$has_key?'](name)) ? $a : ($truthy($b = inherit) ? self.document.$attributes()['$has_key?'](name) : $b))
        } else if ($truthy(inherit)) {
          return expect['$=='](($truthy($a = self.attributes['$[]'](name)) ? $a : self.document.$attributes()['$[]'](name)))
          } else {
          return expect['$=='](self.attributes['$[]'](name))
        };
      }, TMP_AbstractNode_attr$q_6.$$arity = -2);
      
      Opal.defn(self, '$set_attr', TMP_AbstractNode_set_attr_7 = function $$set_attr(name, value, overwrite) {
        var $a, self = this, $writer = nil;

        if (overwrite == null) {
          overwrite = true;
        }
        if ($truthy((($a = overwrite['$=='](false)) ? self.attributes['$key?'](name) : overwrite['$=='](false)))) {
          return false
          } else {
          
          
          $writer = [name, value];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return true;
        }
      }, TMP_AbstractNode_set_attr_7.$$arity = -3);
      
      Opal.defn(self, '$set_option', TMP_AbstractNode_set_option_8 = function $$set_option(name) {
        var self = this, $writer = nil;

        
        if ($truthy(self.attributes['$has_key?']("options"))) {
          
          $writer = ["options", "" + (self.attributes['$[]']("options")) + "," + (name)];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = ["options", name];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        
        $writer = ["" + (name) + "-option", ""];
        $send(self.attributes, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_AbstractNode_set_option_8.$$arity = 1);
      
      Opal.defn(self, '$option?', TMP_AbstractNode_option$q_9 = function(name) {
        var self = this;

        return self.attributes['$has_key?']("" + (name) + "-option")
      }, TMP_AbstractNode_option$q_9.$$arity = 1);
      
      Opal.defn(self, '$update_attributes', TMP_AbstractNode_update_attributes_10 = function $$update_attributes(attributes) {
        var self = this;

        
        self.attributes.$update(attributes);
        return nil;
      }, TMP_AbstractNode_update_attributes_10.$$arity = 1);
      
      Opal.defn(self, '$converter', TMP_AbstractNode_converter_11 = function $$converter() {
        var self = this;

        return self.document.$converter()
      }, TMP_AbstractNode_converter_11.$$arity = 0);
      
      Opal.defn(self, '$role?', TMP_AbstractNode_role$q_12 = function(expect) {
        var $a, self = this;

        if (expect == null) {
          expect = nil;
        }
        if ($truthy(expect)) {
          return expect['$=='](($truthy($a = self.attributes['$[]']("role")) ? $a : self.document.$attributes()['$[]']("role")))
          } else {
          return ($truthy($a = self.attributes['$has_key?']("role")) ? $a : self.document.$attributes()['$has_key?']("role"))
        }
      }, TMP_AbstractNode_role$q_12.$$arity = -1);
      
      Opal.defn(self, '$role', TMP_AbstractNode_role_13 = function $$role() {
        var $a, self = this;

        return ($truthy($a = self.attributes['$[]']("role")) ? $a : self.document.$attributes()['$[]']("role"))
      }, TMP_AbstractNode_role_13.$$arity = 0);
      
      Opal.defn(self, '$has_role?', TMP_AbstractNode_has_role$q_14 = function(name) {
        var $a, self = this, val = nil;

        if ($truthy((val = ($truthy($a = self.attributes['$[]']("role")) ? $a : self.document.$attributes()['$[]']("role"))))) {
          return val.$split(" ")['$include?'](name)
          } else {
          return false
        }
      }, TMP_AbstractNode_has_role$q_14.$$arity = 1);
      
      Opal.defn(self, '$roles', TMP_AbstractNode_roles_15 = function $$roles() {
        var $a, self = this, val = nil;

        if ($truthy((val = ($truthy($a = self.attributes['$[]']("role")) ? $a : self.document.$attributes()['$[]']("role"))))) {
          return val.$split(" ")
          } else {
          return []
        }
      }, TMP_AbstractNode_roles_15.$$arity = 0);
      
      Opal.defn(self, '$add_role', TMP_AbstractNode_add_role_16 = function $$add_role(name) {
        var $a, self = this, roles = nil, $writer = nil;

        if ($truthy((roles = ($truthy($a = self.attributes['$[]']("role")) ? $a : "").$split(" "))['$include?'](name))) {
          return nil
          } else {
          
          $writer = ["role", $rb_times(roles.$push(name), " ")];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }
      }, TMP_AbstractNode_add_role_16.$$arity = 1);
      
      Opal.defn(self, '$remove_role', TMP_AbstractNode_remove_role_17 = function $$remove_role(name) {
        var $a, self = this, roles = nil, $writer = nil;

        if ($truthy((roles = ($truthy($a = self.attributes['$[]']("role")) ? $a : "").$split(" "))['$include?'](name))) {
          
          roles.$delete(name);
          
          $writer = ["role", $rb_times(roles, " ")];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
          } else {
          return nil
        }
      }, TMP_AbstractNode_remove_role_17.$$arity = 1);
      
      Opal.defn(self, '$reftext?', TMP_AbstractNode_reftext$q_18 = function() {
        var $a, self = this;

        return ($truthy($a = self.attributes['$has_key?']("reftext")) ? $a : self.document.$attributes()['$has_key?']("reftext"))
      }, TMP_AbstractNode_reftext$q_18.$$arity = 0);
      
      Opal.defn(self, '$reftext', TMP_AbstractNode_reftext_19 = function $$reftext() {
        var $a, self = this;

        return ($truthy($a = self.attributes['$[]']("reftext")) ? $a : self.document.$attributes()['$[]']("reftext"))
      }, TMP_AbstractNode_reftext_19.$$arity = 0);
      
      Opal.defn(self, '$icon_uri', TMP_AbstractNode_icon_uri_20 = function $$icon_uri(name) {
        var self = this, uri = nil;

        if ($truthy(self['$attr?']("icon"))) {
          if ($truthy(Opal.const_get_qualified('::', 'File').$extname((uri = self.$image_uri(self.$attr("icon"), "iconsdir")))['$empty?']())) {
            return "" + (uri) + "." + (self.document.$attr("icontype", "png"))
            } else {
            return uri
          }
          } else {
          return self.$image_uri("" + (name) + "." + (self.document.$attr("icontype", "png")), "iconsdir")
        }
      }, TMP_AbstractNode_icon_uri_20.$$arity = 1);
      
      Opal.defn(self, '$media_uri', TMP_AbstractNode_media_uri_21 = function $$media_uri(target, asset_dir_key) {
        var self = this;

        if (asset_dir_key == null) {
          asset_dir_key = "imagesdir";
        }
        return self.$normalize_web_path(target, (function() {if ($truthy(asset_dir_key)) {
          return self.document.$attr(asset_dir_key)
          } else {
          return nil
        }; return nil; })())
      }, TMP_AbstractNode_media_uri_21.$$arity = -2);
      
      Opal.defn(self, '$image_uri', TMP_AbstractNode_image_uri_22 = function $$image_uri(target_image, asset_dir_key) {
        var $a, $b, $c, $d, self = this, doc = nil, images_base = nil;

        if (asset_dir_key == null) {
          asset_dir_key = "imagesdir";
        }
        if ($truthy(($truthy($a = $rb_lt((doc = self.document).$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE'))) ? doc['$attr?']("data-uri") : $a))) {
          if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Helpers')['$uriish?'](target_image)) ? $a : ($truthy($b = ($truthy($c = ($truthy($d = asset_dir_key) ? (images_base = doc.$attr(asset_dir_key)) : $d)) ? Opal.const_get_relative($nesting, 'Helpers')['$uriish?'](images_base) : $c)) ? (target_image = self.$normalize_web_path(target_image, images_base, false)) : $b)))) {
            if ($truthy(doc['$attr?']("allow-uri-read"))) {
              return self.$generate_data_uri_from_uri(target_image, doc['$attr?']("cache-uri"))
              } else {
              return target_image
            }
            } else {
            return self.$generate_data_uri(target_image, asset_dir_key)
          }
          } else {
          return self.$normalize_web_path(target_image, (function() {if ($truthy(asset_dir_key)) {
            return doc.$attr(asset_dir_key)
            } else {
            return nil
          }; return nil; })())
        }
      }, TMP_AbstractNode_image_uri_22.$$arity = -2);
      
      Opal.defn(self, '$generate_data_uri', TMP_AbstractNode_generate_data_uri_24 = function $$generate_data_uri(target_image, asset_dir_key) {
        var TMP_23, self = this, ext = nil, mimetype = nil, image_path = nil, bindata = nil;

        if (asset_dir_key == null) {
          asset_dir_key = nil;
        }
        
        ext = Opal.const_get_qualified('::', 'File').$extname(target_image);
        mimetype = (function() {if (ext['$=='](".svg")) {
          return "image/svg+xml"
          } else {
          return "" + "image/" + (ext['$[]']($range(1, -1, false)))
        }; return nil; })();
        if ($truthy(asset_dir_key)) {
          image_path = self.$normalize_system_path(target_image, self.document.$attr(asset_dir_key), nil, $hash2(["target_name"], {"target_name": "image"}))
          } else {
          image_path = self.$normalize_system_path(target_image)
        };
        if ($truthy(Opal.const_get_qualified('::', 'File')['$readable?'](image_path))) {
          } else {
          
          self.$warn("" + "asciidoctor: WARNING: image to embed not found or not readable: " + (image_path));
          return "" + "data:" + (mimetype) + ":base64,";
        };
        bindata = nil;
        if ($truthy(Opal.const_get_qualified('::', 'IO')['$respond_to?']("binread"))) {
          bindata = Opal.const_get_qualified('::', 'IO').$binread(image_path)
          } else {
          bindata = $send(Opal.const_get_qualified('::', 'File'), 'open', [image_path, "rb"], (TMP_23 = function(file){var self = TMP_23.$$s || this;
if (file == null) file = nil;
          return file.$read()}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23))
        };
        return "" + "data:" + (mimetype) + ";base64," + (Opal.const_get_qualified('::', 'Base64').$encode64(bindata).$delete(Opal.const_get_relative($nesting, 'EOL')));
      }, TMP_AbstractNode_generate_data_uri_24.$$arity = -2);
      
      Opal.defn(self, '$generate_data_uri_from_uri', TMP_AbstractNode_generate_data_uri_from_uri_26 = function $$generate_data_uri_from_uri(image_uri, cache_uri) {
        var TMP_25, self = this, mimetype = nil, bindata = nil;

        if (cache_uri == null) {
          cache_uri = false;
        }
        
        if ($truthy(cache_uri)) {
          Opal.const_get_relative($nesting, 'Helpers').$require_library("open-uri/cached", "open-uri-cached")
        } else if ($truthy(Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL')['$!']())) {
          Opal.const_get_qualified('::', 'OpenURI')};
        
        try {
          
          mimetype = nil;
          bindata = $send(self, 'open', [image_uri, "rb"], (TMP_25 = function(file){var self = TMP_25.$$s || this;
if (file == null) file = nil;
          
            mimetype = file.$content_type();
            return file.$read();}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25));
          return "" + "data:" + (mimetype) + ";base64," + (Opal.const_get_qualified('::', 'Base64').$encode64(bindata).$delete(Opal.const_get_relative($nesting, 'EOL')));
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
            try {
              
              self.$warn("" + "asciidoctor: WARNING: could not retrieve image data from URI: " + (image_uri));
              return image_uri;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };;
      }, TMP_AbstractNode_generate_data_uri_from_uri_26.$$arity = -2);
      
      Opal.defn(self, '$read_contents', TMP_AbstractNode_read_contents_28 = function $$read_contents(target, opts) {
        var $a, $b, $c, TMP_27, self = this, doc = nil, start = nil, data = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        doc = self.document;
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Helpers')['$uriish?'](target)) ? $a : ($truthy($b = ($truthy($c = (start = opts['$[]']("start"))) ? Opal.const_get_relative($nesting, 'Helpers')['$uriish?'](start) : $c)) ? (target = (self.path_resolver = ($truthy($c = self.path_resolver) ? $c : Opal.const_get_relative($nesting, 'PathResolver').$new())).$web_path(target, start)) : $b)))) {
          if ($truthy(doc['$attr?']("allow-uri-read"))) {
            
            if ($truthy(doc['$attr?']("cache-uri"))) {
              Opal.const_get_relative($nesting, 'Helpers').$require_library("open-uri/cached", "open-uri-cached")};
            
            try {
              
              data = $send(Opal.const_get_qualified('::', 'OpenURI'), 'open_uri', [target], (TMP_27 = function(fd){var self = TMP_27.$$s || this;
if (fd == null) fd = nil;
              return fd.$read()}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27));
              if ($truthy(opts['$[]']("normalize"))) {
                data = $rb_times(Opal.const_get_relative($nesting, 'Helpers').$normalize_lines_from_string(data), Opal.const_get_relative($nesting, 'EOL'))};
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  
                  if ($truthy(opts.$fetch("warn_on_failure", true))) {
                    self.$warn("" + "asciidoctor: WARNING: could not retrieve contents of " + (($truthy($a = opts['$[]']("label")) ? $a : "asset")) + " at URI: " + (target))};
                  data = nil;
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
            } else {
            
            if ($truthy(opts.$fetch("warn_on_failure", true))) {
              self.$warn("" + "asciidoctor: WARNING: cannot retrieve contents of " + (($truthy($a = opts['$[]']("label")) ? $a : "asset")) + " at URI: " + (target) + " (allow-uri-read attribute not enabled)")};
            data = nil;
          }
          } else {
          
          target = self.$normalize_system_path(target, opts['$[]']("start"), nil, $hash2(["target_name"], {"target_name": ($truthy($a = opts['$[]']("label")) ? $a : "asset")}));
          data = self.$read_asset(target, $hash2(["normalize", "warn_on_failure"], {"normalize": opts['$[]']("normalize"), "warn_on_failure": opts.$fetch("warn_on_failure", true)}));
        };
        return data;
      }, TMP_AbstractNode_read_contents_28.$$arity = -2);
      
      Opal.defn(self, '$read_asset', TMP_AbstractNode_read_asset_29 = function $$read_asset(path, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](opts))) {
          } else {
          opts = $hash2(["warn_on_failure"], {"warn_on_failure": opts['$!='](false)})
        };
        if ($truthy(Opal.const_get_qualified('::', 'File')['$readable?'](path))) {
          if ($truthy(opts['$[]']("normalize"))) {
            return $rb_times(Opal.const_get_relative($nesting, 'Helpers').$normalize_lines_from_string(Opal.const_get_qualified('::', 'IO').$read(path)), Opal.const_get_relative($nesting, 'EOL'))
            } else {
            return Opal.const_get_qualified('::', 'IO').$read(path)
          }
          } else {
          
          if ($truthy(opts['$[]']("warn_on_failure"))) {
            self.$warn("" + "asciidoctor: WARNING: file does not exist or cannot be read: " + (path))};
          return nil;
        };
      }, TMP_AbstractNode_read_asset_29.$$arity = -2);
      
      Opal.defn(self, '$normalize_web_path', TMP_AbstractNode_normalize_web_path_30 = function $$normalize_web_path(target, start, preserve_uri_target) {
        var $a, self = this;

        if (start == null) {
          start = nil;
        }
        if (preserve_uri_target == null) {
          preserve_uri_target = true;
        }
        if ($truthy(($truthy($a = preserve_uri_target) ? Opal.const_get_relative($nesting, 'Helpers')['$uriish?'](target) : $a))) {
          return target
          } else {
          return (self.path_resolver = ($truthy($a = self.path_resolver) ? $a : Opal.const_get_relative($nesting, 'PathResolver').$new())).$web_path(target, start)
        }
      }, TMP_AbstractNode_normalize_web_path_30.$$arity = -2);
      
      Opal.defn(self, '$normalize_system_path', TMP_AbstractNode_normalize_system_path_31 = function $$normalize_system_path(target, start, jail, opts) {
        var $a, self = this, path_resolver = nil, doc = nil;

        if (start == null) {
          start = nil;
        }
        if (jail == null) {
          jail = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        
        path_resolver = (self.path_resolver = ($truthy($a = self.path_resolver) ? $a : Opal.const_get_relative($nesting, 'PathResolver').$new()));
        if ($truthy($rb_lt((doc = self.document).$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SAFE')))) {
          if ($truthy(start)) {
            if ($truthy(path_resolver['$is_root?'](start))) {
              } else {
              start = Opal.const_get_qualified('::', 'File').$join(doc.$base_dir(), start)
            }
            } else {
            start = doc.$base_dir()
          }
          } else {
          
          if ($truthy(start)) {
            } else {
            start = doc.$base_dir()
          };
          if ($truthy(jail)) {
            } else {
            jail = doc.$base_dir()
          };
        };
        return path_resolver.$system_path(target, start, jail, opts);
      }, TMP_AbstractNode_normalize_system_path_31.$$arity = -2);
      
      Opal.defn(self, '$normalize_asset_path', TMP_AbstractNode_normalize_asset_path_32 = function $$normalize_asset_path(asset_ref, asset_name, autocorrect) {
        var self = this;

        if (asset_name == null) {
          asset_name = "path";
        }
        if (autocorrect == null) {
          autocorrect = true;
        }
        return self.$normalize_system_path(asset_ref, self.document.$base_dir(), nil, $hash2(["target_name", "recover"], {"target_name": asset_name, "recover": autocorrect}))
      }, TMP_AbstractNode_normalize_asset_path_32.$$arity = -2);
      return (Opal.defn(self, '$is_uri?', TMP_AbstractNode_is_uri$q_33 = function(str) {
        var self = this;

        return Opal.const_get_relative($nesting, 'Helpers')['$uriish?'](str)
      }, TMP_AbstractNode_is_uri$q_33.$$arity = 1), nil) && 'is_uri?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/abstract_block"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$attr_writer', '$==', '$!=', '$level', '$to_s', '$playback_attributes', '$convert', '$converter', '$*', '$map', '$file', '$lineno', '$include?', '$!', '$nil_or_empty?', '$apply_title_subs', '$title', '$empty?', '$<<', '$select', '$context', '$>', '$[]', '$has_role?', '$header?', '$concat', '$find_by', '$to_proc', '$each', '$flatten', '$delete', '$title?', '$attributes', '$counter_increment', '$index=', '$-', '$+', '$sectname', '$counter', '$numbered', '$number=', '$attr', '$caption=', '$special', '$doctype', '$assign_index', '$reindex_sections']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $AbstractBlock(){};
      var self = $AbstractBlock = $klass($base, $super, 'AbstractBlock', $AbstractBlock);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AbstractBlock_initialize_1, TMP_AbstractBlock_block$q_2, TMP_AbstractBlock_inline$q_3, TMP_AbstractBlock_context$eq_4, TMP_AbstractBlock_convert_5, TMP_AbstractBlock_content_7, TMP_AbstractBlock_file_8, TMP_AbstractBlock_lineno_9, TMP_AbstractBlock_sub$q_10, TMP_AbstractBlock_title$q_11, TMP_AbstractBlock_title_12, TMP_AbstractBlock_captioned_title_13, TMP_AbstractBlock_blocks$q_14, TMP_AbstractBlock_$lt$lt_15, TMP_AbstractBlock_sections_17, TMP_AbstractBlock_sections$q_18, TMP_AbstractBlock_find_by_19, TMP_AbstractBlock_remove_sub_22, TMP_AbstractBlock_assign_caption_23, TMP_AbstractBlock_list_marker_keyword_24, TMP_AbstractBlock_assign_index_25, TMP_AbstractBlock_reindex_sections_27;

      def.document = def.attributes = def.blocks = def.source_location = def.subs = def.title = def.subbed_title = def.caption = def.next_section_index = def.context = def.style = def.id = def.header = def.next_section_number = nil;
      
      self.$attr_accessor("content_model");
      self.$attr_reader("subs");
      self.$attr_reader("blocks");
      self.$attr_accessor("level");
      self.$attr_writer("title");
      self.$attr_accessor("style");
      self.$attr_accessor("caption");
      self.$attr_accessor("source_location");
      
      Opal.defn(self, '$initialize', TMP_AbstractBlock_initialize_1 = function $$initialize(parent, context, opts) {
        var $a, self = this, $iter = TMP_AbstractBlock_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_AbstractBlock_initialize_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_AbstractBlock_initialize_1, false), $zuper, $iter);
        self.content_model = "compound";
        self.subs = [];
        self.default_subs = nil;
        self.blocks = [];
        self.id = nil;
        self.title = nil;
        self.caption = nil;
        self.style = nil;
        self.level = (function() {if (context['$==']("document")) {
          return 0
        } else if ($truthy(($truthy($a = parent) ? context['$!=']("section") : $a))) {
          return parent.$level()
          } else {
          return nil
        }; return nil; })();
        self.next_section_index = 0;
        self.next_section_number = 1;
        return (self.source_location = nil);
      }, TMP_AbstractBlock_initialize_1.$$arity = -3);
      
      Opal.defn(self, '$block?', TMP_AbstractBlock_block$q_2 = function() {
        var self = this;

        return true
      }, TMP_AbstractBlock_block$q_2.$$arity = 0);
      
      Opal.defn(self, '$inline?', TMP_AbstractBlock_inline$q_3 = function() {
        var self = this;

        return false
      }, TMP_AbstractBlock_inline$q_3.$$arity = 0);
      
      Opal.defn(self, '$context=', TMP_AbstractBlock_context$eq_4 = function(context) {
        var self = this;

        
        self.context = context;
        return (self.node_name = context.$to_s());
      }, TMP_AbstractBlock_context$eq_4.$$arity = 1);
      
      Opal.defn(self, '$convert', TMP_AbstractBlock_convert_5 = function $$convert() {
        var self = this;

        
        self.document.$playback_attributes(self.attributes);
        return self.$converter().$convert(self);
      }, TMP_AbstractBlock_convert_5.$$arity = 0);
      Opal.alias(self, "render", "convert");
      
      Opal.defn(self, '$content', TMP_AbstractBlock_content_7 = function $$content() {
        var TMP_6, self = this;

        return $rb_times($send(self.blocks, 'map', [], (TMP_6 = function(b){var self = TMP_6.$$s || this;
if (b == null) b = nil;
        return b.$convert()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6)), Opal.const_get_relative($nesting, 'EOL'))
      }, TMP_AbstractBlock_content_7.$$arity = 0);
      
      Opal.defn(self, '$file', TMP_AbstractBlock_file_8 = function $$file() {
        var self = this;

        if ($truthy(self.source_location)) {
          return self.source_location.$file()
          } else {
          return nil
        }
      }, TMP_AbstractBlock_file_8.$$arity = 0);
      
      Opal.defn(self, '$lineno', TMP_AbstractBlock_lineno_9 = function $$lineno() {
        var self = this;

        if ($truthy(self.source_location)) {
          return self.source_location.$lineno()
          } else {
          return nil
        }
      }, TMP_AbstractBlock_lineno_9.$$arity = 0);
      
      Opal.defn(self, '$sub?', TMP_AbstractBlock_sub$q_10 = function(name) {
        var self = this;

        return self.subs['$include?'](name)
      }, TMP_AbstractBlock_sub$q_10.$$arity = 1);
      
      Opal.defn(self, '$title?', TMP_AbstractBlock_title$q_11 = function() {
        var self = this;

        return self.title['$nil_or_empty?']()['$!']()
      }, TMP_AbstractBlock_title$q_11.$$arity = 0);
      
      Opal.defn(self, '$title', TMP_AbstractBlock_title_12 = function $$title() {
        var $a, self = this;

        if ($truthy((($a = self['subbed_title'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
          return self.subbed_title
        } else if ($truthy(self.title)) {
          return (self.subbed_title = self.$apply_title_subs(self.title))
          } else {
          return self.title
        }
      }, TMP_AbstractBlock_title_12.$$arity = 0);
      
      Opal.defn(self, '$captioned_title', TMP_AbstractBlock_captioned_title_13 = function $$captioned_title() {
        var self = this;

        return "" + (self.caption) + (self.$title())
      }, TMP_AbstractBlock_captioned_title_13.$$arity = 0);
      
      Opal.defn(self, '$blocks?', TMP_AbstractBlock_blocks$q_14 = function() {
        var self = this;

        return self.blocks['$empty?']()['$!']()
      }, TMP_AbstractBlock_blocks$q_14.$$arity = 0);
      
      Opal.defn(self, '$<<', TMP_AbstractBlock_$lt$lt_15 = function(block) {
        var self = this;

        
        self.blocks['$<<'](block);
        return self;
      }, TMP_AbstractBlock_$lt$lt_15.$$arity = 1);
      Opal.alias(self, "append", "<<");
      
      Opal.defn(self, '$sections', TMP_AbstractBlock_sections_17 = function $$sections() {
        var TMP_16, self = this;

        return $send(self.blocks, 'select', [], (TMP_16 = function(block){var self = TMP_16.$$s || this;
if (block == null) block = nil;
        return block.$context()['$==']("section")}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))
      }, TMP_AbstractBlock_sections_17.$$arity = 0);
      
      Opal.defn(self, '$sections?', TMP_AbstractBlock_sections$q_18 = function() {
        var self = this;

        return $rb_gt(self.next_section_index, 0)
      }, TMP_AbstractBlock_sections$q_18.$$arity = 0);
      
      Opal.defn(self, '$find_by', TMP_AbstractBlock_find_by_19 = function $$find_by(selector) {
        var $a, $b, $c, $d, TMP_20, TMP_21, self = this, $iter = TMP_AbstractBlock_find_by_19.$$p, block = $iter || nil, result = nil, any_context = nil, context_selector = nil, style_selector = nil, role_selector = nil, id_selector = nil;

        if (selector == null) {
          selector = $hash2([], {});
        }
        if ($iter) TMP_AbstractBlock_find_by_19.$$p = null;
        
        result = [];
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = (any_context = (context_selector = selector['$[]']("context"))['$!']())) ? $d : context_selector['$=='](self.context))) ? ($truthy($d = (style_selector = selector['$[]']("style"))['$!']()) ? $d : style_selector['$=='](self.style)) : $c)) ? ($truthy($c = (role_selector = selector['$[]']("role"))['$!']()) ? $c : self['$has_role?'](role_selector)) : $b)) ? ($truthy($b = (id_selector = selector['$[]']("id"))['$!']()) ? $b : id_selector['$=='](self.id)) : $a))) {
          if ($truthy(id_selector)) {
            if ((block !== nil)) {
              return (function() {if ($truthy(Opal.yield1(block, self))) {
                return [self]
                } else {
                return result
              }; return nil; })()
              } else {
              return [self]
            }
          } else if ((block !== nil)) {
            if ($truthy(Opal.yield1(block, self))) {
              result['$<<'](self)}
            } else {
            result['$<<'](self)
          }};
        if ($truthy(($truthy($a = (($b = self.context['$==']("document")) ? ($truthy($c = any_context) ? $c : context_selector['$==']("section")) : self.context['$==']("document"))) ? self['$header?']() : $a))) {
          result.$concat($send(self.header, 'find_by', [selector], block.$to_proc()))};
        if (context_selector['$==']("document")) {
        } else if (self.context['$==']("dlist")) {
          if ($truthy(($truthy($a = any_context) ? $a : context_selector['$!=']("section")))) {
            $send(self.blocks.$flatten(), 'each', [], (TMP_20 = function(li){var self = TMP_20.$$s || this;
if (li == null) li = nil;
            if ($truthy(li)) {
                return result.$concat($send(li, 'find_by', [selector], block.$to_proc()))
                } else {
                return nil
              }}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20))}
        } else if ($truthy($send(self.blocks, 'each', [], (TMP_21 = function(b){var self = TMP_21.$$s || this, $e;
if (b == null) b = nil;
        
          if ($truthy((($e = context_selector['$==']("section")) ? b.$context()['$!=']("section") : context_selector['$==']("section")))) {
            return nil;};
          return result.$concat($send(b, 'find_by', [selector], block.$to_proc()));}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21)))) {};
        return result;
      }, TMP_AbstractBlock_find_by_19.$$arity = -1);
      Opal.alias(self, "query", "find_by");
      
      Opal.defn(self, '$remove_sub', TMP_AbstractBlock_remove_sub_22 = function $$remove_sub(sub) {
        var self = this;

        
        self.subs.$delete(sub);
        return nil;
      }, TMP_AbstractBlock_remove_sub_22.$$arity = 1);
      
      Opal.defn(self, '$assign_caption', TMP_AbstractBlock_assign_caption_23 = function $$assign_caption(caption, key) {
        var $a, self = this, value = nil, caption_key = nil, caption_title = nil, caption_num = nil;

        if (caption == null) {
          caption = nil;
        }
        if (key == null) {
          key = nil;
        }
        
        if ($truthy(($truthy($a = self['$title?']()) ? $a : self.caption['$!']()))) {
          } else {
          return nil
        };
        if ($truthy(caption)) {
          self.caption = caption
        } else if ($truthy((value = self.document.$attributes()['$[]']("caption")))) {
          self.caption = value
        } else if ($truthy(self['$title?']())) {
          
          key = ($truthy($a = key) ? $a : self.context.$to_s());
          caption_key = "" + (key) + "-caption";
          if ($truthy((caption_title = self.document.$attributes()['$[]'](caption_key)))) {
            
            caption_num = self.document.$counter_increment("" + (key) + "-number", self);
            self.caption = "" + (caption_title) + " " + (caption_num) + ". ";};};
        return nil;
      }, TMP_AbstractBlock_assign_caption_23.$$arity = -1);
      
      Opal.defn(self, '$list_marker_keyword', TMP_AbstractBlock_list_marker_keyword_24 = function $$list_marker_keyword(list_type) {
        var $a, self = this;

        if (list_type == null) {
          list_type = nil;
        }
        return Opal.const_get_relative($nesting, 'ORDERED_LIST_KEYWORDS')['$[]'](($truthy($a = list_type) ? $a : self.style))
      }, TMP_AbstractBlock_list_marker_keyword_24.$$arity = -1);
      
      Opal.defn(self, '$assign_index', TMP_AbstractBlock_assign_index_25 = function $$assign_index(section) {
        var $a, $b, $c, self = this, $writer = nil, appendix_number = nil, caption = nil;

        
        
        $writer = [self.next_section_index];
        $send(section, 'index=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.next_section_index = $rb_plus(self.next_section_index, 1);
        if (section.$sectname()['$==']("appendix")) {
          
          appendix_number = self.document.$counter("appendix-number", "A");
          if ($truthy(section.$numbered())) {
            
            $writer = [appendix_number];
            $send(section, 'number=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((caption = self.document.$attr("appendix-caption", ""))['$empty?']())) {
            
            $writer = ["" + (appendix_number) + ". "];
            $send(section, 'caption=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = ["" + (caption) + " " + (appendix_number) + ": "];
            $send(section, 'caption=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          };
        } else if ($truthy(section.$numbered())) {
          if ($truthy(($truthy($a = ($truthy($b = section.$level()['$=='](1)) ? $b : (($c = section.$level()['$=='](0)) ? section.$special() : section.$level()['$=='](0)))) ? self.document.$doctype()['$==']("book") : $a))) {
            
            $writer = [self.document.$counter("chapter-number", 1)];
            $send(section, 'number=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            
            $writer = [self.next_section_number];
            $send(section, 'number=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (self.next_section_number = $rb_plus(self.next_section_number, 1));
          }
          } else {
          return nil
        };
      }, TMP_AbstractBlock_assign_index_25.$$arity = 1);
      return (Opal.defn(self, '$reindex_sections', TMP_AbstractBlock_reindex_sections_27 = function $$reindex_sections() {
        var TMP_26, self = this;

        
        self.next_section_index = 0;
        self.next_section_number = 0;
        return $send(self.blocks, 'each', [], (TMP_26 = function(block){var self = TMP_26.$$s || this;
if (block == null) block = nil;
        if (block.$context()['$==']("section")) {
            
            self.$assign_index(block);
            return block.$reindex_sections();
            } else {
            return nil
          }}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
      }, TMP_AbstractBlock_reindex_sections_27.$$arity = 0), nil) && 'reindex_sections';
    })($nesting[0], Opal.const_get_relative($nesting, 'AbstractNode'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/attribute_list"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$==', '$new', '$[]', '$update', '$parse', '$parse_attribute', '$eos?', '$skip_delimiter', '$+', '$rekey', '$each_with_index', '$[]=', '$-', '$skip_blank', '$peek', '$parse_attribute_value', '$get_byte', '$scan_name', '$!', '$!=', '$*', '$scan_to_delimiter', '$===', '$each', '$split', '$tr', '$empty?', '$apply_normal_subs', '$scan_to_quote', '$gsub', '$skip', '$scan']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $AttributeList(){};
      var self = $AttributeList = $klass($base, $super, 'AttributeList', $AttributeList);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AttributeList_initialize_1, TMP_AttributeList_parse_into_2, TMP_AttributeList_parse_3, TMP_AttributeList_rekey_4, TMP_AttributeList_rekey_6, TMP_AttributeList_parse_attribute_8, TMP_AttributeList_parse_attribute_value_9, TMP_AttributeList_skip_blank_10, TMP_AttributeList_skip_delimiter_11, TMP_AttributeList_scan_name_12, TMP_AttributeList_scan_to_delimiter_13, TMP_AttributeList_scan_to_quote_14;

      def.attributes = def.scanner = def.delimiter = def.block = def.delimiter_skip_pattern = def.delimiter_boundary_pattern = nil;
      
      if (Opal.const_get_qualified('::', 'RUBY_ENGINE')['$==']("opal")) {
        
        Opal.const_set($nesting[0], 'CG_BLANK', "[ \\t]");
        Opal.const_set($nesting[0], 'CC_WORD', "a-zA-Z0-9_");
        Opal.const_set($nesting[0], 'CG_WORD', "[a-zA-Z0-9_]");};
      Opal.const_set($nesting[0], 'BoundaryRxs', $hash2(["\"", "'", ","], {"\"": /.*?[^\\](?=")/, "'": /.*?[^\\](?=')/, ",": new RegExp("" + ".*?(?=" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(,|$))")}));
      Opal.const_set($nesting[0], 'EscapedQuoteRxs', $hash2(["\"", "'"], {"\"": /\\"/, "'": /\\'/}));
      Opal.const_set($nesting[0], 'NameRx', new RegExp("" + (Opal.const_get_relative($nesting, 'CG_WORD')) + "[" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "\\-.]*"));
      Opal.const_set($nesting[0], 'BlankRx', new RegExp("" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+"));
      Opal.const_set($nesting[0], 'SkipRxs', $hash2(["blank", ","], {"blank": Opal.const_get_relative($nesting, 'BlankRx'), ",": new RegExp("" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(,|$)")}));
      
      Opal.defn(self, '$initialize', TMP_AttributeList_initialize_1 = function $$initialize(source, block, delimiter) {
        var self = this;

        if (block == null) {
          block = nil;
        }
        if (delimiter == null) {
          delimiter = ",";
        }
        
        self.scanner = Opal.const_get_qualified('::', 'StringScanner').$new(source);
        self.block = block;
        self.delimiter = delimiter;
        self.delimiter_skip_pattern = Opal.const_get_relative($nesting, 'SkipRxs')['$[]'](delimiter);
        self.delimiter_boundary_pattern = Opal.const_get_relative($nesting, 'BoundaryRxs')['$[]'](delimiter);
        return (self.attributes = nil);
      }, TMP_AttributeList_initialize_1.$$arity = -2);
      
      Opal.defn(self, '$parse_into', TMP_AttributeList_parse_into_2 = function $$parse_into(attributes, posattrs) {
        var self = this;

        if (posattrs == null) {
          posattrs = [];
        }
        return attributes.$update(self.$parse(posattrs))
      }, TMP_AttributeList_parse_into_2.$$arity = -2);
      
      Opal.defn(self, '$parse', TMP_AttributeList_parse_3 = function $$parse(posattrs) {
        var $a, self = this, index = nil;

        if (posattrs == null) {
          posattrs = [];
        }
        
        if ($truthy(self.attributes)) {
          return self.attributes};
        self.attributes = $hash2([], {});
        index = 0;
        while ($truthy(self.$parse_attribute(index, posattrs))) {
          
          if ($truthy(self.scanner['$eos?']())) {
            break;};
          self.$skip_delimiter();
          index = $rb_plus(index, 1);
        };
        return self.attributes;
      }, TMP_AttributeList_parse_3.$$arity = -1);
      
      Opal.defn(self, '$rekey', TMP_AttributeList_rekey_4 = function $$rekey(posattrs) {
        var self = this;

        return Opal.const_get_relative($nesting, 'AttributeList').$rekey(self.attributes, posattrs)
      }, TMP_AttributeList_rekey_4.$$arity = 1);
      Opal.defs(self, '$rekey', TMP_AttributeList_rekey_6 = function $$rekey(attributes, pos_attrs) {
        var TMP_5, self = this;

        
        $send(pos_attrs, 'each_with_index', [], (TMP_5 = function(key, index){var self = TMP_5.$$s || this, pos = nil, val = nil, $writer = nil;
if (key == null) key = nil;if (index == null) index = nil;
        
          if ($truthy(key)) {
            } else {
            return nil;
          };
          pos = $rb_plus(index, 1);
          if ($truthy((val = attributes['$[]'](pos)))) {
            
            $writer = [key, val];
            $send(attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return nil
          };}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5));
        return attributes;
      }, TMP_AttributeList_rekey_6.$$arity = 2);
      
      Opal.defn(self, '$parse_attribute', TMP_AttributeList_parse_attribute_8 = function $$parse_attribute(index, pos_attrs) {
        var $a, TMP_7, $b, self = this, single_quoted_value = nil, first = nil, name = nil, value = nil, skipped = nil, c = nil, $case = nil, $writer = nil, resolved_name = nil, pos_name = nil;

        if (index == null) {
          index = 0;
        }
        if (pos_attrs == null) {
          pos_attrs = [];
        }
        
        single_quoted_value = false;
        self.$skip_blank();
        if ((first = self.scanner.$peek(1))['$==']("\"")) {
          
          name = self.$parse_attribute_value(self.scanner.$get_byte());
          value = nil;
        } else if (first['$==']("'")) {
          
          name = self.$parse_attribute_value(self.scanner.$get_byte());
          value = nil;
          single_quoted_value = true;
          } else {
          
          name = self.$scan_name();
          skipped = 0;
          c = nil;
          if ($truthy(self.scanner['$eos?']())) {
            if ($truthy(name)) {
              } else {
              return false
            }
            } else {
            
            skipped = ($truthy($a = self.$skip_blank()) ? $a : 0);
            c = self.scanner.$get_byte();
          };
          if ($truthy(($truthy($a = c['$!']()) ? $a : c['$=='](self.delimiter)))) {
            value = nil
          } else if ($truthy(($truthy($a = c['$!=']("=")) ? $a : name['$!']()))) {
            
            name = "" + (name) + ($rb_times(" ", skipped)) + (c) + (self.$scan_to_delimiter());
            value = nil;
            } else {
            
            self.$skip_blank();
            if ($truthy(self.scanner.$peek(1))) {
              if ((c = self.scanner.$get_byte())['$==']("\"")) {
                value = self.$parse_attribute_value(c)
              } else if (c['$==']("'")) {
                
                value = self.$parse_attribute_value(c);
                single_quoted_value = true;
              } else if (c['$=='](self.delimiter)) {
                value = nil
                } else {
                
                value = "" + (c) + (self.$scan_to_delimiter());
                if (value['$==']("None")) {
                  return true};
              }};
          };
        };
        if ($truthy(value)) {
          $case = name;
          if ("options"['$===']($case) || "opts"['$===']($case)) {
          name = "options";
          $send(value.$tr(" ", "").$split(","), 'each', [], (TMP_7 = function(opt){var self = TMP_7.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (opt == null) opt = nil;
          
            $writer = ["" + (opt) + "-option", ""];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
          
          $writer = [name, value];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;}
          else if ("title"['$===']($case)) {
          $writer = [name, value];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else {
          $writer = [name, (function() {if ($truthy(($truthy($a = ($truthy($b = single_quoted_value) ? value['$empty?']()['$!']() : $b)) ? self.block : $a))) {
            
            return self.block.$apply_normal_subs(value);
            } else {
            return value
          }; return nil; })()];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          } else {
          
          resolved_name = (function() {if ($truthy(($truthy($a = ($truthy($b = single_quoted_value) ? name['$empty?']()['$!']() : $b)) ? self.block : $a))) {
            
            return self.block.$apply_normal_subs(name);
            } else {
            return name
          }; return nil; })();
          if ($truthy((pos_name = pos_attrs['$[]'](index)))) {
            
            $writer = [pos_name, resolved_name];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          
          $writer = [$rb_plus(index, 1), resolved_name];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        };
        return true;
      }, TMP_AttributeList_parse_attribute_8.$$arity = -1);
      
      Opal.defn(self, '$parse_attribute_value', TMP_AttributeList_parse_attribute_value_9 = function $$parse_attribute_value(quote) {
        var self = this, value = nil;

        
        if (self.scanner.$peek(1)['$=='](quote)) {
          
          self.scanner.$get_byte();
          return "";};
        if ($truthy((value = self.$scan_to_quote(quote)))) {
          
          self.scanner.$get_byte();
          return value.$gsub(Opal.const_get_relative($nesting, 'EscapedQuoteRxs')['$[]'](quote), quote);
          } else {
          return "" + (quote) + (self.$scan_to_delimiter())
        };
      }, TMP_AttributeList_parse_attribute_value_9.$$arity = 1);
      
      Opal.defn(self, '$skip_blank', TMP_AttributeList_skip_blank_10 = function $$skip_blank() {
        var self = this;

        return self.scanner.$skip(Opal.const_get_relative($nesting, 'BlankRx'))
      }, TMP_AttributeList_skip_blank_10.$$arity = 0);
      
      Opal.defn(self, '$skip_delimiter', TMP_AttributeList_skip_delimiter_11 = function $$skip_delimiter() {
        var self = this;

        return self.scanner.$skip(self.delimiter_skip_pattern)
      }, TMP_AttributeList_skip_delimiter_11.$$arity = 0);
      
      Opal.defn(self, '$scan_name', TMP_AttributeList_scan_name_12 = function $$scan_name() {
        var self = this;

        return self.scanner.$scan(Opal.const_get_relative($nesting, 'NameRx'))
      }, TMP_AttributeList_scan_name_12.$$arity = 0);
      
      Opal.defn(self, '$scan_to_delimiter', TMP_AttributeList_scan_to_delimiter_13 = function $$scan_to_delimiter() {
        var self = this;

        return self.scanner.$scan(self.delimiter_boundary_pattern)
      }, TMP_AttributeList_scan_to_delimiter_13.$$arity = 0);
      return (Opal.defn(self, '$scan_to_quote', TMP_AttributeList_scan_to_quote_14 = function $$scan_to_quote(quote) {
        var self = this;

        return self.scanner.$scan(Opal.const_get_relative($nesting, 'BoundaryRxs')['$[]'](quote))
      }, TMP_AttributeList_scan_to_quote_14.$$arity = 1), nil) && 'scan_to_quote';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/block"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$default=', '$-', '$attr_accessor', '$[]', '$key?', '$==', '$===', '$dup', '$delete', '$[]=', '$lock_in_subs', '$nil_or_empty?', '$normalize_lines_from_string', '$apply_subs', '$*', '$<', '$size', '$empty?', '$rstrip', '$shift', '$pop', '$warn', '$to_s', '$class', '$object_id', '$inspect']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Block(){};
      var self = $Block = $klass($base, $super, 'Block', $Block);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Block_initialize_1, TMP_Block_content_2, TMP_Block_source_3, TMP_Block_to_s_4, $writer = nil;

      def.attributes = def.content_model = def.lines = def.subs = def.blocks = def.context = def.style = nil;
      
      
      $writer = ["simple"];
      $send(Opal.const_set($nesting[0], 'DEFAULT_CONTENT_MODEL', $hash2(["audio", "image", "listing", "literal", "stem", "open", "page_break", "pass", "thematic_break", "video"], {"audio": "empty", "image": "empty", "listing": "verbatim", "literal": "verbatim", "stem": "raw", "open": "compound", "page_break": "empty", "pass": "raw", "thematic_break": "empty", "video": "empty"})), 'default=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.alias(self, "blockname", "context");
      self.$attr_accessor("lines");
      
      Opal.defn(self, '$initialize', TMP_Block_initialize_1 = function $$initialize(parent, context, opts) {
        var $a, self = this, $iter = TMP_Block_initialize_1.$$p, $yield = $iter || nil, subs = nil, $writer = nil, raw_source = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_Block_initialize_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Block_initialize_1, false), $zuper, $iter);
        self.content_model = ($truthy($a = opts['$[]']("content_model")) ? $a : Opal.const_get_relative($nesting, 'DEFAULT_CONTENT_MODEL')['$[]'](context));
        if ($truthy(opts['$key?']("subs"))) {
          if ($truthy((subs = opts['$[]']("subs")))) {
            
            if (subs['$==']("default")) {
              self.default_subs = opts['$[]']("default_subs")
            } else if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](subs))) {
              
              self.default_subs = subs.$dup();
              self.attributes.$delete("subs");
              } else {
              
              self.default_subs = nil;
              
              $writer = ["subs", "" + (subs)];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            self.$lock_in_subs();
            } else {
            
            self.subs = [];
            self.default_subs = [];
            self.attributes.$delete("subs");
          }
          } else {
          
          self.subs = [];
          self.default_subs = nil;
        };
        if ($truthy((raw_source = opts['$[]']("source"))['$nil_or_empty?']())) {
          return (self.lines = [])
        } else if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](raw_source))) {
          return (self.lines = Opal.const_get_relative($nesting, 'Helpers').$normalize_lines_from_string(raw_source))
          } else {
          return (self.lines = raw_source.$dup())
        };
      }, TMP_Block_initialize_1.$$arity = -3);
      
      Opal.defn(self, '$content', TMP_Block_content_2 = function $$content() {
        var $a, $b, self = this, $iter = TMP_Block_content_2.$$p, $yield = $iter || nil, $case = nil, result = nil, first = nil, last = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Block_content_2.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return (function() {$case = self.content_model;
        if ("compound"['$===']($case)) {return $send(self, Opal.find_super_dispatcher(self, 'content', TMP_Block_content_2, false), $zuper, $iter)}
        else if ("simple"['$===']($case)) {return self.$apply_subs($rb_times(self.lines, Opal.const_get_relative($nesting, 'EOL')), self.subs)}
        else if ("verbatim"['$===']($case) || "raw"['$===']($case)) {
        result = self.$apply_subs(self.lines, self.subs);
        if ($truthy($rb_lt(result.$size(), 2))) {
          return result['$[]'](0)
          } else {
          
          while ($truthy(($truthy($b = (first = result['$[]'](0))) ? first.$rstrip()['$empty?']() : $b))) {
            result.$shift()
          };
          while ($truthy(($truthy($b = (last = result['$[]'](-1))) ? last.$rstrip()['$empty?']() : $b))) {
            result.$pop()
          };
          return $rb_times(result, Opal.const_get_relative($nesting, 'EOL'));
        };}
        else {
        if (self.content_model['$==']("empty")) {
          } else {
          self.$warn("" + "Unknown content model '" + (self.content_model) + "' for block: " + (self.$to_s()))
        };
        return nil;}})()
      }, TMP_Block_content_2.$$arity = 0);
      
      Opal.defn(self, '$source', TMP_Block_source_3 = function $$source() {
        var self = this;

        return $rb_times(self.lines, Opal.const_get_relative($nesting, 'EOL'))
      }, TMP_Block_source_3.$$arity = 0);
      return (Opal.defn(self, '$to_s', TMP_Block_to_s_4 = function $$to_s() {
        var self = this, content_summary = nil;

        
        content_summary = (function() {if (self.content_model['$==']("compound")) {
          return "" + "blocks: " + (self.blocks.$size())
          } else {
          return "" + "lines: " + (self.lines.$size())
        }; return nil; })();
        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {context: " + (self.context.$inspect()) + ", content_model: " + (self.content_model.$inspect()) + ", style: " + (self.style.$inspect()) + ", " + (content_summary) + "}>";
      }, TMP_Block_to_s_4.$$arity = 0), nil) && 'to_s';
    })($nesting[0], Opal.const_get_relative($nesting, 'AbstractBlock'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/callouts"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$next_list', '$<<', '$current_list', '$to_i', '$generate_next_callout_id', '$+', '$<=', '$size', '$[]', '$-', '$chop', '$join', '$map', '$==', '$<', '$generate_callout_id']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Callouts(){};
      var self = $Callouts = $klass($base, $super, 'Callouts', $Callouts);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Callouts_initialize_1, TMP_Callouts_register_2, TMP_Callouts_read_next_id_3, TMP_Callouts_callout_ids_5, TMP_Callouts_current_list_6, TMP_Callouts_next_list_7, TMP_Callouts_rewind_8, TMP_Callouts_generate_next_callout_id_9, TMP_Callouts_generate_callout_id_10;

      def.co_index = def.lists = def.list_index = nil;
      
      
      Opal.defn(self, '$initialize', TMP_Callouts_initialize_1 = function $$initialize() {
        var self = this;

        
        self.lists = [];
        self.list_index = 0;
        return self.$next_list();
      }, TMP_Callouts_initialize_1.$$arity = 0);
      
      Opal.defn(self, '$register', TMP_Callouts_register_2 = function $$register(li_ordinal) {
        var self = this, id = nil;

        
        self.$current_list()['$<<']($hash2(["ordinal", "id"], {"ordinal": li_ordinal.$to_i(), "id": (id = self.$generate_next_callout_id())}));
        self.co_index = $rb_plus(self.co_index, 1);
        return id;
      }, TMP_Callouts_register_2.$$arity = 1);
      
      Opal.defn(self, '$read_next_id', TMP_Callouts_read_next_id_3 = function $$read_next_id() {
        var self = this, id = nil, list = nil;

        
        id = nil;
        list = self.$current_list();
        if ($truthy($rb_le(self.co_index, list.$size()))) {
          id = list['$[]']($rb_minus(self.co_index, 1))['$[]']("id")};
        self.co_index = $rb_plus(self.co_index, 1);
        return id;
      }, TMP_Callouts_read_next_id_3.$$arity = 0);
      
      Opal.defn(self, '$callout_ids', TMP_Callouts_callout_ids_5 = function $$callout_ids(li_ordinal) {
        var TMP_4, self = this;

        return $send(self.$current_list(), 'map', [], (TMP_4 = function(element){var self = TMP_4.$$s || this;
if (element == null) element = nil;
        if (element['$[]']("ordinal")['$=='](li_ordinal)) {
            return "" + (element['$[]']("id")) + " "
            } else {
            return nil
          }}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4)).$join().$chop()
      }, TMP_Callouts_callout_ids_5.$$arity = 1);
      
      Opal.defn(self, '$current_list', TMP_Callouts_current_list_6 = function $$current_list() {
        var self = this;

        return self.lists['$[]']($rb_minus(self.list_index, 1))
      }, TMP_Callouts_current_list_6.$$arity = 0);
      
      Opal.defn(self, '$next_list', TMP_Callouts_next_list_7 = function $$next_list() {
        var self = this;

        
        self.list_index = $rb_plus(self.list_index, 1);
        if ($truthy($rb_lt(self.lists.$size(), self.list_index))) {
          self.lists['$<<']([])};
        self.co_index = 1;
        return nil;
      }, TMP_Callouts_next_list_7.$$arity = 0);
      
      Opal.defn(self, '$rewind', TMP_Callouts_rewind_8 = function $$rewind() {
        var self = this;

        
        self.list_index = 1;
        self.co_index = 1;
        return nil;
      }, TMP_Callouts_rewind_8.$$arity = 0);
      
      Opal.defn(self, '$generate_next_callout_id', TMP_Callouts_generate_next_callout_id_9 = function $$generate_next_callout_id() {
        var self = this;

        return self.$generate_callout_id(self.list_index, self.co_index)
      }, TMP_Callouts_generate_next_callout_id_9.$$arity = 0);
      return (Opal.defn(self, '$generate_callout_id', TMP_Callouts_generate_callout_id_10 = function $$generate_callout_id(list_index, co_index) {
        var self = this;

        return "" + "CO" + (list_index) + "-" + (co_index)
      }, TMP_Callouts_generate_callout_id_10.$$arity = 2), nil) && 'generate_callout_id';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/document"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$new', '$attr_reader', '$nil?', '$<<', '$[]', '$[]=', '$-', '$include?', '$strip', '$tr_s', '$gsub', '$empty?', '$!', '$rpartition', '$delete', '$base_dir', '$inject', '$references', '$==', '$callouts', '$dup', '$attributes', '$each', '$safe', '$compat_mode', '$sourcemap', '$converter', '$extensions', '$start_with?', '$end_with?', '$chop', '$downcase', '$===', '$const_get', '$upcase', '$to_s', '$key?', '$freeze', '$attribute_undefined', '$attribute_missing', '$find', '$constants', '$expand_path', '$pwd', '$>=', '$+', '$length', '$fetch', '$abs', '$to_i', '$delete_if', '$parse', '$restore_attributes', '$update_backend_attributes', '$utc', '$at', '$now', '$strftime', '$join', '$build_registry', '$to_proc', '$activate', '$preprocessors?', '$preprocessors', '$process_method', '$treeprocessors?', '$treeprocessors', '$!=', '$nil_or_empty?', '$nextval', '$counter', '$save_to', '$chr', '$ord', '$source', '$source_lines', '$title=', '$title', '$first_section', '$title?', '$merge', '$has_header?', '$context', '$assign_index', '$clear_playback_attributes', '$save_attributes', '$attribute_locked?', '$doctitle', '$has_key?', '$rewind', '$name', '$negate', '$value', '$limit', '$apply_attribute_value_subs', '$delete?', '$update_doctype_attributes', '$match', '$resolve_pass_subs', '$apply_subs', '$apply_header_subs', '$create_converter', '$basebackend', '$outfilesuffix', '$filetype', '$sub', '$backend', '$default', '$create', '$fail', '$doctype', '$content_model', '$content', '$convert', '$postprocessors?', '$postprocessors', '$write', '$respond_to?', '$chomp', '$open', '$map', '$split', '$&', '$normalize_system_path', '$read_asset', '$resolve_docinfo_subs', '$sub_attributes', '$docinfo_processors?', '$*', '$compact', '$resolve_subs', '$docinfo_processors', '$class', '$object_id', '$inspect', '$size']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Document(){};
      var self = $Document = $klass($base, $super, 'Document', $Document);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Document_initialize_7, TMP_Document_parse_15, TMP_Document_counter_16, TMP_Document_counter_increment_17, TMP_Document_nextval_18, TMP_Document_register_19, TMP_Document_footnotes$q_20, TMP_Document_footnotes_21, TMP_Document_nested$q_22, TMP_Document_embedded$q_23, TMP_Document_extensions$q_24, TMP_Document_source_25, TMP_Document_source_lines_26, TMP_Document_doctype_27, TMP_Document_backend_28, TMP_Document_basebackend$q_29, TMP_Document_title_30, TMP_Document_title$eq_31, TMP_Document_doctitle_32, TMP_Document_author_33, TMP_Document_revdate_34, TMP_Document_notitle_35, TMP_Document_noheader_36, TMP_Document_nofooter_37, TMP_Document_first_section_39, TMP_Document_has_header$q_40, TMP_Document_$lt$lt_41, TMP_Document_finalize_header_42, TMP_Document_save_attributes_44, TMP_Document_restore_attributes_45, TMP_Document_clear_playback_attributes_46, TMP_Document_playback_attributes_48, TMP_Document_set_attribute_49, TMP_Document_delete_attribute_50, TMP_Document_attribute_locked$q_51, TMP_Document_apply_attribute_value_subs_52, TMP_Document_update_backend_attributes_53, TMP_Document_update_doctype_attributes_54, TMP_Document_create_converter_55, TMP_Document_convert_57, TMP_Document_write_59, TMP_Document_content_60, TMP_Document_docinfo_62, TMP_Document_resolve_docinfo_subs_63, TMP_Document_docinfo_processors$q_64, TMP_Document_to_s_65;

      def.attributes = def.safe = def.reader = def.base_dir = def.parsed = def.parent_document = def.extensions = def.options = def.counters = def.references = def.doctype = def.backend = def.header = def.blocks = def.attributes_modified = def.id = def.callouts = def.header_attributes = def.max_attribute_value_size = def.attribute_overrides = def.converter = def.outfilesuffix = def.docinfo_processor_extensions = def.document = nil;
      
      Opal.const_set($nesting[0], 'Footnote', Opal.const_get_qualified('::', 'Struct').$new("index", "id", "text"));
      (function($base, $super, $parent_nesting) {
        function $AttributeEntry(){};
        var self = $AttributeEntry = $klass($base, $super, 'AttributeEntry', $AttributeEntry);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AttributeEntry_initialize_1, TMP_AttributeEntry_save_to_2;

        
        self.$attr_reader("name", "value", "negate");
        
        Opal.defn(self, '$initialize', TMP_AttributeEntry_initialize_1 = function $$initialize(name, value, negate) {
          var self = this;

          if (negate == null) {
            negate = nil;
          }
          
          self.name = name;
          self.value = value;
          return (self.negate = (function() {if ($truthy(negate['$nil?']())) {
            return value['$nil?']()
            } else {
            return negate
          }; return nil; })());
        }, TMP_AttributeEntry_initialize_1.$$arity = -3);
        return (Opal.defn(self, '$save_to', TMP_AttributeEntry_save_to_2 = function $$save_to(block_attributes) {
          var $a, self = this, $writer = nil;

          return ($truthy($a = block_attributes['$[]']("attribute_entries")) ? $a : (($writer = ["attribute_entries", []]), $send(block_attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](self)
        }, TMP_AttributeEntry_save_to_2.$$arity = 1), nil) && 'save_to';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        function $Title(){};
        var self = $Title = $klass($base, $super, 'Title', $Title);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Title_initialize_3, TMP_Title_sanitized$q_4, TMP_Title_subtitle$q_5, TMP_Title_to_s_6;

        def.sanitized = def.subtitle = def.combined = nil;
        
        self.$attr_reader("main");
        Opal.alias(self, "title", "main");
        self.$attr_reader("subtitle");
        self.$attr_reader("combined");
        
        Opal.defn(self, '$initialize', TMP_Title_initialize_3 = function $$initialize(val, opts) {
          var $a, $b, self = this, sep = nil, _ = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          
          if ($truthy(($truthy($a = (self.sanitized = opts['$[]']("sanitize"))) ? val['$include?']("<") : $a))) {
            val = val.$gsub(Opal.const_get_relative($nesting, 'XmlSanitizeRx'), "").$tr_s(" ", " ").$strip()};
          if ($truthy(($truthy($a = (sep = ($truthy($b = opts['$[]']("separator")) ? $b : ":"))['$empty?']()) ? $a : val['$include?']((sep = "" + (sep) + " "))['$!']()))) {
            
            self.main = val;
            self.subtitle = nil;
            } else {
            $b = val.$rpartition(sep), $a = Opal.to_ary($b), (self.main = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (self.subtitle = ($a[2] == null ? nil : $a[2])), $b
          };
          return (self.combined = val);
        }, TMP_Title_initialize_3.$$arity = -2);
        
        Opal.defn(self, '$sanitized?', TMP_Title_sanitized$q_4 = function() {
          var self = this;

          return self.sanitized
        }, TMP_Title_sanitized$q_4.$$arity = 0);
        
        Opal.defn(self, '$subtitle?', TMP_Title_subtitle$q_5 = function() {
          var self = this;

          return self.subtitle['$!']()['$!']()
        }, TMP_Title_subtitle$q_5.$$arity = 0);
        return (Opal.defn(self, '$to_s', TMP_Title_to_s_6 = function $$to_s() {
          var self = this;

          return self.combined
        }, TMP_Title_to_s_6.$$arity = 0), nil) && 'to_s';
      })($nesting[0], null, $nesting);
      self.$attr_reader("safe");
      self.$attr_reader("compat_mode");
      self.$attr_reader("sourcemap");
      self.$attr_reader("references");
      self.$attr_reader("counters");
      self.$attr_reader("callouts");
      self.$attr_reader("header");
      self.$attr_reader("base_dir");
      self.$attr_reader("options");
      self.$attr_reader("outfilesuffix");
      self.$attr_reader("parent_document");
      self.$attr_reader("reader");
      self.$attr_reader("converter");
      self.$attr_reader("extensions");
      
      Opal.defn(self, '$initialize', TMP_Document_initialize_7 = function $$initialize(data, options) {
        var $a, TMP_8, TMP_9, TMP_10, $b, $c, TMP_11, TMP_12, $d, self = this, $iter = TMP_Document_initialize_7.$$p, $yield = $iter || nil, parent_doc = nil, $writer = nil, attr_overrides = nil, initialize_extensions = nil, safe_mode = nil, header_footer = nil, attrs = nil, safe_mode_name = nil, backend_val = nil, doctype_val = nil, val = nil, now = nil, localdate = nil, localtime = nil, registry = nil, ext_block = nil;

        if (data == null) {
          data = nil;
        }
        if (options == null) {
          options = $hash2([], {});
        }
        if ($iter) TMP_Document_initialize_7.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Document_initialize_7, false), [self, "document"], null);
        if ($truthy((parent_doc = options.$delete("parent")))) {
          
          self.parent_document = parent_doc;
          ($truthy($a = options['$[]']("base_dir")) ? $a : (($writer = ["base_dir", parent_doc.$base_dir()]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          self.references = $send(parent_doc.$references(), 'inject', [$hash2([], {})], (TMP_8 = function(accum, $b){var self = TMP_8.$$s || this, $b_args, key, ref;

            if ($b == null) {
              $b = nil;
            }
            $b = Opal.to_ary($b);
            $b_args = Opal.slice.call($b, 0, $b.length);
            key = $b_args.splice(0,1)[0];
            if (key == null) {
              key = nil;
            }
            ref = $b_args.splice(0,1)[0];
            if (ref == null) {
              ref = nil;
            }if (accum == null) accum = nil;
          
            if (key['$==']("footnotes")) {
              
              $writer = ["footnotes", []];
              $send(accum, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              } else {
              
              $writer = [key, ref];
              $send(accum, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            return accum;}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8.$$has_top_level_mlhs_arg = true, TMP_8));
          self.callouts = parent_doc.$callouts();
          attr_overrides = parent_doc.$attributes().$dup();
          $send(["doctype", "compat-mode", "toc", "toc-placement", "toc-position"], 'each', [], (TMP_9 = function(key){var self = TMP_9.$$s || this;
if (key == null) key = nil;
          return attr_overrides.$delete(key)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
          self.attribute_overrides = attr_overrides;
          self.safe = parent_doc.$safe();
          self.compat_mode = parent_doc.$compat_mode();
          self.sourcemap = parent_doc.$sourcemap();
          self.converter = parent_doc.$converter();
          initialize_extensions = false;
          self.extensions = parent_doc.$extensions();
          } else {
          
          self.parent_document = nil;
          self.references = $hash2(["ids", "footnotes", "links", "images", "indexterms", "includes"], {"ids": $hash2([], {}), "footnotes": [], "links": [], "images": [], "indexterms": [], "includes": Opal.const_get_qualified('::', 'Set').$new()});
          self.callouts = Opal.const_get_relative($nesting, 'Callouts').$new();
          attr_overrides = $hash2([], {});
          $send(($truthy($a = options['$[]']("attributes")) ? $a : $hash2([], {})), 'each', [], (TMP_10 = function(key, value){var self = TMP_10.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
          
            if ($truthy(key['$start_with?']("!"))) {
              
              key = key['$[]']($range(1, -1, false));
              value = nil;
            } else if ($truthy(key['$end_with?']("!"))) {
              
              key = key.$chop();
              value = nil;};
            
            $writer = [key.$downcase(), value];
            $send(attr_overrides, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10));
          self.attribute_overrides = attr_overrides;
          if ($truthy((safe_mode = options['$[]']("safe"))['$!']())) {
            self.safe = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE')
          } else if ($truthy(Opal.const_get_qualified('::', 'Integer')['$==='](safe_mode))) {
            self.safe = safe_mode
            } else {
            
            try {
              self.safe = Opal.const_get_relative($nesting, 'SafeMode').$const_get(safe_mode.$to_s().$upcase())
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  self.safe = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE')
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          };
          self.compat_mode = attr_overrides['$key?']("compat-mode");
          self.sourcemap = options['$[]']("sourcemap");
          self.converter = nil;
          initialize_extensions = (($b = Opal.const_get_qualified('::', 'Asciidoctor', 'skip_raise')) && ($a = Opal.const_get_qualified($b, 'Extensions', 'skip_raise')) ? 'constant' : nil);
          self.extensions = nil;
        };
        self.parsed = false;
        self.header = nil;
        self.counters = $hash2([], {});
        self.attributes_modified = Opal.const_get_qualified('::', 'Set').$new();
        self.options = options;
        self.docinfo_processor_extensions = $hash2([], {});
        header_footer = ($truthy($c = options['$[]']("header_footer")) ? $c : (($writer = ["header_footer", false]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        options.$freeze();
        attrs = self.attributes;
        
        $writer = ["sectids", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(header_footer)) {
          } else {
          
          $writer = ["notitle", ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        
        $writer = ["toc-placement", "auto"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["stylesheet", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["webfonts", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(header_footer)) {
          
          $writer = ["copycss", ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = ["prewrap", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["attribute-undefined", Opal.const_get_relative($nesting, 'Compliance').$attribute_undefined()];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["attribute-missing", Opal.const_get_relative($nesting, 'Compliance').$attribute_missing()];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["iconfont-remote", ""];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["caution-caption", "Caution"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["important-caption", "Important"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["note-caption", "Note"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["tip-caption", "Tip"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["warning-caption", "Warning"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["appendix-caption", "Appendix"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["example-caption", "Example"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["figure-caption", "Figure"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["table-caption", "Table"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["toc-title", "Table of Contents"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["manname-title", "NAME"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["untitled-label", "Untitled"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["version-label", "Version"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["last-update-label", "Last updated"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["asciidoctor", ""];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["asciidoctor-version", Opal.const_get_relative($nesting, 'VERSION')];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        safe_mode_name = $send(Opal.const_get_relative($nesting, 'SafeMode').$constants(), 'find', [], (TMP_11 = function(l){var self = TMP_11.$$s || this;
          if (self.safe == null) self.safe = nil;
if (l == null) l = nil;
        return Opal.const_get_relative($nesting, 'SafeMode').$const_get(l)['$=='](self.safe)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11)).$to_s().$downcase();
        
        $writer = ["safe-mode-name", safe_mode_name];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["" + "safe-mode-" + (safe_mode_name), ""];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["safe-mode-level", self.safe];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["embedded", (function() {if ($truthy(header_footer)) {
          return nil
          } else {
          return ""
        }; return nil; })()];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        ($truthy($c = attr_overrides['$[]']("max-include-depth")) ? $c : (($writer = ["max-include-depth", 64]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        ($truthy($c = attr_overrides['$[]']("allow-uri-read")) ? $c : (($writer = ["allow-uri-read", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        
        $writer = ["user-home", Opal.const_get_relative($nesting, 'USER_HOME')];
        $send(attr_overrides, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(attr_overrides['$key?']("numbered"))) {
          
          $writer = ["sectnums", attr_overrides.$delete("numbered")];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(options['$[]']("base_dir"))) {
          self.base_dir = (($writer = ["docdir", Opal.const_get_qualified('::', 'File').$expand_path(options['$[]']("base_dir"))]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
        } else if ($truthy(attr_overrides['$[]']("docdir"))) {
          self.base_dir = (($writer = ["docdir", Opal.const_get_qualified('::', 'File').$expand_path(attr_overrides['$[]']("docdir"))]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
          } else {
          self.base_dir = (($writer = ["docdir", Opal.const_get_qualified('::', 'File').$expand_path(Opal.const_get_qualified('::', 'Dir').$pwd())]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
        };
        if ($truthy((backend_val = options['$[]']("backend")))) {
          
          $writer = ["backend", "" + (backend_val)];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy((doctype_val = options['$[]']("doctype")))) {
          
          $writer = ["doctype", "" + (doctype_val)];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy($rb_ge(self.safe, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SERVER')))) {
          
          ($truthy($c = attr_overrides['$[]']("copycss")) ? $c : (($writer = ["copycss", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attr_overrides['$[]']("source-highlighter")) ? $c : (($writer = ["source-highlighter", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attr_overrides['$[]']("backend")) ? $c : (($writer = ["backend", Opal.const_get_relative($nesting, 'DEFAULT_BACKEND')]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          if ($truthy(($truthy($c = parent_doc['$!']()) ? attr_overrides['$key?']("docfile") : $c))) {
            
            $writer = ["docfile", attr_overrides['$[]']("docfile")['$[]'](Opal.Range.$new($rb_plus(attr_overrides['$[]']("docdir").$length(), 1), -1, false))];
            $send(attr_overrides, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          
          $writer = ["docdir", ""];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["user-home", "."];
          $send(attr_overrides, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy($rb_ge(self.safe, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE')))) {
            
            if ($truthy(attr_overrides['$key?']("max-attribute-value-size"))) {
              } else {
              
              $writer = ["max-attribute-value-size", 4096];
              $send(attr_overrides, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            if ($truthy(attr_overrides.$fetch("linkcss", "")['$nil?']())) {
              } else {
              
              $writer = ["linkcss", ""];
              $send(attr_overrides, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            ($truthy($c = attr_overrides['$[]']("icons")) ? $c : (($writer = ["icons", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));};};
        self.max_attribute_value_size = (function() {if ($truthy((val = ($truthy($c = attr_overrides['$[]']("max-attribute-value-size")) ? $c : (($writer = ["max-attribute-value-size", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))))) {
          return val.$to_i().$abs()
          } else {
          return nil
        }; return nil; })();
        $send(attr_overrides, 'delete_if', [], (TMP_12 = function(key, val){var self = TMP_12.$$s || this, $d, verdict = nil;
if (key == null) key = nil;if (val == null) val = nil;
        
          verdict = false;
          if ($truthy(val['$nil?']())) {
            attrs.$delete(key)
            } else {
            
            if ($truthy(($truthy($d = Opal.const_get_qualified('::', 'String')['$==='](val)) ? val['$end_with?']("@") : $d))) {
              
              val = val.$chop();
              verdict = true;};
            
            $writer = [key, val];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          };
          return verdict;}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12));
        if ($truthy(parent_doc)) {
          
          ($truthy($c = attrs['$[]']("doctype")) ? $c : (($writer = ["doctype", Opal.const_get_relative($nesting, 'DEFAULT_DOCTYPE')]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          self.reader = Opal.const_get_relative($nesting, 'Reader').$new(data, options['$[]']("cursor"));
          Opal.const_get_relative($nesting, 'Parser').$parse(self.reader, self);
          self.$restore_attributes();
          return (self.parsed = true);
          } else {
          
          if (($truthy($c = attrs['$[]']("backend")) ? $c : (($writer = ["backend", Opal.const_get_relative($nesting, 'DEFAULT_BACKEND')]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$==']("manpage")) {
            
            $writer = ["doctype", (($writer = ["doctype", "manpage"]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            ($truthy($c = attrs['$[]']("doctype")) ? $c : (($writer = ["doctype", Opal.const_get_relative($nesting, 'DEFAULT_DOCTYPE')]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
          };
          self.$update_backend_attributes(attrs['$[]']("backend"), true);
          now = (function() {if ($truthy(Opal.const_get_qualified('::', 'ENV')['$[]']("SOURCE_DATE_EPOCH"))) {
            return Opal.const_get_qualified('::', 'Time').$at(Opal.const_get_qualified('::', 'ENV')['$[]']("SOURCE_DATE_EPOCH").$to_i()).$utc()
            } else {
            return Opal.const_get_qualified('::', 'Time').$now()
          }; return nil; })();
          localdate = ($truthy($c = attrs['$[]']("localdate")) ? $c : (($writer = ["localdate", now.$strftime("%Y-%m-%d")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          if ($truthy((localtime = attrs['$[]']("localtime")))) {
            } else {
            
            try {
              localtime = (($writer = ["localtime", now.$strftime("%H:%M:%S %Z")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  localtime = (($writer = ["localtime", now.$strftime("%H:%M:%S %z")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          };
          ($truthy($c = attrs['$[]']("localdatetime")) ? $c : (($writer = ["localdatetime", "" + (localdate) + " " + (localtime)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("docdate")) ? $c : (($writer = ["docdate", localdate]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("doctime")) ? $c : (($writer = ["doctime", localtime]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("docdatetime")) ? $c : (($writer = ["docdatetime", "" + (localdate) + " " + (localtime)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("stylesdir")) ? $c : (($writer = ["stylesdir", "."]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          ($truthy($c = attrs['$[]']("iconsdir")) ? $c : (($writer = ["iconsdir", Opal.const_get_qualified('::', 'File').$join(attrs.$fetch("imagesdir", "./images"), "icons")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          if ($truthy(initialize_extensions)) {
            
            if ($truthy((registry = options['$[]']("extensions_registry")))) {
              if ($truthy(($truthy($c = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Extensions'), 'Registry')['$==='](registry)) ? $c : ($truthy($d = Opal.const_get_qualified('::', 'RUBY_ENGINE_JRUBY')) ? Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified('::', 'AsciidoctorJ'), 'Extensions'), 'ExtensionRegistry')['$==='](registry) : $d)))) {
                } else {
                registry = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Extensions'), 'Registry').$new()
              }
            } else if ($truthy(Opal.const_get_qualified('::', 'Proc')['$===']((ext_block = options['$[]']("extensions"))))) {
              registry = $send(Opal.const_get_relative($nesting, 'Extensions'), 'build_registry', [], ext_block.$to_proc())
              } else {
              registry = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Extensions'), 'Registry').$new()
            };
            self.extensions = registry.$activate(self);};
          return (self.reader = Opal.const_get_relative($nesting, 'PreprocessorReader').$new(self, data, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Reader'), 'Cursor').$new(attrs['$[]']("docfile"), self.base_dir)));
        };
      }, TMP_Document_initialize_7.$$arity = -1);
      
      Opal.defn(self, '$parse', TMP_Document_parse_15 = function $$parse(data) {
        var $a, TMP_13, TMP_14, self = this, doc = nil, exts = nil;

        if (data == null) {
          data = nil;
        }
        if ($truthy(self.parsed)) {
          return self
          } else {
          
          doc = self;
          if ($truthy(data)) {
            self.reader = Opal.const_get_relative($nesting, 'PreprocessorReader').$new(doc, data, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Reader'), 'Cursor').$new(self.attributes['$[]']("docfile"), self.base_dir))};
          if ($truthy(($truthy($a = (exts = (function() {if ($truthy(self.parent_document)) {
            return nil
            } else {
            return self.extensions
          }; return nil; })())) ? exts['$preprocessors?']() : $a))) {
            $send(exts.$preprocessors(), 'each', [], (TMP_13 = function(ext){var self = TMP_13.$$s || this, $b;
              if (self.reader == null) self.reader = nil;
if (ext == null) ext = nil;
            return (self.reader = ($truthy($b = ext.$process_method()['$[]'](doc, self.reader)) ? $b : self.reader))}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))};
          Opal.const_get_relative($nesting, 'Parser').$parse(self.reader, doc, $hash2(["header_only"], {"header_only": self.options['$[]']("parse_header_only")['$!']()['$!']()}));
          self.$restore_attributes();
          if ($truthy(($truthy($a = exts) ? exts['$treeprocessors?']() : $a))) {
            $send(exts.$treeprocessors(), 'each', [], (TMP_14 = function(ext){var self = TMP_14.$$s || this, $b, $c, result = nil;
if (ext == null) ext = nil;
            if ($truthy(($truthy($b = ($truthy($c = (result = ext.$process_method()['$[]'](doc))) ? Opal.const_get_relative($nesting, 'Document')['$==='](result) : $c)) ? result['$!='](doc) : $b))) {
                return (doc = result)
                } else {
                return nil
              }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))};
          self.parsed = true;
          return doc;
        }
      }, TMP_Document_parse_15.$$arity = -1);
      
      Opal.defn(self, '$counter', TMP_Document_counter_16 = function $$counter(name, seed) {
        var $a, self = this, attr_is_seed = nil, attr_val = nil, $writer = nil;

        if (seed == null) {
          seed = nil;
        }
        
        if ($truthy(($truthy($a = (attr_is_seed = (attr_val = self.attributes['$[]'](name))['$nil_or_empty?']()['$!']())) ? self.counters['$key?'](name) : $a))) {
          
          $writer = [name, self.$nextval(attr_val)];
          $send(self.counters, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          if ($truthy(seed['$nil?']())) {
            seed = self.$nextval((function() {if ($truthy(attr_is_seed)) {
              return attr_val
              } else {
              return 0
            }; return nil; })())
          } else if (seed.$to_i().$to_s()['$=='](seed)) {
            seed = seed.$to_i()};
          
          $writer = [name, seed];
          $send(self.counters, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        };
        
        
        $writer = [name, self.counters['$[]'](name)];
        $send(self.attributes, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;;
      }, TMP_Document_counter_16.$$arity = -2);
      
      Opal.defn(self, '$counter_increment', TMP_Document_counter_increment_17 = function $$counter_increment(counter_name, block) {
        var self = this, val = nil;

        
        val = self.$counter(counter_name);
        Opal.const_get_relative($nesting, 'AttributeEntry').$new(counter_name, val).$save_to(block.$attributes());
        return val;
      }, TMP_Document_counter_increment_17.$$arity = 2);
      
      Opal.defn(self, '$nextval', TMP_Document_nextval_18 = function $$nextval(current) {
        var self = this, intval = nil;

        if ($truthy(Opal.const_get_qualified('::', 'Integer')['$==='](current))) {
          return $rb_plus(current, 1)
          } else {
          
          intval = current.$to_i();
          if ($truthy(intval.$to_s()['$!='](current.$to_s()))) {
            return $rb_plus(current['$[]'](0).$ord(), 1).$chr()
            } else {
            return $rb_plus(intval, 1)
          };
        }
      }, TMP_Document_nextval_18.$$arity = 1);
      
      Opal.defn(self, '$register', TMP_Document_register_19 = function $$register(type, value, force) {
        var $a, self = this, $case = nil, id = nil, reftext = nil, $writer = nil, $logical_op_recvr_tmp_1 = nil;

        if (force == null) {
          force = false;
        }
        return (function() {$case = type;
        if ("ids"['$===']($case)) {
        $a = [].concat(Opal.to_a(value)), (id = ($a[0] == null ? nil : $a[0])), (reftext = ($a[1] == null ? nil : $a[1])), $a;
        reftext = ($truthy($a = reftext) ? $a : $rb_plus($rb_plus("[", id), "]"));
        if ($truthy(force)) {
          
          $writer = [id, reftext];
          $send(self.references['$[]']("ids"), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $logical_op_recvr_tmp_1 = self.references['$[]']("ids");
          return ($truthy($a = $logical_op_recvr_tmp_1['$[]'](id)) ? $a : (($writer = [id, reftext]), $send($logical_op_recvr_tmp_1, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        };}
        else if ("footnotes"['$===']($case) || "indexterms"['$===']($case)) {return self.references['$[]'](type)['$<<'](value)}
        else {if ($truthy(self.options['$[]']("catalog_assets"))) {
          return self.references['$[]'](type)['$<<'](value)
          } else {
          return nil
        }}})()
      }, TMP_Document_register_19.$$arity = -3);
      
      Opal.defn(self, '$footnotes?', TMP_Document_footnotes$q_20 = function() {
        var self = this;

        return self.references['$[]']("footnotes")['$empty?']()['$!']()
      }, TMP_Document_footnotes$q_20.$$arity = 0);
      
      Opal.defn(self, '$footnotes', TMP_Document_footnotes_21 = function $$footnotes() {
        var self = this;

        return self.references['$[]']("footnotes")
      }, TMP_Document_footnotes_21.$$arity = 0);
      
      Opal.defn(self, '$nested?', TMP_Document_nested$q_22 = function() {
        var self = this;

        return self.parent_document['$!']()['$!']()
      }, TMP_Document_nested$q_22.$$arity = 0);
      
      Opal.defn(self, '$embedded?', TMP_Document_embedded$q_23 = function() {
        var self = this;

        return self.attributes['$key?']("embedded")
      }, TMP_Document_embedded$q_23.$$arity = 0);
      
      Opal.defn(self, '$extensions?', TMP_Document_extensions$q_24 = function() {
        var self = this;

        return self.extensions['$!']()['$!']()
      }, TMP_Document_extensions$q_24.$$arity = 0);
      
      Opal.defn(self, '$source', TMP_Document_source_25 = function $$source() {
        var self = this;

        if ($truthy(self.reader)) {
          return self.reader.$source()
          } else {
          return nil
        }
      }, TMP_Document_source_25.$$arity = 0);
      
      Opal.defn(self, '$source_lines', TMP_Document_source_lines_26 = function $$source_lines() {
        var self = this;

        if ($truthy(self.reader)) {
          return self.reader.$source_lines()
          } else {
          return nil
        }
      }, TMP_Document_source_lines_26.$$arity = 0);
      
      Opal.defn(self, '$doctype', TMP_Document_doctype_27 = function $$doctype() {
        var $a, self = this;

        return (self.doctype = ($truthy($a = self.doctype) ? $a : self.attributes['$[]']("doctype")))
      }, TMP_Document_doctype_27.$$arity = 0);
      
      Opal.defn(self, '$backend', TMP_Document_backend_28 = function $$backend() {
        var $a, self = this;

        return (self.backend = ($truthy($a = self.backend) ? $a : self.attributes['$[]']("backend")))
      }, TMP_Document_backend_28.$$arity = 0);
      
      Opal.defn(self, '$basebackend?', TMP_Document_basebackend$q_29 = function(base) {
        var self = this;

        return self.attributes['$[]']("basebackend")['$=='](base)
      }, TMP_Document_basebackend$q_29.$$arity = 1);
      
      Opal.defn(self, '$title', TMP_Document_title_30 = function $$title() {
        var self = this;

        return self.attributes['$[]']("title")
      }, TMP_Document_title_30.$$arity = 0);
      
      Opal.defn(self, '$title=', TMP_Document_title$eq_31 = function(title) {
        var $a, self = this, $writer = nil;

        
        self.header = ($truthy($a = self.header) ? $a : Opal.const_get_relative($nesting, 'Section').$new(self, 0));
        
        $writer = [title];
        $send(self.header, 'title=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_Document_title$eq_31.$$arity = 1);
      
      Opal.defn(self, '$doctitle', TMP_Document_doctitle_32 = function $$doctitle(opts) {
        var $a, self = this, val = nil, sect = nil, separator = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        if ($truthy((val = self.attributes['$[]']("title")['$nil_or_empty?']())['$!']())) {
          val = self.$title()
        } else if ($truthy(($truthy($a = (sect = self.$first_section())) ? sect['$title?']() : $a))) {
          val = sect.$title()
        } else if ($truthy(($truthy($a = opts['$[]']("use_fallback")) ? (val = self.attributes['$[]']("untitled-label")) : $a))) {
          } else {
          return nil
        };
        if ($truthy((separator = opts['$[]']("partition")))) {
          return Opal.const_get_relative($nesting, 'Title').$new(val, opts.$merge($hash2(["separator"], {"separator": (function() {if (separator['$=='](true)) {
            return self.attributes['$[]']("title-separator")
            } else {
            return separator
          }; return nil; })()})))
        } else if ($truthy(($truthy($a = opts['$[]']("sanitize")) ? val['$include?']("<") : $a))) {
          return val.$gsub(Opal.const_get_relative($nesting, 'XmlSanitizeRx'), "").$tr_s(" ", " ").$strip()
          } else {
          return val
        };
      }, TMP_Document_doctitle_32.$$arity = -1);
      Opal.alias(self, "name", "doctitle");
      
      Opal.defn(self, '$author', TMP_Document_author_33 = function $$author() {
        var self = this;

        return self.attributes['$[]']("author")
      }, TMP_Document_author_33.$$arity = 0);
      
      Opal.defn(self, '$revdate', TMP_Document_revdate_34 = function $$revdate() {
        var self = this;

        return self.attributes['$[]']("revdate")
      }, TMP_Document_revdate_34.$$arity = 0);
      
      Opal.defn(self, '$notitle', TMP_Document_notitle_35 = function $$notitle() {
        var $a, self = this;

        return ($truthy($a = self.attributes['$key?']("showtitle")['$!']()) ? self.attributes['$key?']("notitle") : $a)
      }, TMP_Document_notitle_35.$$arity = 0);
      
      Opal.defn(self, '$noheader', TMP_Document_noheader_36 = function $$noheader() {
        var self = this;

        return self.attributes['$key?']("noheader")
      }, TMP_Document_noheader_36.$$arity = 0);
      
      Opal.defn(self, '$nofooter', TMP_Document_nofooter_37 = function $$nofooter() {
        var self = this;

        return self.attributes['$key?']("nofooter")
      }, TMP_Document_nofooter_37.$$arity = 0);
      
      Opal.defn(self, '$first_section', TMP_Document_first_section_39 = function $$first_section() {
        var $a, TMP_38, self = this;

        if ($truthy(self['$has_header?']())) {
          return self.header
          } else {
          return $send(($truthy($a = self.blocks) ? $a : []), 'find', [], (TMP_38 = function(e){var self = TMP_38.$$s || this;
if (e == null) e = nil;
          return e.$context()['$==']("section")}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38))
        }
      }, TMP_Document_first_section_39.$$arity = 0);
      
      Opal.defn(self, '$has_header?', TMP_Document_has_header$q_40 = function() {
        var self = this;

        if ($truthy(self.header)) {
          return true
          } else {
          return false
        }
      }, TMP_Document_has_header$q_40.$$arity = 0);
      Opal.alias(self, "header?", "has_header?");
      
      Opal.defn(self, '$<<', TMP_Document_$lt$lt_41 = function(block) {
        var self = this, $iter = TMP_Document_$lt$lt_41.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Document_$lt$lt_41.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        if (block.$context()['$==']("section")) {
          self.$assign_index(block)};
        return $send(self, Opal.find_super_dispatcher(self, '<<', TMP_Document_$lt$lt_41, false), $zuper, $iter);
      }, TMP_Document_$lt$lt_41.$$arity = 1);
      
      Opal.defn(self, '$finalize_header', TMP_Document_finalize_header_42 = function $$finalize_header(unrooted_attributes, header_valid) {
        var self = this, $writer = nil;

        if (header_valid == null) {
          header_valid = true;
        }
        
        self.$clear_playback_attributes(unrooted_attributes);
        self.$save_attributes();
        if ($truthy(header_valid)) {
          } else {
          
          $writer = ["invalid-header", true];
          $send(unrooted_attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return unrooted_attributes;
      }, TMP_Document_finalize_header_42.$$arity = -2);
      
      Opal.defn(self, '$save_attributes', TMP_Document_save_attributes_44 = function $$save_attributes() {
        var $a, $b, TMP_43, self = this, attrs = nil, $writer = nil, val = nil, toc_position_val = nil, toc_val = nil, toc_placement = nil, default_toc_position = nil, default_toc_class = nil, position = nil, $case = nil;

        
        if ((attrs = self.attributes)['$[]']("basebackend")['$==']("docbook")) {
          
          if ($truthy(($truthy($a = self['$attribute_locked?']("toc")) ? $a : self.attributes_modified['$include?']("toc")))) {
            } else {
            
            $writer = ["toc", ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          if ($truthy(($truthy($a = self['$attribute_locked?']("sectnums")) ? $a : self.attributes_modified['$include?']("sectnums")))) {
            } else {
            
            $writer = ["sectnums", ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };};
        if ($truthy(($truthy($a = attrs['$key?']("doctitle")) ? $a : (val = self.$doctitle())['$!']()))) {
          } else {
          
          $writer = ["doctitle", val];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(self.id)) {
          } else {
          self.id = attrs['$[]']("css-signature")
        };
        toc_position_val = (function() {if ($truthy((toc_val = (function() {if ($truthy(attrs.$delete("toc2"))) {
          return "left"
          } else {
          return attrs['$[]']("toc")
        }; return nil; })()))) {
          if ($truthy(($truthy($a = (toc_placement = attrs.$fetch("toc-placement", "macro"))) ? toc_placement['$!=']("auto") : $a))) {
            return toc_placement
            } else {
            return attrs['$[]']("toc-position")
          }
          } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = toc_val) ? ($truthy($b = toc_val['$empty?']()['$!']()) ? $b : toc_position_val['$nil_or_empty?']()['$!']()) : $a))) {
          
          default_toc_position = "left";
          default_toc_class = "toc2";
          if ($truthy(toc_position_val['$nil_or_empty?']()['$!']())) {
            position = toc_position_val
          } else if ($truthy(toc_val['$empty?']()['$!']())) {
            position = toc_val
            } else {
            position = default_toc_position
          };
          
          $writer = ["toc", ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["toc-placement", "auto"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          $case = position;
          if ("left"['$===']($case) || "<"['$===']($case) || "&lt;"['$===']($case)) {
          $writer = ["toc-position", "left"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else if ("right"['$===']($case) || ">"['$===']($case) || "&gt;"['$===']($case)) {
          $writer = ["toc-position", "right"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else if ("top"['$===']($case) || "^"['$===']($case)) {
          $writer = ["toc-position", "top"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else if ("bottom"['$===']($case) || "v"['$===']($case)) {
          $writer = ["toc-position", "bottom"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];}
          else if ("preamble"['$===']($case) || "macro"['$===']($case)) {
          
          $writer = ["toc-position", "content"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["toc-placement", position];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          default_toc_class = nil;}
          else {
          attrs.$delete("toc-position");
          default_toc_class = nil;};
          if ($truthy(default_toc_class)) {
            ($truthy($a = attrs['$[]']("toc-class")) ? $a : (($writer = ["toc-class", default_toc_class]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))};};
        if ($truthy(attrs['$key?']("compat-mode"))) {
          
          if ($truthy(attrs['$has_key?']("language"))) {
            
            $writer = ["source-language", attrs['$[]']("language")];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          self.compat_mode = true;
          } else {
          self.compat_mode = false
        };
        self.outfilesuffix = attrs['$[]']("outfilesuffix");
        self.header_attributes = attrs.$dup();
        if ($truthy(self.parent_document)) {
          return nil
          } else {
          return $send(Opal.const_get_relative($nesting, 'FLEXIBLE_ATTRIBUTES'), 'each', [], (TMP_43 = function(name){var self = TMP_43.$$s || this, $c;
            if (self.attribute_overrides == null) self.attribute_overrides = nil;
if (name == null) name = nil;
          if ($truthy(($truthy($c = self.attribute_overrides['$key?'](name)) ? self.attribute_overrides['$[]'](name) : $c))) {
              return self.attribute_overrides.$delete(name)
              } else {
              return nil
            }}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43))
        };
      }, TMP_Document_save_attributes_44.$$arity = 0);
      
      Opal.defn(self, '$restore_attributes', TMP_Document_restore_attributes_45 = function $$restore_attributes() {
        var self = this;

        
        if ($truthy(self.parent_document)) {
          } else {
          self.callouts.$rewind()
        };
        return (self.attributes = self.header_attributes);
      }, TMP_Document_restore_attributes_45.$$arity = 0);
      
      Opal.defn(self, '$clear_playback_attributes', TMP_Document_clear_playback_attributes_46 = function $$clear_playback_attributes(attributes) {
        var self = this;

        return attributes.$delete("attribute_entries")
      }, TMP_Document_clear_playback_attributes_46.$$arity = 1);
      
      Opal.defn(self, '$playback_attributes', TMP_Document_playback_attributes_48 = function $$playback_attributes(block_attributes) {
        var TMP_47, self = this;

        if ($truthy(block_attributes['$key?']("attribute_entries"))) {
          return $send(block_attributes['$[]']("attribute_entries"), 'each', [], (TMP_47 = function(entry){var self = TMP_47.$$s || this, name = nil, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (entry == null) entry = nil;
          
            name = entry.$name();
            if ($truthy(entry.$negate())) {
              
              self.attributes.$delete(name);
              if (name['$==']("compat-mode")) {
                return (self.compat_mode = false)
                } else {
                return nil
              };
              } else {
              
              
              $writer = [name, entry.$value()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if (name['$==']("compat-mode")) {
                return (self.compat_mode = true)
                } else {
                return nil
              };
            };}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47))
          } else {
          return nil
        }
      }, TMP_Document_playback_attributes_48.$$arity = 1);
      
      Opal.defn(self, '$set_attribute', TMP_Document_set_attribute_49 = function $$set_attribute(name, value) {
        var self = this, resolved_value = nil, $case = nil, $writer = nil;

        if ($truthy(self['$attribute_locked?'](name))) {
          return false
          } else {
          
          if ($truthy(self.max_attribute_value_size)) {
            resolved_value = self.$apply_attribute_value_subs(value).$limit(self.max_attribute_value_size)
            } else {
            resolved_value = self.$apply_attribute_value_subs(value)
          };
          $case = name;
          if ("backend"['$===']($case)) {self.$update_backend_attributes(resolved_value, self.attributes_modified['$delete?']("htmlsyntax")['$!']()['$!']())}
          else if ("doctype"['$===']($case)) {self.$update_doctype_attributes(resolved_value)}
          else {
          $writer = [name, resolved_value];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
          self.attributes_modified['$<<'](name);
          return true;
        }
      }, TMP_Document_set_attribute_49.$$arity = 2);
      
      Opal.defn(self, '$delete_attribute', TMP_Document_delete_attribute_50 = function $$delete_attribute(name) {
        var self = this;

        if ($truthy(self['$attribute_locked?'](name))) {
          return false
          } else {
          
          self.attributes.$delete(name);
          self.attributes_modified['$<<'](name);
          return true;
        }
      }, TMP_Document_delete_attribute_50.$$arity = 1);
      
      Opal.defn(self, '$attribute_locked?', TMP_Document_attribute_locked$q_51 = function(name) {
        var self = this;

        return self.attribute_overrides['$key?'](name)
      }, TMP_Document_attribute_locked$q_51.$$arity = 1);
      
      Opal.defn(self, '$apply_attribute_value_subs', TMP_Document_apply_attribute_value_subs_52 = function $$apply_attribute_value_subs(value) {
        var self = this, m = nil, subs = nil;

        if ($truthy((m = Opal.const_get_relative($nesting, 'AttributeEntryPassMacroRx').$match(value)))) {
          if ($truthy(m['$[]'](1)['$empty?']()['$!']())) {
            
            subs = self.$resolve_pass_subs(m['$[]'](1));
            if ($truthy(subs['$empty?']())) {
              return m['$[]'](2)
              } else {
              
              return self.$apply_subs(m['$[]'](2), subs);
            };
            } else {
            return m['$[]'](2)
          }
          } else {
          return self.$apply_header_subs(value)
        }
      }, TMP_Document_apply_attribute_value_subs_52.$$arity = 1);
      
      Opal.defn(self, '$update_backend_attributes', TMP_Document_update_backend_attributes_53 = function $$update_backend_attributes(new_backend, force) {
        var $a, $b, self = this, attrs = nil, current_backend = nil, current_basebackend = nil, current_doctype = nil, $writer = nil, resolved_name = nil, new_basebackend = nil, new_filetype = nil, new_outfilesuffix = nil, current_filetype = nil, page_width = nil;

        if (force == null) {
          force = false;
        }
        if ($truthy(($truthy($a = force) ? $a : ($truthy($b = new_backend) ? new_backend['$!='](self.attributes['$[]']("backend")) : $b)))) {
          
          attrs = self.attributes;
          current_backend = attrs['$[]']("backend");
          current_basebackend = attrs['$[]']("basebackend");
          current_doctype = attrs['$[]']("doctype");
          if ($truthy(new_backend['$start_with?']("xhtml"))) {
            
            
            $writer = ["htmlsyntax", "xml"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            new_backend = new_backend['$[]']($range(1, -1, false));
          } else if ($truthy(new_backend['$start_with?']("html"))) {
            if (attrs['$[]']("htmlsyntax")['$==']("xml")) {
              } else {
              
              $writer = ["htmlsyntax", "html"];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            }};
          if ($truthy((resolved_name = Opal.const_get_relative($nesting, 'BACKEND_ALIASES')['$[]'](new_backend)))) {
            new_backend = resolved_name};
          if ($truthy(current_backend)) {
            
            attrs.$delete("" + "backend-" + (current_backend));
            if ($truthy(current_doctype)) {
              attrs.$delete("" + "backend-" + (current_backend) + "-doctype-" + (current_doctype))};};
          if ($truthy(current_doctype)) {
            
            
            $writer = ["" + "doctype-" + (current_doctype), ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["" + "backend-" + (new_backend) + "-doctype-" + (current_doctype), ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          
          $writer = ["backend", new_backend];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["" + "backend-" + (new_backend), ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Converter'), 'BackendInfo')['$===']((self.converter = self.$create_converter())))) {
            
            new_basebackend = self.converter.$basebackend();
            if ($truthy(self['$attribute_locked?']("outfilesuffix"))) {
              } else {
              
              $writer = ["outfilesuffix", self.converter.$outfilesuffix()];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            new_filetype = self.converter.$filetype();
            } else {
            
            new_basebackend = new_backend.$sub(Opal.const_get_relative($nesting, 'TrailingDigitsRx'), "");
            new_outfilesuffix = ($truthy($a = Opal.const_get_relative($nesting, 'DEFAULT_EXTENSIONS')['$[]'](new_basebackend)) ? $a : ".html");
            new_filetype = new_outfilesuffix['$[]']($range(1, -1, false));
            if ($truthy(self['$attribute_locked?']("outfilesuffix"))) {
              } else {
              
              $writer = ["outfilesuffix", new_outfilesuffix];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
          };
          if ($truthy((current_filetype = attrs['$[]']("filetype")))) {
            attrs.$delete("" + "filetype-" + (current_filetype))};
          
          $writer = ["filetype", new_filetype];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["" + "filetype-" + (new_filetype), ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy((page_width = Opal.const_get_relative($nesting, 'DEFAULT_PAGE_WIDTHS')['$[]'](new_basebackend)))) {
            
            $writer = ["pagewidth", page_width];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            attrs.$delete("pagewidth")
          };
          if ($truthy(new_basebackend['$!='](current_basebackend))) {
            
            if ($truthy(current_basebackend)) {
              
              attrs.$delete("" + "basebackend-" + (current_basebackend));
              if ($truthy(current_doctype)) {
                attrs.$delete("" + "basebackend-" + (current_basebackend) + "-doctype-" + (current_doctype))};};
            
            $writer = ["basebackend", new_basebackend];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["" + "basebackend-" + (new_basebackend), ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(current_doctype)) {
              
              $writer = ["" + "basebackend-" + (new_basebackend) + "-doctype-" + (current_doctype), ""];
              $send(attrs, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};};
          return (self.backend = nil);
          } else {
          return nil
        }
      }, TMP_Document_update_backend_attributes_53.$$arity = -2);
      
      Opal.defn(self, '$update_doctype_attributes', TMP_Document_update_doctype_attributes_54 = function $$update_doctype_attributes(new_doctype) {
        var $a, self = this, attrs = nil, current_doctype = nil, current_backend = nil, current_basebackend = nil, $writer = nil;

        if ($truthy(($truthy($a = new_doctype) ? new_doctype['$!='](self.attributes['$[]']("doctype")) : $a))) {
          
          attrs = self.attributes;
          current_doctype = attrs['$[]']("doctype");
          current_backend = attrs['$[]']("backend");
          current_basebackend = attrs['$[]']("basebackend");
          if ($truthy(current_doctype)) {
            
            attrs.$delete("" + "doctype-" + (current_doctype));
            if ($truthy(current_backend)) {
              attrs.$delete("" + "backend-" + (current_backend) + "-doctype-" + (current_doctype))};
            if ($truthy(current_basebackend)) {
              attrs.$delete("" + "basebackend-" + (current_basebackend) + "-doctype-" + (current_doctype))};};
          
          $writer = ["doctype", new_doctype];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["" + "doctype-" + (new_doctype), ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(current_backend)) {
            
            $writer = ["" + "backend-" + (current_backend) + "-doctype-" + (new_doctype), ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(current_basebackend)) {
            
            $writer = ["" + "basebackend-" + (current_basebackend) + "-doctype-" + (new_doctype), ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return (self.doctype = nil);
          } else {
          return nil
        }
      }, TMP_Document_update_doctype_attributes_54.$$arity = 1);
      
      Opal.defn(self, '$create_converter', TMP_Document_create_converter_55 = function $$create_converter() {
        var self = this, converter_opts = nil, $writer = nil, template_dirs = nil, template_dir = nil, converter = nil, converter_factory = nil;

        
        converter_opts = $hash2([], {});
        
        $writer = ["htmlsyntax", self.attributes['$[]']("htmlsyntax")];
        $send(converter_opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        template_dirs = (function() {if ($truthy((template_dir = self.options['$[]']("template_dir")))) {
          
          $writer = ["template_dirs", [template_dir]];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy((template_dirs = self.options['$[]']("template_dirs")))) {
          
          $writer = ["template_dirs", template_dirs];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          return nil
        }; return nil; })();
        if ($truthy(template_dirs)) {
          
          
          $writer = ["template_cache", self.options.$fetch("template_cache", true)];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["template_engine", self.options['$[]']("template_engine")];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["template_engine_options", self.options['$[]']("template_engine_options")];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["eruby", self.options['$[]']("eruby")];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["safe", self.safe];
          $send(converter_opts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;};
        if ($truthy((converter = self.options['$[]']("converter")))) {
          converter_factory = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Converter'), 'Factory').$new(Opal.const_get_qualified('::', 'Hash')['$[]'](self.$backend(), converter))
          } else {
          converter_factory = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Converter'), 'Factory').$default(false)
        };
        return converter_factory.$create(self.$backend(), converter_opts);
      }, TMP_Document_create_converter_55.$$arity = 0);
      
      Opal.defn(self, '$convert', TMP_Document_convert_57 = function $$convert(opts) {
        var $a, TMP_56, self = this, $writer = nil, block = nil, output = nil, transform = nil, exts = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        if ($truthy(self.parsed)) {
          } else {
          self.$parse()
        };
        if ($truthy(($truthy($a = $rb_ge(self.safe, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SERVER'))) ? $a : opts['$empty?']()))) {
          } else {
          
          if ($truthy((($writer = ["outfile", opts['$[]']("outfile")]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))) {
            } else {
            self.attributes.$delete("outfile")
          };
          if ($truthy((($writer = ["outdir", opts['$[]']("outdir")]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))) {
            } else {
            self.attributes.$delete("outdir")
          };
        };
        if ($truthy(self.converter)) {
          } else {
          self.$fail("" + "asciidoctor: FAILED: missing converter for backend '" + (self.$backend()) + "'. Processing aborted.")
        };
        if (self.$doctype()['$==']("inline")) {
          if ($truthy(($truthy($a = (block = self.blocks['$[]'](0))) ? block.$content_model()['$!=']("compound") : $a))) {
            output = block.$content()
            } else {
            output = nil
          }
          } else {
          
          transform = (function() {if ($truthy((function() {if ($truthy(opts['$key?']("header_footer"))) {
            return opts['$[]']("header_footer")
            } else {
            return self.options['$[]']("header_footer")
          }; return nil; })())) {
            return "document"
            } else {
            return "embedded"
          }; return nil; })();
          output = self.converter.$convert(self, transform);
        };
        if ($truthy(self.parent_document)) {
        } else if ($truthy(($truthy($a = (exts = self.extensions)) ? exts['$postprocessors?']() : $a))) {
          $send(exts.$postprocessors(), 'each', [], (TMP_56 = function(ext){var self = TMP_56.$$s || this;
if (ext == null) ext = nil;
          return (output = ext.$process_method()['$[]'](self, output))}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56))};
        return output;
      }, TMP_Document_convert_57.$$arity = -1);
      Opal.alias(self, "render", "convert");
      
      Opal.defn(self, '$write', TMP_Document_write_59 = function $$write(output, target) {
        var TMP_58, self = this;

        if ($truthy(Opal.const_get_relative($nesting, 'Writer')['$==='](self.converter))) {
          return self.converter.$write(output, target)
          } else {
          
          if ($truthy(target['$respond_to?']("write"))) {
            if ($truthy(output['$nil_or_empty?']())) {
              } else {
              
              target.$write(output.$chomp());
              target.$write(Opal.const_get_relative($nesting, 'EOL'));
            }
            } else {
            $send(Opal.const_get_qualified('::', 'File'), 'open', [target, "w"], (TMP_58 = function(f){var self = TMP_58.$$s || this;
if (f == null) f = nil;
            return f.$write(output)}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58))
          };
          return nil;
        }
      }, TMP_Document_write_59.$$arity = 2);
      
      Opal.defn(self, '$content', TMP_Document_content_60 = function $$content() {
        var self = this, $iter = TMP_Document_content_60.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Document_content_60.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        self.attributes.$delete("title");
        return $send(self, Opal.find_super_dispatcher(self, 'content', TMP_Document_content_60, false), $zuper, $iter);
      }, TMP_Document_content_60.$$arity = 0);
      
      Opal.defn(self, '$docinfo', TMP_Document_docinfo_62 = function $$docinfo(location, suffix) {
        var $a, TMP_61, self = this, qualifier = nil, docinfodir = nil, content = nil, docinfo = nil, docinfo_filename = nil, docinfo_path = nil, docinfosubs = nil, content2 = nil, contentx = nil;

        if (location == null) {
          location = "head";
        }
        if (suffix == null) {
          suffix = nil;
        }
        if ($truthy($rb_ge(self.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE')))) {
          return ""
          } else {
          
          qualifier = (function() {if (location['$==']("head")) {
            return nil
            } else {
            return "" + "-" + (location)
          }; return nil; })();
          if ($truthy(suffix)) {
            } else {
            suffix = self.outfilesuffix
          };
          docinfodir = self.attributes['$[]']("docinfodir");
          content = nil;
          if ($truthy((docinfo = self.attributes['$[]']("docinfo"))['$nil_or_empty?']())) {
            if ($truthy(self.attributes['$key?']("docinfo2"))) {
              docinfo = ["private", "shared"]
            } else if ($truthy(self.attributes['$key?']("docinfo1"))) {
              docinfo = ["shared"]
              } else {
              docinfo = (function() {if ($truthy(docinfo)) {
                return ["private"]
                } else {
                return nil
              }; return nil; })()
            }
            } else {
            docinfo = $send(docinfo.$split(","), 'map', [], "strip".$to_proc())
          };
          if ($truthy(docinfo)) {
            
            docinfo_filename = "" + "docinfo" + (qualifier) + (suffix);
            if ($truthy(docinfo['$&'](["shared", "" + "shared-" + (location)])['$empty?']())) {
              } else {
              
              docinfo_path = self.$normalize_system_path(docinfo_filename, docinfodir);
              if ($truthy((content = self.$read_asset(docinfo_path, $hash2(["normalize"], {"normalize": true}))))) {
                if ($truthy((docinfosubs = ($truthy($a = docinfosubs) ? $a : self.$resolve_docinfo_subs())))) {
                  content = (function() {if ($truthy(docinfosubs['$==']("attributes"))) {
                    return self.$sub_attributes(content)
                    } else {
                    return self.$apply_subs(content, docinfosubs)
                  }; return nil; })()}};
            };
            if ($truthy(($truthy($a = self.attributes['$[]']("docname")['$nil_or_empty?']()) ? $a : docinfo['$&'](["private", "" + "private-" + (location)])['$empty?']()))) {
              } else {
              
              docinfo_path = self.$normalize_system_path("" + (self.attributes['$[]']("docname")) + "-" + (docinfo_filename), docinfodir);
              if ($truthy((content2 = self.$read_asset(docinfo_path, $hash2(["normalize"], {"normalize": true}))))) {
                
                if ($truthy((docinfosubs = ($truthy($a = docinfosubs) ? $a : self.$resolve_docinfo_subs())))) {
                  content2 = (function() {if ($truthy(docinfosubs['$==']("attributes"))) {
                    return self.$sub_attributes(content2)
                    } else {
                    return self.$apply_subs(content2, docinfosubs)
                  }; return nil; })()};
                content = (function() {if ($truthy(content)) {
                  return "" + (content) + (Opal.const_get_relative($nesting, 'EOL')) + (content2)
                  } else {
                  return content2
                }; return nil; })();};
            };};
          if ($truthy(($truthy($a = self.extensions) ? self['$docinfo_processors?'](location) : $a))) {
            
            contentx = $rb_times($send(self.docinfo_processor_extensions['$[]'](location), 'map', [], (TMP_61 = function(candidate){var self = TMP_61.$$s || this;
if (candidate == null) candidate = nil;
            return candidate.$process_method()['$[]'](self)}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61)).$compact(), Opal.const_get_relative($nesting, 'EOL'));
            content = (function() {if ($truthy(content)) {
              return "" + (content) + (Opal.const_get_relative($nesting, 'EOL')) + (contentx)
              } else {
              return contentx
            }; return nil; })();};
          return "" + (content);
        }
      }, TMP_Document_docinfo_62.$$arity = -1);
      
      Opal.defn(self, '$resolve_docinfo_subs', TMP_Document_resolve_docinfo_subs_63 = function $$resolve_docinfo_subs() {
        var self = this, subs = nil;

        if ($truthy(self.attributes['$key?']("docinfosubs"))) {
          
          subs = self.$resolve_subs(self.attributes['$[]']("docinfosubs"), "block", nil, "docinfo");
          if ($truthy(subs['$empty?']())) {
            return nil
            } else {
            return subs
          };
          } else {
          return "attributes"
        }
      }, TMP_Document_resolve_docinfo_subs_63.$$arity = 0);
      
      Opal.defn(self, '$docinfo_processors?', TMP_Document_docinfo_processors$q_64 = function(location) {
        var $a, self = this, $writer = nil;

        if (location == null) {
          location = "head";
        }
        if ($truthy(self.docinfo_processor_extensions['$key?'](location))) {
          return self.docinfo_processor_extensions['$[]'](location)['$!='](false)
        } else if ($truthy(($truthy($a = self.extensions) ? self.document.$extensions()['$docinfo_processors?'](location) : $a))) {
          return (($writer = [location, self.document.$extensions().$docinfo_processors(location)]), $send(self.docinfo_processor_extensions, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])['$!']()['$!']()
          } else {
          
          $writer = [location, false];
          $send(self.docinfo_processor_extensions, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }
      }, TMP_Document_docinfo_processors$q_64.$$arity = -1);
      return (Opal.defn(self, '$to_s', TMP_Document_to_s_65 = function $$to_s() {
        var self = this;

        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {doctype: " + (self.$doctype().$inspect()) + ", doctitle: " + ((function() {if ($truthy(self.header['$!='](nil))) {
          return self.header.$title()
          } else {
          return nil
        }; return nil; })().$inspect()) + ", blocks: " + (self.blocks.$size()) + "}>"
      }, TMP_Document_to_s_65.$$arity = 0), nil) && 'to_s';
    })($nesting[0], Opal.const_get_relative($nesting, 'AbstractBlock'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/inline"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$[]', '$nil_or_empty?', '$update_attributes', '$convert', '$converter']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Inline(){};
      var self = $Inline = $klass($base, $super, 'Inline', $Inline);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inline_initialize_1, TMP_Inline_block$q_2, TMP_Inline_inline$q_3, TMP_Inline_convert_4;

      
      self.$attr_reader("text");
      self.$attr_reader("type");
      self.$attr_accessor("target");
      
      Opal.defn(self, '$initialize', TMP_Inline_initialize_1 = function $$initialize(parent, context, text, opts) {
        var self = this, $iter = TMP_Inline_initialize_1.$$p, $yield = $iter || nil, more_attributes = nil;

        if (text == null) {
          text = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_Inline_initialize_1.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Inline_initialize_1, false), [parent, context], null);
        self.node_name = "" + "inline_" + (context);
        self.text = text;
        self.id = opts['$[]']("id");
        self.type = opts['$[]']("type");
        self.target = opts['$[]']("target");
        if ($truthy((more_attributes = opts['$[]']("attributes"))['$nil_or_empty?']())) {
          return nil
          } else {
          return self.$update_attributes(more_attributes)
        };
      }, TMP_Inline_initialize_1.$$arity = -3);
      
      Opal.defn(self, '$block?', TMP_Inline_block$q_2 = function() {
        var self = this;

        return false
      }, TMP_Inline_block$q_2.$$arity = 0);
      
      Opal.defn(self, '$inline?', TMP_Inline_inline$q_3 = function() {
        var self = this;

        return true
      }, TMP_Inline_inline$q_3.$$arity = 0);
      
      Opal.defn(self, '$convert', TMP_Inline_convert_4 = function $$convert() {
        var self = this;

        return self.$converter().$convert(self)
      }, TMP_Inline_convert_4.$$arity = 0);
      return Opal.alias(self, "render", "convert");
    })($nesting[0], Opal.const_get_relative($nesting, 'AbstractNode'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/list"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$next_list', '$callouts', '$class', '$object_id', '$inspect', '$size', '$items', '$attr_accessor', '$level', '$!', '$nil_or_empty?', '$apply_subs', '$empty?', '$===', '$[]', '$outline?', '$simple?', '$context', '$option?', '$shift', '$blocks', '$unshift', '$lines', '$source', '$parent']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $List(){};
      var self = $List = $klass($base, $super, 'List', $List);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_List_initialize_1, TMP_List_outline$q_2, TMP_List_convert_3, TMP_List_to_s_4;

      def.context = def.document = def.style = nil;
      
      Opal.alias(self, "items", "blocks");
      Opal.alias(self, "content", "blocks");
      Opal.alias(self, "items?", "blocks?");
      
      Opal.defn(self, '$initialize', TMP_List_initialize_1 = function $$initialize(parent, context) {
        var self = this, $iter = TMP_List_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_List_initialize_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_List_initialize_1, false), $zuper, $iter)
      }, TMP_List_initialize_1.$$arity = 2);
      
      Opal.defn(self, '$outline?', TMP_List_outline$q_2 = function() {
        var $a, self = this;

        return ($truthy($a = self.context['$==']("ulist")) ? $a : self.context['$==']("olist"))
      }, TMP_List_outline$q_2.$$arity = 0);
      
      Opal.defn(self, '$convert', TMP_List_convert_3 = function $$convert() {
        var self = this, $iter = TMP_List_convert_3.$$p, $yield = $iter || nil, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_List_convert_3.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if (self.context['$==']("colist")) {
          
          result = $send(self, Opal.find_super_dispatcher(self, 'convert', TMP_List_convert_3, false), $zuper, $iter);
          self.document.$callouts().$next_list();
          return result;
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'convert', TMP_List_convert_3, false), $zuper, $iter)
        }
      }, TMP_List_convert_3.$$arity = 0);
      Opal.alias(self, "render", "convert");
      return (Opal.defn(self, '$to_s', TMP_List_to_s_4 = function $$to_s() {
        var self = this;

        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {context: " + (self.context.$inspect()) + ", style: " + (self.style.$inspect()) + ", items: " + (self.$items().$size()) + "}>"
      }, TMP_List_to_s_4.$$arity = 0), nil) && 'to_s';
    })($nesting[0], Opal.const_get_relative($nesting, 'AbstractBlock'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ListItem(){};
      var self = $ListItem = $klass($base, $super, 'ListItem', $ListItem);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ListItem_initialize_5, TMP_ListItem_text$q_6, TMP_ListItem_text_7, TMP_ListItem_simple$q_8, TMP_ListItem_compound$q_9, TMP_ListItem_fold_first_10, TMP_ListItem_to_s_11;

      def.text = def.blocks = nil;
      
      Opal.alias(self, "list", "parent");
      self.$attr_accessor("marker");
      
      Opal.defn(self, '$initialize', TMP_ListItem_initialize_5 = function $$initialize(parent, text) {
        var self = this, $iter = TMP_ListItem_initialize_5.$$p, $yield = $iter || nil;

        if (text == null) {
          text = nil;
        }
        if ($iter) TMP_ListItem_initialize_5.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ListItem_initialize_5, false), [parent, "list_item"], null);
        self.text = text;
        return (self.level = parent.$level());
      }, TMP_ListItem_initialize_5.$$arity = -2);
      
      Opal.defn(self, '$text?', TMP_ListItem_text$q_6 = function() {
        var self = this;

        return self.text['$nil_or_empty?']()['$!']()
      }, TMP_ListItem_text$q_6.$$arity = 0);
      
      Opal.defn(self, '$text', TMP_ListItem_text_7 = function $$text() {
        var self = this;

        return self.$apply_subs(self.text)
      }, TMP_ListItem_text_7.$$arity = 0);
      
      Opal.defn(self, '$simple?', TMP_ListItem_simple$q_8 = function() {
        var $a, $b, $c, self = this, blk = nil;

        return ($truthy($a = self.blocks['$empty?']()) ? $a : ($truthy($b = (($c = self.blocks.$size()['$=='](1)) ? Opal.const_get_relative($nesting, 'List')['$===']((blk = self.blocks['$[]'](0))) : self.blocks.$size()['$=='](1))) ? blk['$outline?']() : $b))
      }, TMP_ListItem_simple$q_8.$$arity = 0);
      
      Opal.defn(self, '$compound?', TMP_ListItem_compound$q_9 = function() {
        var self = this;

        return self['$simple?']()['$!']()
      }, TMP_ListItem_compound$q_9.$$arity = 0);
      
      Opal.defn(self, '$fold_first', TMP_ListItem_fold_first_10 = function $$fold_first(continuation_connects_first_block, content_adjacent) {
        var $a, $b, $c, $d, $e, self = this, first_block = nil, block = nil;

        if (continuation_connects_first_block == null) {
          continuation_connects_first_block = false;
        }
        if (content_adjacent == null) {
          content_adjacent = false;
        }
        
        if ($truthy(($truthy($a = ($truthy($b = (first_block = self.blocks['$[]'](0))) ? Opal.const_get_relative($nesting, 'Block')['$==='](first_block) : $b)) ? ($truthy($b = (($c = first_block.$context()['$==']("paragraph")) ? continuation_connects_first_block['$!']() : first_block.$context()['$==']("paragraph"))) ? $b : ($truthy($c = ($truthy($d = ($truthy($e = content_adjacent) ? $e : continuation_connects_first_block['$!']())) ? first_block.$context()['$==']("literal") : $d)) ? first_block['$option?']("listparagraph") : $c)) : $a))) {
          
          block = self.$blocks().$shift();
          if ($truthy(self.text['$nil_or_empty?']())) {
            } else {
            block.$lines().$unshift(self.text)
          };
          self.text = block.$source();};
        return nil;
      }, TMP_ListItem_fold_first_10.$$arity = -1);
      return (Opal.defn(self, '$to_s', TMP_ListItem_to_s_11 = function $$to_s() {
        var $a, self = this;

        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {list_context: " + (self.$parent().$context().$inspect()) + ", text: " + (self.text.$inspect()) + ", blocks: " + (($truthy($a = self.blocks) ? $a : []).$size()) + "}>"
      }, TMP_ListItem_to_s_11.$$arity = 0), nil) && 'to_s';
    })($nesting[0], Opal.const_get_relative($nesting, 'AbstractBlock'), $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/parser"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $hash = Opal.hash, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$new', '$lambda', '$start_with?', '$=~', '$is_delimited_block?', '$raise', '$parse_document_header', '$[]', '$has_more_lines?', '$next_section', '$<<', '$parse_block_metadata_lines', '$is_next_line_document_title?', '$has_key?', '$finalize_header', '$nil_or_empty?', '$attributes', '$title=', '$-', '$sourcemap', '$cursor', '$parse_section_title', '$id=', '$set_attribute', '$delete', '$source_location=', '$header', '$[]=', '$id', '$parse_style_attribute', '$key?', '$parse_header_metadata', '$==', '$doctype', '$parse_manpage_header', '$match', '$sub_attributes', '$downcase', '$rstrip', '$strip', '$warn', '$prev_line_info', '$skip_blank_lines', '$is_next_line_section?', '$initialize_section', '$level', '$tr_s', '$join', '$read_lines_until', '$backend', '$context', '$empty?', '$blocks', '$has_header?', '$!', '$!=', '$attr?', '$attr', '$document', '$special', '$include?', '$sectname', '$+', '$to_i', '$>', '$line_info', '$size', '$*', '$next_block', '$blocks?', '$style', '$context=', '$style=', '$parent=', '$content_model', '$shift', '$unwrap_standalone_preamble', '$dup', '$fetch', '$extensions', '$block_macros?', '$===', '$parse_block_metadata_line', '$advance', '$read_line', '$terminator', '$to_s', '$masq', '$to_sym', '$registered_for_block?', '$strict_verbatim_paragraphs', '$unshift_line', '$markdown_syntax', '$chr', '$lstrip', '$>=', '$length', '$end_with?', '$parse_attributes', '$attribute_missing', '$clear', '$registered_for_block_macro?', '$config', '$each', '$process_method', '$replace', '$peek_line', '$path', '$lineno', '$next_list_item', '$callout_ids', '$callouts', '$items', '$next_list', '$next_outline_list', '$marker', '$find', '$next_labeled_list', '$is_section_title?', '$underline_style_section_titles', '$generate_id', '$level=', '$read_paragraph_lines', '$adjust_indentation!', '$set_option', '$catalog_inline_anchors', '$post_match', '$map!', '$split', '$pop', '$build_block', '$blockquote?', '$chop', '$tr', '$rekey', '$next_table', '$concat', '$title?', '$register', '$basename', '$sub_specialchars', '$assign_caption', '$ord', '$caption', '$caption=', '$title', '$update', '$lock_in_subs', '$sub?', '$catalog_callouts', '$source', '$remove_sub', '$block_terminates_paragraph', '$to_proc', '$<=', '$<', '$nil?', '$lines', '$parse_blocks', '$resolve_list_marker', '$items?', '$parent', '$scan', '$marker=', '$read_lines_for_list_item', '$skip_line_comments', '$unshift_lines', '$fold_first', '$text?', '$is_sibling_list_item?', '$delete_at', '$sectname=', '$special=', '$update_attributes', '$peek_lines', '$is_single_line_section_title?', '$is_two_line_section_title?', '$single_line_section_level', '$abs', '$line_length', '$section_level', '$process_attribute_entries', '$next_line_empty?', '$process_authors', '$apply_header_subs', '$map', '$each_with_index', '$push', '$to_a', '$process_attribute_entry', '$skip_comment_lines', '$store_attribute', '$sanitize_attribute_name', '$delete_attribute', '$save_to', '$resolve_ordered_list_marker', '$chomp', '$roman_numeral_to_int', '$parse_colspecs', '$create_columns', '$has_header_option=', '$format', '$starts_with_delimiter?', '$close_open_cell', '$parse_cellspec', '$delimiter', '$match_delimiter', '$buffer_has_unclosed_quotes?', '$pre_match', '$skip_matched_delimiter', '$buffer', '$buffer=', '$keep_cell_open', '$push_cellspec', '$close_cell', '$cell_open?', '$columns', '$assign_column_widths', '$partition_header_footer', '$upto', '$shorthand_property_syntax', '$each_char', '$call', '$sub!', '$gsub!', '$%', '$begin', '$gsub']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Parser_1, TMP_Parser_2, TMP_Parser_3, TMP_Parser_initialize_4, TMP_Parser_parse_5, TMP_Parser_parse_document_header_6, TMP_Parser_parse_manpage_header_7, TMP_Parser_next_section_8, TMP_Parser_next_block_13, TMP_Parser_blockquote$q_14, TMP_Parser_read_paragraph_lines_15, TMP_Parser_is_delimited_block$q_16, TMP_Parser_build_block_17, TMP_Parser_parse_blocks_18, TMP_Parser_next_outline_list_19, TMP_Parser_catalog_callouts_21, TMP_Parser_catalog_inline_anchors_23, TMP_Parser_next_labeled_list_24, TMP_Parser_next_list_item_25, TMP_Parser_read_lines_for_list_item_31, TMP_Parser_initialize_section_32, TMP_Parser_section_level_33, TMP_Parser_single_line_section_level_34, TMP_Parser_is_next_line_section$q_35, TMP_Parser_is_next_line_document_title$q_36, TMP_Parser_is_section_title$q_37, TMP_Parser_is_single_line_section_title$q_38, TMP_Parser_is_two_line_section_title$q_39, TMP_Parser_parse_section_title_40, TMP_Parser_line_length_41, TMP_Parser_parse_header_metadata_44, TMP_Parser_process_authors_50, TMP_Parser_parse_block_metadata_lines_51, TMP_Parser_parse_block_metadata_line_52, TMP_Parser_process_attribute_entries_53, TMP_Parser_process_attribute_entry_54, TMP_Parser_store_attribute_55, TMP_Parser_resolve_list_marker_56, TMP_Parser_resolve_ordered_list_marker_58, TMP_Parser_is_sibling_list_item$q_59, TMP_Parser_next_table_60, TMP_Parser_parse_colspecs_64, TMP_Parser_parse_cellspec_65, TMP_Parser_parse_style_attribute_69, TMP_Parser_adjust_indentation$B_77, TMP_Parser_sanitize_attribute_name_78, TMP_Parser_roman_numeral_to_int_80;

      
      Opal.const_set($nesting[0], 'BlockMatchData', Opal.const_get_relative($nesting, 'Struct').$new("context", "masq", "tip", "terminator"));
      Opal.const_set($nesting[0], 'TabRx', /\t/);
      Opal.const_set($nesting[0], 'TabIndentRx', /^\t+/);
      Opal.const_set($nesting[0], 'StartOfBlockProc', $send(self, 'lambda', [], (TMP_Parser_1 = function(l){var self = TMP_Parser_1.$$s || this, $a, $b;
if (l == null) l = nil;
      return ($truthy($a = ($truthy($b = l['$start_with?']("[")) ? Opal.const_get_relative($nesting, 'BlockAttributeLineRx')['$=~'](l) : $b)) ? $a : self['$is_delimited_block?'](l))}, TMP_Parser_1.$$s = self, TMP_Parser_1.$$arity = 1, TMP_Parser_1)));
      Opal.const_set($nesting[0], 'StartOfListProc', $send(self, 'lambda', [], (TMP_Parser_2 = function(l){var self = TMP_Parser_2.$$s || this;
if (l == null) l = nil;
      return Opal.const_get_relative($nesting, 'AnyListRx')['$=~'](l)}, TMP_Parser_2.$$s = self, TMP_Parser_2.$$arity = 1, TMP_Parser_2)));
      Opal.const_set($nesting[0], 'StartOfBlockOrListProc', $send(self, 'lambda', [], (TMP_Parser_3 = function(l){var self = TMP_Parser_3.$$s || this, $a, $b, $c;
if (l == null) l = nil;
      return ($truthy($a = ($truthy($b = self['$is_delimited_block?'](l)) ? $b : ($truthy($c = l['$start_with?']("[")) ? Opal.const_get_relative($nesting, 'BlockAttributeLineRx')['$=~'](l) : $c))) ? $a : Opal.const_get_relative($nesting, 'AnyListRx')['$=~'](l))}, TMP_Parser_3.$$s = self, TMP_Parser_3.$$arity = 1, TMP_Parser_3)));
      Opal.const_set($nesting[0], 'NoOp', nil);
      
      Opal.defn(self, '$initialize', TMP_Parser_initialize_4 = function $$initialize() {
        var self = this;

        return self.$raise("Au contraire, mon frere. No lexer instances will be running around.")
      }, TMP_Parser_initialize_4.$$arity = 0);
      Opal.defs(self, '$parse', TMP_Parser_parse_5 = function $$parse(reader, document, options) {
        var $a, $b, $c, self = this, block_attributes = nil, new_section = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        block_attributes = self.$parse_document_header(reader, document);
        if ($truthy(options['$[]']("header_only"))) {
          } else {
          while ($truthy(reader['$has_more_lines?']())) {
            
            $c = self.$next_section(reader, document, block_attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (block_attributes = ($b[1] == null ? nil : $b[1])), $c;
            if ($truthy(new_section)) {
              document['$<<'](new_section)};
          }
        };
        return document;
      }, TMP_Parser_parse_5.$$arity = -3);
      Opal.defs(self, '$parse_document_header', TMP_Parser_parse_document_header_6 = function $$parse_document_header(reader, document) {
        var $a, $b, self = this, block_attributes = nil, has_doctitle_line = nil, assigned_doctitle = nil, val = nil, $writer = nil, section_title = nil, source_location = nil, _ = nil, doctitle = nil, single_line = nil, separator = nil, style = nil, style_attrs = nil;

        
        block_attributes = self.$parse_block_metadata_lines(reader, document);
        if ($truthy(($truthy($a = (has_doctitle_line = self['$is_next_line_document_title?'](reader, block_attributes))) ? block_attributes['$has_key?']("title") : $a))) {
          return document.$finalize_header(block_attributes, false)};
        assigned_doctitle = nil;
        if ($truthy((val = document.$attributes()['$[]']("doctitle"))['$nil_or_empty?']())) {
          } else {
          
          $writer = [(assigned_doctitle = val)];
          $send(document, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        section_title = nil;
        if ($truthy(has_doctitle_line)) {
          
          if ($truthy(document.$sourcemap())) {
            source_location = reader.$cursor()};
          $b = self.$parse_section_title(reader, document), $a = Opal.to_ary($b), document['$id='](($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (doctitle = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (single_line = ($a[4] == null ? nil : $a[4])), $b;
          if ($truthy(assigned_doctitle)) {
            } else {
            
            $writer = [(assigned_doctitle = doctitle)];
            $send(document, 'title=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          if ($truthy(single_line)) {
            } else {
            document.$set_attribute("compat-mode", "")
          };
          if ($truthy((separator = block_attributes.$delete("separator")))) {
            document.$set_attribute("title-separator", separator)};
          if ($truthy(source_location)) {
            
            $writer = [source_location];
            $send(document.$header(), 'source_location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          
          $writer = ["doctitle", (section_title = doctitle)];
          $send(document.$attributes(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(document.$id())) {
            
            block_attributes.$delete(1);
            block_attributes.$delete("id");
            } else {
            
            if ($truthy((style = block_attributes.$delete(1)))) {
              
              style_attrs = $hash(1, style);
              self.$parse_style_attribute(style_attrs, reader);
              if ($truthy(style_attrs['$key?']("id"))) {
                
                $writer = ["id", style_attrs['$[]']("id")];
                $send(block_attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};};
            
            $writer = [block_attributes.$delete("id")];
            $send(document, 'id=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          };
          self.$parse_header_metadata(reader, document);};
        if ($truthy(($truthy($a = (val = document.$attributes()['$[]']("doctitle"))['$nil_or_empty?']()) ? $a : val['$=='](section_title)))) {
          } else {
          
          $writer = [(assigned_doctitle = val)];
          $send(document, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(assigned_doctitle)) {
          
          $writer = ["doctitle", assigned_doctitle];
          $send(document.$attributes(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if (document.$doctype()['$==']("manpage")) {
          self.$parse_manpage_header(reader, document)};
        return document.$finalize_header(block_attributes);
      }, TMP_Parser_parse_document_header_6.$$arity = 2);
      Opal.defs(self, '$parse_manpage_header', TMP_Parser_parse_manpage_header_7 = function $$parse_manpage_header(reader, document) {
        var self = this, m = nil, $writer = nil, name_section = nil, name_section_buffer = nil;

        
        if ($truthy((m = Opal.const_get_relative($nesting, 'ManpageTitleVolnumRx').$match(document.$attributes()['$[]']("doctitle"))))) {
          
          
          $writer = ["mantitle", document.$sub_attributes(m['$[]'](1).$rstrip().$downcase())];
          $send(document.$attributes(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["manvolnum", m['$[]'](2).$strip()];
          $send(document.$attributes(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          } else {
          
          self.$warn("" + "asciidoctor: ERROR: " + (reader.$prev_line_info()) + ": malformed manpage title");
          
          $writer = ["mantitle", document.$attributes()['$[]']("doctitle")];
          $send(document.$attributes(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["manvolnum", "1"];
          $send(document.$attributes(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        };
        reader.$skip_blank_lines();
        if ($truthy(self['$is_next_line_section?'](reader, $hash2([], {})))) {
          
          name_section = self.$initialize_section(reader, document, $hash2([], {}));
          if (name_section.$level()['$=='](1)) {
            
            name_section_buffer = reader.$read_lines_until($hash2(["break_on_blank_lines"], {"break_on_blank_lines": true})).$join(" ").$tr_s(" ", " ");
            if ($truthy((m = Opal.const_get_relative($nesting, 'ManpageNamePurposeRx').$match(name_section_buffer)))) {
              
              
              $writer = ["manname", document.$sub_attributes(m['$[]'](1))];
              $send(document.$attributes(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = ["manpurpose", m['$[]'](2)];
              $send(document.$attributes(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if (document.$backend()['$==']("manpage")) {
                
                
                $writer = ["docname", document.$attributes()['$[]']("manname")];
                $send(document.$attributes(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = ["outfilesuffix", "" + "." + (document.$attributes()['$[]']("manvolnum"))];
                $send(document.$attributes(), '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
                } else {
                return nil
              };
              } else {
              return self.$warn("" + "asciidoctor: ERROR: " + (reader.$prev_line_info()) + ": malformed name section body")
            };
            } else {
            return self.$warn("" + "asciidoctor: ERROR: " + (reader.$prev_line_info()) + ": name section title must be at level 1")
          };
          } else {
          return self.$warn("" + "asciidoctor: ERROR: " + (reader.$prev_line_info()) + ": name section expected")
        };
      }, TMP_Parser_parse_manpage_header_7.$$arity = 2);
      Opal.defs(self, '$next_section', TMP_Parser_next_section_8 = function $$next_section(reader, parent, attributes) {
        var $a, $b, $c, self = this, preamble = nil, part = nil, intro = nil, has_header = nil, doctype = nil, $writer = nil, section = nil, current_level = nil, expected_next_levels = nil, title = nil, next_level = nil, new_section = nil, block_line_info = nil, new_block = nil, first_block = nil, document = nil, child_block = nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        
        preamble = false;
        part = false;
        intro = false;
        if ($truthy(($truthy($a = (($b = parent.$context()['$==']("document")) ? parent.$blocks()['$empty?']() : parent.$context()['$==']("document"))) ? ($truthy($b = ($truthy($c = (has_header = parent['$has_header?']())) ? $c : attributes.$delete("invalid-header"))) ? $b : self['$is_next_line_section?'](reader, attributes)['$!']()) : $a))) {
          
          doctype = parent.$doctype();
          if ($truthy(($truthy($a = has_header) ? $a : (($b = doctype['$==']("book")) ? attributes['$[]'](1)['$!=']("abstract") : doctype['$==']("book"))))) {
            
            preamble = (intro = Opal.const_get_relative($nesting, 'Block').$new(parent, "preamble", $hash2(["content_model"], {"content_model": "compound"})));
            if ($truthy((($a = doctype['$==']("book")) ? parent['$attr?']("preface-title") : doctype['$==']("book")))) {
              
              $writer = [parent.$attr("preface-title")];
              $send(preamble, 'title=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            parent['$<<'](preamble);};
          section = parent;
          current_level = 0;
          if ($truthy(parent.$attributes()['$has_key?']("fragment"))) {
            expected_next_levels = nil
          } else if (doctype['$==']("book")) {
            expected_next_levels = [0, 1]
            } else {
            expected_next_levels = [1]
          };
          } else {
          
          doctype = parent.$document().$doctype();
          section = self.$initialize_section(reader, parent, attributes);
          attributes = (function() {if ($truthy((title = attributes['$[]']("title")))) {
            return $hash2(["title"], {"title": title})
            } else {
            return $hash2([], {})
          }; return nil; })();
          current_level = section.$level();
          if ($truthy((($a = current_level['$=='](0)) ? doctype['$==']("book") : current_level['$=='](0)))) {
            
            part = section.$special()['$!']();
            if ($truthy(($truthy($a = section.$special()) ? ["preface", "appendix"]['$include?'](section.$sectname()) : $a))) {
              expected_next_levels = [$rb_plus(current_level, 2)]
              } else {
              expected_next_levels = [$rb_plus(current_level, 1)]
            };
            } else {
            expected_next_levels = [$rb_plus(current_level, 1)]
          };
        };
        reader.$skip_blank_lines();
        while ($truthy(reader['$has_more_lines?']())) {
          
          self.$parse_block_metadata_lines(reader, section, attributes);
          if ($truthy((next_level = self['$is_next_line_section?'](reader, attributes)))) {
            
            next_level = $rb_plus(next_level, section.$document().$attr("leveloffset", 0).$to_i());
            if ($truthy(($truthy($b = $rb_gt(next_level, current_level)) ? $b : (($c = section.$context()['$==']("document")) ? next_level['$=='](0) : section.$context()['$==']("document"))))) {
              
              if ($truthy((($b = next_level['$=='](0)) ? doctype['$!=']("book") : next_level['$=='](0)))) {
                self.$warn("" + "asciidoctor: ERROR: " + (reader.$line_info()) + ": only book doctypes can contain level 0 sections")
              } else if ($truthy(($truthy($b = expected_next_levels) ? expected_next_levels['$include?'](next_level)['$!']() : $b))) {
                self.$warn($rb_plus($rb_plus("" + "asciidoctor: WARNING: " + (reader.$line_info()) + ": section title out of sequence: ", "" + "expected " + ((function() {if ($truthy($rb_gt(expected_next_levels.$size(), 1))) {
                  return "levels"
                  } else {
                  return "level"
                }; return nil; })()) + " " + ($rb_times(expected_next_levels, " or ")) + ", "), "" + "got level " + (next_level)))};
              $c = self.$next_section(reader, section, attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (attributes = ($b[1] == null ? nil : $b[1])), $c;
              section['$<<'](new_section);
              } else {
              
              if ($truthy((($b = next_level['$=='](0)) ? doctype['$!=']("book") : next_level['$=='](0)))) {
                self.$warn("" + "asciidoctor: ERROR: " + (reader.$line_info()) + ": only book doctypes can contain level 0 sections")};
              break;;
            };
            } else {
            
            block_line_info = reader.$line_info();
            if ($truthy((new_block = self.$next_block(reader, ($truthy($b = intro) ? $b : section), attributes, $hash2(["parse_metadata"], {"parse_metadata": false}))))) {
              
              if ($truthy(part)) {
                if ($truthy(section['$blocks?']()['$!']())) {
                  if ($truthy(new_block.$style()['$!=']("partintro"))) {
                    if (new_block.$context()['$==']("paragraph")) {
                      
                      
                      $writer = ["open"];
                      $send(new_block, 'context=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      
                      $writer = ["partintro"];
                      $send(new_block, 'style=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      } else {
                      
                      intro = Opal.const_get_relative($nesting, 'Block').$new(section, "open", $hash2(["content_model"], {"content_model": "compound"}));
                      
                      $writer = ["partintro"];
                      $send(intro, 'style=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      
                      $writer = [intro];
                      $send(new_block, 'parent=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      section['$<<'](intro);
                    }}
                } else if (section.$blocks().$size()['$=='](1)) {
                  
                  first_block = section.$blocks()['$[]'](0);
                  if ($truthy(($truthy($b = intro['$!']()) ? first_block.$content_model()['$==']("compound") : $b))) {
                    self.$warn("" + "asciidoctor: ERROR: " + (block_line_info) + ": illegal block content outside of partintro block")
                  } else if ($truthy(first_block.$content_model()['$!=']("compound"))) {
                    
                    intro = Opal.const_get_relative($nesting, 'Block').$new(section, "open", $hash2(["content_model"], {"content_model": "compound"}));
                    
                    $writer = ["partintro"];
                    $send(intro, 'style=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    section.$blocks().$shift();
                    if (first_block.$style()['$==']("partintro")) {
                      
                      
                      $writer = ["paragraph"];
                      $send(first_block, 'context=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      
                      $writer = [nil];
                      $send(first_block, 'style=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;};
                    
                    $writer = [intro];
                    $send(first_block, 'parent=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    intro['$<<'](first_block);
                    
                    $writer = [intro];
                    $send(new_block, 'parent=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    section['$<<'](intro);};}};
              ($truthy($b = intro) ? $b : section)['$<<'](new_block);
              attributes = $hash2([], {});};
          };
          reader.$skip_blank_lines();
        };
        if ($truthy(part)) {
          if ($truthy(($truthy($a = section['$blocks?']()) ? section.$blocks()['$[]'](-1).$context()['$==']("section") : $a))) {
            } else {
            self.$warn("" + "asciidoctor: ERROR: " + (reader.$line_info()) + ": invalid part, must have at least one section (e.g., chapter, appendix, etc.)")
          }
        } else if ($truthy(preamble)) {
          
          document = parent;
          if ($truthy(preamble['$blocks?']())) {
            if ($truthy(($truthy($a = ($truthy($b = Opal.const_get_relative($nesting, 'Compliance').$unwrap_standalone_preamble()) ? document.$blocks().$size()['$=='](1) : $b)) ? doctype['$!=']("book") : $a))) {
              
              document.$blocks().$shift();
              while ($truthy((child_block = preamble.$blocks().$shift()))) {
                
                
                $writer = [document];
                $send(child_block, 'parent=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                document['$<<'](child_block);
              };}
            } else {
            document.$blocks().$shift()
          };};
        return [(function() {if ($truthy(section['$!='](parent))) {
          return section
          } else {
          return nil
        }; return nil; })(), attributes.$dup()];
      }, TMP_Parser_next_section_8.$$arity = -3);
      Opal.defs(self, '$next_block', TMP_Parser_next_block_13 = function $$next_block(reader, parent, attributes, options) {
        var $a, $b, $c, $d, TMP_9, $e, TMP_10, TMP_11, TMP_12, self = this, skipped = nil, text_only = nil, parse_metadata = nil, document = nil, extensions = nil, block_extensions = nil, block_macro_extensions = nil, in_list = nil, block = nil, style = nil, explicit_style = nil, sourcemap = nil, source_location = nil, this_line = nil, delimited_block = nil, block_context = nil, cloaked_context = nil, terminator = nil, delimited_blk_match = nil, $writer = nil, first_char = nil, match = nil, blk_ctx = nil, posattrs = nil, target = nil, extension = nil, raw_attributes = nil, default_attrs = nil, expected_index = nil, list_item = nil, coids = nil, marker = nil, float_id = nil, float_reftext = nil, float_title = nil, float_level = nil, _ = nil, tmp_sect = nil, break_at_list = nil, lines = nil, first_line = nil, admonition_match = nil, admonition_name = nil, attribution = nil, citetitle = nil, $case = nil, language = nil, linenums = nil, default_language = nil, explicit_stem_syntax = nil, default_stem_syntax = nil, cursor = nil, block_reader = nil, content_model = nil, pos_attrs = nil, resolved_target = nil, scaledwidth = nil, block_id = nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        if (options == null) {
          options = $hash2([], {});
        }
        
        skipped = reader.$skip_blank_lines();
        if ($truthy(reader['$has_more_lines?']())) {
          } else {
          return nil
        };
        if ($truthy(($truthy($a = (text_only = options['$[]']("text"))) ? $rb_gt(skipped, 0) : $a))) {
          
          options.$delete("text");
          text_only = false;};
        parse_metadata = options.$fetch("parse_metadata", true);
        document = parent.$document();
        if ($truthy((extensions = document.$extensions()))) {
          
          block_extensions = extensions['$blocks?']();
          block_macro_extensions = extensions['$block_macros?']();
          } else {
          block_extensions = (block_macro_extensions = false)
        };
        in_list = Opal.const_get_relative($nesting, 'ListItem')['$==='](parent);
        block = nil;
        style = nil;
        explicit_style = nil;
        sourcemap = document.$sourcemap();
        source_location = nil;
        while ($truthy(($truthy($b = block['$!']()) ? reader['$has_more_lines?']() : $b))) {
          
          if ($truthy(($truthy($b = parse_metadata) ? self.$parse_block_metadata_line(reader, document, attributes, options) : $b))) {
            
            reader.$advance();
            continue;;};
          if ($truthy(sourcemap)) {
            source_location = reader.$cursor()};
          this_line = reader.$read_line();
          delimited_block = false;
          block_context = nil;
          cloaked_context = nil;
          terminator = nil;
          if ($truthy(attributes['$[]'](1))) {
            $c = self.$parse_style_attribute(attributes, reader), $b = Opal.to_ary($c), (style = ($b[0] == null ? nil : $b[0])), (explicit_style = ($b[1] == null ? nil : $b[1])), $c};
          if ($truthy((delimited_blk_match = self['$is_delimited_block?'](this_line, true)))) {
            
            delimited_block = true;
            block_context = (cloaked_context = delimited_blk_match.$context());
            terminator = delimited_blk_match.$terminator();
            if ($truthy(style['$!']())) {
              style = (($writer = ["style", block_context.$to_s()]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
            } else if ($truthy(style['$!='](block_context.$to_s()))) {
              if ($truthy(delimited_blk_match.$masq()['$include?'](style))) {
                block_context = style.$to_sym()
              } else if ($truthy(($truthy($b = delimited_blk_match.$masq()['$include?']("admonition")) ? Opal.const_get_relative($nesting, 'ADMONITION_STYLES')['$include?'](style) : $b))) {
                block_context = "admonition"
              } else if ($truthy(($truthy($b = block_extensions) ? extensions['$registered_for_block?'](style, block_context) : $b))) {
                block_context = style.$to_sym()
                } else {
                
                self.$warn("" + "asciidoctor: WARNING: " + (reader.$prev_line_info()) + ": invalid style for " + (block_context) + " block: " + (style));
                style = block_context.$to_s();
              }};};
          if ($truthy(delimited_block)) {
            } else {
            while ($truthy(true)) {
              
              if ($truthy(($truthy($c = ($truthy($d = style) ? Opal.const_get_relative($nesting, 'Compliance').$strict_verbatim_paragraphs() : $d)) ? Opal.const_get_relative($nesting, 'VERBATIM_STYLES')['$include?'](style) : $c))) {
                
                block_context = style.$to_sym();
                reader.$unshift_line(this_line);
                break;;};
              if ($truthy(text_only)) {
                } else {
                
                first_char = (function() {if ($truthy(Opal.const_get_relative($nesting, 'Compliance').$markdown_syntax())) {
                  return this_line.$lstrip().$chr()
                  } else {
                  return this_line.$chr()
                }; return nil; })();
                if ($truthy(($truthy($c = ($truthy($d = Opal.const_get_relative($nesting, 'LAYOUT_BREAK_LINES')['$has_key?'](first_char)) ? $rb_ge(this_line.$length(), 3) : $d)) ? (function() {if ($truthy(Opal.const_get_relative($nesting, 'Compliance').$markdown_syntax())) {
                  return Opal.const_get_relative($nesting, 'LayoutBreakLinePlusRx')
                  } else {
                  return Opal.const_get_relative($nesting, 'LayoutBreakLineRx')
                }; return nil; })()['$=~'](this_line) : $c))) {
                  
                  block = Opal.const_get_relative($nesting, 'Block').$new(parent, Opal.const_get_relative($nesting, 'LAYOUT_BREAK_LINES')['$[]'](first_char), $hash2(["content_model"], {"content_model": "empty"}));
                  break;;
                } else if ($truthy(($truthy($c = this_line['$end_with?']("]")) ? (match = Opal.const_get_relative($nesting, 'MediaBlockMacroRx').$match(this_line)) : $c))) {
                  
                  blk_ctx = match['$[]'](1).$to_sym();
                  block = Opal.const_get_relative($nesting, 'Block').$new(parent, blk_ctx, $hash2(["content_model"], {"content_model": "empty"}));
                  if (blk_ctx['$==']("image")) {
                    posattrs = ["alt", "width", "height"]
                  } else if (blk_ctx['$==']("video")) {
                    posattrs = ["poster", "width", "height"]
                    } else {
                    posattrs = []
                  };
                  if ($truthy(style)) {
                    
                    if (blk_ctx['$==']("image")) {
                      
                      $writer = ["alt", style];
                      $send(attributes, '[]=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];};
                    attributes.$delete("style");
                    style = nil;};
                  block.$parse_attributes(match['$[]'](3), posattrs, $hash2(["unescape_input", "sub_input", "sub_result", "into"], {"unescape_input": blk_ctx['$==']("image"), "sub_input": true, "sub_result": false, "into": attributes}));
                  target = block.$sub_attributes(match['$[]'](2), $hash2(["attribute_missing"], {"attribute_missing": "drop-line"}));
                  if ($truthy(target['$empty?']())) {
                    if (document.$attributes().$fetch("attribute-missing", Opal.const_get_relative($nesting, 'Compliance').$attribute_missing())['$==']("skip")) {
                      return Opal.const_get_relative($nesting, 'Block').$new(parent, "paragraph", $hash2(["content_model", "source"], {"content_model": "simple", "source": [this_line]}))
                      } else {
                      
                      attributes.$clear();
                      return nil;
                    }};
                  
                  $writer = ["target", target];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  break;;
                } else if ($truthy((($c = first_char['$==']("t")) ? (match = Opal.const_get_relative($nesting, 'TocBlockMacroRx').$match(this_line)) : first_char['$==']("t")))) {
                  
                  block = Opal.const_get_relative($nesting, 'Block').$new(parent, "toc", $hash2(["content_model"], {"content_model": "empty"}));
                  block.$parse_attributes(match['$[]'](1), [], $hash2(["sub_result", "into"], {"sub_result": false, "into": attributes}));
                  break;;
                } else if ($truthy(($truthy($c = ($truthy($d = block_macro_extensions) ? (match = Opal.const_get_relative($nesting, 'GenericBlockMacroRx').$match(this_line)) : $d)) ? (extension = extensions['$registered_for_block_macro?'](match['$[]'](1))) : $c))) {
                  
                  target = match['$[]'](2);
                  raw_attributes = match['$[]'](3);
                  if (extension.$config()['$[]']("content_model")['$==']("attributes")) {
                    if ($truthy(raw_attributes['$empty?']())) {
                      } else {
                      document.$parse_attributes(raw_attributes, ($truthy($c = extension.$config()['$[]']("pos_attrs")) ? $c : []), $hash2(["sub_input", "sub_result", "into"], {"sub_input": true, "sub_result": false, "into": attributes}))
                    }
                    } else {
                    
                    $writer = ["text", raw_attributes];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  };
                  if ($truthy((default_attrs = extension.$config()['$[]']("default_attrs")))) {
                    $send(default_attrs, 'each', [], (TMP_9 = function(k, v){var self = TMP_9.$$s || this, $e;
if (k == null) k = nil;if (v == null) v = nil;
                    return ($truthy($e = attributes['$[]'](k)) ? $e : (($writer = [k, v]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9))};
                  if ($truthy((block = extension.$process_method()['$[]'](parent, target, attributes.$dup())))) {
                    attributes.$replace(block.$attributes())
                    } else {
                    
                    attributes.$clear();
                    return nil;
                  };
                  break;;};
              };
              if ($truthy((match = Opal.const_get_relative($nesting, 'CalloutListRx').$match(this_line)))) {
                
                block = Opal.const_get_relative($nesting, 'List').$new(parent, "colist");
                
                $writer = ["style", "arabic"];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                reader.$unshift_line(this_line);
                expected_index = 1;
                while ($truthy(($truthy($d = match) ? $d : ($truthy($e = reader['$has_more_lines?']()) ? (match = Opal.const_get_relative($nesting, 'CalloutListRx').$match(reader.$peek_line())) : $e)))) {
                  
                  if ($truthy(match['$[]'](1).$to_i()['$!='](expected_index))) {
                    self.$warn("" + "asciidoctor: WARNING: " + (reader.$path()) + ": line " + ($rb_minus(reader.$lineno(), 2)) + ": callout list item index: expected " + (expected_index) + " got " + (match['$[]'](1)))};
                  list_item = self.$next_list_item(reader, block, match);
                  expected_index = $rb_plus(expected_index, 1);
                  if ($truthy(list_item)) {
                    
                    block['$<<'](list_item);
                    coids = document.$callouts().$callout_ids(block.$items().$size());
                    if ($truthy(coids['$empty?']()['$!']())) {
                      
                      $writer = ["coids", coids];
                      $send(list_item.$attributes(), '[]=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];
                      } else {
                      self.$warn("" + "asciidoctor: WARNING: " + (reader.$path()) + ": line " + ($rb_minus(reader.$lineno(), 2)) + ": no callouts refer to list item " + (block.$items().$size()))
                    };};
                  match = nil;
                };
                document.$callouts().$next_list();
                break;;
              } else if ($truthy(Opal.const_get_relative($nesting, 'UnorderedListRx')['$=~'](this_line))) {
                
                reader.$unshift_line(this_line);
                block = self.$next_outline_list(reader, "ulist", parent);
                break;;
              } else if ($truthy((match = Opal.const_get_relative($nesting, 'OrderedListRx').$match(this_line)))) {
                
                reader.$unshift_line(this_line);
                block = self.$next_outline_list(reader, "olist", parent);
                if ($truthy(($truthy($c = attributes['$[]']("style")['$!']()) ? block.$attributes()['$[]']("style")['$!']() : $c))) {
                  
                  marker = block.$items()['$[]'](0).$marker();
                  if ($truthy(marker['$start_with?']("."))) {
                    
                    $writer = ["style", ($truthy($c = Opal.const_get_relative($nesting, 'ORDERED_LIST_STYLES')['$[]']($rb_minus(marker.$length(), 1))) ? $c : Opal.const_get_relative($nesting, 'ORDERED_LIST_STYLES')['$[]'](0)).$to_s()];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                    } else {
                    
                    style = $send(Opal.const_get_relative($nesting, 'ORDERED_LIST_STYLES'), 'find', [], (TMP_10 = function(s){var self = TMP_10.$$s || this;
if (s == null) s = nil;
                    return Opal.const_get_relative($nesting, 'OrderedListMarkerRxMap')['$[]'](s)['$=~'](marker)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
                    
                    $writer = ["style", ($truthy($c = style) ? $c : Opal.const_get_relative($nesting, 'ORDERED_LIST_STYLES')['$[]'](0)).$to_s()];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                  };};
                break;;
              } else if ($truthy((match = Opal.const_get_relative($nesting, 'DescriptionListRx').$match(this_line)))) {
                
                reader.$unshift_line(this_line);
                block = self.$next_labeled_list(reader, match, parent);
                break;;
              } else if ($truthy(($truthy($c = ($truthy($d = style['$==']("float")) ? $d : style['$==']("discrete"))) ? self['$is_section_title?'](this_line, (function() {if ($truthy(Opal.const_get_relative($nesting, 'Compliance').$underline_style_section_titles())) {
                return reader.$peek_line(true)
                } else {
                return nil
              }; return nil; })()) : $c))) {
                
                reader.$unshift_line(this_line);
                $d = self.$parse_section_title(reader, document), $c = Opal.to_ary($d), (float_id = ($c[0] == null ? nil : $c[0])), (float_reftext = ($c[1] == null ? nil : $c[1])), (float_title = ($c[2] == null ? nil : $c[2])), (float_level = ($c[3] == null ? nil : $c[3])), (_ = ($c[4] == null ? nil : $c[4])), $d;
                if ($truthy(float_reftext)) {
                  
                  $writer = ["reftext", float_reftext];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
                if ($truthy(attributes['$has_key?']("id"))) {
                  float_id = ($truthy($c = float_id) ? $c : attributes['$[]']("id"))};
                block = Opal.const_get_relative($nesting, 'Block').$new(parent, "floating_title", $hash2(["content_model"], {"content_model": "empty"}));
                if ($truthy(float_id['$nil_or_empty?']())) {
                  
                  tmp_sect = Opal.const_get_relative($nesting, 'Section').$new(parent);
                  
                  $writer = [float_title];
                  $send(tmp_sect, 'title=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [tmp_sect.$generate_id()];
                  $send(block, 'id=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  } else {
                  
                  $writer = [float_id];
                  $send(block, 'id=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                };
                
                $writer = [float_level];
                $send(block, 'level=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = [float_title];
                $send(block, 'title=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                break;;
              } else if ($truthy(($truthy($c = style) ? style['$!=']("normal") : $c))) {
                if ($truthy(Opal.const_get_relative($nesting, 'PARAGRAPH_STYLES')['$include?'](style))) {
                  
                  block_context = style.$to_sym();
                  cloaked_context = "paragraph";
                  reader.$unshift_line(this_line);
                  break;;
                } else if ($truthy(Opal.const_get_relative($nesting, 'ADMONITION_STYLES')['$include?'](style))) {
                  
                  block_context = "admonition";
                  cloaked_context = "paragraph";
                  reader.$unshift_line(this_line);
                  break;;
                } else if ($truthy(($truthy($c = block_extensions) ? extensions['$registered_for_block?'](style, "paragraph") : $c))) {
                  
                  block_context = style.$to_sym();
                  cloaked_context = "paragraph";
                  reader.$unshift_line(this_line);
                  break;;
                  } else {
                  
                  self.$warn("" + "asciidoctor: WARNING: " + (reader.$prev_line_info()) + ": invalid style for paragraph: " + (style));
                  style = nil;
                }};
              break_at_list = (($c = skipped['$=='](0)) ? in_list : skipped['$=='](0));
              if ($truthy(($truthy($c = style['$!=']("normal")) ? Opal.const_get_relative($nesting, 'LiteralParagraphRx')['$=~'](this_line) : $c))) {
                
                reader.$unshift_line(this_line);
                lines = self.$read_paragraph_lines(reader, break_at_list, $hash2(["skip_line_comments"], {"skip_line_comments": text_only}));
                self['$adjust_indentation!'](lines);
                block = Opal.const_get_relative($nesting, 'Block').$new(parent, "literal", $hash2(["content_model", "source", "attributes"], {"content_model": "verbatim", "source": lines, "attributes": attributes}));
                if ($truthy(in_list)) {
                  block.$set_option("listparagraph")};
                } else {
                
                reader.$unshift_line(this_line);
                lines = self.$read_paragraph_lines(reader, break_at_list, $hash2(["skip_line_comments"], {"skip_line_comments": true}));
                if ($truthy(lines['$empty?']())) {
                  
                  reader.$advance();
                  return nil;};
                self.$catalog_inline_anchors(lines.$join(Opal.const_get_relative($nesting, 'EOL')), document);
                first_line = lines['$[]'](0);
                if ($truthy(($truthy($c = text_only['$!']()) ? (admonition_match = Opal.const_get_relative($nesting, 'AdmonitionParagraphRx').$match(first_line)) : $c))) {
                  
                  
                  $writer = [0, admonition_match.$post_match().$lstrip()];
                  $send(lines, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = ["style", admonition_match['$[]'](1)];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = ["name", (admonition_name = admonition_match['$[]'](1).$downcase())];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  ($truthy($c = attributes['$[]']("caption")) ? $c : (($writer = ["caption", document.$attributes()['$[]']("" + (admonition_name) + "-caption")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
                  block = Opal.const_get_relative($nesting, 'Block').$new(parent, "admonition", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
                } else if ($truthy(($truthy($c = ($truthy($d = text_only['$!']()) ? Opal.const_get_relative($nesting, 'Compliance').$markdown_syntax() : $d)) ? first_line['$start_with?']("> ") : $c))) {
                  
                  $send(lines, 'map!', [], (TMP_11 = function(line){var self = TMP_11.$$s || this;
if (line == null) line = nil;
                  if (line['$=='](">")) {
                      return line['$[]']($range(1, -1, false))
                    } else if ($truthy(line['$start_with?']("> "))) {
                      return line['$[]']($range(2, -1, false))
                      } else {
                      return line
                    }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
                  if ($truthy(lines['$[]'](-1)['$start_with?']("-- "))) {
                    
                    $d = lines.$pop()['$[]']($range(3, -1, false)).$split(", ", 2), $c = Opal.to_ary($d), (attribution = ($c[0] == null ? nil : $c[0])), (citetitle = ($c[1] == null ? nil : $c[1])), $d;
                    while ($truthy(lines['$[]'](-1)['$empty?']())) {
                      lines.$pop()
                    };
                    } else {
                    $d = nil, $c = Opal.to_ary($d), (attribution = ($c[0] == null ? nil : $c[0])), (citetitle = ($c[1] == null ? nil : $c[1])), $d
                  };
                  
                  $writer = ["style", "quote"];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  if ($truthy(attribution)) {
                    
                    $writer = ["attribution", attribution];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];};
                  if ($truthy(citetitle)) {
                    
                    $writer = ["citetitle", citetitle];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];};
                  block = self.$build_block("quote", "compound", false, parent, Opal.const_get_relative($nesting, 'Reader').$new(lines), attributes);
                } else if ($truthy(($truthy($c = text_only['$!']()) ? self['$blockquote?'](lines, first_line) : $c))) {
                  
                  
                  $writer = [0, first_line['$[]']($range(1, -1, false))];
                  $send(lines, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  $d = lines.$pop()['$[]']($range(3, -1, false)).$split(", ", 2), $c = Opal.to_ary($d), (attribution = ($c[0] == null ? nil : $c[0])), (citetitle = ($c[1] == null ? nil : $c[1])), $d;
                  while ($truthy(lines['$[]'](-1)['$empty?']())) {
                    lines.$pop()
                  };
                  
                  $writer = [-1, lines['$[]'](-1).$chop()];
                  $send(lines, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = ["style", "quote"];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  if ($truthy(attribution)) {
                    
                    $writer = ["attribution", attribution];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];};
                  if ($truthy(citetitle)) {
                    
                    $writer = ["citetitle", citetitle];
                    $send(attributes, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];};
                  block = Opal.const_get_relative($nesting, 'Block').$new(parent, "quote", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
                  } else {
                  
                  if (style['$==']("normal")) {
                    self['$adjust_indentation!'](lines)};
                  block = Opal.const_get_relative($nesting, 'Block').$new(parent, "paragraph", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
                };
              };
              break;;
            }
          };
          if ($truthy(($truthy($b = block['$!']()) ? block_context : $b))) {
            
            if ($truthy(($truthy($b = block_context['$==']("abstract")) ? $b : block_context['$==']("partintro")))) {
              block_context = "open"};
            $case = block_context;
            if ("admonition"['$===']($case)) {
            
            $writer = ["name", (admonition_name = style.$downcase())];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            ($truthy($b = attributes['$[]']("caption")) ? $b : (($writer = ["caption", document.$attributes()['$[]']("" + (admonition_name) + "-caption")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            block = self.$build_block(block_context, "compound", terminator, parent, reader, attributes);}
            else if ("comment"['$===']($case)) {
            self.$build_block(block_context, "skip", terminator, parent, reader, attributes);
            return nil;}
            else if ("example"['$===']($case)) {block = self.$build_block(block_context, "compound", terminator, parent, reader, attributes)}
            else if ("listing"['$===']($case) || "fenced_code"['$===']($case) || "source"['$===']($case)) {
            if (block_context['$==']("fenced_code")) {
              
              style = (($writer = ["style", "source"]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              $c = this_line['$[]']($range(3, -1, false)).$tr(" ", "").$split(",", 2), $b = Opal.to_ary($c), (language = ($b[0] == null ? nil : $b[0])), (linenums = ($b[1] == null ? nil : $b[1])), $c;
              if ($truthy(language['$nil_or_empty?']()['$!']())) {
                
                
                $writer = ["language", language];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy(linenums['$nil_or_empty?']())) {
                  } else {
                  
                  $writer = ["linenums", ""];
                  $send(attributes, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                };
              } else if ($truthy((default_language = document.$attributes()['$[]']("source-language")))) {
                
                $writer = ["language", default_language];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(($truthy($b = attributes['$key?']("indent")['$!']()) ? document.$attributes()['$key?']("source-indent") : $b))) {
                
                $writer = ["indent", document.$attributes()['$[]']("source-indent")];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              terminator = terminator['$[]']($range(0, 2, false));
            } else if (block_context['$==']("source")) {
              
              Opal.const_get_relative($nesting, 'AttributeList').$rekey(attributes, [nil, "language", "linenums"]);
              if ($truthy(attributes['$key?']("language"))) {
              } else if ($truthy((default_language = document.$attributes()['$[]']("source-language")))) {
                
                $writer = ["language", default_language];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(($truthy($b = attributes['$key?']("indent")['$!']()) ? document.$attributes()['$key?']("source-indent") : $b))) {
                
                $writer = ["indent", document.$attributes()['$[]']("source-indent")];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};};
            block = self.$build_block("listing", "verbatim", terminator, parent, reader, attributes);}
            else if ("literal"['$===']($case)) {block = self.$build_block(block_context, "verbatim", terminator, parent, reader, attributes)}
            else if ("pass"['$===']($case)) {block = self.$build_block(block_context, "raw", terminator, parent, reader, attributes)}
            else if ("stem"['$===']($case) || "latexmath"['$===']($case) || "asciimath"['$===']($case)) {
            if (block_context['$==']("stem")) {
              
              $writer = ["style", (function() {if ($truthy((explicit_stem_syntax = attributes['$[]'](2)))) {
                if ($truthy(explicit_stem_syntax['$include?']("tex"))) {
                  return "latexmath"
                  } else {
                  return "asciimath"
                }
              } else if ($truthy((default_stem_syntax = document.$attributes()['$[]']("stem"))['$nil_or_empty?']())) {
                return "asciimath"
                } else {
                return default_stem_syntax
              }; return nil; })()];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            block = self.$build_block("stem", "raw", terminator, parent, reader, attributes);}
            else if ("open"['$===']($case) || "sidebar"['$===']($case)) {block = self.$build_block(block_context, "compound", terminator, parent, reader, attributes)}
            else if ("table"['$===']($case)) {
            cursor = reader.$cursor();
            block_reader = Opal.const_get_relative($nesting, 'Reader').$new(reader.$read_lines_until($hash2(["terminator", "skip_line_comments"], {"terminator": terminator, "skip_line_comments": true})), cursor);
            $case = terminator.$chr();
            if (","['$===']($case)) {
            $writer = ["format", "csv"];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];}
            else if (":"['$===']($case)) {
            $writer = ["format", "dsv"];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
            block = self.$next_table(block_reader, parent, attributes);}
            else if ("quote"['$===']($case) || "verse"['$===']($case)) {
            Opal.const_get_relative($nesting, 'AttributeList').$rekey(attributes, [nil, "attribution", "citetitle"]);
            block = self.$build_block(block_context, (function() {if (block_context['$==']("verse")) {
              return "verbatim"
              } else {
              return "compound"
            }; return nil; })(), terminator, parent, reader, attributes);}
            else {if ($truthy(($truthy($b = block_extensions) ? (extension = extensions['$registered_for_block?'](block_context, cloaked_context)) : $b))) {
              
              if ($truthy((content_model = extension.$config()['$[]']("content_model"))['$!=']("skip"))) {
                
                if ($truthy((pos_attrs = ($truthy($b = extension.$config()['$[]']("pos_attrs")) ? $b : []))['$empty?']()['$!']())) {
                  Opal.const_get_relative($nesting, 'AttributeList').$rekey(attributes, [nil].$concat(pos_attrs))};
                if ($truthy((default_attrs = extension.$config()['$[]']("default_attrs")))) {
                  $send(default_attrs, 'each', [], (TMP_12 = function(k, v){var self = TMP_12.$$s || this, $f;
if (k == null) k = nil;if (v == null) v = nil;
                  return ($truthy($f = attributes['$[]'](k)) ? $f : (($writer = [k, v]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))};};
              block = self.$build_block(block_context, content_model, terminator, parent, reader, attributes, $hash2(["extension"], {"extension": extension}));
              if ($truthy(($truthy($b = block) ? content_model['$!=']("skip") : $b))) {
                } else {
                
                attributes.$clear();
                return nil;
              };
              } else {
              self.$raise("" + "Unsupported block type " + (block_context) + " at " + (reader.$line_info()))
            }};};
        };
        if ($truthy(block)) {
          
          if ($truthy(source_location)) {
            
            $writer = [source_location];
            $send(block, 'source_location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(block['$title?']())) {
            } else {
            
            $writer = [attributes['$[]']("title")];
            $send(block, 'title=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          if (block.$context()['$==']("image")) {
            
            resolved_target = attributes['$[]']("target");
            block.$document().$register("images", resolved_target);
            ($truthy($a = attributes['$[]']("alt")) ? $a : (($writer = ["alt", Opal.const_get_relative($nesting, 'Helpers').$basename(resolved_target, true).$tr("_-", " ")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            
            $writer = ["alt", block.$sub_specialchars(attributes['$[]']("alt"))];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            block.$assign_caption(attributes.$delete("caption"), "figure");
            if ($truthy((scaledwidth = attributes['$[]']("scaledwidth")))) {
              if ($truthy($range(48, 57, false)['$include?'](($truthy($a = scaledwidth['$[]'](-1)) ? $a : 0).$ord()))) {
                
                $writer = ["scaledwidth", "" + (scaledwidth) + "%"];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];}};
            } else {
            ($truthy($a = block.$caption()) ? $a : (($writer = [attributes.$delete("caption")]), $send(block, 'caption=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
          };
          
          $writer = [attributes['$[]']("style")];
          $send(block, 'style=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy((block_id = ($truthy($a = block.$id()) ? $a : (($writer = [attributes['$[]']("id")]), $send(block, 'id=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))))) {
            document.$register("ids", [block_id, ($truthy($a = attributes['$[]']("reftext")) ? $a : (function() {if ($truthy(block['$title?']())) {
              return block.$title()
              } else {
              return nil
            }; return nil; })())])};
          if ($truthy(attributes['$empty?']())) {
            } else {
            block.$attributes().$update(attributes)
          };
          block.$lock_in_subs();
          if ($truthy(block['$sub?']("callouts"))) {
            if ($truthy(self.$catalog_callouts(block.$source(), document))) {
              } else {
              block.$remove_sub("callouts")
            }};};
        return block;
      }, TMP_Parser_next_block_13.$$arity = -3);
      Opal.defs(self, '$blockquote?', TMP_Parser_blockquote$q_14 = function(lines, first_line) {
        var $a, $b, $c, $d, self = this;

        if (first_line == null) {
          first_line = nil;
        }
        return ($truthy($a = ($truthy($b = ($truthy($c = $rb_gt(lines.$size(), 1)) ? ($truthy($d = first_line) ? $d : lines['$[]'](0))['$start_with?']("\"") : $c)) ? lines['$[]'](-1)['$start_with?']("-- ") : $b)) ? lines['$[]'](-2)['$end_with?']("\"") : $a)
      }, TMP_Parser_blockquote$q_14.$$arity = -2);
      Opal.defs(self, '$read_paragraph_lines', TMP_Parser_read_paragraph_lines_15 = function $$read_paragraph_lines(reader, break_at_list, opts) {
        var self = this, $writer = nil, break_condition = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        
        $writer = ["break_on_blank_lines", true];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["break_on_list_continuation", true];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["preserve_last_line", true];
        $send(opts, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        break_condition = (function() {if ($truthy(break_at_list)) {
          
          if ($truthy(Opal.const_get_relative($nesting, 'Compliance').$block_terminates_paragraph())) {
            return Opal.const_get_relative($nesting, 'StartOfBlockOrListProc')
            } else {
            return Opal.const_get_relative($nesting, 'StartOfListProc')
          };
          } else {
          
          if ($truthy(Opal.const_get_relative($nesting, 'Compliance').$block_terminates_paragraph())) {
            return Opal.const_get_relative($nesting, 'StartOfBlockProc')
            } else {
            return Opal.const_get_relative($nesting, 'NoOp')
          };
        }; return nil; })();
        return $send(reader, 'read_lines_until', [opts], break_condition.$to_proc());
      }, TMP_Parser_read_paragraph_lines_15.$$arity = -3);
      Opal.defs(self, '$is_delimited_block?', TMP_Parser_is_delimited_block$q_16 = function(line, return_match_data) {
        var $a, self = this, line_len = nil, tip = nil, tl = nil, fenced_code = nil, tip_3 = nil, context = nil, masq = nil;

        if (return_match_data == null) {
          return_match_data = false;
        }
        
        if ($truthy(($truthy($a = $rb_gt((line_len = line.$length()), 1)) ? Opal.const_get_relative($nesting, 'DELIMITED_BLOCK_LEADERS')['$include?'](line['$[]']($range(0, 1, false))) : $a))) {
          } else {
          return nil
        };
        if (line_len['$=='](2)) {
          
          tip = line;
          tl = 2;
          } else {
          
          if ($truthy($rb_le(line_len, 4))) {
            
            tip = line;
            tl = line_len;
            } else {
            
            tip = line['$[]']($range(0, 3, false));
            tl = 4;
          };
          fenced_code = false;
          if ($truthy(Opal.const_get_relative($nesting, 'Compliance').$markdown_syntax())) {
            
            tip_3 = (function() {if (tl['$=='](4)) {
              return tip.$chop()
              } else {
              return tip
            }; return nil; })();
            if (tip_3['$==']("```")) {
              
              if ($truthy((($a = tl['$=='](4)) ? tip['$end_with?']("`") : tl['$=='](4)))) {
                return nil};
              tip = tip_3;
              tl = 3;
              fenced_code = true;};};
          if ($truthy((($a = tl['$=='](3)) ? fenced_code['$!']() : tl['$=='](3)))) {
            return nil};
        };
        if ($truthy(Opal.const_get_relative($nesting, 'DELIMITED_BLOCKS')['$has_key?'](tip))) {
          if ($truthy(($truthy($a = $rb_lt(tl, 4)) ? $a : tl['$=='](line_len)))) {
            if ($truthy(return_match_data)) {
              
              $a = [].concat(Opal.to_a(Opal.const_get_relative($nesting, 'DELIMITED_BLOCKS')['$[]'](tip))), (context = ($a[0] == null ? nil : $a[0])), (masq = ($a[1] == null ? nil : $a[1])), $a;
              return Opal.const_get_relative($nesting, 'BlockMatchData').$new(context, masq, tip, tip);
              } else {
              return true
            }
          } else if ((("" + (tip)) + ($rb_times(tip['$[]']($range(-1, -1, false)), $rb_minus(line_len, tl))))['$=='](line)) {
            if ($truthy(return_match_data)) {
              
              $a = [].concat(Opal.to_a(Opal.const_get_relative($nesting, 'DELIMITED_BLOCKS')['$[]'](tip))), (context = ($a[0] == null ? nil : $a[0])), (masq = ($a[1] == null ? nil : $a[1])), $a;
              return Opal.const_get_relative($nesting, 'BlockMatchData').$new(context, masq, tip, line);
              } else {
              return true
            }
            } else {
            return nil
          }
          } else {
          return nil
        };
      }, TMP_Parser_is_delimited_block$q_16.$$arity = -2);
      Opal.defs(self, '$build_block', TMP_Parser_build_block_17 = function $$build_block(block_context, content_model, terminator, parent, reader, attributes, options) {
        var $a, self = this, skip_processing = nil, parse_as_content_model = nil, lines = nil, block_reader = nil, cursor = nil, indent = nil, tab_size = nil, extension = nil, block = nil, $writer = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        if ($truthy(($truthy($a = content_model['$==']("skip")) ? $a : content_model['$==']("raw")))) {
          
          skip_processing = content_model['$==']("skip");
          parse_as_content_model = "simple";
          } else {
          
          skip_processing = false;
          parse_as_content_model = content_model;
        };
        if ($truthy(terminator['$nil?']())) {
          
          if (parse_as_content_model['$==']("verbatim")) {
            lines = reader.$read_lines_until($hash2(["break_on_blank_lines", "break_on_list_continuation"], {"break_on_blank_lines": true, "break_on_list_continuation": true}))
            } else {
            
            if (content_model['$==']("compound")) {
              content_model = "simple"};
            lines = self.$read_paragraph_lines(reader, false, $hash2(["skip_line_comments", "skip_processing"], {"skip_line_comments": true, "skip_processing": true}));
          };
          block_reader = nil;
        } else if ($truthy(parse_as_content_model['$!=']("compound"))) {
          
          lines = reader.$read_lines_until($hash2(["terminator", "skip_processing"], {"terminator": terminator, "skip_processing": skip_processing}));
          block_reader = nil;
        } else if (terminator['$=='](false)) {
          
          lines = nil;
          block_reader = reader;
          } else {
          
          lines = nil;
          cursor = reader.$cursor();
          block_reader = Opal.const_get_relative($nesting, 'Reader').$new(reader.$read_lines_until($hash2(["terminator", "skip_processing"], {"terminator": terminator, "skip_processing": skip_processing})), cursor);
        };
        if (content_model['$==']("skip")) {
          
          attributes.$clear();
          return lines;};
        if (content_model['$==']("verbatim")) {
          if ($truthy((indent = attributes['$[]']("indent")))) {
            self['$adjust_indentation!'](lines, indent, ($truthy($a = attributes['$[]']("tabsize")) ? $a : parent.$document().$attributes()['$[]']("tabsize")))
          } else if ($truthy($rb_gt((tab_size = ($truthy($a = attributes['$[]']("tabsize")) ? $a : parent.$document().$attributes()['$[]']("tabsize")).$to_i()), 0))) {
            self['$adjust_indentation!'](lines, nil, tab_size)}};
        if ($truthy((extension = options['$[]']("extension")))) {
          
          attributes.$delete("style");
          if ($truthy((block = extension.$process_method()['$[]'](parent, ($truthy($a = block_reader) ? $a : Opal.const_get_relative($nesting, 'Reader').$new(lines)), attributes.$dup())))) {
            
            attributes.$replace(block.$attributes());
            if ($truthy((($a = block.$content_model()['$==']("compound")) ? (lines = block.$lines())['$nil_or_empty?']()['$!']() : block.$content_model()['$==']("compound")))) {
              
              content_model = "compound";
              block_reader = Opal.const_get_relative($nesting, 'Reader').$new(lines);};
            } else {
            return nil
          };
          } else {
          block = Opal.const_get_relative($nesting, 'Block').$new(parent, block_context, $hash2(["content_model", "source", "attributes"], {"content_model": content_model, "source": lines, "attributes": attributes}))
        };
        if ($truthy(($truthy($a = attributes['$has_key?']("title")) ? block.$document()['$attr?']("" + (block.$context()) + "-caption") : $a))) {
          
          
          $writer = [attributes.$delete("title")];
          $send(block, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          block.$assign_caption(attributes.$delete("caption"));};
        if (content_model['$==']("compound")) {
          self.$parse_blocks(block_reader, block)};
        return block;
      }, TMP_Parser_build_block_17.$$arity = -7);
      Opal.defs(self, '$parse_blocks', TMP_Parser_parse_blocks_18 = function $$parse_blocks(reader, parent) {
        var $a, self = this, block = nil;

        while ($truthy(reader['$has_more_lines?']())) {
          
          block = Opal.const_get_relative($nesting, 'Parser').$next_block(reader, parent);
          if ($truthy(block)) {
            parent['$<<'](block)};
        }
      }, TMP_Parser_parse_blocks_18.$$arity = 2);
      Opal.defs(self, '$next_outline_list', TMP_Parser_next_outline_list_19 = function $$next_outline_list(reader, list_type, parent) {
        var $a, $b, self = this, list_block = nil, $writer = nil, match = nil, marker = nil, this_item_level = nil, ancestor = nil, list_item = nil;

        
        list_block = Opal.const_get_relative($nesting, 'List').$new(parent, list_type);
        if (parent.$context()['$=='](list_type)) {
          
          $writer = [$rb_plus(parent.$level(), 1)];
          $send(list_block, 'level=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = [1];
          $send(list_block, 'level=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        while ($truthy(($truthy($b = reader['$has_more_lines?']()) ? (match = Opal.const_get_relative($nesting, 'ListRxMap')['$[]'](list_type).$match(reader.$peek_line())) : $b))) {
          
          marker = self.$resolve_list_marker(list_type, match['$[]'](1));
          if ($truthy(($truthy($b = list_block['$items?']()) ? marker['$!='](list_block.$items()['$[]'](0).$marker()) : $b))) {
            
            this_item_level = $rb_plus(list_block.$level(), 1);
            ancestor = parent;
            while (ancestor.$context()['$=='](list_type)) {
              
              if (marker['$=='](ancestor.$items()['$[]'](0).$marker())) {
                
                this_item_level = ancestor.$level();
                break;;};
              ancestor = ancestor.$parent();
            };
            } else {
            this_item_level = list_block.$level()
          };
          if ($truthy(($truthy($b = list_block['$items?']()['$!']()) ? $b : this_item_level['$=='](list_block.$level())))) {
            list_item = self.$next_list_item(reader, list_block, match)
          } else if ($truthy($rb_lt(this_item_level, list_block.$level()))) {
            break;
          } else if ($truthy($rb_gt(this_item_level, list_block.$level()))) {
            list_block.$items()['$[]'](-1)['$<<'](self.$next_block(reader, list_block))};
          if ($truthy(list_item)) {
            list_block['$<<'](list_item)};
          list_item = nil;
          reader.$skip_blank_lines();
        };
        return list_block;
      }, TMP_Parser_next_outline_list_19.$$arity = 3);
      Opal.defs(self, '$catalog_callouts', TMP_Parser_catalog_callouts_21 = function $$catalog_callouts(text, document) {
        var TMP_20, self = this, found = nil;

        
        found = false;
        if ($truthy(text['$include?']("<"))) {
          $send(text, 'scan', [Opal.const_get_relative($nesting, 'CalloutQuickScanRx')], (TMP_20 = function(){var self = TMP_20.$$s || this, m = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0).$chr()['$!=']("\\"))) {
              document.$callouts().$register(m['$[]'](2))};
            return (found = true);}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20))};
        return found;
      }, TMP_Parser_catalog_callouts_21.$$arity = 2);
      Opal.defs(self, '$catalog_inline_anchors', TMP_Parser_catalog_inline_anchors_23 = function $$catalog_inline_anchors(text, document) {
        var TMP_22, self = this;

        
        if ($truthy(text['$include?']("["))) {
          $send(text, 'scan', [Opal.const_get_relative($nesting, 'InlineAnchorRx')], (TMP_22 = function(){var self = TMP_22.$$s || this, $a, m = nil, id = nil, reftext = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          
            m = $gvars["~"];
            if ($truthy(m['$[]'](0)['$start_with?']("\\"))) {
              return nil;};
            id = ($truthy($a = m['$[]'](1)) ? $a : m['$[]'](3));
            reftext = ($truthy($a = m['$[]'](2)) ? $a : m['$[]'](4));
            return document.$register("ids", [id, reftext]);}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22))};
        return nil;
      }, TMP_Parser_catalog_inline_anchors_23.$$arity = 2);
      Opal.defs(self, '$next_labeled_list', TMP_Parser_next_labeled_list_24 = function $$next_labeled_list(reader, match, parent) {
        var $a, $b, $c, self = this, list_block = nil, previous_pair = nil, sibling_pattern = nil, term = nil, item = nil;

        
        list_block = Opal.const_get_relative($nesting, 'List').$new(parent, "dlist");
        previous_pair = nil;
        sibling_pattern = Opal.const_get_relative($nesting, 'DescriptionListSiblingRx')['$[]'](match['$[]'](2));
        while ($truthy(($truthy($b = match) ? $b : ($truthy($c = reader['$has_more_lines?']()) ? (match = sibling_pattern.$match(reader.$peek_line())) : $c)))) {
          
          $c = self.$next_list_item(reader, list_block, match, sibling_pattern), $b = Opal.to_ary($c), (term = ($b[0] == null ? nil : $b[0])), (item = ($b[1] == null ? nil : $b[1])), $c;
          if ($truthy(($truthy($b = previous_pair) ? previous_pair['$[]'](-1)['$!']() : $b))) {
            
            previous_pair.$pop();
            previous_pair['$[]'](0)['$<<'](term);
            previous_pair['$<<'](item);
            } else {
            list_block.$items()['$<<']((previous_pair = [[term], item]))
          };
          match = nil;
        };
        return list_block;
      }, TMP_Parser_next_labeled_list_24.$$arity = 3);
      Opal.defs(self, '$next_list_item', TMP_Parser_next_list_item_25 = function $$next_list_item(reader, list_block, match, sibling_trait) {
        var $a, self = this, list_type = nil, list_term = nil, list_item = nil, has_text = nil, text = nil, checkbox = nil, checked = nil, $writer = nil, cursor = nil, list_item_reader = nil, comment_lines = nil, subsequent_line = nil, continuation_connects_first_block = nil, content_adjacent = nil, options = nil, new_block = nil;

        if (sibling_trait == null) {
          sibling_trait = nil;
        }
        
        if ((list_type = list_block.$context())['$==']("dlist")) {
          
          list_term = Opal.const_get_relative($nesting, 'ListItem').$new(list_block, match['$[]'](1));
          list_item = Opal.const_get_relative($nesting, 'ListItem').$new(list_block, match['$[]'](3));
          has_text = match['$[]'](3)['$nil_or_empty?']()['$!']();
          } else {
          
          text = match['$[]'](2);
          checkbox = false;
          if ($truthy((($a = list_type['$==']("ulist")) ? text['$start_with?']("[") : list_type['$==']("ulist")))) {
            if ($truthy(text['$start_with?']("[ ] "))) {
              
              checkbox = true;
              checked = false;
              text = text['$[]']($range(3, -1, false)).$lstrip();
            } else if ($truthy(($truthy($a = text['$start_with?']("[x] ")) ? $a : text['$start_with?']("[*] ")))) {
              
              checkbox = true;
              checked = true;
              text = text['$[]']($range(3, -1, false)).$lstrip();}};
          list_item = Opal.const_get_relative($nesting, 'ListItem').$new(list_block, text);
          if ($truthy(checkbox)) {
            
            
            $writer = ["checklist-option", ""];
            $send(list_block.$attributes(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["checkbox", ""];
            $send(list_item.$attributes(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(checked)) {
              
              $writer = ["checked", ""];
              $send(list_item.$attributes(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};};
          sibling_trait = ($truthy($a = sibling_trait) ? $a : self.$resolve_list_marker(list_type, match['$[]'](1), list_block.$items().$size(), true, reader));
          
          $writer = [sibling_trait];
          $send(list_item, 'marker=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          has_text = true;
        };
        reader.$advance();
        cursor = reader.$cursor();
        list_item_reader = Opal.const_get_relative($nesting, 'Reader').$new(self.$read_lines_for_list_item(reader, list_type, sibling_trait, has_text), cursor);
        if ($truthy(list_item_reader['$has_more_lines?']())) {
          
          comment_lines = list_item_reader.$skip_line_comments();
          subsequent_line = list_item_reader.$peek_line();
          if ($truthy(comment_lines['$empty?']())) {
            } else {
            list_item_reader.$unshift_lines(comment_lines)
          };
          if ($truthy(subsequent_line['$nil?']()['$!']())) {
            
            continuation_connects_first_block = subsequent_line['$empty?']();
            if ($truthy(($truthy($a = continuation_connects_first_block['$!']()) ? list_type['$!=']("dlist") : $a))) {
              has_text = false};
            content_adjacent = ($truthy($a = continuation_connects_first_block['$!']()) ? subsequent_line['$empty?']()['$!']() : $a);
            } else {
            
            continuation_connects_first_block = false;
            content_adjacent = false;
          };
          options = $hash2(["text"], {"text": has_text['$!']()});
          while ($truthy(list_item_reader['$has_more_lines?']())) {
            if ($truthy((new_block = self.$next_block(list_item_reader, list_item, $hash2([], {}), options)))) {
              list_item['$<<'](new_block)}
          };
          list_item.$fold_first(continuation_connects_first_block, content_adjacent);};
        if (list_type['$==']("dlist")) {
          
          if ($truthy(($truthy($a = list_item['$text?']()) ? $a : list_item['$blocks?']()))) {
            } else {
            list_item = nil
          };
          return [list_term, list_item];
          } else {
          return list_item
        };
      }, TMP_Parser_next_list_item_25.$$arity = -4);
      Opal.defs(self, '$read_lines_for_list_item', TMP_Parser_read_lines_for_list_item_31 = function $$read_lines_for_list_item(reader, list_type, sibling_trait, has_text) {
        var $a, $b, $c, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, self = this, buffer = nil, continuation = nil, within_nested_list = nil, detached_continuation = nil, this_line = nil, prev_line = nil, $writer = nil, match = nil, nested_list_type = nil;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        if (sibling_trait == null) {
          sibling_trait = nil;
        }
        if (has_text == null) {
          has_text = true;
        }
        
        buffer = [];
        continuation = "inactive";
        within_nested_list = false;
        detached_continuation = nil;
        while ($truthy(reader['$has_more_lines?']())) {
          
          this_line = reader.$read_line();
          if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {
            break;};
          prev_line = (function() {if ($truthy(buffer['$empty?']())) {
            return nil
            } else {
            return buffer['$[]'](-1)
          }; return nil; })();
          if (prev_line['$=='](Opal.const_get_relative($nesting, 'LIST_CONTINUATION'))) {
            
            if (continuation['$==']("inactive")) {
              
              continuation = "active";
              has_text = true;
              if ($truthy(within_nested_list)) {
                } else {
                
                $writer = [-1, ""];
                $send(buffer, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };};
            if (this_line['$=='](Opal.const_get_relative($nesting, 'LIST_CONTINUATION'))) {
              
              if ($truthy(continuation['$!=']("frozen"))) {
                
                continuation = "frozen";
                buffer['$<<'](this_line);};
              this_line = nil;
              continue;;};};
          if ($truthy((match = self['$is_delimited_block?'](this_line, true)))) {
            if (continuation['$==']("active")) {
              
              buffer['$<<'](this_line);
              buffer.$concat(reader.$read_lines_until($hash2(["terminator", "read_last_line"], {"terminator": match.$terminator(), "read_last_line": true})));
              continuation = "inactive";
              } else {
              break;
            }
          } else if ($truthy(($truthy($b = (($c = list_type['$==']("dlist")) ? continuation['$!=']("active") : list_type['$==']("dlist"))) ? Opal.const_get_relative($nesting, 'BlockAttributeLineRx')['$=~'](this_line) : $b))) {
            break;
          } else if ($truthy((($b = continuation['$==']("active")) ? this_line['$empty?']()['$!']() : continuation['$==']("active")))) {
            if ($truthy(Opal.const_get_relative($nesting, 'LiteralParagraphRx')['$=~'](this_line))) {
              
              reader.$unshift_line(this_line);
              buffer.$concat($send(reader, 'read_lines_until', [$hash2(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], {"preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true})], (TMP_26 = function(line){var self = TMP_26.$$s || this, $d;
if (line == null) line = nil;
              return (($d = list_type['$==']("dlist")) ? self['$is_sibling_list_item?'](line, list_type, sibling_trait) : list_type['$==']("dlist"))}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26)));
              continuation = "inactive";
            } else if ($truthy(($truthy($b = ($truthy($c = Opal.const_get_relative($nesting, 'BlockTitleRx')['$=~'](this_line)) ? $c : Opal.const_get_relative($nesting, 'BlockAttributeLineRx')['$=~'](this_line))) ? $b : Opal.const_get_relative($nesting, 'AttributeEntryRx')['$=~'](this_line)))) {
              buffer['$<<'](this_line)
              } else {
              
              if ($truthy((nested_list_type = $send((function() {if ($truthy(within_nested_list)) {
                return ["dlist"]
                } else {
                return Opal.const_get_relative($nesting, 'NESTABLE_LIST_CONTEXTS')
              }; return nil; })(), 'find', [], (TMP_27 = function(ctx){var self = TMP_27.$$s || this;
if (ctx == null) ctx = nil;
              return Opal.const_get_relative($nesting, 'ListRxMap')['$[]'](ctx)['$=~'](this_line)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))))) {
                
                within_nested_list = true;
                if ($truthy((($b = nested_list_type['$==']("dlist")) ? $gvars["~"]['$[]'](3)['$nil_or_empty?']() : nested_list_type['$==']("dlist")))) {
                  has_text = false};};
              buffer['$<<'](this_line);
              continuation = "inactive";
            }
          } else if ($truthy(($truthy($b = prev_line['$nil?']()['$!']()) ? prev_line['$empty?']() : $b))) {
            
            if ($truthy(this_line['$empty?']())) {
              
              reader.$skip_blank_lines();
              this_line = reader.$read_line();
              if ($truthy(($truthy($b = this_line['$nil?']()) ? $b : self['$is_sibling_list_item?'](this_line, list_type, sibling_trait)))) {
                break;};};
            if (this_line['$=='](Opal.const_get_relative($nesting, 'LIST_CONTINUATION'))) {
              
              detached_continuation = buffer.$size();
              buffer['$<<'](this_line);
            } else if ($truthy(has_text)) {
              if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {
                break;
              } else if ($truthy((nested_list_type = $send(Opal.const_get_relative($nesting, 'NESTABLE_LIST_CONTEXTS'), 'find', [], (TMP_28 = function(ctx){var self = TMP_28.$$s || this;
if (ctx == null) ctx = nil;
              return Opal.const_get_relative($nesting, 'ListRxMap')['$[]'](ctx)['$=~'](this_line)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28))))) {
                
                buffer['$<<'](this_line);
                within_nested_list = true;
                if ($truthy((($b = nested_list_type['$==']("dlist")) ? $gvars["~"]['$[]'](3)['$nil_or_empty?']() : nested_list_type['$==']("dlist")))) {
                  has_text = false};
              } else if ($truthy(Opal.const_get_relative($nesting, 'LiteralParagraphRx')['$=~'](this_line))) {
                
                reader.$unshift_line(this_line);
                buffer.$concat($send(reader, 'read_lines_until', [$hash2(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], {"preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true})], (TMP_29 = function(line){var self = TMP_29.$$s || this, $d;
if (line == null) line = nil;
                return (($d = list_type['$==']("dlist")) ? self['$is_sibling_list_item?'](line, list_type, sibling_trait) : list_type['$==']("dlist"))}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29)));
                } else {
                break;
              }
              } else {
              
              if ($truthy(within_nested_list)) {
                } else {
                buffer.$pop()
              };
              buffer['$<<'](this_line);
              has_text = true;
            };
            } else {
            
            if ($truthy(this_line['$empty?']()['$!']())) {
              has_text = true};
            if ($truthy((nested_list_type = $send((function() {if ($truthy(within_nested_list)) {
              return ["dlist"]
              } else {
              return Opal.const_get_relative($nesting, 'NESTABLE_LIST_CONTEXTS')
            }; return nil; })(), 'find', [], (TMP_30 = function(ctx){var self = TMP_30.$$s || this;
if (ctx == null) ctx = nil;
            return Opal.const_get_relative($nesting, 'ListRxMap')['$[]'](ctx)['$=~'](this_line)}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30))))) {
              
              within_nested_list = true;
              if ($truthy((($b = nested_list_type['$==']("dlist")) ? $gvars["~"]['$[]'](3)['$nil_or_empty?']() : nested_list_type['$==']("dlist")))) {
                has_text = false};};
            buffer['$<<'](this_line);
          };
          this_line = nil;
        };
        if ($truthy(this_line)) {
          reader.$unshift_line(this_line)};
        if ($truthy(detached_continuation)) {
          buffer.$delete_at(detached_continuation)};
        while ($truthy(($truthy($b = buffer['$empty?']()['$!']()) ? buffer['$[]'](-1)['$empty?']() : $b))) {
          buffer.$pop()
        };
        if ($truthy(($truthy($a = buffer['$empty?']()['$!']()) ? buffer['$[]'](-1)['$=='](Opal.const_get_relative($nesting, 'LIST_CONTINUATION')) : $a))) {
          buffer.$pop()};
        return buffer;
      }, TMP_Parser_read_lines_for_list_item_31.$$arity = -3);
      Opal.defs(self, '$initialize_section', TMP_Parser_initialize_section_32 = function $$initialize_section(reader, parent, attributes) {
        var $a, $b, self = this, document = nil, source_location = nil, sect_id = nil, sect_reftext = nil, sect_title = nil, sect_level = nil, _ = nil, $writer = nil, section = nil, style = nil, id = nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        
        document = parent.$document();
        if ($truthy(document.$sourcemap())) {
          source_location = reader.$cursor()};
        $b = self.$parse_section_title(reader, document), $a = Opal.to_ary($b), (sect_id = ($a[0] == null ? nil : $a[0])), (sect_reftext = ($a[1] == null ? nil : $a[1])), (sect_title = ($a[2] == null ? nil : $a[2])), (sect_level = ($a[3] == null ? nil : $a[3])), (_ = ($a[4] == null ? nil : $a[4])), $b;
        if ($truthy(sect_reftext)) {
          
          $writer = ["reftext", sect_reftext];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        section = Opal.const_get_relative($nesting, 'Section').$new(parent, sect_level, document.$attributes()['$has_key?']("sectnums"));
        if ($truthy(source_location)) {
          
          $writer = [source_location];
          $send(section, 'source_location=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = [sect_id];
        $send(section, 'id=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [sect_title];
        $send(section, 'title=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(attributes['$[]'](1))) {
          
          $b = self.$parse_style_attribute(attributes, reader), $a = Opal.to_ary($b), (style = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(style)) {
            
            
            $writer = [style];
            $send(section, 'sectname=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [true];
            $send(section, 'special=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy((($a = section.$sectname()['$==']("abstract")) ? document.$doctype()['$==']("book") : section.$sectname()['$==']("abstract")))) {
              
              
              $writer = ["sect1"];
              $send(section, 'sectname=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [false];
              $send(section, 'special=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [1];
              $send(section, 'level=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            } else {
            
            $writer = ["" + "sect" + (section.$level())];
            $send(section, 'sectname=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
        } else if ($truthy((($a = sect_title.$downcase()['$==']("synopsis")) ? document.$doctype()['$==']("manpage") : sect_title.$downcase()['$==']("synopsis")))) {
          
          
          $writer = [true];
          $send(section, 'special=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["synopsis"];
          $send(section, 'sectname=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          } else {
          
          $writer = ["" + "sect" + (section.$level())];
          $send(section, 'sectname=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(($truthy($a = section.$id()['$!']()) ? (id = attributes['$[]']("id")) : $a))) {
          
          $writer = [id];
          $send(section, 'id=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          ($truthy($a = section.$id()) ? $a : (($writer = [section.$generate_id()]), $send(section, 'id=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        };
        if ($truthy(section.$id())) {
          section.$document().$register("ids", [section.$id(), ($truthy($a = attributes['$[]']("reftext")) ? $a : section.$title())])};
        section.$update_attributes(attributes);
        reader.$skip_blank_lines();
        return section;
      }, TMP_Parser_initialize_section_32.$$arity = -3);
      Opal.defs(self, '$section_level', TMP_Parser_section_level_33 = function $$section_level(line) {
        var self = this;

        return Opal.const_get_relative($nesting, 'SECTION_LEVELS')['$[]'](line.$chr())
      }, TMP_Parser_section_level_33.$$arity = 1);
      Opal.defs(self, '$single_line_section_level', TMP_Parser_single_line_section_level_34 = function $$single_line_section_level(marker) {
        var self = this;

        return $rb_minus(marker.$length(), 1)
      }, TMP_Parser_single_line_section_level_34.$$arity = 1);
      Opal.defs(self, '$is_next_line_section?', TMP_Parser_is_next_line_section$q_35 = function(reader, attributes) {
        var $a, $b, $c, self = this, val = nil, ord_0 = nil;

        
        if ($truthy(($truthy($a = ($truthy($b = (val = attributes['$[]'](1))['$nil?']()['$!']()) ? ($truthy($c = (ord_0 = val['$[]'](0).$ord())['$=='](100)) ? $c : ord_0['$=='](102)) : $b)) ? val['$=~'](Opal.const_get_relative($nesting, 'FloatingTitleStyleRx')) : $a))) {
          return false};
        if ($truthy(reader['$has_more_lines?']())) {
          } else {
          return false
        };
        if ($truthy(Opal.const_get_relative($nesting, 'Compliance').$underline_style_section_titles())) {
          return $send(self, 'is_section_title?', Opal.to_a(reader.$peek_lines(2)))
          } else {
          return self['$is_section_title?'](reader.$peek_line())
        };
      }, TMP_Parser_is_next_line_section$q_35.$$arity = 2);
      Opal.defs(self, '$is_next_line_document_title?', TMP_Parser_is_next_line_document_title$q_36 = function(reader, attributes) {
        var self = this;

        return self['$is_next_line_section?'](reader, attributes)['$=='](0)
      }, TMP_Parser_is_next_line_document_title$q_36.$$arity = 2);
      Opal.defs(self, '$is_section_title?', TMP_Parser_is_section_title$q_37 = function(line1, line2) {
        var $a, self = this, level = nil;

        if (line2 == null) {
          line2 = nil;
        }
        if ($truthy((level = self['$is_single_line_section_title?'](line1)))) {
          return level
        } else if ($truthy(($truthy($a = line2) ? (level = self['$is_two_line_section_title?'](line1, line2)) : $a))) {
          return level
          } else {
          return false
        }
      }, TMP_Parser_is_section_title$q_37.$$arity = -2);
      Opal.defs(self, '$is_single_line_section_title?', TMP_Parser_is_single_line_section_title$q_38 = function(line1) {
        var $a, $b, $c, self = this, first_char = nil, match = nil;

        
        first_char = (function() {if ($truthy(line1)) {
          return line1.$chr()
          } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = ($truthy($b = first_char['$==']("=")) ? $b : ($truthy($c = Opal.const_get_relative($nesting, 'Compliance').$markdown_syntax()) ? first_char['$==']("#") : $c))) ? (match = Opal.const_get_relative($nesting, 'AtxSectionRx').$match(line1)) : $a))) {
          return self.$single_line_section_level(match['$[]'](1))
          } else {
          return false
        };
      }, TMP_Parser_is_single_line_section_title$q_38.$$arity = 1);
      Opal.defs(self, '$is_two_line_section_title?', TMP_Parser_is_two_line_section_title$q_39 = function(line1, line2) {
        var $a, $b, $c, $d, $e, self = this;

        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = ($truthy($e = line1) ? line2 : $e)) ? Opal.const_get_relative($nesting, 'SECTION_LEVELS')['$has_key?'](line2.$chr()) : $d)) ? line2['$=~'](Opal.const_get_relative($nesting, 'SetextSectionLineRx')) : $c)) ? line1['$=~'](Opal.const_get_relative($nesting, 'SetextSectionTitleRx')) : $b)) ? $rb_le($rb_minus(self.$line_length(line1), self.$line_length(line2)).$abs(), 1) : $a))) {
          return self.$section_level(line2)
          } else {
          return false
        }
      }, TMP_Parser_is_two_line_section_title$q_39.$$arity = 2);
      Opal.defs(self, '$parse_section_title', TMP_Parser_parse_section_title_40 = function $$parse_section_title(reader, document) {
        var $a, $b, $c, $d, self = this, line1 = nil, sect_id = nil, sect_title = nil, sect_level = nil, sect_reftext = nil, single_line = nil, first_char = nil, match = nil, anchor_match = nil, line2 = nil, name_match = nil;

        
        line1 = reader.$read_line();
        sect_id = nil;
        sect_title = nil;
        sect_level = -1;
        sect_reftext = nil;
        single_line = true;
        first_char = line1.$chr();
        if ($truthy(($truthy($a = ($truthy($b = first_char['$==']("=")) ? $b : ($truthy($c = Opal.const_get_relative($nesting, 'Compliance').$markdown_syntax()) ? first_char['$==']("#") : $c))) ? (match = Opal.const_get_relative($nesting, 'AtxSectionRx').$match(line1)) : $a))) {
          
          sect_level = self.$single_line_section_level(match['$[]'](1));
          sect_title = match['$[]'](2);
          if ($truthy(($truthy($a = sect_title['$end_with?']("]]")) ? (anchor_match = Opal.const_get_relative($nesting, 'InlineSectionAnchorRx').$match(sect_title)) : $a))) {
            if ($truthy(anchor_match['$[]'](2)['$nil?']())) {
              
              sect_title = anchor_match['$[]'](1);
              sect_id = anchor_match['$[]'](3);
              sect_reftext = anchor_match['$[]'](4);}};
        } else if ($truthy(Opal.const_get_relative($nesting, 'Compliance').$underline_style_section_titles())) {
          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = (line2 = reader.$peek_line(true))) ? Opal.const_get_relative($nesting, 'SECTION_LEVELS')['$has_key?'](line2.$chr()) : $d)) ? line2['$=~'](Opal.const_get_relative($nesting, 'SetextSectionLineRx')) : $c)) ? (name_match = Opal.const_get_relative($nesting, 'SetextSectionTitleRx').$match(line1)) : $b)) ? $rb_le($rb_minus(self.$line_length(line1), self.$line_length(line2)).$abs(), 1) : $a))) {
            
            sect_title = name_match['$[]'](1);
            if ($truthy(($truthy($a = sect_title['$end_with?']("]]")) ? (anchor_match = Opal.const_get_relative($nesting, 'InlineSectionAnchorRx').$match(sect_title)) : $a))) {
              if ($truthy(anchor_match['$[]'](2)['$nil?']())) {
                
                sect_title = anchor_match['$[]'](1);
                sect_id = anchor_match['$[]'](3);
                sect_reftext = anchor_match['$[]'](4);}};
            sect_level = self.$section_level(line2);
            single_line = false;
            reader.$advance();}};
        if ($truthy($rb_ge(sect_level, 0))) {
          sect_level = $rb_plus(sect_level, document.$attr("leveloffset", 0).$to_i())};
        return [sect_id, sect_reftext, sect_title, sect_level, single_line];
      }, TMP_Parser_parse_section_title_40.$$arity = 2);
      Opal.defs(self, '$line_length', TMP_Parser_line_length_41 = function $$line_length(line) {
        var self = this;

        if ($truthy(Opal.const_get_relative($nesting, 'FORCE_UNICODE_LINE_LENGTH'))) {
          return line.$scan(Opal.const_get_relative($nesting, 'UnicodeCharScanRx')).$length()
          } else {
          return line.$length()
        }
      }, TMP_Parser_line_length_41.$$arity = 1);
      Opal.defs(self, '$parse_header_metadata', TMP_Parser_parse_header_metadata_44 = function $$parse_header_metadata(reader, document) {
        var $a, TMP_42, TMP_43, self = this, metadata = nil, implicit_author = nil, implicit_authors = nil, author_metadata = nil, rev_metadata = nil, rev_line = nil, match = nil, $writer = nil, component = nil, author_line = nil, authors = nil, author_key = nil;

        if (document == null) {
          document = nil;
        }
        
        self.$process_attribute_entries(reader, document);
        metadata = $hash2([], {});
        implicit_author = nil;
        implicit_authors = nil;
        if ($truthy(($truthy($a = reader['$has_more_lines?']()) ? reader['$next_line_empty?']()['$!']() : $a))) {
          
          author_metadata = self.$process_authors(reader.$read_line());
          if ($truthy(author_metadata['$empty?']())) {
            } else {
            
            if ($truthy(document)) {
              
              $send(author_metadata, 'each', [], (TMP_42 = function(key, val){var self = TMP_42.$$s || this, $writer = nil;
if (key == null) key = nil;if (val == null) val = nil;
              if ($truthy(document.$attributes()['$has_key?'](key))) {
                  return nil
                  } else {
                  
                  $writer = [key, (function() {if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](val))) {
                    
                    return document.$apply_header_subs(val);
                    } else {
                    return val
                  }; return nil; })()];
                  $send(document.$attributes(), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                }}, TMP_42.$$s = self, TMP_42.$$arity = 2, TMP_42));
              implicit_author = document.$attributes()['$[]']("author");
              implicit_authors = document.$attributes()['$[]']("authors");};
            metadata = author_metadata;
          };
          self.$process_attribute_entries(reader, document);
          rev_metadata = $hash2([], {});
          if ($truthy(($truthy($a = reader['$has_more_lines?']()) ? reader['$next_line_empty?']()['$!']() : $a))) {
            
            rev_line = reader.$read_line();
            if ($truthy((match = Opal.const_get_relative($nesting, 'RevisionInfoLineRx').$match(rev_line)))) {
              
              if ($truthy(match['$[]'](1))) {
                
                $writer = ["revnumber", match['$[]'](1).$rstrip()];
                $send(rev_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy((component = match['$[]'](2).$strip())['$empty?']())) {
              } else if ($truthy(($truthy($a = match['$[]'](1)['$!']()) ? component['$start_with?']("v") : $a))) {
                
                $writer = ["revnumber", component['$[]']($range(1, -1, false))];
                $send(rev_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                } else {
                
                $writer = ["revdate", component];
                $send(rev_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              if ($truthy(match['$[]'](3))) {
                
                $writer = ["revremark", match['$[]'](3).$rstrip()];
                $send(rev_metadata, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              } else {
              reader.$unshift_line(rev_line)
            };};
          if ($truthy(rev_metadata['$empty?']())) {
            } else {
            
            if ($truthy(document)) {
              $send(rev_metadata, 'each', [], (TMP_43 = function(key, val){var self = TMP_43.$$s || this;
if (key == null) key = nil;if (val == null) val = nil;
              if ($truthy(document.$attributes()['$has_key?'](key))) {
                  return nil
                  } else {
                  
                  $writer = [key, document.$apply_header_subs(val)];
                  $send(document.$attributes(), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];
                }}, TMP_43.$$s = self, TMP_43.$$arity = 2, TMP_43))};
            metadata.$update(rev_metadata);
          };
          self.$process_attribute_entries(reader, document);
          reader.$skip_blank_lines();};
        if ($truthy(document)) {
          
          author_metadata = nil;
          if ($truthy(($truthy($a = document.$attributes()['$has_key?']("author")) ? (author_line = document.$attributes()['$[]']("author"))['$!='](implicit_author) : $a))) {
            author_metadata = self.$process_authors(author_line, true, false)
          } else if ($truthy(($truthy($a = document.$attributes()['$has_key?']("authors")) ? (author_line = document.$attributes()['$[]']("authors"))['$!='](implicit_authors) : $a))) {
            author_metadata = self.$process_authors(author_line, true)
            } else {
            
            authors = [];
            author_key = "" + "author_" + ($rb_plus(authors.$size(), 1));
            while ($truthy(document.$attributes()['$has_key?'](author_key))) {
              
              authors['$<<'](document.$attributes()['$[]'](author_key));
              author_key = "" + "author_" + ($rb_plus(authors.$size(), 1));
            };
            if (authors.$size()['$=='](1)) {
              author_metadata = self.$process_authors(authors['$[]'](0), true, false)
            } else if ($truthy($rb_gt(authors.$size(), 1))) {
              author_metadata = self.$process_authors(authors.$join("; "), true)};
          };
          if ($truthy(author_metadata)) {
            
            document.$attributes().$update(author_metadata);
            if ($truthy(($truthy($a = document.$attributes()['$has_key?']("email")['$!']()) ? document.$attributes()['$has_key?']("email_1") : $a))) {
              
              $writer = ["email", document.$attributes()['$[]']("email_1")];
              $send(document.$attributes(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};};};
        return metadata;
      }, TMP_Parser_parse_header_metadata_44.$$arity = -2);
      Opal.defs(self, '$process_authors', TMP_Parser_process_authors_50 = function $$process_authors(author_line, names_only, multiple) {
        var TMP_45, TMP_46, self = this, author_metadata = nil, keys = nil, author_entries = nil;

        if (names_only == null) {
          names_only = false;
        }
        if (multiple == null) {
          multiple = true;
        }
        
        author_metadata = $hash2([], {});
        keys = ["author", "authorinitials", "firstname", "middlename", "lastname", "email"];
        author_entries = (function() {if ($truthy(multiple)) {
          return $send(author_line.$split(";"), 'map', [], (TMP_45 = function(line){var self = TMP_45.$$s || this;
if (line == null) line = nil;
          return line.$strip()}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45))
          } else {
          return [author_line]
        }; return nil; })();
        $send(author_entries, 'each_with_index', [], (TMP_46 = function(author_entry, idx){var self = TMP_46.$$s || this, TMP_47, TMP_48, $a, TMP_49, key_map = nil, segments = nil, match = nil, $writer = nil, fname = nil, mname = nil, lname = nil;
if (author_entry == null) author_entry = nil;if (idx == null) idx = nil;
        
          if ($truthy(author_entry['$empty?']())) {
            return nil;};
          key_map = $hash2([], {});
          if (idx['$=='](0)) {
            $send(keys, 'each', [], (TMP_47 = function(key){var self = TMP_47.$$s || this, $writer = nil;
if (key == null) key = nil;
            
              $writer = [key.$to_sym(), key];
              $send(key_map, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47))
            } else {
            $send(keys, 'each', [], (TMP_48 = function(key){var self = TMP_48.$$s || this, $writer = nil;
if (key == null) key = nil;
            
              $writer = [key.$to_sym(), "" + (key) + "_" + ($rb_plus(idx, 1))];
              $send(key_map, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48))
          };
          segments = nil;
          if ($truthy(names_only)) {
            if ($truthy($rb_gt((segments = author_entry.$split(" ")).$size(), 3))) {
              segments = segments['$[]']($range(0, 1, false)).$push(segments['$[]']($range(2, -1, false)).$join(" "))}
          } else if ($truthy((match = Opal.const_get_relative($nesting, 'AuthorInfoLineRx').$match(author_entry)))) {
            
            segments = match.$to_a();
            segments.$shift();};
          if ($truthy(segments['$nil?']())) {
            
            
            $writer = [key_map['$[]']("author"), (($writer = [key_map['$[]']("firstname"), (fname = author_entry.$strip().$tr_s(" ", " "))]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [key_map['$[]']("authorinitials"), fname['$[]'](0, 1)];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            } else {
            
            
            $writer = [key_map['$[]']("firstname"), (fname = segments['$[]'](0).$tr("_", " "))];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [key_map['$[]']("author"), fname];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [key_map['$[]']("authorinitials"), fname['$[]'](0, 1)];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(($truthy($a = segments['$[]'](1)['$nil?']()['$!']()) ? segments['$[]'](2)['$nil?']()['$!']() : $a))) {
              
              
              $writer = [key_map['$[]']("middlename"), (mname = segments['$[]'](1).$tr("_", " "))];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [key_map['$[]']("lastname"), (lname = segments['$[]'](2).$tr("_", " "))];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [key_map['$[]']("author"), [fname, mname, lname].$join(" ")];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [key_map['$[]']("authorinitials"), [fname['$[]'](0, 1), mname['$[]'](0, 1), lname['$[]'](0, 1)].$join()];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            } else if ($truthy(segments['$[]'](1)['$nil?']()['$!']())) {
              
              
              $writer = [key_map['$[]']("lastname"), (lname = segments['$[]'](1).$tr("_", " "))];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [key_map['$[]']("author"), [fname, lname].$join(" ")];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [key_map['$[]']("authorinitials"), [fname['$[]'](0, 1), lname['$[]'](0, 1)].$join()];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            if ($truthy(($truthy($a = names_only) ? $a : segments['$[]'](3)['$nil?']()))) {
              } else {
              
              $writer = [key_map['$[]']("email"), segments['$[]'](3)];
              $send(author_metadata, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
          };
          
          $writer = ["authorcount", $rb_plus(idx, 1)];
          $send(author_metadata, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if (idx['$=='](1)) {
            $send(keys, 'each', [], (TMP_49 = function(key){var self = TMP_49.$$s || this;
if (key == null) key = nil;
            if ($truthy(author_metadata['$has_key?'](key))) {
                
                $writer = ["" + (key) + "_1", author_metadata['$[]'](key)];
                $send(author_metadata, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                } else {
                return nil
              }}, TMP_49.$$s = self, TMP_49.$$arity = 1, TMP_49))};
          if (idx['$=='](0)) {
            
            $writer = ["authors", author_metadata['$[]'](key_map['$[]']("author"))];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = ["authors", "" + (author_metadata['$[]']("authors")) + ", " + (author_metadata['$[]'](key_map['$[]']("author")))];
            $send(author_metadata, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          };}, TMP_46.$$s = self, TMP_46.$$arity = 2, TMP_46));
        return author_metadata;
      }, TMP_Parser_process_authors_50.$$arity = -2);
      Opal.defs(self, '$parse_block_metadata_lines', TMP_Parser_parse_block_metadata_lines_51 = function $$parse_block_metadata_lines(reader, parent, attributes, options) {
        var $a, self = this;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        if (options == null) {
          options = $hash2([], {});
        }
        
        while ($truthy(self.$parse_block_metadata_line(reader, parent, attributes, options))) {
          
          reader.$advance();
          reader.$skip_blank_lines();
        };
        return attributes;
      }, TMP_Parser_parse_block_metadata_lines_51.$$arity = -3);
      Opal.defs(self, '$parse_block_metadata_line', TMP_Parser_parse_block_metadata_line_52 = function $$parse_block_metadata_line(reader, parent, attributes, options) {
        var $a, $b, self = this, next_line = nil, commentish = nil, match = nil, terminator = nil, in_square_brackets = nil, $writer = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        if ($truthy(reader['$has_more_lines?']())) {
          } else {
          return false
        };
        next_line = reader.$peek_line();
        if ($truthy(($truthy($a = (commentish = next_line['$start_with?']("//"))) ? (match = Opal.const_get_relative($nesting, 'CommentBlockRx').$match(next_line)) : $a))) {
          
          terminator = match['$[]'](0);
          reader.$read_lines_until($hash2(["skip_first_line", "preserve_last_line", "terminator", "skip_processing"], {"skip_first_line": true, "preserve_last_line": true, "terminator": terminator, "skip_processing": true}));
        } else if ($truthy(($truthy($a = commentish) ? Opal.const_get_relative($nesting, 'CommentLineRx')['$=~'](next_line) : $a))) {
        } else if ($truthy(($truthy($a = ($truthy($b = options['$[]']("text")['$!']()) ? next_line['$start_with?'](":") : $b)) ? (match = Opal.const_get_relative($nesting, 'AttributeEntryRx').$match(next_line)) : $a))) {
          self.$process_attribute_entry(reader, parent, attributes, match)
        } else if ($truthy(($truthy($a = (in_square_brackets = ($truthy($b = next_line['$start_with?']("[")) ? next_line['$end_with?']("]") : $b))) ? (match = Opal.const_get_relative($nesting, 'BlockAnchorRx').$match(next_line)) : $a))) {
          if ($truthy(match['$[]'](1)['$nil_or_empty?']())) {
            } else {
            
            
            $writer = ["id", match['$[]'](1)];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(match['$[]'](2)['$nil?']())) {
              } else {
              
              $writer = ["reftext", match['$[]'](2)];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
          }
        } else if ($truthy(($truthy($a = in_square_brackets) ? (match = Opal.const_get_relative($nesting, 'BlockAttributeListRx').$match(next_line)) : $a))) {
          parent.$document().$parse_attributes(match['$[]'](1), [], $hash2(["sub_input", "into"], {"sub_input": true, "into": attributes}))
        } else if ($truthy(($truthy($a = options['$[]']("text")['$!']()) ? (match = Opal.const_get_relative($nesting, 'BlockTitleRx').$match(next_line)) : $a))) {
          
          $writer = ["title", match['$[]'](1)];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          return false
        };
        return true;
      }, TMP_Parser_parse_block_metadata_line_52.$$arity = -4);
      Opal.defs(self, '$process_attribute_entries', TMP_Parser_process_attribute_entries_53 = function $$process_attribute_entries(reader, parent, attributes) {
        var $a, self = this;

        if (attributes == null) {
          attributes = nil;
        }
        
        reader.$skip_comment_lines();
        while ($truthy(self.$process_attribute_entry(reader, parent, attributes))) {
          
          reader.$advance();
          reader.$skip_comment_lines();
        };
      }, TMP_Parser_process_attribute_entries_53.$$arity = -3);
      Opal.defs(self, '$process_attribute_entry', TMP_Parser_process_attribute_entry_54 = function $$process_attribute_entry(reader, parent, attributes, match) {
        var $a, self = this, name = nil, value = nil, line_continuation = nil, next_line = nil, keep_open = nil, separator = nil;

        if (attributes == null) {
          attributes = nil;
        }
        if (match == null) {
          match = nil;
        }
        
        match = ($truthy($a = match) ? $a : (function() {if ($truthy(reader['$has_more_lines?']())) {
          return Opal.const_get_relative($nesting, 'AttributeEntryRx').$match(reader.$peek_line())
          } else {
          return nil
        }; return nil; })());
        if ($truthy(match)) {
          
          name = match['$[]'](1);
          if ($truthy((value = ($truthy($a = match['$[]'](2)) ? $a : ""))['$empty?']())) {
          } else if ($truthy(($truthy($a = value['$end_with?']((line_continuation = Opal.const_get_relative($nesting, 'LINE_CONTINUATION')))) ? $a : value['$end_with?']((line_continuation = Opal.const_get_relative($nesting, 'LINE_CONTINUATION_LEGACY')))))) {
            
            value = value.$chop().$rstrip();
            while ($truthy(reader.$advance())) {
              
              if ($truthy((next_line = reader.$peek_line().$strip())['$empty?']())) {
                break;};
              if ($truthy((keep_open = next_line['$end_with?'](line_continuation)))) {
                next_line = next_line.$chop().$rstrip()};
              separator = (function() {if ($truthy(value['$end_with?'](Opal.const_get_relative($nesting, 'LINE_BREAK')))) {
                return Opal.const_get_relative($nesting, 'EOL')
                } else {
                return " "
              }; return nil; })();
              value = "" + (value) + (separator) + (next_line);
              if ($truthy(keep_open)) {
                } else {
                break;
              };
            };};
          self.$store_attribute(name, value, (function() {if ($truthy(parent)) {
            return parent.$document()
            } else {
            return nil
          }; return nil; })(), attributes);
          return true;
          } else {
          return false
        };
      }, TMP_Parser_process_attribute_entry_54.$$arity = -3);
      Opal.defs(self, '$store_attribute', TMP_Parser_store_attribute_55 = function $$store_attribute(name, value, doc, attrs) {
        var $a, self = this, accessible = nil, $case = nil;

        if (doc == null) {
          doc = nil;
        }
        if (attrs == null) {
          attrs = nil;
        }
        
        if ($truthy(name['$end_with?']("!"))) {
          
          value = nil;
          name = name.$chop();
        } else if ($truthy(name['$start_with?']("!"))) {
          
          value = nil;
          name = name['$[]']($range(1, -1, false));};
        name = self.$sanitize_attribute_name(name);
        accessible = true;
        if ($truthy(doc)) {
          
          if (name['$==']("numbered")) {
            name = "sectnums"
          } else if (name['$==']("leveloffset")) {
            if ($truthy(value)) {
              $case = value.$chr();
              if ("+"['$===']($case)) {value = $rb_plus(doc.$attr("leveloffset", 0).$to_i(), ($truthy($a = value['$[]']($range(1, -1, false))) ? $a : 0).$to_i()).$to_s()}
              else if ("-"['$===']($case)) {value = $rb_minus(doc.$attr("leveloffset", 0).$to_i(), ($truthy($a = value['$[]']($range(1, -1, false))) ? $a : 0).$to_i()).$to_s()}}};
          accessible = (function() {if ($truthy(value)) {
            return doc.$set_attribute(name, value)
            } else {
            return doc.$delete_attribute(name)
          }; return nil; })();};
        if ($truthy(($truthy($a = accessible) ? attrs : $a))) {
          
          if ($truthy(value)) {
            value = doc.$attributes()['$[]'](name)};
          Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs);};
        return [name, value];
      }, TMP_Parser_store_attribute_55.$$arity = -3);
      Opal.defs(self, '$resolve_list_marker', TMP_Parser_resolve_list_marker_56 = function $$resolve_list_marker(list_type, marker, ordinal, validate, reader) {
        var $a, self = this;

        if (ordinal == null) {
          ordinal = 0;
        }
        if (validate == null) {
          validate = false;
        }
        if (reader == null) {
          reader = nil;
        }
        if ($truthy((($a = list_type['$==']("olist")) ? marker['$start_with?'](".")['$!']() : list_type['$==']("olist")))) {
          return self.$resolve_ordered_list_marker(marker, ordinal, validate, reader)
        } else if (list_type['$==']("colist")) {
          return "<1>"
          } else {
          return marker
        }
      }, TMP_Parser_resolve_list_marker_56.$$arity = -3);
      Opal.defs(self, '$resolve_ordered_list_marker', TMP_Parser_resolve_ordered_list_marker_58 = function $$resolve_ordered_list_marker(marker, ordinal, validate, reader) {
        var TMP_57, $a, self = this, number_style = nil, expected = nil, actual = nil, $case = nil;

        if (ordinal == null) {
          ordinal = 0;
        }
        if (validate == null) {
          validate = false;
        }
        if (reader == null) {
          reader = nil;
        }
        
        number_style = $send(Opal.const_get_relative($nesting, 'ORDERED_LIST_STYLES'), 'find', [], (TMP_57 = function(s){var self = TMP_57.$$s || this;
if (s == null) s = nil;
        return Opal.const_get_relative($nesting, 'OrderedListMarkerRxMap')['$[]'](s)['$=~'](marker)}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57));
        expected = (actual = nil);
        $case = number_style;
        if ("arabic"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $rb_plus(ordinal, 1);
          actual = marker.$to_i();};
        marker = "1.";}
        else if ("loweralpha"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $rb_plus("a"['$[]'](0).$ord(), ordinal).$chr();
          actual = marker.$chomp(".");};
        marker = "a.";}
        else if ("upperalpha"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $rb_plus("A"['$[]'](0).$ord(), ordinal).$chr();
          actual = marker.$chomp(".");};
        marker = "A.";}
        else if ("lowerroman"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $rb_plus(ordinal, 1);
          actual = self.$roman_numeral_to_int(marker.$chomp(")"));};
        marker = "i)";}
        else if ("upperroman"['$===']($case)) {
        if ($truthy(validate)) {
          
          expected = $rb_plus(ordinal, 1);
          actual = self.$roman_numeral_to_int(marker.$chomp(")"));};
        marker = "I)";};
        if ($truthy(($truthy($a = validate) ? expected['$!='](actual) : $a))) {
          self.$warn("" + "asciidoctor: WARNING: " + (reader.$line_info()) + ": list item index: expected " + (expected) + ", got " + (actual))};
        return marker;
      }, TMP_Parser_resolve_ordered_list_marker_58.$$arity = -2);
      Opal.defs(self, '$is_sibling_list_item?', TMP_Parser_is_sibling_list_item$q_59 = function(line, list_type, sibling_trait) {
        var self = this, matcher = nil, expected_marker = nil, m = nil;

        
        if ($truthy(Opal.const_get_qualified('::', 'Regexp')['$==='](sibling_trait))) {
          
          matcher = sibling_trait;
          expected_marker = false;
          } else {
          
          matcher = Opal.const_get_relative($nesting, 'ListRxMap')['$[]'](list_type);
          expected_marker = sibling_trait;
        };
        if ($truthy((m = matcher.$match(line)))) {
          if ($truthy(expected_marker)) {
            return expected_marker['$=='](self.$resolve_list_marker(list_type, m['$[]'](1)))
            } else {
            return true
          }
          } else {
          return false
        };
      }, TMP_Parser_is_sibling_list_item$q_59.$$arity = 3);
      Opal.defs(self, '$next_table', TMP_Parser_next_table_60 = function $$next_table(table_reader, parent, attributes) {
        var $a, $b, $c, $d, $e, self = this, table = nil, $writer = nil, colspecs = nil, explicit_colspecs = nil, skipped = nil, parser_ctx = nil, skip_implicit_header = nil, loop_idx = nil, line = nil, next_line = nil, next_cellspec = nil, seen = nil, m = nil, cell_text = nil, $logical_op_recvr_tmp_2 = nil;

        
        table = Opal.const_get_relative($nesting, 'Table').$new(parent, attributes);
        if ($truthy(attributes['$has_key?']("title"))) {
          
          
          $writer = [attributes.$delete("title")];
          $send(table, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          table.$assign_caption(attributes.$delete("caption"));};
        if ($truthy(($truthy($a = attributes['$key?']("cols")) ? (colspecs = self.$parse_colspecs(attributes['$[]']("cols")))['$empty?']()['$!']() : $a))) {
          
          table.$create_columns(colspecs);
          explicit_colspecs = true;
          } else {
          explicit_colspecs = false
        };
        skipped = table_reader.$skip_blank_lines();
        parser_ctx = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'ParserContext').$new(table_reader, table, attributes);
        skip_implicit_header = ($truthy($a = attributes['$key?']("header-option")) ? $a : attributes['$key?']("noheader-option"));
        loop_idx = -1;
        while ($truthy(table_reader['$has_more_lines?']())) {
          
          loop_idx = $rb_plus(loop_idx, 1);
          line = table_reader.$read_line();
          if ($truthy(($truthy($b = ($truthy($c = ($truthy($d = ($truthy($e = skip_implicit_header['$!']()) ? skipped['$=='](0) : $e)) ? loop_idx['$=='](0) : $d)) ? (next_line = table_reader.$peek_line())['$nil?']()['$!']() : $c)) ? next_line['$empty?']() : $b))) {
            
            
            $writer = [true];
            $send(table, 'has_header_option=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["header-option", ""];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["options", (function() {if ($truthy(attributes['$key?']("options"))) {
              return "" + (attributes['$[]']("options")) + ",header"
              } else {
              return "header"
            }; return nil; })()];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          if (parser_ctx.$format()['$==']("psv")) {
            if ($truthy(parser_ctx['$starts_with_delimiter?'](line))) {
              
              line = line['$[]']($range(1, -1, false));
              parser_ctx.$close_open_cell();
              } else {
              
              $c = self.$parse_cellspec(line, "start", parser_ctx.$delimiter()), $b = Opal.to_ary($c), (next_cellspec = ($b[0] == null ? nil : $b[0])), (line = ($b[1] == null ? nil : $b[1])), $c;
              if ($truthy(next_cellspec['$nil?']()['$!']())) {
                parser_ctx.$close_open_cell(next_cellspec)};
            }};
          seen = false;
          while ($truthy(($truthy($c = seen['$!']()) ? $c : line['$empty?']()['$!']()))) {
            
            seen = true;
            if ($truthy((m = parser_ctx.$match_delimiter(line)))) {
              
              if (parser_ctx.$format()['$==']("csv")) {
                if ($truthy(parser_ctx['$buffer_has_unclosed_quotes?'](m.$pre_match()))) {
                  
                  line = parser_ctx.$skip_matched_delimiter(m);
                  continue;;}
              } else if ($truthy(m.$pre_match()['$end_with?']("\\"))) {
                
                if ($truthy((line = parser_ctx.$skip_matched_delimiter(m, true))['$empty?']())) {
                  
                  
                  $writer = ["" + (parser_ctx.$buffer()) + (Opal.const_get_relative($nesting, 'EOL'))];
                  $send(parser_ctx, 'buffer=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  parser_ctx.$keep_cell_open();
                  break;;};
                continue;;};
              if (parser_ctx.$format()['$==']("psv")) {
                
                $d = self.$parse_cellspec(m.$pre_match(), "end"), $c = Opal.to_ary($d), (next_cellspec = ($c[0] == null ? nil : $c[0])), (cell_text = ($c[1] == null ? nil : $c[1])), $d;
                parser_ctx.$push_cellspec(next_cellspec);
                
                $writer = ["" + (parser_ctx.$buffer()) + (cell_text)];
                $send(parser_ctx, 'buffer=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                } else {
                
                $writer = ["" + (parser_ctx.$buffer()) + (m.$pre_match())];
                $send(parser_ctx, 'buffer=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              if ($truthy((line = m.$post_match())['$empty?']())) {
                seen = false};
              parser_ctx.$close_cell();
              } else {
              
              
              $writer = ["" + (parser_ctx.$buffer()) + (line) + (Opal.const_get_relative($nesting, 'EOL'))];
              $send(parser_ctx, 'buffer=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if (parser_ctx.$format()['$==']("csv")) {
                
                $writer = ["" + (parser_ctx.$buffer().$rstrip()) + " "];
                $send(parser_ctx, 'buffer=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              line = "";
              if ($truthy(($truthy($c = parser_ctx.$format()['$==']("psv")) ? $c : (($d = parser_ctx.$format()['$==']("csv")) ? parser_ctx['$buffer_has_unclosed_quotes?']() : parser_ctx.$format()['$==']("csv"))))) {
                parser_ctx.$keep_cell_open()
                } else {
                parser_ctx.$close_cell(true)
              };
            };
          };
          if ($truthy(parser_ctx['$cell_open?']())) {
            } else {
            skipped = table_reader.$skip_blank_lines()
          };
          if ($truthy(table_reader['$has_more_lines?']())) {
          } else if ($truthy(parser_ctx['$cell_open?']())) {
            parser_ctx.$close_cell(true)};
        };
        if ($truthy(($truthy($a = (($logical_op_recvr_tmp_2 = table.$attributes()), ($truthy($b = $logical_op_recvr_tmp_2['$[]']("colcount")) ? $b : (($writer = ["colcount", table.$columns().$size()]), $send($logical_op_recvr_tmp_2, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])))['$=='](0)) ? $a : explicit_colspecs))) {
          } else {
          table.$assign_column_widths()
        };
        table.$partition_header_footer(attributes);
        return table;
      }, TMP_Parser_next_table_60.$$arity = 3);
      Opal.defs(self, '$parse_colspecs', TMP_Parser_parse_colspecs_64 = function $$parse_colspecs(records) {
        var TMP_61, TMP_62, self = this, specs = nil;

        
        if ($truthy(records['$include?'](" "))) {
          records = records.$tr(" ", "")};
        if (records['$=='](records.$to_i().$to_s())) {
          return $send(Opal.const_get_qualified('::', 'Array'), 'new', [records.$to_i()], (TMP_61 = function(){var self = TMP_61.$$s || this;

          return $hash2(["width"], {"width": 1})}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61))};
        specs = [];
        $send(records.$split(",", -1), 'each', [], (TMP_62 = function(record){var self = TMP_62.$$s || this, $a, $b, TMP_63, m = nil, spec = nil, colspec = nil, rowspec = nil, $writer = nil;
if (record == null) record = nil;
        if ($truthy(record['$empty?']())) {
            return specs['$<<']($hash2(["width"], {"width": 1}))
          } else if ($truthy((m = Opal.const_get_relative($nesting, 'ColumnSpecRx').$match(record)))) {
            
            spec = $hash2([], {});
            if ($truthy(m['$[]'](2))) {
              
              $b = m['$[]'](2).$split("."), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;
              if ($truthy(($truthy($a = colspec['$nil_or_empty?']()['$!']()) ? Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'ALIGNMENTS')['$[]']("h")['$has_key?'](colspec) : $a))) {
                
                $writer = ["halign", Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'ALIGNMENTS')['$[]']("h")['$[]'](colspec)];
                $send(spec, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(($truthy($a = rowspec['$nil_or_empty?']()['$!']()) ? Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'ALIGNMENTS')['$[]']("v")['$has_key?'](rowspec) : $a))) {
                
                $writer = ["valign", Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'ALIGNMENTS')['$[]']("v")['$[]'](rowspec)];
                $send(spec, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};};
            
            $writer = ["width", (function() {if ($truthy(m['$[]'](3))) {
              return m['$[]'](3).$to_i()
              } else {
              return 1
            }; return nil; })()];
            $send(spec, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(($truthy($a = m['$[]'](4)) ? Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'TEXT_STYLES')['$has_key?'](m['$[]'](4)) : $a))) {
              
              $writer = ["style", Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'TEXT_STYLES')['$[]'](m['$[]'](4))];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(m['$[]'](1))) {
              return $send((1), 'upto', [m['$[]'](1).$to_i()], (TMP_63 = function(){var self = TMP_63.$$s || this;

              return specs['$<<'](spec.$dup())}, TMP_63.$$s = self, TMP_63.$$arity = 0, TMP_63))
              } else {
              return specs['$<<'](spec)
            };
            } else {
            return nil
          }}, TMP_62.$$s = self, TMP_62.$$arity = 1, TMP_62));
        return specs;
      }, TMP_Parser_parse_colspecs_64.$$arity = 1);
      Opal.defs(self, '$parse_cellspec', TMP_Parser_parse_cellspec_65 = function $$parse_cellspec(line, pos, delimiter) {
        var $a, $b, self = this, m = nil, rest = nil, $case = nil, spec_part = nil, spec = nil, colspec = nil, rowspec = nil, $writer = nil;

        if (pos == null) {
          pos = "start";
        }
        if (delimiter == null) {
          delimiter = nil;
        }
        
        m = nil;
        rest = "";
        $case = pos;
        if ("start"['$===']($case)) {if ($truthy(line['$include?'](delimiter))) {
          
          $b = line.$split(delimiter, 2), $a = Opal.to_ary($b), (spec_part = ($a[0] == null ? nil : $a[0])), (rest = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy((m = Opal.const_get_relative($nesting, 'CellSpecStartRx').$match(spec_part)))) {
            if ($truthy(m['$[]'](0)['$empty?']())) {
              return [$hash2([], {}), rest]}
            } else {
            return [nil, line]
          };
          } else {
          return [nil, line]
        }}
        else if ("end"['$===']($case)) {if ($truthy((m = Opal.const_get_relative($nesting, 'CellSpecEndRx').$match(line)))) {
          
          if ($truthy(m['$[]'](0).$lstrip()['$empty?']())) {
            return [$hash2([], {}), line.$rstrip()]};
          rest = m.$pre_match();
          } else {
          return [$hash2([], {}), line]
        }};
        spec = $hash2([], {});
        if ($truthy(m['$[]'](1))) {
          
          $b = m['$[]'](1).$split("."), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;
          colspec = (function() {if ($truthy(colspec['$nil_or_empty?']())) {
            return 1
            } else {
            return colspec.$to_i()
          }; return nil; })();
          rowspec = (function() {if ($truthy(rowspec['$nil_or_empty?']())) {
            return 1
            } else {
            return rowspec.$to_i()
          }; return nil; })();
          if (m['$[]'](2)['$==']("+")) {
            
            if (colspec['$=='](1)) {
              } else {
              
              $writer = ["colspan", colspec];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            if (rowspec['$=='](1)) {
              } else {
              
              $writer = ["rowspan", rowspec];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
          } else if (m['$[]'](2)['$==']("*")) {
            if (colspec['$=='](1)) {
              } else {
              
              $writer = ["repeatcol", colspec];
              $send(spec, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            }};};
        if ($truthy(m['$[]'](3))) {
          
          $b = m['$[]'](3).$split("."), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(($truthy($a = colspec['$nil_or_empty?']()['$!']()) ? Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'ALIGNMENTS')['$[]']("h")['$has_key?'](colspec) : $a))) {
            
            $writer = ["halign", Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'ALIGNMENTS')['$[]']("h")['$[]'](colspec)];
            $send(spec, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(($truthy($a = rowspec['$nil_or_empty?']()['$!']()) ? Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'ALIGNMENTS')['$[]']("v")['$has_key?'](rowspec) : $a))) {
            
            $writer = ["valign", Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'ALIGNMENTS')['$[]']("v")['$[]'](rowspec)];
            $send(spec, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};};
        if ($truthy(($truthy($a = m['$[]'](4)) ? Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'TEXT_STYLES')['$has_key?'](m['$[]'](4)) : $a))) {
          
          $writer = ["style", Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'TEXT_STYLES')['$[]'](m['$[]'](4))];
          $send(spec, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return [spec, rest];
      }, TMP_Parser_parse_cellspec_65.$$arity = -2);
      Opal.defs(self, '$parse_style_attribute', TMP_Parser_parse_style_attribute_69 = function $$parse_style_attribute(attributes, reader) {
        var $a, $b, TMP_66, TMP_67, TMP_68, self = this, original_style = nil, raw_style = nil, type = nil, collector = nil, parsed = nil, save_current = nil, parsed_style = nil, $writer = nil, options = nil, existing_opts = nil;

        if (reader == null) {
          reader = nil;
        }
        
        original_style = attributes['$[]']("style");
        raw_style = attributes['$[]'](1);
        if ($truthy(($truthy($a = ($truthy($b = raw_style) ? raw_style['$include?'](" ")['$!']() : $b)) ? Opal.const_get_relative($nesting, 'Compliance').$shorthand_property_syntax() : $a))) {
          
          type = "style";
          collector = [];
          parsed = $hash2([], {});
          save_current = $send(self, 'lambda', [], (TMP_66 = function(){var self = TMP_66.$$s || this, $c, $case = nil, $writer = nil;

          if ($truthy(collector['$empty?']())) {
              if ($truthy(type['$!=']("style"))) {
                return self.$warn("" + "asciidoctor: WARNING:" + ((function() {if ($truthy(reader['$nil?']())) {
                  return nil
                  } else {
                  return "" + " " + (reader.$prev_line_info()) + ":"
                }; return nil; })()) + " invalid empty " + (type) + " detected in style attribute")
                } else {
                return nil
              }
              } else {
              
              $case = type;
              if ("role"['$===']($case) || "option"['$===']($case)) {
              ($truthy($c = parsed['$[]'](type)) ? $c : (($writer = [type, []]), $send(parsed, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
              parsed['$[]'](type).$push(collector.$join());}
              else if ("id"['$===']($case)) {
              if ($truthy(parsed['$has_key?']("id"))) {
                self.$warn("" + "asciidoctor: WARNING:" + ((function() {if ($truthy(reader['$nil?']())) {
                  return nil
                  } else {
                  return "" + " " + (reader.$prev_line_info()) + ":"
                }; return nil; })()) + " multiple ids detected in style attribute")};
              
              $writer = [type, collector.$join()];
              $send(parsed, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;}
              else {
              $writer = [type, collector.$join()];
              $send(parsed, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
              return (collector = []);
            }}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66));
          $send(raw_style, 'each_char', [], (TMP_67 = function(c){var self = TMP_67.$$s || this, $c, $d, $case = nil;
if (c == null) c = nil;
          if ($truthy(($truthy($c = ($truthy($d = c['$=='](".")) ? $d : c['$==']("#"))) ? $c : c['$==']("%")))) {
              
              save_current.$call();
              return (function() {$case = c;
              if ("."['$===']($case)) {return (type = "role")}
              else if ("#"['$===']($case)) {return (type = "id")}
              else if ("%"['$===']($case)) {return (type = "option")}
              else { return nil }})();
              } else {
              return collector.$push(c)
            }}, TMP_67.$$s = self, TMP_67.$$arity = 1, TMP_67));
          if (type['$==']("style")) {
            parsed_style = (($writer = ["style", raw_style]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
            } else {
            
            save_current.$call();
            if ($truthy(parsed['$has_key?']("style"))) {
              parsed_style = (($writer = ["style", parsed['$[]']("style")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
              } else {
              parsed_style = nil
            };
            if ($truthy(parsed['$has_key?']("id"))) {
              
              $writer = ["id", parsed['$[]']("id")];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(parsed['$has_key?']("role"))) {
              
              $writer = ["role", $rb_times(parsed['$[]']("role"), " ")];
              $send(attributes, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(parsed['$has_key?']("option"))) {
              
              $send((options = parsed['$[]']("option")), 'each', [], (TMP_68 = function(option){var self = TMP_68.$$s || this;
if (option == null) option = nil;
              
                $writer = ["" + (option) + "-option", ""];
                $send(attributes, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68));
              if ($truthy((existing_opts = attributes['$[]']("options")))) {
                
                $writer = ["options", $rb_times($rb_plus(options, existing_opts.$split(",")), ",")];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                } else {
                
                $writer = ["options", $rb_times(options, ",")];
                $send(attributes, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };};
          };
          return [parsed_style, original_style];
          } else {
          
          
          $writer = ["style", raw_style];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return [raw_style, original_style];
        };
      }, TMP_Parser_parse_style_attribute_69.$$arity = -2);
      Opal.defs(self, '$adjust_indentation!', TMP_Parser_adjust_indentation$B_77 = function(lines, indent, tab_size) {
        var $a, TMP_70, TMP_73, TMP_74, TMP_75, TMP_76, self = this, full_tab_space = nil, gutter_width = nil, padding = nil;

        if (indent == null) {
          indent = 0;
        }
        if (tab_size == null) {
          tab_size = 0;
        }
        
        if ($truthy(lines['$empty?']())) {
          return nil};
        if ($truthy(($truthy($a = $rb_gt((tab_size = tab_size.$to_i()), 0)) ? lines.$join()['$include?'](Opal.const_get_relative($nesting, 'TAB')) : $a))) {
          
          full_tab_space = $rb_times(" ", tab_size);
          $send(lines, 'map!', [], (TMP_70 = function(line){var self = TMP_70.$$s || this, TMP_71, TMP_72, spaces_added = nil;
if (line == null) line = nil;
          
            if ($truthy(line['$empty?']())) {
              return line;};
            if ($truthy(line['$start_with?'](Opal.const_get_relative($nesting, 'TAB')))) {
              $send(line, 'sub!', [Opal.const_get_relative($nesting, 'TabIndentRx')], (TMP_71 = function(tabs){var self = TMP_71.$$s || this;
if (tabs == null) tabs = nil;
              return $rb_times(full_tab_space, tabs.$length())}, TMP_71.$$s = self, TMP_71.$$arity = 1, TMP_71))};
            if ($truthy(line['$include?'](Opal.const_get_relative($nesting, 'TAB')))) {
              
              spaces_added = 0;
              return $send(line, 'gsub!', [Opal.const_get_relative($nesting, 'TabRx')], (TMP_72 = function(){var self = TMP_72.$$s || this, offset = nil, spaces = nil;
                if ($gvars["~"] == null) $gvars["~"] = nil;

              if ((offset = $rb_plus($gvars["~"].$begin(0), spaces_added))['$%'](tab_size)['$=='](0)) {
                  
                  spaces_added = $rb_plus(spaces_added, $rb_minus(tab_size, 1));
                  return full_tab_space;
                  } else {
                  
                  if ((spaces = $rb_minus(tab_size, offset['$%'](tab_size)))['$=='](1)) {
                    } else {
                    spaces_added = $rb_plus(spaces_added, $rb_minus(spaces, 1))
                  };
                  return $rb_times(" ", spaces);
                }}, TMP_72.$$s = self, TMP_72.$$arity = 0, TMP_72));
              } else {
              return line
            };}, TMP_70.$$s = self, TMP_70.$$arity = 1, TMP_70));};
        if ($truthy(($truthy($a = indent) ? $rb_gt((indent = indent.$to_i()), -1) : $a))) {
          } else {
          return nil
        };
        gutter_width = nil;
        (function(){var $brk = Opal.new_brk(); try {return $send(lines, 'each', [], (TMP_73 = function(line){var self = TMP_73.$$s || this, $b, line_indent = nil;
if (line == null) line = nil;
        
          if ($truthy(line['$empty?']())) {
            return nil;};
          if ((line_indent = $rb_minus(line.$length(), line.$lstrip().$length()))['$=='](0)) {
            
            gutter_width = nil;
            
            Opal.brk(nil, $brk);
          } else if ($truthy(($truthy($b = gutter_width) ? $rb_gt(line_indent, gutter_width) : $b))) {
            return nil
            } else {
            return (gutter_width = line_indent)
          };}, TMP_73.$$s = self, TMP_73.$$brk = $brk, TMP_73.$$arity = 1, TMP_73))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        if (indent['$=='](0)) {
          if ($truthy(gutter_width)) {
            $send(lines, 'map!', [], (TMP_74 = function(line){var self = TMP_74.$$s || this;
if (line == null) line = nil;
            if ($truthy(line['$empty?']())) {
                return line
                } else {
                return line['$[]'](Opal.Range.$new(gutter_width, -1, false))
              }}, TMP_74.$$s = self, TMP_74.$$arity = 1, TMP_74))}
          } else {
          
          padding = $rb_times(" ", indent);
          if ($truthy(gutter_width)) {
            $send(lines, 'map!', [], (TMP_75 = function(line){var self = TMP_75.$$s || this;
if (line == null) line = nil;
            if ($truthy(line['$empty?']())) {
                return line
                } else {
                return $rb_plus(padding, line['$[]'](Opal.Range.$new(gutter_width, -1, false)))
              }}, TMP_75.$$s = self, TMP_75.$$arity = 1, TMP_75))
            } else {
            $send(lines, 'map!', [], (TMP_76 = function(line){var self = TMP_76.$$s || this;
if (line == null) line = nil;
            if ($truthy(line['$empty?']())) {
                return line
                } else {
                return $rb_plus(padding, line)
              }}, TMP_76.$$s = self, TMP_76.$$arity = 1, TMP_76))
          };
        };
        return nil;
      }, TMP_Parser_adjust_indentation$B_77.$$arity = -2);
      Opal.defs(self, '$sanitize_attribute_name', TMP_Parser_sanitize_attribute_name_78 = function $$sanitize_attribute_name(name) {
        var self = this;

        return name.$gsub(Opal.const_get_relative($nesting, 'InvalidAttributeNameCharsRx'), "").$downcase()
      }, TMP_Parser_sanitize_attribute_name_78.$$arity = 1);
      return Opal.defs(self, '$roman_numeral_to_int', TMP_Parser_roman_numeral_to_int_80 = function $$roman_numeral_to_int(value) {
        var TMP_79, self = this, digits = nil, result = nil;

        
        value = value.$downcase();
        digits = $hash2(["i", "v", "x"], {"i": 1, "v": 5, "x": 10});
        result = 0;
        $send(Opal.Range.$new(0, $rb_minus(value.$length(), 1), false), 'each', [], (TMP_79 = function(i){var self = TMP_79.$$s || this, $a, digit = nil;
if (i == null) i = nil;
        
          digit = digits['$[]'](value['$[]'](Opal.Range.$new(i, i, false)));
          if ($truthy(($truthy($a = $rb_lt($rb_plus(i, 1), value.$length())) ? $rb_gt(digits['$[]'](value['$[]'](Opal.Range.$new($rb_plus(i, 1), $rb_plus(i, 1), false))), digit) : $a))) {
            return (result = $rb_minus(result, digit))
            } else {
            return (result = $rb_plus(result, digit))
          };}, TMP_79.$$s = self, TMP_79.$$arity = 1, TMP_79));
        return result;
      }, TMP_Parser_roman_numeral_to_int_80.$$arity = 1);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/path_resolver"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$is_root?', '$expand_path', '$pwd', '$start_with?', '$==', '$=~', '$nil_or_empty?', '$include?', '$tr', '$partition_path', '$join_path', '$[]', '$posixfy', '$is_web_root?', '$is_unc?', '$index', '$split', '$shift', '$delete', '$[]=', '$-', '$*', '$raise', '$empty?', '$system_path', '$!=', '$!', '$dup', '$each', '$>', '$length', '$pop', '$fetch', '$warn', '$push', '$chomp', '$uri_prefix', '$<<', '$+']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $PathResolver(){};
      var self = $PathResolver = $klass($base, $super, 'PathResolver', $PathResolver);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_PathResolver_initialize_1, TMP_PathResolver_is_root$q_2, TMP_PathResolver_is_unc$q_3, TMP_PathResolver_is_web_root$q_4, TMP_PathResolver_posixfy_5, TMP_PathResolver_expand_path_6, TMP_PathResolver_partition_path_7, TMP_PathResolver_join_path_8, TMP_PathResolver_system_path_10, TMP_PathResolver_web_path_12, TMP_PathResolver_relative_path_13;

      def.file_separator = def._partition_path_web = def._partition_path_sys = def.working_dir = nil;
      
      Opal.const_set($nesting[0], 'DOT', ".");
      Opal.const_set($nesting[0], 'DOT_DOT', "..");
      Opal.const_set($nesting[0], 'DOT_SLASH', "./");
      Opal.const_set($nesting[0], 'SLASH', "/");
      Opal.const_set($nesting[0], 'BACKSLASH', "\\");
      Opal.const_set($nesting[0], 'DOUBLE_SLASH', "//");
      Opal.const_set($nesting[0], 'WindowsRootRx', /^[a-zA-Z]:(?:\\|\/)/);
      self.$attr_accessor("file_separator");
      self.$attr_accessor("working_dir");
      
      Opal.defn(self, '$initialize', TMP_PathResolver_initialize_1 = function $$initialize(file_separator, working_dir) {
        var $a, self = this;

        if (file_separator == null) {
          file_separator = nil;
        }
        if (working_dir == null) {
          working_dir = nil;
        }
        
        self.file_separator = (function() {if ($truthy(file_separator)) {
          return file_separator
          } else {
          
          return ($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified('::', 'File'), 'ALT_SEPARATOR')) ? $a : Opal.const_get_qualified(Opal.const_get_qualified('::', 'File'), 'SEPARATOR'));
        }; return nil; })();
        if ($truthy(working_dir)) {
          self.working_dir = (function() {if ($truthy(self['$is_root?'](working_dir))) {
            return working_dir
            } else {
            
            return Opal.const_get_qualified('::', 'File').$expand_path(working_dir);
          }; return nil; })()
          } else {
          self.working_dir = Opal.const_get_qualified('::', 'File').$expand_path(Opal.const_get_qualified('::', 'Dir').$pwd())
        };
        self._partition_path_sys = $hash2([], {});
        return (self._partition_path_web = $hash2([], {}));
      }, TMP_PathResolver_initialize_1.$$arity = -1);
      
      Opal.defn(self, '$is_root?', TMP_PathResolver_is_root$q_2 = function(path) {
        var $a, $b, self = this;

        if ($truthy(path['$start_with?'](Opal.const_get_relative($nesting, 'SLASH')))) {
          return true
        } else if ($truthy((($a = self.file_separator['$=='](Opal.const_get_relative($nesting, 'BACKSLASH'))) ? Opal.const_get_relative($nesting, 'WindowsRootRx')['$=~'](path) : self.file_separator['$=='](Opal.const_get_relative($nesting, 'BACKSLASH'))))) {
          return true
        } else if ($truthy(($truthy($a = ($truthy($b = Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL')) ? Opal.const_get_qualified('::', 'JAVASCRIPT_PLATFORM')['$==']("browser") : $b)) ? path['$start_with?']("file:///") : $a))) {
          return true
          } else {
          return false
        }
      }, TMP_PathResolver_is_root$q_2.$$arity = 1);
      
      Opal.defn(self, '$is_unc?', TMP_PathResolver_is_unc$q_3 = function(path) {
        var self = this;

        return path['$start_with?'](Opal.const_get_relative($nesting, 'DOUBLE_SLASH'))
      }, TMP_PathResolver_is_unc$q_3.$$arity = 1);
      
      Opal.defn(self, '$is_web_root?', TMP_PathResolver_is_web_root$q_4 = function(path) {
        var self = this;

        return path['$start_with?'](Opal.const_get_relative($nesting, 'SLASH'))
      }, TMP_PathResolver_is_web_root$q_4.$$arity = 1);
      
      Opal.defn(self, '$posixfy', TMP_PathResolver_posixfy_5 = function $$posixfy(path) {
        var self = this;

        if ($truthy(path['$nil_or_empty?']())) {
          return ""
        } else if ($truthy(path['$include?'](Opal.const_get_relative($nesting, 'BACKSLASH')))) {
          return path.$tr(Opal.const_get_relative($nesting, 'BACKSLASH'), Opal.const_get_relative($nesting, 'SLASH'))
          } else {
          return path
        }
      }, TMP_PathResolver_posixfy_5.$$arity = 1);
      
      Opal.defn(self, '$expand_path', TMP_PathResolver_expand_path_6 = function $$expand_path(path) {
        var $a, $b, self = this, path_segments = nil, path_root = nil, _ = nil;

        
        $b = self.$partition_path(path), $a = Opal.to_ary($b), (path_segments = ($a[0] == null ? nil : $a[0])), (path_root = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $b;
        return self.$join_path(path_segments, path_root);
      }, TMP_PathResolver_expand_path_6.$$arity = 1);
      
      Opal.defn(self, '$partition_path', TMP_PathResolver_partition_path_7 = function $$partition_path(path, web_path) {
        var self = this, result = nil, posix_path = nil, root = nil, path_segments = nil, $writer = nil;

        if (web_path == null) {
          web_path = false;
        }
        
        if ($truthy((result = (function() {if ($truthy(web_path)) {
          return self._partition_path_web['$[]'](path)
          } else {
          return self._partition_path_sys['$[]'](path)
        }; return nil; })()))) {
          return result};
        posix_path = self.$posixfy(path);
        root = (function() {if ($truthy(web_path)) {
          if ($truthy(self['$is_web_root?'](posix_path))) {
            return Opal.const_get_relative($nesting, 'SLASH')
          } else if ($truthy(posix_path['$start_with?'](Opal.const_get_relative($nesting, 'DOT_SLASH')))) {
            return Opal.const_get_relative($nesting, 'DOT_SLASH')
            } else {
            return nil
          }
        } else if ($truthy(self['$is_root?'](posix_path))) {
          if ($truthy(self['$is_unc?'](posix_path))) {
            return Opal.const_get_relative($nesting, 'DOUBLE_SLASH')
          } else if ($truthy(posix_path['$start_with?'](Opal.const_get_relative($nesting, 'SLASH')))) {
            return Opal.const_get_relative($nesting, 'SLASH')
            } else {
            return posix_path['$[]'](Opal.Range.$new(0, posix_path.$index(Opal.const_get_relative($nesting, 'SLASH')), false))
          }
        } else if ($truthy(posix_path['$start_with?'](Opal.const_get_relative($nesting, 'DOT_SLASH')))) {
          return Opal.const_get_relative($nesting, 'DOT_SLASH')
          } else {
          return nil
        }; return nil; })();
        path_segments = posix_path.$split(Opal.const_get_relative($nesting, 'SLASH'));
        if (root['$=='](Opal.const_get_relative($nesting, 'DOUBLE_SLASH'))) {
          path_segments = path_segments['$[]']($range(2, -1, false))
        } else if ($truthy(root)) {
          path_segments.$shift()};
        path_segments.$delete(Opal.const_get_relative($nesting, 'DOT'));
        
        $writer = [path, [path_segments, root, posix_path]];
        $send((function() {if ($truthy(web_path)) {
          return self._partition_path_web
          } else {
          return self._partition_path_sys
        }; return nil; })(), '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_PathResolver_partition_path_7.$$arity = -2);
      
      Opal.defn(self, '$join_path', TMP_PathResolver_join_path_8 = function $$join_path(segments, root) {
        var self = this;

        if (root == null) {
          root = nil;
        }
        if ($truthy(root)) {
          return "" + (root) + ($rb_times(segments, Opal.const_get_relative($nesting, 'SLASH')))
          } else {
          return $rb_times(segments, Opal.const_get_relative($nesting, 'SLASH'))
        }
      }, TMP_PathResolver_join_path_8.$$arity = -2);
      
      Opal.defn(self, '$system_path', TMP_PathResolver_system_path_10 = function $$system_path(target, start, jail, opts) {
        var $a, $b, TMP_9, self = this, target_segments = nil, target_root = nil, _ = nil, resolved_target = nil, jail_segments = nil, jail_root = nil, start_segments = nil, start_root = nil, resolved_segments = nil, warned = nil;

        if (jail == null) {
          jail = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        
        if ($truthy(jail)) {
          
          if ($truthy(self['$is_root?'](jail))) {
            } else {
            self.$raise(Opal.const_get_qualified('::', 'SecurityError'), "" + "Jail is not an absolute path: " + (jail))
          };
          jail = self.$posixfy(jail);};
        if ($truthy(target['$nil_or_empty?']())) {
          target_segments = []
          } else {
          $b = self.$partition_path(target), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), (target_root = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $b
        };
        if ($truthy(target_segments['$empty?']())) {
          if ($truthy(start['$nil_or_empty?']())) {
            return (function() {if ($truthy(jail)) {
              return jail
              } else {
              return self.working_dir
            }; return nil; })()
          } else if ($truthy(self['$is_root?'](start))) {
            if ($truthy(jail)) {
              } else {
              return self.$expand_path(start)
            }
            } else {
            return self.$system_path(start, jail, jail, opts)
          }};
        if ($truthy(($truthy($a = target_root) ? target_root['$!='](Opal.const_get_relative($nesting, 'DOT_SLASH')) : $a))) {
          
          resolved_target = self.$join_path(target_segments, target_root);
          if ($truthy(($truthy($a = jail['$!']()) ? $a : resolved_target['$start_with?'](jail)))) {
            return resolved_target};};
        if ($truthy(start['$nil_or_empty?']())) {
          start = (function() {if ($truthy(jail)) {
            return jail
            } else {
            return self.working_dir
          }; return nil; })()
        } else if ($truthy(self['$is_root?'](start))) {
          start = self.$posixfy(start)
          } else {
          start = self.$system_path(start, jail, jail, opts)
        };
        if (jail['$=='](start)) {
          
          $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $b;
          start_segments = jail_segments.$dup();
        } else if ($truthy(jail)) {
          
          if ($truthy(start['$start_with?'](jail))) {
            } else {
            self.$raise(Opal.const_get_qualified('::', 'SecurityError'), "" + (($truthy($a = opts['$[]']("target_name")) ? $a : "Start path")) + " " + (start) + " is outside of jail: " + (jail) + " (disallowed in safe mode)")
          };
          $b = self.$partition_path(start), $a = Opal.to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (start_root = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $b;
          $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $b;
          } else {
          
          $b = self.$partition_path(start), $a = Opal.to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (start_root = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $b;
          jail_root = start_root;
        };
        resolved_segments = start_segments.$dup();
        warned = false;
        $send(target_segments, 'each', [], (TMP_9 = function(segment){var self = TMP_9.$$s || this, $c, recover = nil;
if (segment == null) segment = nil;
        if (segment['$=='](Opal.const_get_relative($nesting, 'DOT_DOT'))) {
            if ($truthy(jail)) {
              if ($truthy($rb_gt(resolved_segments.$length(), jail_segments.$length()))) {
                return resolved_segments.$pop()
              } else if ($truthy((recover = ($truthy($c = recover) ? $c : opts.$fetch("recover", true)))['$!']())) {
                return self.$raise(Opal.const_get_qualified('::', 'SecurityError'), "" + (($truthy($c = opts['$[]']("target_name")) ? $c : "path")) + " " + (target) + " refers to location outside jail: " + (jail) + " (disallowed in safe mode)")
              } else if ($truthy(warned['$!']())) {
                
                self.$warn("" + "asciidoctor: WARNING: " + (($truthy($c = opts['$[]']("target_name")) ? $c : "path")) + " has illegal reference to ancestor of jail, auto-recovering");
                return (warned = true);
                } else {
                return nil
              }
              } else {
              return resolved_segments.$pop()
            }
            } else {
            return resolved_segments.$push(segment)
          }}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
        return self.$join_path(resolved_segments, jail_root);
      }, TMP_PathResolver_system_path_10.$$arity = -3);
      
      Opal.defn(self, '$web_path', TMP_PathResolver_web_path_12 = function $$web_path(target, start) {
        var $a, $b, TMP_11, self = this, uri_prefix = nil, target_segments = nil, target_root = nil, _ = nil, resolved_segments = nil;

        if (start == null) {
          start = nil;
        }
        
        target = self.$posixfy(target);
        start = self.$posixfy(start);
        uri_prefix = nil;
        if ($truthy(($truthy($a = start['$nil_or_empty?']()) ? $a : self['$is_web_root?'](target)))) {
          } else {
          
          target = "" + (start.$chomp("/")) + (Opal.const_get_relative($nesting, 'SLASH')) + (target);
          if ($truthy((uri_prefix = Opal.const_get_relative($nesting, 'Helpers').$uri_prefix(target)))) {
            target = target['$[]'](Opal.Range.$new(uri_prefix.$length(), -1, false))};
        };
        $b = self.$partition_path(target, true), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), (target_root = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $b;
        resolved_segments = [];
        $send(target_segments, 'each', [], (TMP_11 = function(segment){var self = TMP_11.$$s || this, $c;
if (segment == null) segment = nil;
        if (segment['$=='](Opal.const_get_relative($nesting, 'DOT_DOT'))) {
            if ($truthy(resolved_segments['$empty?']())) {
              if ($truthy(($truthy($c = target_root) ? target_root['$!='](Opal.const_get_relative($nesting, 'DOT_SLASH')) : $c))) {
                return nil
                } else {
                return resolved_segments['$<<'](segment)
              }
            } else if (resolved_segments['$[]'](-1)['$=='](Opal.const_get_relative($nesting, 'DOT_DOT'))) {
              return resolved_segments['$<<'](segment)
              } else {
              return resolved_segments.$pop()
            }
            } else {
            return resolved_segments['$<<'](segment)
          }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
        if ($truthy(uri_prefix)) {
          return "" + (uri_prefix) + (self.$join_path(resolved_segments, target_root))
          } else {
          return self.$join_path(resolved_segments, target_root)
        };
      }, TMP_PathResolver_web_path_12.$$arity = -2);
      return (Opal.defn(self, '$relative_path', TMP_PathResolver_relative_path_13 = function $$relative_path(filename, base_directory) {
        var $a, self = this, offset = nil;

        if ($truthy(($truthy($a = self['$is_root?'](filename)) ? self['$is_root?'](base_directory) : $a))) {
          
          offset = $rb_plus(base_directory.$chomp(self.file_separator).$length(), 1);
          return filename['$[]'](Opal.Range.$new(offset, -1, false));
          } else {
          return filename
        }
      }, TMP_PathResolver_relative_path_13.$$arity = 2), nil) && 'relative_path';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/reader"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$path', '$lineno', '$attr_reader', '$!', '$===', '$split', '$file', '$dir', '$dirname', '$==', '$basename', '$prepare_lines', '$dup', '$empty?', '$[]', '$normalize_lines_from_string', '$normalize_lines_array', '$+', '$nil?', '$peek_line', '$nil_or_empty?', '$>', '$process_line', '$times', '$read_line', '$<<', '$reverse_each', '$unshift', '$has_more_lines?', '$shift', '$*', '$read_lines', '$advance', '$eof?', '$start_with?', '$match', '$push', '$read_lines_until', '$=~', '$size', '$clear', '$[]=', '$-', '$new', '$line_info', '$to_i', '$fetch', '$attributes', '$<', '$references', '$has_key?', '$skip_front_matter!', '$pop', '$adjust_indentation!', '$attr', '$end_with?', '$include?', '$preprocess_conditional_inclusion', '$captures', '$preprocess_include', '$strip', '$pop_include', '$downcase', '$warn', '$none?', '$any?', '$resolve_expr_val', '$send', '$to_sym', '$replace_next_line', '$rstrip', '$sub_attributes', '$attribute_missing', '$include_processors?', '$find', '$handles?', '$instance', '$process_method', '$parse', '$>=', '$safe', '$pwd', '$base_dir', '$join', '$uriish?', '$require_library', '$normalize_system_path', '$file?', '$relative_path', '$each', '$map', '$to_proc', '$/', '$concat', '$to_a', '$uniq', '$sort', '$to_set', '$open', '$each_line', '$infinite?', '$push_include', '$force_encoding', '$chomp', '$read', '$extname', '$rootname', '$<=', '$!=', '$to_f', '$extensions?', '$extensions', '$include_processors', '$class', '$object_id', '$inspect', '$to_s']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Reader(){};
      var self = $Reader = $klass($base, $super, 'Reader', $Reader);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Reader_initialize_3, TMP_Reader_prepare_lines_4, TMP_Reader_process_line_5, TMP_Reader_has_more_lines$q_6, TMP_Reader_next_line_empty$q_7, TMP_Reader_peek_line_8, TMP_Reader_peek_lines_11, TMP_Reader_read_line_12, TMP_Reader_read_lines_13, TMP_Reader_read_14, TMP_Reader_advance_15, TMP_Reader_unshift_line_16, TMP_Reader_unshift_lines_18, TMP_Reader_replace_next_line_19, TMP_Reader_skip_blank_lines_20, TMP_Reader_skip_comment_lines_21, TMP_Reader_skip_line_comments_22, TMP_Reader_terminate_23, TMP_Reader_eof$q_24, TMP_Reader_read_lines_until_25, TMP_Reader_shift_26, TMP_Reader_unshift_27, TMP_Reader_cursor_28, TMP_Reader_line_info_29, TMP_Reader_prev_line_info_30, TMP_Reader_lines_31, TMP_Reader_string_32, TMP_Reader_source_33, TMP_Reader_to_s_34;

      def.file = def.dir = def.lines = def.process_lines = def.look_ahead = def.eof = def.unescape_next_line = def.lineno = def.path = def.source_lines = nil;
      
      (function($base, $super, $parent_nesting) {
        function $Cursor(){};
        var self = $Cursor = $klass($base, $super, 'Cursor', $Cursor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Cursor_initialize_1, TMP_Cursor_line_info_2;

        
        self.$attr_accessor("file");
        self.$attr_accessor("dir");
        self.$attr_accessor("path");
        self.$attr_accessor("lineno");
        
        Opal.defn(self, '$initialize', TMP_Cursor_initialize_1 = function $$initialize(file, dir, path, lineno) {
          var self = this;

          if (dir == null) {
            dir = nil;
          }
          if (path == null) {
            path = nil;
          }
          if (lineno == null) {
            lineno = nil;
          }
          
          self.file = file;
          self.dir = dir;
          self.path = path;
          return (self.lineno = lineno);
        }, TMP_Cursor_initialize_1.$$arity = -2);
        
        Opal.defn(self, '$line_info', TMP_Cursor_line_info_2 = function $$line_info() {
          var self = this;

          return "" + (self.$path()) + ": line " + (self.$lineno())
        }, TMP_Cursor_line_info_2.$$arity = 0);
        return Opal.alias(self, "to_s", "line_info");
      })($nesting[0], null, $nesting);
      self.$attr_reader("file");
      self.$attr_reader("dir");
      self.$attr_reader("path");
      self.$attr_reader("lineno");
      self.$attr_reader("source_lines");
      self.$attr_accessor("process_lines");
      
      Opal.defn(self, '$initialize', TMP_Reader_initialize_3 = function $$initialize(data, cursor, opts) {
        var $a, $b, self = this;

        if (data == null) {
          data = nil;
        }
        if (cursor == null) {
          cursor = nil;
        }
        if (opts == null) {
          opts = $hash2(["normalize"], {"normalize": false});
        }
        
        if ($truthy(cursor['$!']())) {
          
          self.file = (self.dir = nil);
          self.path = "<stdin>";
          self.lineno = 1;
        } else if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](cursor))) {
          
          self.file = cursor;
          $b = Opal.const_get_qualified('::', 'File').$split(self.file), $a = Opal.to_ary($b), (self.dir = ($a[0] == null ? nil : $a[0])), (self.path = ($a[1] == null ? nil : $a[1])), $b;
          self.lineno = 1;
          } else {
          
          self.file = cursor.$file();
          self.dir = cursor.$dir();
          self.path = ($truthy($a = cursor.$path()) ? $a : "<stdin>");
          if ($truthy(self.file)) {
            
            if ($truthy(self.dir)) {
              } else {
              
              self.dir = Opal.const_get_qualified('::', 'File').$dirname(self.file);
              if (self.dir['$=='](".")) {
                self.dir = nil};
            };
            if ($truthy(cursor.$path())) {
              } else {
              self.path = Opal.const_get_qualified('::', 'File').$basename(self.file)
            };};
          self.lineno = ($truthy($a = cursor.$lineno()) ? $a : 1);
        };
        self.lines = (function() {if ($truthy(data)) {
          
          return self.$prepare_lines(data, opts);
          } else {
          return []
        }; return nil; })();
        self.source_lines = self.lines.$dup();
        self.eof = self.lines['$empty?']();
        self.look_ahead = 0;
        self.process_lines = true;
        return (self.unescape_next_line = false);
      }, TMP_Reader_initialize_3.$$arity = -1);
      
      Opal.defn(self, '$prepare_lines', TMP_Reader_prepare_lines_4 = function $$prepare_lines(data, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](data))) {
          if ($truthy(opts['$[]']("normalize"))) {
            return Opal.const_get_relative($nesting, 'Helpers').$normalize_lines_from_string(data)
            } else {
            return data.$split(Opal.const_get_relative($nesting, 'EOL'))
          }
        } else if ($truthy(opts['$[]']("normalize"))) {
          return Opal.const_get_relative($nesting, 'Helpers').$normalize_lines_array(data)
          } else {
          return data.$dup()
        }
      }, TMP_Reader_prepare_lines_4.$$arity = -2);
      
      Opal.defn(self, '$process_line', TMP_Reader_process_line_5 = function $$process_line(line) {
        var self = this;

        
        if ($truthy(self.process_lines)) {
          self.look_ahead = $rb_plus(self.look_ahead, 1)};
        return line;
      }, TMP_Reader_process_line_5.$$arity = 1);
      
      Opal.defn(self, '$has_more_lines?', TMP_Reader_has_more_lines$q_6 = function() {
        var $a, self = this;

        return ($truthy($a = self.eof) ? $a : (self.eof = self.$peek_line()['$nil?']()))['$!']()
      }, TMP_Reader_has_more_lines$q_6.$$arity = 0);
      
      Opal.defn(self, '$next_line_empty?', TMP_Reader_next_line_empty$q_7 = function() {
        var self = this;

        return self.$peek_line()['$nil_or_empty?']()
      }, TMP_Reader_next_line_empty$q_7.$$arity = 0);
      
      Opal.defn(self, '$peek_line', TMP_Reader_peek_line_8 = function $$peek_line(direct) {
        var $a, self = this, line = nil;

        if (direct == null) {
          direct = false;
        }
        if ($truthy(($truthy($a = direct) ? $a : $rb_gt(self.look_ahead, 0)))) {
          if ($truthy(self.unescape_next_line)) {
            return self.lines['$[]'](0)['$[]']($range(1, -1, false))
            } else {
            return self.lines['$[]'](0)
          }
        } else if ($truthy(($truthy($a = self.eof) ? $a : self.lines['$empty?']()))) {
          
          self.eof = true;
          self.look_ahead = 0;
          return nil;
        } else if ($truthy((line = self.$process_line(self.lines['$[]'](0)))['$!']())) {
          return self.$peek_line()
          } else {
          return line
        }
      }, TMP_Reader_peek_line_8.$$arity = -1);
      
      Opal.defn(self, '$peek_lines', TMP_Reader_peek_lines_11 = function $$peek_lines(num, direct) {
        var TMP_9, TMP_10, self = this, old_look_ahead = nil, result = nil;

        if (num == null) {
          num = 1;
        }
        if (direct == null) {
          direct = true;
        }
        
        old_look_ahead = self.look_ahead;
        result = [];
        (function(){var $brk = Opal.new_brk(); try {return $send(num, 'times', [], (TMP_9 = function(){var self = TMP_9.$$s || this, line = nil;

        if ($truthy((line = self.$read_line(direct)))) {
            return result['$<<'](line)
            } else {
            
            Opal.brk(nil, $brk)
          }}, TMP_9.$$s = self, TMP_9.$$brk = $brk, TMP_9.$$arity = 0, TMP_9))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        if ($truthy(result['$empty?']())) {
          } else {
          
          $send(result, 'reverse_each', [], (TMP_10 = function(line){var self = TMP_10.$$s || this;
if (line == null) line = nil;
          return self.$unshift(line)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
          if ($truthy(direct)) {
            self.look_ahead = old_look_ahead};
        };
        return result;
      }, TMP_Reader_peek_lines_11.$$arity = -1);
      
      Opal.defn(self, '$read_line', TMP_Reader_read_line_12 = function $$read_line(direct) {
        var $a, $b, self = this;

        if (direct == null) {
          direct = false;
        }
        if ($truthy(($truthy($a = ($truthy($b = direct) ? $b : $rb_gt(self.look_ahead, 0))) ? $a : self['$has_more_lines?']()))) {
          return self.$shift()
          } else {
          return nil
        }
      }, TMP_Reader_read_line_12.$$arity = -1);
      
      Opal.defn(self, '$read_lines', TMP_Reader_read_lines_13 = function $$read_lines() {
        var $a, self = this, lines = nil;

        
        lines = [];
        while ($truthy(self['$has_more_lines?']())) {
          lines['$<<'](self.$shift())
        };
        return lines;
      }, TMP_Reader_read_lines_13.$$arity = 0);
      Opal.alias(self, "readlines", "read_lines");
      
      Opal.defn(self, '$read', TMP_Reader_read_14 = function $$read() {
        var self = this;

        return $rb_times(self.$read_lines(), Opal.const_get_relative($nesting, 'EOL'))
      }, TMP_Reader_read_14.$$arity = 0);
      
      Opal.defn(self, '$advance', TMP_Reader_advance_15 = function $$advance(direct) {
        var self = this;

        if (direct == null) {
          direct = true;
        }
        return self.$read_line(direct)['$!']()['$!']()
      }, TMP_Reader_advance_15.$$arity = -1);
      
      Opal.defn(self, '$unshift_line', TMP_Reader_unshift_line_16 = function $$unshift_line(line_to_restore) {
        var self = this;

        
        self.$unshift(line_to_restore);
        return nil;
      }, TMP_Reader_unshift_line_16.$$arity = 1);
      Opal.alias(self, "restore_line", "unshift_line");
      
      Opal.defn(self, '$unshift_lines', TMP_Reader_unshift_lines_18 = function $$unshift_lines(lines_to_restore) {
        var TMP_17, self = this;

        
        $send(lines_to_restore, 'reverse_each', [], (TMP_17 = function(line){var self = TMP_17.$$s || this;
if (line == null) line = nil;
        return self.$unshift(line)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
        return nil;
      }, TMP_Reader_unshift_lines_18.$$arity = 1);
      Opal.alias(self, "restore_lines", "unshift_lines");
      
      Opal.defn(self, '$replace_next_line', TMP_Reader_replace_next_line_19 = function $$replace_next_line(replacement) {
        var self = this;

        
        self.$advance();
        self.$unshift(replacement);
        return nil;
      }, TMP_Reader_replace_next_line_19.$$arity = 1);
      Opal.alias(self, "replace_line", "replace_next_line");
      
      Opal.defn(self, '$skip_blank_lines', TMP_Reader_skip_blank_lines_20 = function $$skip_blank_lines() {
        var $a, self = this, num_skipped = nil, next_line = nil;

        
        if ($truthy(self['$eof?']())) {
          return 0};
        num_skipped = 0;
        while ($truthy((next_line = self.$peek_line()))) {
          if ($truthy(next_line['$empty?']())) {
            
            self.$advance();
            num_skipped = $rb_plus(num_skipped, 1);
            } else {
            return num_skipped
          }
        };
        return num_skipped;
      }, TMP_Reader_skip_blank_lines_20.$$arity = 0);
      
      Opal.defn(self, '$skip_comment_lines', TMP_Reader_skip_comment_lines_21 = function $$skip_comment_lines(opts) {
        var $a, $b, self = this, comment_lines = nil, include_blank_lines = nil, next_line = nil, commentish = nil, match = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        if ($truthy(self['$eof?']())) {
          return []};
        comment_lines = [];
        include_blank_lines = opts['$[]']("include_blank_lines");
        while ($truthy((next_line = self.$peek_line()))) {
          if ($truthy(($truthy($b = include_blank_lines) ? next_line['$empty?']() : $b))) {
            comment_lines['$<<'](self.$shift())
          } else if ($truthy(($truthy($b = (commentish = next_line['$start_with?']("//"))) ? (match = Opal.const_get_relative($nesting, 'CommentBlockRx').$match(next_line)) : $b))) {
            
            comment_lines['$<<'](self.$shift());
            $send(comment_lines, 'push', Opal.to_a(self.$read_lines_until($hash2(["terminator", "read_last_line", "skip_processing"], {"terminator": match['$[]'](0), "read_last_line": true, "skip_processing": true}))));
          } else if ($truthy(($truthy($b = commentish) ? Opal.const_get_relative($nesting, 'CommentLineRx')['$=~'](next_line) : $b))) {
            comment_lines['$<<'](self.$shift())
            } else {
            break;
          }
        };
        return comment_lines;
      }, TMP_Reader_skip_comment_lines_21.$$arity = -1);
      
      Opal.defn(self, '$skip_line_comments', TMP_Reader_skip_line_comments_22 = function $$skip_line_comments() {
        var $a, self = this, comment_lines = nil, next_line = nil;

        
        if ($truthy(self['$eof?']())) {
          return []};
        comment_lines = [];
        while ($truthy((next_line = self.$peek_line()))) {
          if ($truthy(Opal.const_get_relative($nesting, 'CommentLineRx')['$=~'](next_line))) {
            comment_lines['$<<'](self.$shift())
            } else {
            break;
          }
        };
        return comment_lines;
      }, TMP_Reader_skip_line_comments_22.$$arity = 0);
      
      Opal.defn(self, '$terminate', TMP_Reader_terminate_23 = function $$terminate() {
        var self = this;

        
        self.lineno = $rb_plus(self.lineno, self.lines.$size());
        self.lines.$clear();
        self.eof = true;
        self.look_ahead = 0;
        return nil;
      }, TMP_Reader_terminate_23.$$arity = 0);
      
      Opal.defn(self, '$eof?', TMP_Reader_eof$q_24 = function() {
        var self = this;

        return self['$has_more_lines?']()['$!']()
      }, TMP_Reader_eof$q_24.$$arity = 0);
      Opal.alias(self, "empty?", "eof?");
      
      Opal.defn(self, '$read_lines_until', TMP_Reader_read_lines_until_25 = function $$read_lines_until(options) {
        var $a, $b, $c, $d, self = this, $iter = TMP_Reader_read_lines_until_25.$$p, $yield = $iter || nil, result = nil, restore_process_lines = nil, terminator = nil, break_on_blank_lines = nil, break_on_list_continuation = nil, skip_comments = nil, line_read = nil, line_restored = nil, complete = nil, line = nil, $writer = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        if ($iter) TMP_Reader_read_lines_until_25.$$p = null;
        
        result = [];
        if ($truthy(options['$[]']("skip_first_line"))) {
          self.$advance()};
        if ($truthy(($truthy($a = self.process_lines) ? options['$[]']("skip_processing") : $a))) {
          
          self.process_lines = false;
          restore_process_lines = true;
          } else {
          restore_process_lines = false
        };
        if ($truthy((terminator = options['$[]']("terminator")))) {
          
          break_on_blank_lines = false;
          break_on_list_continuation = false;
          } else {
          
          break_on_blank_lines = options['$[]']("break_on_blank_lines");
          break_on_list_continuation = options['$[]']("break_on_list_continuation");
        };
        skip_comments = options['$[]']("skip_line_comments");
        line_read = false;
        line_restored = false;
        complete = false;
        while ($truthy(($truthy($b = complete['$!']()) ? (line = self.$read_line()) : $b))) {
          
          complete = (function() {while ($truthy(true)) {
            
            if ($truthy(($truthy($c = terminator) ? line['$=='](terminator) : $c))) {
              return true};
            if ($truthy(($truthy($c = break_on_blank_lines) ? line['$empty?']() : $c))) {
              return true};
            if ($truthy(($truthy($c = ($truthy($d = break_on_list_continuation) ? line_read : $d)) ? line['$=='](Opal.const_get_relative($nesting, 'LIST_CONTINUATION')) : $c))) {
              
              
              $writer = ["preserve_last_line", true];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return true;};
            if ($truthy((($c = ($yield !== nil)) ? Opal.yield1($yield, line) : ($yield !== nil)))) {
              return true};
            return false;
          }; return nil; })();
          if ($truthy(complete)) {
            
            if ($truthy(options['$[]']("read_last_line"))) {
              
              result['$<<'](line);
              line_read = true;};
            if ($truthy(options['$[]']("preserve_last_line"))) {
              
              self.$unshift(line);
              line_restored = true;};
          } else if ($truthy(($truthy($b = ($truthy($c = skip_comments) ? line['$start_with?']("//") : $c)) ? Opal.const_get_relative($nesting, 'CommentLineRx')['$=~'](line) : $b))) {
            } else {
            
            result['$<<'](line);
            line_read = true;
          };
        };
        if ($truthy(restore_process_lines)) {
          
          self.process_lines = true;
          if ($truthy(($truthy($a = line_restored) ? terminator['$!']() : $a))) {
            self.look_ahead = $rb_minus(self.look_ahead, 1)};};
        return result;
      }, TMP_Reader_read_lines_until_25.$$arity = -1);
      
      Opal.defn(self, '$shift', TMP_Reader_shift_26 = function $$shift() {
        var self = this;

        
        self.lineno = $rb_plus(self.lineno, 1);
        if (self.look_ahead['$=='](0)) {
          } else {
          self.look_ahead = $rb_minus(self.look_ahead, 1)
        };
        return self.lines.$shift();
      }, TMP_Reader_shift_26.$$arity = 0);
      
      Opal.defn(self, '$unshift', TMP_Reader_unshift_27 = function $$unshift(line) {
        var self = this;

        
        self.lineno = $rb_minus(self.lineno, 1);
        self.look_ahead = $rb_plus(self.look_ahead, 1);
        self.eof = false;
        return self.lines.$unshift(line);
      }, TMP_Reader_unshift_27.$$arity = 1);
      
      Opal.defn(self, '$cursor', TMP_Reader_cursor_28 = function $$cursor() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Cursor').$new(self.file, self.dir, self.path, self.lineno)
      }, TMP_Reader_cursor_28.$$arity = 0);
      
      Opal.defn(self, '$line_info', TMP_Reader_line_info_29 = function $$line_info() {
        var self = this;

        return "" + (self.path) + ": line " + (self.lineno)
      }, TMP_Reader_line_info_29.$$arity = 0);
      Opal.alias(self, "next_line_info", "line_info");
      
      Opal.defn(self, '$prev_line_info', TMP_Reader_prev_line_info_30 = function $$prev_line_info() {
        var self = this;

        return "" + (self.path) + ": line " + ($rb_minus(self.lineno, 1))
      }, TMP_Reader_prev_line_info_30.$$arity = 0);
      
      Opal.defn(self, '$lines', TMP_Reader_lines_31 = function $$lines() {
        var self = this;

        return self.lines.$dup()
      }, TMP_Reader_lines_31.$$arity = 0);
      
      Opal.defn(self, '$string', TMP_Reader_string_32 = function $$string() {
        var self = this;

        return $rb_times(self.lines, Opal.const_get_relative($nesting, 'EOL'))
      }, TMP_Reader_string_32.$$arity = 0);
      
      Opal.defn(self, '$source', TMP_Reader_source_33 = function $$source() {
        var self = this;

        return $rb_times(self.source_lines, Opal.const_get_relative($nesting, 'EOL'))
      }, TMP_Reader_source_33.$$arity = 0);
      return (Opal.defn(self, '$to_s', TMP_Reader_to_s_34 = function $$to_s() {
        var self = this;

        return self.$line_info()
      }, TMP_Reader_to_s_34.$$arity = 0), nil) && 'to_s';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $PreprocessorReader(){};
      var self = $PreprocessorReader = $klass($base, $super, 'PreprocessorReader', $PreprocessorReader);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_PreprocessorReader_initialize_35, TMP_PreprocessorReader_prepare_lines_36, TMP_PreprocessorReader_process_line_37, TMP_PreprocessorReader_peek_line_38, TMP_PreprocessorReader_preprocess_conditional_inclusion_43, TMP_PreprocessorReader_preprocess_include_52, TMP_PreprocessorReader_push_include_53, TMP_PreprocessorReader_pop_include_54, TMP_PreprocessorReader_include_depth_55, TMP_PreprocessorReader_exceeded_max_depth$q_56, TMP_PreprocessorReader_shift_57, TMP_PreprocessorReader_skip_front_matter$B_58, TMP_PreprocessorReader_resolve_expr_val_59, TMP_PreprocessorReader_include_processors$q_60, TMP_PreprocessorReader_to_s_62;

      def.document = def.lineno = def.process_lines = def.look_ahead = def.skipping = def.include_stack = def.conditional_stack = def.path = def.include_processor_extensions = def.maxdepth = def.dir = def.lines = def.file = def.includes = def.unescape_next_line = nil;
      
      self.$attr_reader("include_stack");
      self.$attr_reader("includes");
      
      Opal.defn(self, '$initialize', TMP_PreprocessorReader_initialize_35 = function $$initialize(document, data, cursor) {
        var $a, self = this, $iter = TMP_PreprocessorReader_initialize_35.$$p, $yield = $iter || nil, include_depth_default = nil, $logical_op_recvr_tmp_3 = nil, $writer = nil;

        if (data == null) {
          data = nil;
        }
        if (cursor == null) {
          cursor = nil;
        }
        if ($iter) TMP_PreprocessorReader_initialize_35.$$p = null;
        
        self.document = document;
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_PreprocessorReader_initialize_35, false), [data, cursor, $hash2(["normalize"], {"normalize": true})], null);
        include_depth_default = document.$attributes().$fetch("max-include-depth", 64).$to_i();
        if ($truthy($rb_lt(include_depth_default, 0))) {
          include_depth_default = 0};
        self.maxdepth = $hash2(["abs", "rel"], {"abs": include_depth_default, "rel": include_depth_default});
        self.include_stack = [];
        self.includes = (($logical_op_recvr_tmp_3 = document.$references()), ($truthy($a = $logical_op_recvr_tmp_3['$[]']("includes")) ? $a : (($writer = ["includes", []]), $send($logical_op_recvr_tmp_3, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])));
        self.skipping = false;
        self.conditional_stack = [];
        return (self.include_processor_extensions = nil);
      }, TMP_PreprocessorReader_initialize_35.$$arity = -2);
      
      Opal.defn(self, '$prepare_lines', TMP_PreprocessorReader_prepare_lines_36 = function $$prepare_lines(data, opts) {
        var $a, $b, self = this, $iter = TMP_PreprocessorReader_prepare_lines_36.$$p, $yield = $iter || nil, result = nil, front_matter = nil, $writer = nil, first = nil, last = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_PreprocessorReader_prepare_lines_36.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        result = $send(self, Opal.find_super_dispatcher(self, 'prepare_lines', TMP_PreprocessorReader_prepare_lines_36, false), $zuper, $iter);
        if ($truthy(($truthy($a = self.document) ? self.document.$attributes()['$has_key?']("skip-front-matter") : $a))) {
          if ($truthy((front_matter = self['$skip_front_matter!'](result)))) {
            
            $writer = ["front-matter", $rb_times(front_matter, Opal.const_get_relative($nesting, 'EOL'))];
            $send(self.document.$attributes(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];}};
        if ($truthy(opts.$fetch("condense", true))) {
          
          while ($truthy(($truthy($b = (first = result['$[]'](0))) ? first['$empty?']() : $b))) {
            ($truthy($b = result.$shift()) ? (self.lineno = $rb_plus(self.lineno, 1)) : $b)
          };
          while ($truthy(($truthy($b = (last = result['$[]'](-1))) ? last['$empty?']() : $b))) {
            result.$pop()
          };};
        if ($truthy(opts['$[]']("indent"))) {
          Opal.const_get_relative($nesting, 'Parser')['$adjust_indentation!'](result, opts['$[]']("indent"), self.document.$attr("tabsize"))};
        return result;
      }, TMP_PreprocessorReader_prepare_lines_36.$$arity = -2);
      
      Opal.defn(self, '$process_line', TMP_PreprocessorReader_process_line_37 = function $$process_line(line) {
        var $a, $b, self = this, match = nil, escaped = nil;

        
        if ($truthy(self.process_lines)) {
          } else {
          return line
        };
        if ($truthy(line['$empty?']())) {
          
          self.look_ahead = $rb_plus(self.look_ahead, 1);
          return "";};
        if ($truthy(($truthy($a = ($truthy($b = line['$end_with?']("]")) ? line['$start_with?']("[")['$!']() : $b)) ? line['$include?']("::") : $a))) {
          if ($truthy(($truthy($a = line['$include?']("if")) ? (match = Opal.const_get_relative($nesting, 'ConditionalDirectiveRx').$match(line)) : $a))) {
            if ($truthy(line['$start_with?']("\\"))) {
              
              self.unescape_next_line = true;
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line['$[]']($range(1, -1, false));
            } else if ($truthy($send(self, 'preprocess_conditional_inclusion', Opal.to_a(match.$captures())))) {
              
              self.$advance();
              return nil;
              } else {
              
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line;
            }
          } else if ($truthy(self.skipping)) {
            
            self.$advance();
            return nil;
          } else if ($truthy(($truthy($a = ($truthy($b = (escaped = line['$start_with?']("\\include::"))) ? $b : line['$start_with?']("include::"))) ? (match = Opal.const_get_relative($nesting, 'IncludeDirectiveRx').$match(line)) : $a))) {
            if ($truthy(escaped)) {
              
              self.unescape_next_line = true;
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line['$[]']($range(1, -1, false));
            } else if ($truthy(self.$preprocess_include(match['$[]'](1), match['$[]'](2).$strip()))) {
              return nil
              } else {
              
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line;
            }
            } else {
            
            self.look_ahead = $rb_plus(self.look_ahead, 1);
            return line;
          }
        } else if ($truthy(self.skipping)) {
          
          self.$advance();
          return nil;
          } else {
          
          self.look_ahead = $rb_plus(self.look_ahead, 1);
          return line;
        };
      }, TMP_PreprocessorReader_process_line_37.$$arity = 1);
      
      Opal.defn(self, '$peek_line', TMP_PreprocessorReader_peek_line_38 = function $$peek_line(direct) {
        var self = this, $iter = TMP_PreprocessorReader_peek_line_38.$$p, $yield = $iter || nil, line = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if (direct == null) {
          direct = false;
        }
        if ($iter) TMP_PreprocessorReader_peek_line_38.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if ($truthy((line = $send(self, Opal.find_super_dispatcher(self, 'peek_line', TMP_PreprocessorReader_peek_line_38, false), $zuper, $iter)))) {
          return line
        } else if ($truthy(self.include_stack['$empty?']())) {
          return nil
          } else {
          
          self.$pop_include();
          return self.$peek_line(direct);
        }
      }, TMP_PreprocessorReader_peek_line_38.$$arity = -1);
      
      Opal.defn(self, '$preprocess_conditional_inclusion', TMP_PreprocessorReader_preprocess_conditional_inclusion_43 = function $$preprocess_conditional_inclusion(directive, target, delimiter, text) {
        var $a, $b, $c, TMP_39, TMP_40, TMP_41, TMP_42, self = this, stack_size = nil, pair = nil, skip = nil, $case = nil, expr_match = nil, lhs = nil, rhs = nil, op = nil, conditional_line = nil;

        
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = directive['$==']("ifdef")) ? $c : directive['$==']("ifndef"))) ? target['$empty?']() : $b)) ? $a : (($b = directive['$==']("endif")) ? text : directive['$==']("endif"))))) {
          return false};
        target = target.$downcase();
        if (directive['$==']("endif")) {
          
          stack_size = self.conditional_stack.$size();
          if ($truthy($rb_gt(stack_size, 0))) {
            
            pair = self.conditional_stack['$[]'](-1);
            if ($truthy(($truthy($a = target['$empty?']()) ? $a : target['$=='](pair['$[]']("target"))))) {
              
              self.conditional_stack.$pop();
              self.skipping = (function() {if ($truthy(self.conditional_stack['$empty?']())) {
                return false
                } else {
                return self.conditional_stack['$[]'](-1)['$[]']("skipping")
              }; return nil; })();
              } else {
              self.$warn("" + "asciidoctor: ERROR: " + (self.$line_info()) + ": mismatched macro: endif::" + (target) + "[], expected endif::" + (pair['$[]']("target")) + "[]")
            };
            } else {
            self.$warn("" + "asciidoctor: ERROR: " + (self.$line_info()) + ": unmatched macro: endif::" + (target) + "[]")
          };
          return true;};
        skip = false;
        if ($truthy(self.skipping)) {
          } else {
          $case = directive;
          if ("ifdef"['$===']($case)) {$case = delimiter;
          if (nil['$===']($case)) {skip = self.document.$attributes()['$has_key?'](target)['$!']()}
          else if (","['$===']($case)) {skip = $send(target.$split(","), 'none?', [], (TMP_39 = function(name){var self = TMP_39.$$s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.$attributes()['$has_key?'](name)}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39))}
          else if ("+"['$===']($case)) {skip = $send(target.$split("+"), 'any?', [], (TMP_40 = function(name){var self = TMP_40.$$s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.$attributes()['$has_key?'](name)['$!']()}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40))}}
          else if ("ifndef"['$===']($case)) {$case = delimiter;
          if (nil['$===']($case)) {skip = self.document.$attributes()['$has_key?'](target)}
          else if (","['$===']($case)) {skip = $send(target.$split(","), 'none?', [], (TMP_41 = function(name){var self = TMP_41.$$s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.$attributes()['$has_key?'](name)['$!']()}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41))}
          else if ("+"['$===']($case)) {skip = $send(target.$split("+"), 'any?', [], (TMP_42 = function(name){var self = TMP_42.$$s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.$attributes()['$has_key?'](name)}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42))}}
          else if ("ifeval"['$===']($case)) {
          if ($truthy(($truthy($a = target['$empty?']()['$!']()) ? $a : (expr_match = Opal.const_get_relative($nesting, 'EvalExpressionRx').$match(text.$strip()))['$!']()))) {
            return false};
          lhs = self.$resolve_expr_val(expr_match['$[]'](1));
          rhs = self.$resolve_expr_val(expr_match['$[]'](3));
          if ((op = expr_match['$[]'](2))['$==']("!=")) {
            skip = lhs.$send("==", rhs)
            } else {
            skip = lhs.$send(op.$to_sym(), rhs)['$!']()
          };}
        };
        if ($truthy(($truthy($a = directive['$==']("ifeval")) ? $a : text['$!']()))) {
          
          if ($truthy(skip)) {
            self.skipping = true};
          self.conditional_stack['$<<']($hash2(["target", "skip", "skipping"], {"target": target, "skip": skip, "skipping": self.skipping}));
        } else if ($truthy(($truthy($a = self.skipping) ? $a : skip))) {
          } else {
          
          conditional_line = self.$peek_line(true);
          self.$replace_next_line(text.$rstrip());
          self.$unshift(conditional_line);
          return true;
        };
        return true;
      }, TMP_PreprocessorReader_preprocess_conditional_inclusion_43.$$arity = 4);
      
      Opal.defn(self, '$preprocess_include', TMP_PreprocessorReader_preprocess_include_52 = function $$preprocess_include(raw_target, raw_attributes) {
        var $a, TMP_44, $b, TMP_45, TMP_46, TMP_48, TMP_51, self = this, target = nil, extension = nil, abs_maxdepth = nil, target_type = nil, include_file = nil, path = nil, inc_lines = nil, tags = nil, attributes = nil, selected = nil, inc_line_offset = nil, inc_lineno = nil, active_tag = nil, tags_found = nil, missing_tags = nil, include_content = nil;

        if ($truthy((target = self.document.$sub_attributes(raw_target, $hash2(["attribute_missing"], {"attribute_missing": "drop-line"})))['$empty?']())) {
          
          self.$advance();
          if (self.document.$attributes().$fetch("attribute-missing", Opal.const_get_relative($nesting, 'Compliance').$attribute_missing())['$==']("skip")) {
            self.$unshift("" + "Unresolved directive in " + (self.path) + " - include::" + (raw_target) + "[" + (raw_attributes) + "]")};
          return true;
        } else if ($truthy(($truthy($a = self['$include_processors?']()) ? (extension = $send(self.include_processor_extensions, 'find', [], (TMP_44 = function(candidate){var self = TMP_44.$$s || this;
if (candidate == null) candidate = nil;
        return candidate.$instance()['$handles?'](target)}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44))) : $a))) {
          
          self.$advance();
          extension.$process_method()['$[]'](self.document, self, target, Opal.const_get_relative($nesting, 'AttributeList').$new(raw_attributes).$parse());
          return true;
        } else if ($truthy($rb_ge(self.document.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE')))) {
          
          self.$replace_next_line("" + "link:" + (target) + "[]");
          return true;
        } else if ($truthy($rb_gt((abs_maxdepth = self.maxdepth['$[]']("abs")), 0))) {
          
          if ($truthy($rb_ge(self.include_stack.$size(), abs_maxdepth))) {
            
            self.$warn("" + "asciidoctor: ERROR: " + (self.$line_info()) + ": maximum include depth of " + (self.maxdepth['$[]']("rel")) + " exceeded");
            return false;};
          if ($truthy(Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL'))) {
            
            target_type = "file";
            include_file = (path = (function() {if ($truthy(self.include_stack['$empty?']())) {
              if (Opal.const_get_qualified('::', 'Dir').$pwd()['$=='](self.document.$base_dir())) {
                return target
                } else {
                
                return Opal.const_get_qualified('::', 'File').$join(self.dir, target);
              }
              } else {
              return Opal.const_get_qualified('::', 'File').$join(self.dir, target)
            }; return nil; })());
          } else if ($truthy(Opal.const_get_relative($nesting, 'Helpers')['$uriish?'](target))) {
            
            if ($truthy(self.document.$attributes()['$has_key?']("allow-uri-read"))) {
              } else {
              
              self.$replace_next_line("" + "link:" + (target) + "[]");
              return true;
            };
            target_type = "uri";
            include_file = (path = target);
            if ($truthy(self.document.$attributes()['$has_key?']("cache-uri"))) {
              if ($truthy((($b = Opal.const_get_qualified('::', 'OpenURI', 'skip_raise')) && ($a = Opal.const_get_qualified($b, 'Cache', 'skip_raise')) ? 'constant' : nil))) {
                } else {
                Opal.const_get_relative($nesting, 'Helpers').$require_library("open-uri/cached", "open-uri-cached")
              }
            } else if ($truthy(Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL')['$!']())) {
              Opal.const_get_qualified('::', 'OpenURI')};
            } else {
            
            target_type = "file";
            include_file = self.document.$normalize_system_path(target, self.dir, nil, $hash2(["target_name"], {"target_name": "include file"}));
            if ($truthy(Opal.const_get_qualified('::', 'File')['$file?'](include_file))) {
              } else {
              
              self.$warn("" + "asciidoctor: WARNING: " + (self.$line_info()) + ": include file not found: " + (include_file));
              self.$replace_next_line("" + "Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
              return true;
            };
            path = Opal.const_get_relative($nesting, 'PathResolver').$new().$relative_path(include_file, self.document.$base_dir());
          };
          inc_lines = nil;
          tags = nil;
          attributes = $hash2([], {});
          if ($truthy(raw_attributes['$empty?']()['$!']())) {
            
            attributes = Opal.const_get_relative($nesting, 'AttributeList').$new(raw_attributes).$parse();
            if ($truthy(attributes['$has_key?']("lines"))) {
              
              inc_lines = [];
              $send(attributes['$[]']("lines").$split(Opal.const_get_relative($nesting, 'DataDelimiterRx')), 'each', [], (TMP_45 = function(linedef){var self = TMP_45.$$s || this, $c, $d, from = nil, to = nil;
if (linedef == null) linedef = nil;
              if ($truthy(linedef['$include?'](".."))) {
                  
                  $d = $send(linedef.$split("..", 2), 'map', [], "to_i".$to_proc()), $c = Opal.to_ary($d), (from = ($c[0] == null ? nil : $c[0])), (to = ($c[1] == null ? nil : $c[1])), $d;
                  if (to['$=='](-1)) {
                    
                    inc_lines['$<<'](from);
                    return inc_lines['$<<']($rb_divide(1, 0));
                    } else {
                    return inc_lines.$concat(Opal.const_get_qualified('::', 'Range').$new(from, to).$to_a())
                  };
                  } else {
                  return inc_lines['$<<'](linedef.$to_i())
                }}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45));
              inc_lines = inc_lines.$sort().$uniq();
            } else if ($truthy(attributes['$has_key?']("tag"))) {
              tags = [attributes['$[]']("tag")].$to_set()
            } else if ($truthy(attributes['$has_key?']("tags"))) {
              tags = attributes['$[]']("tags").$split(Opal.const_get_relative($nesting, 'DataDelimiterRx')).$to_set()};};
          if ($truthy(inc_lines)) {
            if ($truthy(inc_lines['$empty?']())) {
              } else {
              
              selected = [];
              inc_line_offset = 0;
              inc_lineno = 0;
              
              try {
                (function(){var $brk = Opal.new_brk(); try {return $send(self, 'open', [include_file, "r"], (TMP_46 = function(f){var self = TMP_46.$$s || this, TMP_47;
if (f == null) f = nil;
                return (function(){var $brk = Opal.new_brk(); try {return $send(f, 'each_line', [], (TMP_47 = function(l){var self = TMP_47.$$s || this, $c, take = nil;
if (l == null) l = nil;
                  
                    inc_lineno = $rb_plus(inc_lineno, 1);
                    take = inc_lines['$[]'](0);
                    if ($truthy(($truthy($c = Opal.const_get_qualified('::', 'Float')['$==='](take)) ? take['$infinite?']() : $c))) {
                      
                      selected.$push(l);
                      if (inc_line_offset['$=='](0)) {
                        return (inc_line_offset = inc_lineno)
                        } else {
                        return nil
                      };
                      } else {
                      
                      if (f.$lineno()['$=='](take)) {
                        
                        selected.$push(l);
                        if (inc_line_offset['$=='](0)) {
                          inc_line_offset = inc_lineno};
                        inc_lines.$shift();};
                      if ($truthy(inc_lines['$empty?']())) {
                        
                        Opal.brk(nil, $brk)
                        } else {
                        return nil
                      };
                    };}, TMP_47.$$s = self, TMP_47.$$brk = $brk, TMP_47.$$arity = 1, TMP_47))
                  } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()}, TMP_46.$$s = self, TMP_46.$$brk = $brk, TMP_46.$$arity = 1, TMP_46))
                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                  try {
                    
                    self.$warn("" + "asciidoctor: WARNING: " + (self.$line_info()) + ": include " + (target_type) + " not readable: " + (include_file));
                    self.$replace_next_line("" + "Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
                    return true;
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };;
              self.$advance();
              self.$push_include(selected, include_file, path, inc_line_offset, attributes);
            }
          } else if ($truthy(tags)) {
            if ($truthy(tags['$empty?']())) {
              } else {
              
              selected = [];
              inc_line_offset = 0;
              inc_lineno = 0;
              active_tag = nil;
              tags_found = Opal.const_get_qualified('::', 'Set').$new();
              
              try {
                (function(){var $brk = Opal.new_brk(); try {return $send(self, 'open', [include_file, "r"], (TMP_48 = function(f){var self = TMP_48.$$s || this, TMP_49;
if (f == null) f = nil;
                return (function(){var $brk = Opal.new_brk(); try {return $send(f, 'each_line', [], (TMP_49 = function(l){var self = TMP_49.$$s || this, $c, TMP_50, tl = nil;
if (l == null) l = nil;
                  
                    inc_lineno = $rb_plus(inc_lineno, 1);
                    if ($truthy(Opal.const_get_relative($nesting, 'FORCE_ENCODING'))) {
                      l.$force_encoding(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_8'))};
                    l = l.$rstrip();
                    tl = l.$chomp("-->").$rstrip();
                    if ($truthy(active_tag)) {
                      if ($truthy(tl['$end_with?']("" + "end::" + (active_tag) + "[]"))) {
                        return (active_tag = nil)
                        } else {
                        
                        if ($truthy(($truthy($c = tl['$end_with?']("[]")) ? Opal.const_get_relative($nesting, 'TagDirectiveRx')['$=~'](tl) : $c))) {
                          } else {
                          selected.$push(l)
                        };
                        if (inc_line_offset['$=='](0)) {
                          return (inc_line_offset = inc_lineno)
                          } else {
                          return nil
                        };
                      }
                    } else if ($truthy(($truthy($c = tl['$end_with?']("[]")) ? Opal.const_get_relative($nesting, 'TagDirectiveRx')['$=~'](tl) : $c))) {
                      return (function(){var $brk = Opal.new_brk(); try {return $send(tags, 'each', [], (TMP_50 = function(tag){var self = TMP_50.$$s || this;
if (tag == null) tag = nil;
                      if ($truthy(tl['$end_with?']("" + "tag::" + (tag) + "[]"))) {
                          
                          active_tag = tag;
                          tags_found['$<<'](tag);
                          
                          Opal.brk(nil, $brk);
                          } else {
                          return nil
                        }}, TMP_50.$$s = self, TMP_50.$$brk = $brk, TMP_50.$$arity = 1, TMP_50))
                      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
                      } else {
                      return nil
                    };}, TMP_49.$$s = self, TMP_49.$$brk = $brk, TMP_49.$$arity = 1, TMP_49))
                  } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()}, TMP_48.$$s = self, TMP_48.$$brk = $brk, TMP_48.$$arity = 1, TMP_48))
                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                  try {
                    
                    self.$warn("" + "asciidoctor: WARNING: " + (self.$line_info()) + ": include " + (target_type) + " not readable: " + (include_file));
                    self.$replace_next_line("" + "Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
                    return true;
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };;
              if ($truthy((missing_tags = $rb_minus(tags.$to_a(), tags_found.$to_a()))['$empty?']())) {
                } else {
                self.$warn("" + "asciidoctor: WARNING: " + (self.$line_info()) + ": tag" + ((function() {if ($truthy($rb_gt(missing_tags.$size(), 1))) {
                  return "s"
                  } else {
                  return nil
                }; return nil; })()) + " '" + ($rb_times(missing_tags, ",")) + "' not found in include " + (target_type) + ": " + (include_file))
              };
              self.$advance();
              self.$push_include(selected, include_file, path, inc_line_offset, attributes);
            }
            } else {
            
            try {
              
              include_content = $send(self, 'open', [include_file, "r"], (TMP_51 = function(f){var self = TMP_51.$$s || this;
if (f == null) f = nil;
              return f.$read()}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51));
              self.$advance();
              self.$push_include(include_content, include_file, path, 1, attributes);
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  
                  self.$warn("" + "asciidoctor: WARNING: " + (self.$line_info()) + ": include " + (target_type) + " not readable: " + (include_file));
                  self.$replace_next_line("" + "Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
                  return true;
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
          };
          return true;
          } else {
          return false
        }
      }, TMP_PreprocessorReader_preprocess_include_52.$$arity = 2);
      
      Opal.defn(self, '$push_include', TMP_PreprocessorReader_push_include_53 = function $$push_include(data, file, path, lineno, attributes) {
        var self = this, depth = nil, old_leveloffset = nil;

        if (file == null) {
          file = nil;
        }
        if (path == null) {
          path = nil;
        }
        if (lineno == null) {
          lineno = 1;
        }
        if (attributes == null) {
          attributes = $hash2([], {});
        }
        
        self.include_stack['$<<']([self.lines, self.file, self.dir, self.path, self.lineno, self.maxdepth, self.process_lines]);
        if ($truthy(file)) {
          
          self.file = file;
          self.dir = Opal.const_get_relative($nesting, 'File').$dirname(file);
          self.process_lines = Opal.const_get_relative($nesting, 'ASCIIDOC_EXTENSIONS')['$[]'](Opal.const_get_qualified('::', 'File').$extname(file));
          } else {
          
          self.file = nil;
          self.dir = ".";
          self.process_lines = true;
        };
        self.path = (function() {if ($truthy(path)) {
          
          self.includes['$<<'](Opal.const_get_relative($nesting, 'Helpers').$rootname(path));
          return path;
          } else {
          return "<stdin>"
        }; return nil; })();
        self.lineno = lineno;
        if ($truthy(attributes['$has_key?']("depth"))) {
          
          depth = attributes['$[]']("depth").$to_i();
          if ($truthy($rb_le(depth, 0))) {
            depth = 1};
          self.maxdepth = $hash2(["abs", "rel"], {"abs": $rb_plus($rb_minus(self.include_stack.$size(), 1), depth), "rel": depth});};
        if ($truthy((self.lines = self.$prepare_lines(data, $hash2(["normalize", "condense", "indent"], {"normalize": true, "condense": false, "indent": attributes['$[]']("indent")})))['$empty?']())) {
          self.$pop_include()
          } else {
          
          if ($truthy(attributes['$has_key?']("leveloffset"))) {
            
            self.lines.$unshift("");
            self.lines.$unshift("" + ":leveloffset: " + (attributes['$[]']("leveloffset")));
            self.lines.$push("");
            if ($truthy((old_leveloffset = self.document.$attr("leveloffset")))) {
              self.lines.$push("" + ":leveloffset: " + (old_leveloffset))
              } else {
              self.lines.$push(":leveloffset!:")
            };
            self.lineno = $rb_minus(self.lineno, 2);};
          self.eof = false;
          self.look_ahead = 0;
        };
        return self;
      }, TMP_PreprocessorReader_push_include_53.$$arity = -2);
      
      Opal.defn(self, '$pop_include', TMP_PreprocessorReader_pop_include_54 = function $$pop_include() {
        var $a, $b, self = this;

        
        if ($truthy($rb_gt(self.include_stack.$size(), 0))) {
          
          $b = self.include_stack.$pop(), $a = Opal.to_ary($b), (self.lines = ($a[0] == null ? nil : $a[0])), (self.file = ($a[1] == null ? nil : $a[1])), (self.dir = ($a[2] == null ? nil : $a[2])), (self.path = ($a[3] == null ? nil : $a[3])), (self.lineno = ($a[4] == null ? nil : $a[4])), (self.maxdepth = ($a[5] == null ? nil : $a[5])), (self.process_lines = ($a[6] == null ? nil : $a[6])), $b;
          self.eof = self.lines['$empty?']();
          self.look_ahead = 0;};
        return nil;
      }, TMP_PreprocessorReader_pop_include_54.$$arity = 0);
      
      Opal.defn(self, '$include_depth', TMP_PreprocessorReader_include_depth_55 = function $$include_depth() {
        var self = this;

        return self.include_stack.$size()
      }, TMP_PreprocessorReader_include_depth_55.$$arity = 0);
      
      Opal.defn(self, '$exceeded_max_depth?', TMP_PreprocessorReader_exceeded_max_depth$q_56 = function() {
        var $a, self = this, abs_maxdepth = nil;

        if ($truthy(($truthy($a = $rb_gt((abs_maxdepth = self.maxdepth['$[]']("abs")), 0)) ? $rb_ge(self.include_stack.$size(), abs_maxdepth) : $a))) {
          return self.maxdepth['$[]']("rel")
          } else {
          return false
        }
      }, TMP_PreprocessorReader_exceeded_max_depth$q_56.$$arity = 0);
      
      Opal.defn(self, '$shift', TMP_PreprocessorReader_shift_57 = function $$shift() {
        var self = this, $iter = TMP_PreprocessorReader_shift_57.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_PreprocessorReader_shift_57.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if ($truthy(self.unescape_next_line)) {
          
          self.unescape_next_line = false;
          return $send(self, Opal.find_super_dispatcher(self, 'shift', TMP_PreprocessorReader_shift_57, false), $zuper, $iter)['$[]']($range(1, -1, false));
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'shift', TMP_PreprocessorReader_shift_57, false), $zuper, $iter)
        }
      }, TMP_PreprocessorReader_shift_57.$$arity = 0);
      
      Opal.defn(self, '$skip_front_matter!', TMP_PreprocessorReader_skip_front_matter$B_58 = function(data, increment_linenos) {
        var $a, $b, self = this, front_matter = nil, original_data = nil;

        if (increment_linenos == null) {
          increment_linenos = true;
        }
        
        front_matter = nil;
        if (data['$[]'](0)['$==']("---")) {
          
          original_data = data.$dup();
          front_matter = [];
          data.$shift();
          if ($truthy(increment_linenos)) {
            self.lineno = $rb_plus(self.lineno, 1)};
          while ($truthy(($truthy($b = data['$empty?']()['$!']()) ? data['$[]'](0)['$!=']("---") : $b))) {
            
            front_matter.$push(data.$shift());
            if ($truthy(increment_linenos)) {
              self.lineno = $rb_plus(self.lineno, 1)};
          };
          if ($truthy(data['$empty?']())) {
            
            $send(data, 'unshift', Opal.to_a(original_data));
            if ($truthy(increment_linenos)) {
              self.lineno = 0};
            front_matter = nil;
            } else {
            
            data.$shift();
            if ($truthy(increment_linenos)) {
              self.lineno = $rb_plus(self.lineno, 1)};
          };};
        return front_matter;
      }, TMP_PreprocessorReader_skip_front_matter$B_58.$$arity = -2);
      
      Opal.defn(self, '$resolve_expr_val', TMP_PreprocessorReader_resolve_expr_val_59 = function $$resolve_expr_val(val) {
        var $a, $b, self = this, quoted = nil;

        
        if ($truthy(($truthy($a = ($truthy($b = val['$start_with?']("\"")) ? val['$end_with?']("\"") : $b)) ? $a : ($truthy($b = val['$start_with?']("'")) ? val['$end_with?']("'") : $b)))) {
          
          quoted = true;
          val = val['$[]']($range(1, -1, true));
          } else {
          quoted = false
        };
        if ($truthy(val['$include?']("{"))) {
          val = self.document.$sub_attributes(val, $hash2(["attribute_missing"], {"attribute_missing": "drop"}))};
        if ($truthy(quoted)) {
          return val
        } else if ($truthy(val['$empty?']())) {
          return nil
        } else if (val['$==']("true")) {
          return true
        } else if (val['$==']("false")) {
          return false
        } else if ($truthy(val.$rstrip()['$empty?']())) {
          return " "
        } else if ($truthy(val['$include?']("."))) {
          return val.$to_f()
          } else {
          return val.$to_i()
        };
      }, TMP_PreprocessorReader_resolve_expr_val_59.$$arity = 1);
      
      Opal.defn(self, '$include_processors?', TMP_PreprocessorReader_include_processors$q_60 = function() {
        var $a, self = this;

        if ($truthy(self.include_processor_extensions['$nil?']())) {
          if ($truthy(($truthy($a = self.document['$extensions?']()) ? self.document.$extensions()['$include_processors?']() : $a))) {
            return (self.include_processor_extensions = self.document.$extensions().$include_processors())['$!']()['$!']()
            } else {
            return (self.include_processor_extensions = false)
          }
          } else {
          return self.include_processor_extensions['$!='](false)
        }
      }, TMP_PreprocessorReader_include_processors$q_60.$$arity = 0);
      return (Opal.defn(self, '$to_s', TMP_PreprocessorReader_to_s_62 = function $$to_s() {
        var TMP_61, self = this;

        return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {path: " + (self.path.$inspect()) + ", line #: " + (self.lineno) + ", include depth: " + (self.include_stack.$size()) + ", include stack: [" + ($send(self.include_stack, 'map', [], (TMP_61 = function(inc){var self = TMP_61.$$s || this;
if (inc == null) inc = nil;
        return inc.$to_s()}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61)).$join(", ")) + "]}>"
      }, TMP_PreprocessorReader_to_s_62.$$arity = 0), nil) && 'to_s';
    })($nesting[0], Opal.const_get_relative($nesting, 'Reader'), $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/section"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$attr_accessor', '$+', '$level', '$>', '$==', '$context', '$special', '$has_key?', '$attributes', '$[]', '$chomp', '$tr_s', '$gsub', '$downcase', '$title', '$empty?', '$!', '$start_with?', '$unique_id_start_index', '$references', '$sectnum', '$assign_index', '$!=', '$class', '$object_id', '$inspect', '$size']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Section(){};
      var self = $Section = $klass($base, $super, 'Section', $Section);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Section_initialize_1, TMP_Section_generate_id_2, TMP_Section_sectnum_3, TMP_Section_$lt$lt_4, TMP_Section_to_s_5;

      def.level = def.document = def.parent = def.number = def.title = def.numbered = def.blocks = nil;
      
      self.$attr_accessor("index");
      self.$attr_accessor("number");
      self.$attr_accessor("sectname");
      self.$attr_accessor("special");
      self.$attr_accessor("numbered");
      
      Opal.defn(self, '$initialize', TMP_Section_initialize_1 = function $$initialize(parent, level, numbered, opts) {
        var $a, $b, self = this, $iter = TMP_Section_initialize_1.$$p, $yield = $iter || nil;

        if (parent == null) {
          parent = nil;
        }
        if (level == null) {
          level = nil;
        }
        if (numbered == null) {
          numbered = true;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_Section_initialize_1.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Section_initialize_1, false), [parent, "section", opts], null);
        if ($truthy(level)) {
          self.level = level
          } else {
          self.level = (function() {if ($truthy(parent)) {
            
            return $rb_plus(parent.$level(), 1);
            } else {
            return 1
          }; return nil; })()
        };
        self.numbered = ($truthy($a = numbered) ? $rb_gt(self.level, 0) : $a);
        self.special = ($truthy($a = ($truthy($b = parent) ? parent.$context()['$==']("section") : $b)) ? parent.$special() : $a);
        self.index = 0;
        return (self.number = 1);
      }, TMP_Section_initialize_1.$$arity = -1);
      Opal.alias(self, "name", "title");
      
      Opal.defn(self, '$generate_id', TMP_Section_generate_id_2 = function $$generate_id() {
        var $a, $b, self = this, sep = nil, pre = nil, base_id = nil, gen_id = nil, cnt = nil;

        if ($truthy(self.document.$attributes()['$has_key?']("sectids"))) {
          
          sep = ($truthy($a = self.document.$attributes()['$[]']("idseparator")) ? $a : "_");
          pre = ($truthy($a = self.document.$attributes()['$[]']("idprefix")) ? $a : "_");
          base_id = "" + (pre) + (self.$title().$downcase().$gsub(Opal.const_get_relative($nesting, 'InvalidSectionIdCharsRx'), sep).$tr_s(sep, sep).$chomp(sep));
          if ($truthy(($truthy($a = ($truthy($b = pre['$empty?']()) ? sep['$empty?']()['$!']() : $b)) ? base_id['$start_with?'](sep) : $a))) {
            
            base_id = base_id['$[]']($range(1, -1, false));
            while ($truthy(base_id['$start_with?'](sep))) {
              base_id = base_id['$[]']($range(1, -1, false))
            };};
          gen_id = base_id;
          cnt = Opal.const_get_relative($nesting, 'Compliance').$unique_id_start_index();
          while ($truthy(self.document.$references()['$[]']("ids")['$has_key?'](gen_id))) {
            
            gen_id = "" + (base_id) + (sep) + (cnt);
            cnt = $rb_plus(cnt, 1);
          };
          return gen_id;
          } else {
          return nil
        }
      }, TMP_Section_generate_id_2.$$arity = 0);
      
      Opal.defn(self, '$sectnum', TMP_Section_sectnum_3 = function $$sectnum(delimiter, append) {
        var $a, $b, $c, self = this;

        if (delimiter == null) {
          delimiter = ".";
        }
        if (append == null) {
          append = nil;
        }
        
        append = ($truthy($a = append) ? $a : (function() {if (append['$=='](false)) {
          return ""
          } else {
          return delimiter
        }; return nil; })());
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = self.level) ? $rb_gt(self.level, 1) : $c)) ? self.parent : $b)) ? self.parent.$context()['$==']("section") : $a))) {
          return "" + (self.parent.$sectnum(delimiter)) + (self.number) + (append)
          } else {
          return "" + (self.number) + (append)
        };
      }, TMP_Section_sectnum_3.$$arity = -1);
      
      Opal.defn(self, '$<<', TMP_Section_$lt$lt_4 = function(block) {
        var self = this, $iter = TMP_Section_$lt$lt_4.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Section_$lt$lt_4.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        if (block.$context()['$==']("section")) {
          self.$assign_index(block)};
        return $send(self, Opal.find_super_dispatcher(self, '<<', TMP_Section_$lt$lt_4, false), $zuper, $iter);
      }, TMP_Section_$lt$lt_4.$$arity = 1);
      return (Opal.defn(self, '$to_s', TMP_Section_to_s_5 = function $$to_s() {
        var self = this, $iter = TMP_Section_to_s_5.$$p, $yield = $iter || nil, qualified_title = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Section_to_s_5.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if ($truthy(self.title['$!='](nil))) {
          
          qualified_title = (function() {if ($truthy(self.numbered)) {
            return "" + (self.$sectnum()) + " " + (self.title)
            } else {
            return self.title
          }; return nil; })();
          return "" + "#<" + (self.$class()) + "@" + (self.$object_id()) + " {level: " + (self.level) + ", title: " + (qualified_title.$inspect()) + ", blocks: " + (self.blocks.$size()) + "}>";
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'to_s', TMP_Section_to_s_5, false), $zuper, $iter)
        }
      }, TMP_Section_to_s_5.$$arity = 0), nil) && 'to_s';
    })($nesting[0], Opal.const_get_relative($nesting, 'AbstractBlock'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/stylesheets"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$join', '$new', '$chomp', '$read', '$primary_stylesheet_data', '$open', '$primary_stylesheet_name', '$write', '$coderay_stylesheet_data', '$coderay_stylesheet_name', '$load_pygments', '$[]', '$sub', '$css', '$[]=', '$-', '$pygments_stylesheet_data', '$pygments_stylesheet_name', '$!', '$nil?', '$require_library']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Stylesheets(){};
      var self = $Stylesheets = $klass($base, $super, 'Stylesheets', $Stylesheets);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Stylesheets_instance_1, TMP_Stylesheets_primary_stylesheet_name_2, TMP_Stylesheets_primary_stylesheet_data_3, TMP_Stylesheets_embed_primary_stylesheet_4, TMP_Stylesheets_write_primary_stylesheet_6, TMP_Stylesheets_coderay_stylesheet_name_7, TMP_Stylesheets_coderay_stylesheet_data_8, TMP_Stylesheets_embed_coderay_stylesheet_9, TMP_Stylesheets_write_coderay_stylesheet_11, TMP_Stylesheets_pygments_stylesheet_name_12, TMP_Stylesheets_pygments_stylesheet_data_13, TMP_Stylesheets_embed_pygments_stylesheet_14, TMP_Stylesheets_write_pygments_stylesheet_16, TMP_Stylesheets_load_pygments_17;

      def.primary_stylesheet_data = def.coderay_stylesheet_data = def.pygments_stylesheet_data = nil;
      
      Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', "asciidoctor.css");
      Opal.const_set($nesting[0], 'DEFAULT_PYGMENTS_STYLE', "default");
      Opal.const_set($nesting[0], 'STYLESHEETS_DATA_PATH', Opal.const_get_qualified('::', 'File').$join(Opal.const_get_relative($nesting, 'DATA_PATH'), "stylesheets"));
      self.__instance__ = self.$new();
      Opal.defs(self, '$instance', TMP_Stylesheets_instance_1 = function $$instance() {
        var self = this;
        if (self.__instance__ == null) self.__instance__ = nil;

        return self.__instance__
      }, TMP_Stylesheets_instance_1.$$arity = 0);
      
      Opal.defn(self, '$primary_stylesheet_name', TMP_Stylesheets_primary_stylesheet_name_2 = function $$primary_stylesheet_name() {
        var self = this;

        return Opal.const_get_relative($nesting, 'DEFAULT_STYLESHEET_NAME')
      }, TMP_Stylesheets_primary_stylesheet_name_2.$$arity = 0);
      
      Opal.defn(self, '$primary_stylesheet_data', TMP_Stylesheets_primary_stylesheet_data_3 = function $$primary_stylesheet_data() {
        var $a, self = this;

        return (self.primary_stylesheet_data = ($truthy($a = self.primary_stylesheet_data) ? $a : Opal.const_get_qualified('::', 'IO').$read(Opal.const_get_qualified('::', 'File').$join(Opal.const_get_relative($nesting, 'STYLESHEETS_DATA_PATH'), "asciidoctor-default.css")).$chomp()))
      }, TMP_Stylesheets_primary_stylesheet_data_3.$$arity = 0);
      
      Opal.defn(self, '$embed_primary_stylesheet', TMP_Stylesheets_embed_primary_stylesheet_4 = function $$embed_primary_stylesheet() {
        var self = this;

        return "" + "<style>\n" + (self.$primary_stylesheet_data()) + "\n" + "</style>"
      }, TMP_Stylesheets_embed_primary_stylesheet_4.$$arity = 0);
      
      Opal.defn(self, '$write_primary_stylesheet', TMP_Stylesheets_write_primary_stylesheet_6 = function $$write_primary_stylesheet(target_dir) {
        var TMP_5, self = this;

        return $send(Opal.const_get_qualified('::', 'File'), 'open', [Opal.const_get_qualified('::', 'File').$join(target_dir, self.$primary_stylesheet_name()), "w"], (TMP_5 = function(f){var self = TMP_5.$$s || this;
if (f == null) f = nil;
        return f.$write(self.$primary_stylesheet_data())}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5))
      }, TMP_Stylesheets_write_primary_stylesheet_6.$$arity = 1);
      
      Opal.defn(self, '$coderay_stylesheet_name', TMP_Stylesheets_coderay_stylesheet_name_7 = function $$coderay_stylesheet_name() {
        var self = this;

        return "coderay-asciidoctor.css"
      }, TMP_Stylesheets_coderay_stylesheet_name_7.$$arity = 0);
      
      Opal.defn(self, '$coderay_stylesheet_data', TMP_Stylesheets_coderay_stylesheet_data_8 = function $$coderay_stylesheet_data() {
        var $a, self = this;

        return (self.coderay_stylesheet_data = ($truthy($a = self.coderay_stylesheet_data) ? $a : Opal.const_get_qualified('::', 'IO').$read(Opal.const_get_qualified('::', 'File').$join(Opal.const_get_relative($nesting, 'STYLESHEETS_DATA_PATH'), "coderay-asciidoctor.css")).$chomp()))
      }, TMP_Stylesheets_coderay_stylesheet_data_8.$$arity = 0);
      
      Opal.defn(self, '$embed_coderay_stylesheet', TMP_Stylesheets_embed_coderay_stylesheet_9 = function $$embed_coderay_stylesheet() {
        var self = this;

        return "" + "<style>\n" + (self.$coderay_stylesheet_data()) + "\n" + "</style>"
      }, TMP_Stylesheets_embed_coderay_stylesheet_9.$$arity = 0);
      
      Opal.defn(self, '$write_coderay_stylesheet', TMP_Stylesheets_write_coderay_stylesheet_11 = function $$write_coderay_stylesheet(target_dir) {
        var TMP_10, self = this;

        return $send(Opal.const_get_qualified('::', 'File'), 'open', [Opal.const_get_qualified('::', 'File').$join(target_dir, self.$coderay_stylesheet_name()), "w"], (TMP_10 = function(f){var self = TMP_10.$$s || this;
if (f == null) f = nil;
        return f.$write(self.$coderay_stylesheet_data())}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10))
      }, TMP_Stylesheets_write_coderay_stylesheet_11.$$arity = 1);
      
      Opal.defn(self, '$pygments_stylesheet_name', TMP_Stylesheets_pygments_stylesheet_name_12 = function $$pygments_stylesheet_name(style) {
        var $a, self = this;

        if (style == null) {
          style = nil;
        }
        return "" + "pygments-" + (($truthy($a = style) ? $a : Opal.const_get_relative($nesting, 'DEFAULT_PYGMENTS_STYLE'))) + ".css"
      }, TMP_Stylesheets_pygments_stylesheet_name_12.$$arity = -1);
      
      Opal.defn(self, '$pygments_stylesheet_data', TMP_Stylesheets_pygments_stylesheet_data_13 = function $$pygments_stylesheet_data(style) {
        var $a, $b, self = this, $writer = nil;

        if (style == null) {
          style = nil;
        }
        if ($truthy(self.$load_pygments())) {
          return ($truthy($a = (self.pygments_stylesheet_data = ($truthy($b = self.pygments_stylesheet_data) ? $b : $hash2([], {})))['$[]'](($truthy($b = style) ? $b : Opal.const_get_relative($nesting, 'DEFAULT_PYGMENTS_STYLE')))) ? $a : (($writer = [($truthy($b = style) ? $b : Opal.const_get_relative($nesting, 'DEFAULT_PYGMENTS_STYLE')), Opal.const_get_qualified('::', 'Pygments').$css(".listingblock .pygments", $hash2(["classprefix", "style"], {"classprefix": "tok-", "style": ($truthy($b = style) ? $b : Opal.const_get_relative($nesting, 'DEFAULT_PYGMENTS_STYLE'))})).$sub(".listingblock .pygments  {", ".listingblock .pygments, .listingblock .pygments code {")]), $send((self.pygments_stylesheet_data = ($truthy($b = self.pygments_stylesheet_data) ? $b : $hash2([], {}))), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
          } else {
          return "/* Pygments styles disabled. Pygments is not available. */"
        }
      }, TMP_Stylesheets_pygments_stylesheet_data_13.$$arity = -1);
      
      Opal.defn(self, '$embed_pygments_stylesheet', TMP_Stylesheets_embed_pygments_stylesheet_14 = function $$embed_pygments_stylesheet(style) {
        var self = this;

        if (style == null) {
          style = nil;
        }
        return "" + "<style>\n" + (self.$pygments_stylesheet_data(style)) + "\n" + "</style>"
      }, TMP_Stylesheets_embed_pygments_stylesheet_14.$$arity = -1);
      
      Opal.defn(self, '$write_pygments_stylesheet', TMP_Stylesheets_write_pygments_stylesheet_16 = function $$write_pygments_stylesheet(target_dir, style) {
        var TMP_15, self = this;

        if (style == null) {
          style = nil;
        }
        return $send(Opal.const_get_qualified('::', 'File'), 'open', [Opal.const_get_qualified('::', 'File').$join(target_dir, self.$pygments_stylesheet_name(style)), "w"], (TMP_15 = function(f){var self = TMP_15.$$s || this;
if (f == null) f = nil;
        return f.$write(self.$pygments_stylesheet_data(style))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
      }, TMP_Stylesheets_write_pygments_stylesheet_16.$$arity = -2);
      return (Opal.defn(self, '$load_pygments', TMP_Stylesheets_load_pygments_17 = function $$load_pygments() {
        var $a, self = this;

        if ($truthy((($a = Opal.const_get_qualified('::', 'Pygments', 'skip_raise')) ? 'constant' : nil))) {
          return true
          } else {
          return Opal.const_get_relative($nesting, 'Helpers').$require_library("pygments", "pygments.rb", "ignore")['$nil?']()['$!']()
        }
      }, TMP_Stylesheets_load_pygments_17.$$arity = 0), nil) && 'load_pygments';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/table"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$attr_accessor', '$new', '$key?', '$[]', '$>', '$to_i', '$<', '$==', '$[]=', '$-', '$attributes', '$round', '$*', '$/', '$to_f', '$empty?', '$body', '$each', '$+', '$<<', '$size', '$assign_column_widths', '$**', '$assign_width', '$shift', '$style=', '$head=', '$pop', '$foot=', '$update_attributes', '$parent', '$attr_reader', '$delete', '$!', '$header_row?', '$table', '$split', '$include?', '$readlines', '$!=', '$unshift', '$nil?', '$strip', '$apply_normal_subs', '$convert', '$map', '$text', '$to_s', '$cursor', '$raise', '$nested?', '$document', '$escape', '$columns', '$start_with?', '$match', '$chop', '$pre_match', '$post_match', '$end_with?', '$lstrip', '$push_cellspec', '$cell_open?', '$close_cell', '$advance', '$take_cellspec', '$warn', '$line_info', '$tr_s', '$upto', '$times', '$rowspan', '$activate_rowspan', '$colspan', '$end_of_row?', '$close_row', '$rows', '$effective_column_visits']);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Table(){};
      var self = $Table = $klass($base, $super, 'Table', $Table);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Table_initialize_2, TMP_Table_header_row$q_3, TMP_Table_create_columns_5, TMP_Table_assign_column_widths_8, TMP_Table_partition_header_footer_10;

      def.attributes = def.document = def.has_header_option = def.rows = def.columns = nil;
      
      (function($base, $super, $parent_nesting) {
        function $Rows(){};
        var self = $Rows = $klass($base, $super, 'Rows', $Rows);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Rows_initialize_1;

        
        self.$attr_accessor("head", "foot", "body");
        
        Opal.defn(self, '$initialize', TMP_Rows_initialize_1 = function $$initialize(head, foot, body) {
          var self = this;

          if (head == null) {
            head = [];
          }
          if (foot == null) {
            foot = [];
          }
          if (body == null) {
            body = [];
          }
          
          self.head = head;
          self.foot = foot;
          return (self.body = body);
        }, TMP_Rows_initialize_1.$$arity = -1);
        return Opal.alias(self, "[]", "send");
      })($nesting[0], null, $nesting);
      Opal.const_set($nesting[0], 'DEFAULT_DATA_FORMAT', "psv");
      Opal.const_set($nesting[0], 'DATA_FORMATS', ["psv", "dsv", "csv"]);
      Opal.const_set($nesting[0], 'DEFAULT_DELIMITERS', $hash2(["psv", "dsv", "csv"], {"psv": "|", "dsv": ":", "csv": ","}));
      Opal.const_set($nesting[0], 'TEXT_STYLES', $hash2(["d", "s", "e", "m", "h", "l", "v", "a"], {"d": "none", "s": "strong", "e": "emphasis", "m": "monospaced", "h": "header", "l": "literal", "v": "verse", "a": "asciidoc"}));
      Opal.const_set($nesting[0], 'ALIGNMENTS', $hash2(["h", "v"], {"h": $hash2(["<", ">", "^"], {"<": "left", ">": "right", "^": "center"}), "v": $hash2(["<", ">", "^"], {"<": "top", ">": "bottom", "^": "middle"})}));
      self.$attr_accessor("columns");
      self.$attr_accessor("rows");
      self.$attr_accessor("has_header_option");
      
      Opal.defn(self, '$initialize', TMP_Table_initialize_2 = function $$initialize(parent, attributes) {
        var $a, $b, self = this, $iter = TMP_Table_initialize_2.$$p, $yield = $iter || nil, pcwidth = nil, pcwidth_intval = nil, $writer = nil;

        if ($iter) TMP_Table_initialize_2.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Table_initialize_2, false), [parent, "table"], null);
        self.rows = Opal.const_get_relative($nesting, 'Rows').$new();
        self.columns = [];
        self.has_header_option = attributes['$key?']("header-option");
        if ($truthy((pcwidth = attributes['$[]']("width")))) {
          if ($truthy(($truthy($a = $rb_gt((pcwidth_intval = pcwidth.$to_i()), 100)) ? $a : $rb_lt(pcwidth_intval, 1)))) {
            if ($truthy((($a = pcwidth_intval['$=='](0)) ? ($truthy($b = pcwidth['$==']("0")) ? $b : pcwidth['$==']("0%")) : pcwidth_intval['$=='](0)))) {
              } else {
              pcwidth_intval = 100
            }}
          } else {
          pcwidth_intval = 100
        };
        
        $writer = ["tablepcwidth", pcwidth_intval];
        $send(self.attributes, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(self.document.$attributes()['$key?']("pagewidth"))) {
          ($truthy($a = self.attributes['$[]']("tableabswidth")) ? $a : (($writer = ["tableabswidth", $rb_times($rb_divide(self.attributes['$[]']("tablepcwidth").$to_f(), 100), self.document.$attributes()['$[]']("pagewidth")).$round()]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))};
        if ($truthy(attributes['$key?']("rotate-option"))) {
          
          $writer = ["orientation", "landscape"];
          $send(attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          return nil
        };
      }, TMP_Table_initialize_2.$$arity = 2);
      
      Opal.defn(self, '$header_row?', TMP_Table_header_row$q_3 = function() {
        var $a, self = this;

        return ($truthy($a = self.has_header_option) ? self.rows.$body()['$empty?']() : $a)
      }, TMP_Table_header_row$q_3.$$arity = 0);
      
      Opal.defn(self, '$create_columns', TMP_Table_create_columns_5 = function $$create_columns(colspecs) {
        var TMP_4, self = this, cols = nil, width_base = nil, $writer = nil;

        
        cols = [];
        width_base = 0;
        $send(colspecs, 'each', [], (TMP_4 = function(colspec){var self = TMP_4.$$s || this;
if (colspec == null) colspec = nil;
        
          width_base = $rb_plus(width_base, colspec['$[]']("width"));
          return cols['$<<'](Opal.const_get_relative($nesting, 'Column').$new(self, cols.$size(), colspec));}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        if ($truthy((self.columns = cols)['$empty?']())) {
          } else {
          
          
          $writer = ["colcount", cols.$size()];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.$assign_column_widths((function() {if (width_base['$=='](0)) {
            return nil
            } else {
            return width_base
          }; return nil; })());
        };
        return nil;
      }, TMP_Table_create_columns_5.$$arity = 1);
      
      Opal.defn(self, '$assign_column_widths', TMP_Table_assign_column_widths_8 = function $$assign_column_widths(width_base) {
        var TMP_6, TMP_7, self = this, pf = nil, total_width = nil, col_pcwidth = nil;

        if (width_base == null) {
          width_base = nil;
        }
        
        pf = (10)['$**'](4);
        total_width = (col_pcwidth = 0);
        if ($truthy(width_base)) {
          $send(self.columns, 'each', [], (TMP_6 = function(col){var self = TMP_6.$$s || this;
if (col == null) col = nil;
          return (total_width = $rb_plus(total_width, (col_pcwidth = col.$assign_width(nil, width_base, pf))))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
          } else {
          
          col_pcwidth = $rb_divide($rb_divide($rb_times(100, pf), self.columns.$size()).$to_i(), pf);
          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {
            col_pcwidth = col_pcwidth.$to_i()};
          $send(self.columns, 'each', [], (TMP_7 = function(col){var self = TMP_7.$$s || this;
if (col == null) col = nil;
          return (total_width = $rb_plus(total_width, col.$assign_width(col_pcwidth)))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        };
        if (total_width['$=='](100)) {
          } else {
          self.columns['$[]'](-1).$assign_width($rb_divide($rb_times($rb_plus($rb_minus(100, total_width), col_pcwidth), pf).$round(), pf))
        };
        return nil;
      }, TMP_Table_assign_column_widths_8.$$arity = -1);
      return (Opal.defn(self, '$partition_header_footer', TMP_Table_partition_header_footer_10 = function $$partition_header_footer(attributes) {
        var $a, TMP_9, self = this, $writer = nil, num_body_rows = nil, head = nil;

        
        
        $writer = ["rowcount", self.rows.$body().$size()];
        $send(self.attributes, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        num_body_rows = self.rows.$body().$size();
        if ($truthy(($truthy($a = $rb_gt(num_body_rows, 0)) ? self.has_header_option : $a))) {
          
          head = self.rows.$body().$shift();
          num_body_rows = $rb_minus(num_body_rows, 1);
          $send(head, 'each', [], (TMP_9 = function(c){var self = TMP_9.$$s || this;
if (c == null) c = nil;
          
            $writer = [nil];
            $send(c, 'style=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
          
          $writer = [[head]];
          $send(self.rows, 'head=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;};
        if ($truthy(($truthy($a = $rb_gt(num_body_rows, 0)) ? attributes['$key?']("footer-option") : $a))) {
          
          $writer = [[self.rows.$body().$pop()]];
          $send(self.rows, 'foot=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return nil;
      }, TMP_Table_partition_header_footer_10.$$arity = 1), nil) && 'partition_header_footer';
    })($nesting[0], Opal.const_get_relative($nesting, 'AbstractBlock'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $Column(){};
      var self = $Column = $klass($base, $super, 'Column', $Column);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Column_initialize_11, TMP_Column_assign_width_12;

      def.attributes = nil;
      
      self.$attr_accessor("style");
      
      Opal.defn(self, '$initialize', TMP_Column_initialize_11 = function $$initialize(table, index, attributes) {
        var $a, self = this, $iter = TMP_Column_initialize_11.$$p, $yield = $iter || nil, $writer = nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        if ($iter) TMP_Column_initialize_11.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Column_initialize_11, false), [table, "column"], null);
        self.style = attributes['$[]']("style");
        
        $writer = ["colnumber", $rb_plus(index, 1)];
        $send(attributes, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        ($truthy($a = attributes['$[]']("width")) ? $a : (($writer = ["width", 1]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        ($truthy($a = attributes['$[]']("halign")) ? $a : (($writer = ["halign", "left"]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        ($truthy($a = attributes['$[]']("valign")) ? $a : (($writer = ["valign", "top"]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        return self.$update_attributes(attributes);
      }, TMP_Column_initialize_11.$$arity = -3);
      Opal.alias(self, "table", "parent");
      return (Opal.defn(self, '$assign_width', TMP_Column_assign_width_12 = function $$assign_width(col_pcwidth, width_base, pf) {
        var self = this, $writer = nil;

        if (width_base == null) {
          width_base = nil;
        }
        if (pf == null) {
          pf = 10000;
        }
        
        if ($truthy(width_base)) {
          
          col_pcwidth = $rb_divide($rb_times($rb_times($rb_divide(self.attributes['$[]']("width").$to_f(), width_base), 100), pf).$to_i(), pf);
          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {
            col_pcwidth = col_pcwidth.$to_i()};};
        
        $writer = ["colpcwidth", col_pcwidth];
        $send(self.attributes, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(self.$parent().$attributes()['$key?']("tableabswidth"))) {
          
          $writer = ["colabswidth", $rb_times($rb_divide(col_pcwidth, 100), self.$parent().$attributes()['$[]']("tableabswidth")).$round()];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return col_pcwidth;
      }, TMP_Column_assign_width_12.$$arity = -2), nil) && 'assign_width';
    })(Opal.const_get_relative($nesting, 'Table'), Opal.const_get_relative($nesting, 'AbstractNode'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $Cell(){};
      var self = $Cell = $klass($base, $super, 'Cell', $Cell);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Cell_initialize_13, TMP_Cell_text_14, TMP_Cell_content_16, TMP_Cell_to_s_17;

      def.style = def.document = def.text = def.inner_document = def.colspan = def.rowspan = def.attributes = nil;
      
      self.$attr_accessor("style");
      self.$attr_accessor("colspan");
      self.$attr_accessor("rowspan");
      Opal.alias(self, "column", "parent");
      self.$attr_reader("inner_document");
      
      Opal.defn(self, '$initialize', TMP_Cell_initialize_13 = function $$initialize(column, text, attributes, cursor) {
        var $a, self = this, $iter = TMP_Cell_initialize_13.$$p, $yield = $iter || nil, parent_doctitle = nil, inner_document_lines = nil, unprocessed_lines = nil, processed_lines = nil, $writer = nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        if (cursor == null) {
          cursor = nil;
        }
        if ($iter) TMP_Cell_initialize_13.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Cell_initialize_13, false), [column, "cell"], null);
        self.text = text;
        self.style = nil;
        self.colspan = nil;
        self.rowspan = nil;
        if ($truthy(column)) {
          
          self.style = column.$attributes()['$[]']("style");
          self.$update_attributes(column.$attributes());};
        if ($truthy(attributes)) {
          
          self.colspan = attributes.$delete("colspan");
          self.rowspan = attributes.$delete("rowspan");
          if ($truthy(attributes['$key?']("style"))) {
            self.style = attributes['$[]']("style")};
          self.$update_attributes(attributes);};
        if ($truthy((($a = self.style['$==']("asciidoc")) ? column.$table()['$header_row?']()['$!']() : self.style['$==']("asciidoc")))) {
          
          parent_doctitle = self.document.$attributes().$delete("doctitle");
          inner_document_lines = self.text.$split(Opal.const_get_relative($nesting, 'EOL'));
          if ($truthy(($truthy($a = inner_document_lines['$empty?']()) ? $a : inner_document_lines['$[]'](0)['$include?']("::")['$!']()))) {
            } else {
            
            unprocessed_lines = inner_document_lines['$[]'](0);
            processed_lines = Opal.const_get_relative($nesting, 'PreprocessorReader').$new(self.document, unprocessed_lines).$readlines();
            if ($truthy(processed_lines['$!='](unprocessed_lines))) {
              
              inner_document_lines.$shift();
              $send(inner_document_lines, 'unshift', Opal.to_a(processed_lines));};
          };
          self.inner_document = Opal.const_get_relative($nesting, 'Document').$new(inner_document_lines, $hash2(["header_footer", "parent", "cursor"], {"header_footer": false, "parent": self.document, "cursor": cursor}));
          if ($truthy(parent_doctitle['$nil?']())) {
            return nil
            } else {
            
            $writer = ["doctitle", parent_doctitle];
            $send(self.document.$attributes(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          };
          } else {
          return nil
        };
      }, TMP_Cell_initialize_13.$$arity = -3);
      
      Opal.defn(self, '$text', TMP_Cell_text_14 = function $$text() {
        var self = this;

        return self.$apply_normal_subs(self.text).$strip()
      }, TMP_Cell_text_14.$$arity = 0);
      
      Opal.defn(self, '$content', TMP_Cell_content_16 = function $$content() {
        var TMP_15, self = this;

        if (self.style['$==']("asciidoc")) {
          return self.inner_document.$convert()
          } else {
          return $send(self.$text().$split(Opal.const_get_relative($nesting, 'BlankLineRx')), 'map', [], (TMP_15 = function(p){var self = TMP_15.$$s || this, $a;
            if (self.style == null) self.style = nil;
if (p == null) p = nil;
          if ($truthy(($truthy($a = self.style['$!']()) ? $a : self.style['$==']("header")))) {
              return p
              } else {
              return Opal.const_get_relative($nesting, 'Inline').$new(self.$parent(), "quoted", p, $hash2(["type"], {"type": self.style})).$convert()
            }}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
        }
      }, TMP_Cell_content_16.$$arity = 0);
      return (Opal.defn(self, '$to_s', TMP_Cell_to_s_17 = function $$to_s() {
        var $a, self = this, $iter = TMP_Cell_to_s_17.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Cell_to_s_17.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return "" + ($send(self, Opal.find_super_dispatcher(self, 'to_s', TMP_Cell_to_s_17, false), $zuper, $iter).$to_s()) + " - [text: " + (self.text) + ", colspan: " + (($truthy($a = self.colspan) ? $a : 1)) + ", rowspan: " + (($truthy($a = self.rowspan) ? $a : 1)) + ", attributes: " + (self.attributes) + "]"
      }, TMP_Cell_to_s_17.$$arity = 0), nil) && 'to_s';
    })(Opal.const_get_relative($nesting, 'Table'), Opal.const_get_relative($nesting, 'AbstractNode'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ParserContext(){};
      var self = $ParserContext = $klass($base, $super, 'ParserContext', $ParserContext);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ParserContext_initialize_18, TMP_ParserContext_starts_with_delimiter$q_19, TMP_ParserContext_match_delimiter_20, TMP_ParserContext_skip_matched_delimiter_21, TMP_ParserContext_buffer_has_unclosed_quotes$q_22, TMP_ParserContext_buffer_quoted$q_23, TMP_ParserContext_take_cellspec_24, TMP_ParserContext_push_cellspec_25, TMP_ParserContext_keep_cell_open_26, TMP_ParserContext_mark_cell_closed_27, TMP_ParserContext_cell_open$q_28, TMP_ParserContext_cell_closed$q_29, TMP_ParserContext_close_open_cell_30, TMP_ParserContext_close_cell_33, TMP_ParserContext_close_row_34, TMP_ParserContext_activate_rowspan_36, TMP_ParserContext_end_of_row$q_37, TMP_ParserContext_effective_column_visits_38, TMP_ParserContext_advance_39;

      def.format = def.delimiter = def.delimiter_re = def.buffer = def.cellspecs = def.cell_open = def.last_cursor = def.table = def.current_row = def.colcount = def.column_visits = def.active_rowspans = def.linenum = nil;
      
      self.$attr_accessor("table");
      self.$attr_accessor("format");
      self.$attr_reader("colcount");
      self.$attr_accessor("buffer");
      self.$attr_reader("delimiter");
      self.$attr_reader("delimiter_re");
      
      Opal.defn(self, '$initialize', TMP_ParserContext_initialize_18 = function $$initialize(reader, table, attributes) {
        var $a, $b, self = this;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        
        self.reader = reader;
        self.table = table;
        self.last_cursor = reader.$cursor();
        if ($truthy((self.format = attributes['$[]']("format")))) {
          if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'DATA_FORMATS')['$include?'](self.format))) {
            } else {
            self.$raise("" + "Illegal table format: " + (self.format))
          }
          } else {
          self.format = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'DEFAULT_DATA_FORMAT')
        };
        self.delimiter = (function() {if ($truthy(($truthy($a = (($b = self.format['$==']("psv")) ? attributes['$key?']("separator")['$!']() : self.format['$==']("psv"))) ? table.$document()['$nested?']() : $a))) {
          return "!"
          } else {
          return ($truthy($a = attributes['$[]']("separator")) ? $a : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'DEFAULT_DELIMITERS')['$[]'](self.format))
        }; return nil; })();
        self.delimiter_re = new RegExp(Opal.const_get_relative($nesting, 'Regexp').$escape(self.delimiter));
        self.colcount = (function() {if ($truthy(table.$columns()['$empty?']())) {
          return -1
          } else {
          return table.$columns().$size()
        }; return nil; })();
        self.buffer = "";
        self.cellspecs = [];
        self.cell_open = false;
        self.active_rowspans = [0];
        self.column_visits = 0;
        self.current_row = [];
        return (self.linenum = -1);
      }, TMP_ParserContext_initialize_18.$$arity = -3);
      
      Opal.defn(self, '$starts_with_delimiter?', TMP_ParserContext_starts_with_delimiter$q_19 = function(line) {
        var self = this;

        return line['$start_with?'](self.delimiter)
      }, TMP_ParserContext_starts_with_delimiter$q_19.$$arity = 1);
      
      Opal.defn(self, '$match_delimiter', TMP_ParserContext_match_delimiter_20 = function $$match_delimiter(line) {
        var self = this;

        return self.delimiter_re.$match(line)
      }, TMP_ParserContext_match_delimiter_20.$$arity = 1);
      
      Opal.defn(self, '$skip_matched_delimiter', TMP_ParserContext_skip_matched_delimiter_21 = function $$skip_matched_delimiter(match, escaped) {
        var self = this;

        if (escaped == null) {
          escaped = false;
        }
        
        self.buffer = "" + (self.buffer) + ((function() {if ($truthy(escaped)) {
          return match.$pre_match().$chop()
          } else {
          return match.$pre_match()
        }; return nil; })()) + (self.delimiter);
        return match.$post_match();
      }, TMP_ParserContext_skip_matched_delimiter_21.$$arity = -2);
      
      Opal.defn(self, '$buffer_has_unclosed_quotes?', TMP_ParserContext_buffer_has_unclosed_quotes$q_22 = function(append) {
        var $a, $b, self = this, record = nil;

        if (append == null) {
          append = nil;
        }
        
        record = (("" + (self.buffer)) + (append)).$strip();
        return ($truthy($a = ($truthy($b = record['$start_with?']("\"")) ? record['$start_with?']("\"\"")['$!']() : $b)) ? record['$end_with?']("\"")['$!']() : $a);
      }, TMP_ParserContext_buffer_has_unclosed_quotes$q_22.$$arity = -1);
      
      Opal.defn(self, '$buffer_quoted?', TMP_ParserContext_buffer_quoted$q_23 = function() {
        var $a, self = this;

        
        self.buffer = self.buffer.$lstrip();
        return ($truthy($a = self.buffer['$start_with?']("\"")) ? self.buffer['$start_with?']("\"\"")['$!']() : $a);
      }, TMP_ParserContext_buffer_quoted$q_23.$$arity = 0);
      
      Opal.defn(self, '$take_cellspec', TMP_ParserContext_take_cellspec_24 = function $$take_cellspec() {
        var self = this;

        return self.cellspecs.$shift()
      }, TMP_ParserContext_take_cellspec_24.$$arity = 0);
      
      Opal.defn(self, '$push_cellspec', TMP_ParserContext_push_cellspec_25 = function $$push_cellspec(cellspec) {
        var $a, self = this;

        if (cellspec == null) {
          cellspec = $hash2([], {});
        }
        
        self.cellspecs['$<<'](($truthy($a = cellspec) ? $a : $hash2([], {})));
        return nil;
      }, TMP_ParserContext_push_cellspec_25.$$arity = -1);
      
      Opal.defn(self, '$keep_cell_open', TMP_ParserContext_keep_cell_open_26 = function $$keep_cell_open() {
        var self = this;

        
        self.cell_open = true;
        return nil;
      }, TMP_ParserContext_keep_cell_open_26.$$arity = 0);
      
      Opal.defn(self, '$mark_cell_closed', TMP_ParserContext_mark_cell_closed_27 = function $$mark_cell_closed() {
        var self = this;

        
        self.cell_open = false;
        return nil;
      }, TMP_ParserContext_mark_cell_closed_27.$$arity = 0);
      
      Opal.defn(self, '$cell_open?', TMP_ParserContext_cell_open$q_28 = function() {
        var self = this;

        return self.cell_open
      }, TMP_ParserContext_cell_open$q_28.$$arity = 0);
      
      Opal.defn(self, '$cell_closed?', TMP_ParserContext_cell_closed$q_29 = function() {
        var self = this;

        return self.cell_open['$!']()
      }, TMP_ParserContext_cell_closed$q_29.$$arity = 0);
      
      Opal.defn(self, '$close_open_cell', TMP_ParserContext_close_open_cell_30 = function $$close_open_cell(next_cellspec) {
        var self = this;

        if (next_cellspec == null) {
          next_cellspec = $hash2([], {});
        }
        
        self.$push_cellspec(next_cellspec);
        if ($truthy(self['$cell_open?']())) {
          self.$close_cell(true)};
        self.$advance();
        return nil;
      }, TMP_ParserContext_close_open_cell_30.$$arity = -1);
      
      Opal.defn(self, '$close_cell', TMP_ParserContext_close_cell_33 = function $$close_cell(eol) {try {

        var $a, TMP_31, self = this, cell_text = nil, cellspec = nil, repeat = nil;

        if (eol == null) {
          eol = false;
        }
        
        cell_text = self.buffer.$strip();
        self.buffer = "";
        if (self.format['$==']("psv")) {
          
          cellspec = self.$take_cellspec();
          if ($truthy(cellspec)) {
            repeat = ($truthy($a = cellspec.$delete("repeatcol")) ? $a : 1)
            } else {
            
            self.$warn("" + "asciidoctor: ERROR: " + (self.last_cursor.$line_info()) + ": table missing leading separator, recovering automatically");
            cellspec = $hash2([], {});
            repeat = 1;
          };
          } else {
          
          cellspec = nil;
          repeat = 1;
          if (self.format['$==']("csv")) {
            if ($truthy(($truthy($a = cell_text['$empty?']()['$!']()) ? cell_text['$include?']("\"") : $a))) {
              
              if ($truthy(($truthy($a = cell_text['$start_with?']("\"")) ? cell_text['$end_with?']("\"") : $a))) {
                cell_text = cell_text['$[]']($range(1, -1, true)).$strip()};
              cell_text = cell_text.$tr_s("\"", "\"");}};
        };
        $send((1), 'upto', [repeat], (TMP_31 = function(i){var self = TMP_31.$$s || this, $b, $c, TMP_32, $d, column = nil, extra_cols = nil, offset = nil, cell = nil;
          if (self.colcount == null) self.colcount = nil;
          if (self.table == null) self.table = nil;
          if (self.current_row == null) self.current_row = nil;
          if (self.last_cursor == null) self.last_cursor = nil;
          if (self.reader == null) self.reader = nil;
          if (self.column_visits == null) self.column_visits = nil;
          if (self.linenum == null) self.linenum = nil;
if (i == null) i = nil;
        
          if (self.colcount['$=='](-1)) {
            
            self.table.$columns()['$<<']((column = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'Column').$new(self.table, $rb_minus($rb_plus(self.table.$columns().$size(), i), 1))));
            if ($truthy(($truthy($b = ($truthy($c = cellspec) ? cellspec['$key?']("colspan") : $c)) ? $rb_gt((extra_cols = $rb_minus(cellspec['$[]']("colspan").$to_i(), 1)), 0) : $b))) {
              
              offset = self.table.$columns().$size();
              $send(extra_cols, 'times', [], (TMP_32 = function(j){var self = TMP_32.$$s || this;
                if (self.table == null) self.table = nil;
if (j == null) j = nil;
              return self.table.$columns()['$<<'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'Column').$new(self.table, $rb_plus(offset, j)))}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32));};
          } else if ($truthy((column = self.table.$columns()['$[]'](self.current_row.$size())))) {
            } else {
            
            self.$warn("" + "asciidoctor: ERROR: " + (self.last_cursor.$line_info()) + ": dropping cell because it exceeds specified number of columns");
            Opal.ret(nil);
          };
          cell = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Table'), 'Cell').$new(column, cell_text, cellspec, self.last_cursor);
          self.last_cursor = self.reader.$cursor();
          if ($truthy(($truthy($b = cell.$rowspan()['$!']()) ? $b : cell.$rowspan()['$=='](1)))) {
            } else {
            self.$activate_rowspan(cell.$rowspan(), ($truthy($b = cell.$colspan()) ? $b : 1))
          };
          self.column_visits = $rb_plus(self.column_visits, ($truthy($b = cell.$colspan()) ? $b : 1));
          self.current_row['$<<'](cell);
          if ($truthy(($truthy($b = self['$end_of_row?']()) ? ($truthy($c = ($truthy($d = self.colcount['$!='](-1)) ? $d : $rb_gt(self.linenum, 0))) ? $c : ($truthy($d = eol) ? i['$=='](repeat) : $d)) : $b))) {
            return self.$close_row()
            } else {
            return nil
          };}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
        self.cell_open = false;
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_ParserContext_close_cell_33.$$arity = -1);
      
      Opal.defn(self, '$close_row', TMP_ParserContext_close_row_34 = function $$close_row() {
        var $a, self = this, $writer = nil;

        
        self.table.$rows().$body()['$<<'](self.current_row);
        if (self.colcount['$=='](-1)) {
          self.colcount = self.column_visits};
        self.column_visits = 0;
        self.current_row = [];
        self.active_rowspans.$shift();
        ($truthy($a = self.active_rowspans['$[]'](0)) ? $a : (($writer = [0, 0]), $send(self.active_rowspans, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
        return nil;
      }, TMP_ParserContext_close_row_34.$$arity = 0);
      
      Opal.defn(self, '$activate_rowspan', TMP_ParserContext_activate_rowspan_36 = function $$activate_rowspan(rowspan, colspan) {
        var TMP_35, self = this;

        
        $send((1).$upto($rb_minus(rowspan, 1)), 'each', [], (TMP_35 = function(i){var self = TMP_35.$$s || this, $a, $writer = nil;
          if (self.active_rowspans == null) self.active_rowspans = nil;
if (i == null) i = nil;
        
          $writer = [i, $rb_plus(($truthy($a = self.active_rowspans['$[]'](i)) ? $a : 0), colspan)];
          $send(self.active_rowspans, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35));
        return nil;
      }, TMP_ParserContext_activate_rowspan_36.$$arity = 2);
      
      Opal.defn(self, '$end_of_row?', TMP_ParserContext_end_of_row$q_37 = function() {
        var $a, self = this;

        return ($truthy($a = self.colcount['$=='](-1)) ? $a : self.$effective_column_visits()['$=='](self.colcount))
      }, TMP_ParserContext_end_of_row$q_37.$$arity = 0);
      
      Opal.defn(self, '$effective_column_visits', TMP_ParserContext_effective_column_visits_38 = function $$effective_column_visits() {
        var self = this;

        return $rb_plus(self.column_visits, self.active_rowspans['$[]'](0))
      }, TMP_ParserContext_effective_column_visits_38.$$arity = 0);
      return (Opal.defn(self, '$advance', TMP_ParserContext_advance_39 = function $$advance() {
        var self = this;

        return (self.linenum = $rb_plus(self.linenum, 1))
      }, TMP_ParserContext_advance_39.$$arity = 0), nil) && 'advance';
    })(Opal.const_get_relative($nesting, 'Table'), null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $gvars = Opal.gvars, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $range = Opal.range, $hash = Opal.hash;
  if ($gvars[":"] == null) $gvars[":"] = nil;

  Opal.add_stubs(['$==', '$>=', '$require', '$unshift', '$dirname', '$new', '$attr', '$instance_variable_set', '$send', '$<<', '$define', '$expand_path', '$join', '$home', '$[]', '$pwd', '$!', '$!=', '$default_external', '$to_a', '$bytes', '$to_set', '$map', '$keys', '$*', '$dup', '$[]=', '$-', '$insert', '$start', '$===', '$inject', '$split', '$gsub', '$respond_to?', '$each', '$raise', '$ancestors', '$class', '$path', '$utc', '$at', '$to_i', '$mtime', '$readlines', '$basename', '$strftime', '$rewind', '$entries', '$lines', '$record', '$parse', '$exception', '$message', '$set_backtrace', '$backtrace', '$stack_trace', '$stack_trace=', '$load', '$delete', '$key?', '$attributes', '$outfilesuffix', '$has_key?', '$safe', '$normalize_system_path', '$directory?', '$mkdir_p', '$convert', '$write', '$<', '$attr?', '$uriish?', '$include?', '$write_primary_stylesheet', '$instance', '$empty?', '$nil?', '$read_asset', '$open', '$write_coderay_stylesheet', '$write_pygments_stylesheet']);
  
  if ($truthy((($a = Opal.const_get_relative($nesting, 'RUBY_ENGINE', 'skip_raise')) ? 'constant' : nil))) {
    } else {
    Opal.const_set($nesting[0], 'RUBY_ENGINE', "unknown")
  };
  Opal.const_set($nesting[0], 'RUBY_ENGINE_OPAL', Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal"));
  Opal.const_set($nesting[0], 'RUBY_ENGINE_JRUBY', Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("jruby"));
  Opal.const_set($nesting[0], 'RUBY_MIN_VERSION_1_9', $rb_ge(Opal.const_get_relative($nesting, 'RUBY_VERSION'), "1.9"));
  Opal.const_set($nesting[0], 'RUBY_MIN_VERSION_2', $rb_ge(Opal.const_get_relative($nesting, 'RUBY_VERSION'), "2"));
  self.$require("set");
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    self.$require("asciidoctor/opal_ext")
    } else {
    nil
  };
  $gvars[":"].$unshift(Opal.const_get_relative($nesting, 'File').$dirname("asciidoctor"));
  (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a, TMP_Asciidoctor_2, quote_subs = nil, compat_quote_subs = nil, $writer = nil;

    
    Opal.const_set($nesting[0], 'RUBY_ENGINE', Opal.const_get_qualified('::', 'RUBY_ENGINE'));
    (function($base, $parent_nesting) {
      var $SafeMode, self = $SafeMode = $module($base, 'SafeMode');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      Opal.const_set($nesting[0], 'UNSAFE', 0);
      Opal.const_set($nesting[0], 'SAFE', 1);
      Opal.const_set($nesting[0], 'SERVER', 10);
      Opal.const_set($nesting[0], 'SECURE', 20);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var $Compliance, self = $Compliance = $module($base, 'Compliance');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Compliance_define_1;

      
      self.keys = Opal.const_get_qualified('::', 'Set').$new();
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return self.$attr("keys")
      })(Opal.get_singleton_class(self), $nesting);
      Opal.defs(self, '$define', TMP_Compliance_define_1 = function $$define(key, value) {
        var self = this;
        if (self.keys == null) self.keys = nil;

        
        self.$instance_variable_set("" + "@" + (key), value);
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          return self
        })(Opal.get_singleton_class(self), $nesting).$send("attr_accessor", key);
        self.keys['$<<'](key);
        return nil;
      }, TMP_Compliance_define_1.$$arity = 2);
      self.$define("block_terminates_paragraph", true);
      self.$define("strict_verbatim_paragraphs", true);
      self.$define("underline_style_section_titles", true);
      self.$define("unwrap_standalone_preamble", true);
      self.$define("attribute_missing", "skip");
      self.$define("attribute_undefined", "drop-line");
      self.$define("shorthand_property_syntax", true);
      self.$define("unique_id_start_index", 2);
      self.$define("markdown_syntax", true);
    })($nesting[0], $nesting);
    Opal.const_set($nesting[0], 'ROOT_PATH', Opal.const_get_qualified('::', 'File').$dirname(Opal.const_get_qualified('::', 'File').$dirname(Opal.const_get_qualified('::', 'File').$expand_path("asciidoctor"))));
    Opal.const_set($nesting[0], 'LIB_PATH', Opal.const_get_qualified('::', 'File').$join(Opal.const_get_relative($nesting, 'ROOT_PATH'), "lib"));
    Opal.const_set($nesting[0], 'DATA_PATH', Opal.const_get_qualified('::', 'File').$join(Opal.const_get_relative($nesting, 'ROOT_PATH'), "data"));
    
    try {
      Opal.const_set($nesting[0], 'USER_HOME', Opal.const_get_qualified('::', 'Dir').$home())
    } catch ($err) {
      if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
        try {
          Opal.const_set($nesting[0], 'USER_HOME', ($truthy($a = Opal.const_get_qualified('::', 'ENV')['$[]']("HOME")) ? $a : Opal.const_get_qualified('::', 'Dir').$pwd()))
        } finally { Opal.pop_exception() }
      } else { throw $err; }
    };;
    Opal.const_set($nesting[0], 'COERCE_ENCODING', ($truthy($a = Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL')['$!']()) ? Opal.const_get_qualified('::', 'RUBY_MIN_VERSION_1_9') : $a));
    Opal.const_set($nesting[0], 'FORCE_ENCODING', ($truthy($a = Opal.const_get_relative($nesting, 'COERCE_ENCODING')) ? Opal.const_get_qualified('::', 'Encoding').$default_external()['$!='](Opal.const_get_qualified(Opal.const_get_qualified('::', 'Encoding'), 'UTF_8')) : $a));
    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_8', "ï»¿".$bytes().$to_a());
    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_16LE', "ÿþ".$bytes().$to_a());
    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_16BE', "þÿ".$bytes().$to_a());
    Opal.const_set($nesting[0], 'FORCE_UNICODE_LINE_LENGTH', Opal.const_get_qualified('::', 'RUBY_MIN_VERSION_1_9')['$!']());
    Opal.const_set($nesting[0], 'SUPPORTS_GSUB_RESULT_HASH', ($truthy($a = Opal.const_get_qualified('::', 'RUBY_MIN_VERSION_1_9')) ? Opal.const_get_qualified('::', 'RUBY_ENGINE_OPAL')['$!']() : $a));
    Opal.const_set($nesting[0], 'EOL', "\n");
    Opal.const_set($nesting[0], 'NULL', "\u0000");
    Opal.const_set($nesting[0], 'TAB', "\t");
    Opal.const_set($nesting[0], 'DEFAULT_DOCTYPE', "article");
    Opal.const_set($nesting[0], 'DEFAULT_BACKEND', "html5");
    Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_KEYS', ["", "DEFAULT"].$to_set());
    Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', "asciidoctor.css");
    Opal.const_set($nesting[0], 'BACKEND_ALIASES', $hash2(["html", "docbook"], {"html": "html5", "docbook": "docbook5"}));
    Opal.const_set($nesting[0], 'DEFAULT_PAGE_WIDTHS', $hash2(["docbook"], {"docbook": 425}));
    Opal.const_set($nesting[0], 'DEFAULT_EXTENSIONS', $hash2(["html", "docbook", "pdf", "epub", "asciidoc"], {"html": ".html", "docbook": ".xml", "pdf": ".pdf", "epub": ".epub", "asciidoc": ".adoc"}));
    Opal.const_set($nesting[0], 'ASCIIDOC_EXTENSIONS', $hash2([".asciidoc", ".adoc", ".ad", ".asc", ".txt"], {".asciidoc": true, ".adoc": true, ".ad": true, ".asc": true, ".txt": true}));
    Opal.const_set($nesting[0], 'SECTION_LEVELS', $hash2(["=", "-", "~", "^", "+"], {"=": 0, "-": 1, "~": 2, "^": 3, "+": 4}));
    Opal.const_set($nesting[0], 'ADMONITION_STYLES', ["NOTE", "TIP", "IMPORTANT", "WARNING", "CAUTION"].$to_set());
    Opal.const_set($nesting[0], 'PARAGRAPH_STYLES', ["comment", "example", "literal", "listing", "normal", "pass", "quote", "sidebar", "source", "verse", "abstract", "partintro"].$to_set());
    Opal.const_set($nesting[0], 'VERBATIM_STYLES', ["literal", "listing", "source", "verse"].$to_set());
    Opal.const_set($nesting[0], 'DELIMITED_BLOCKS', $hash2(["--", "----", "....", "====", "****", "____", "\"\"", "++++", "|===", ",===", ":===", "!===", "////", "```"], {"--": ["open", ["comment", "example", "literal", "listing", "pass", "quote", "sidebar", "source", "verse", "admonition", "abstract", "partintro"].$to_set()], "----": ["listing", ["literal", "source"].$to_set()], "....": ["literal", ["listing", "source"].$to_set()], "====": ["example", ["admonition"].$to_set()], "****": ["sidebar", Opal.const_get_qualified('::', 'Set').$new()], "____": ["quote", ["verse"].$to_set()], "\"\"": ["quote", ["verse"].$to_set()], "++++": ["pass", ["stem", "latexmath", "asciimath"].$to_set()], "|===": ["table", Opal.const_get_qualified('::', 'Set').$new()], ",===": ["table", Opal.const_get_qualified('::', 'Set').$new()], ":===": ["table", Opal.const_get_qualified('::', 'Set').$new()], "!===": ["table", Opal.const_get_qualified('::', 'Set').$new()], "////": ["comment", Opal.const_get_qualified('::', 'Set').$new()], "```": ["fenced_code", Opal.const_get_qualified('::', 'Set').$new()]}));
    Opal.const_set($nesting[0], 'DELIMITED_BLOCK_LEADERS', $send(Opal.const_get_relative($nesting, 'DELIMITED_BLOCKS').$keys(), 'map', [], (TMP_Asciidoctor_2 = function(key){var self = TMP_Asciidoctor_2.$$s || this;
if (key == null) key = nil;
    return key['$[]']($range(0, 1, false))}, TMP_Asciidoctor_2.$$s = self, TMP_Asciidoctor_2.$$arity = 1, TMP_Asciidoctor_2)).$to_set());
    Opal.const_set($nesting[0], 'LAYOUT_BREAK_LINES', $hash2(["'", "-", "*", "_", "<"], {"'": "thematic_break", "-": "thematic_break", "*": "thematic_break", "_": "thematic_break", "<": "page_break"}));
    Opal.const_set($nesting[0], 'NESTABLE_LIST_CONTEXTS', ["ulist", "olist", "dlist"]);
    Opal.const_set($nesting[0], 'ORDERED_LIST_STYLES', ["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"]);
    Opal.const_set($nesting[0], 'ORDERED_LIST_KEYWORDS', $hash2(["loweralpha", "lowerroman", "upperalpha", "upperroman"], {"loweralpha": "a", "lowerroman": "i", "upperalpha": "A", "upperroman": "I"}));
    Opal.const_set($nesting[0], 'LIST_CONTINUATION', "+");
    Opal.const_set($nesting[0], 'LINE_BREAK', " +");
    Opal.const_set($nesting[0], 'LINE_CONTINUATION', " \\");
    Opal.const_set($nesting[0], 'LINE_CONTINUATION_LEGACY', " +");
    Opal.const_set($nesting[0], 'BLOCK_MATH_DELIMITERS', $hash2(["asciimath", "latexmath"], {"asciimath": ["\\$", "\\$"], "latexmath": ["\\[", "\\]"]}));
    Opal.const_set($nesting[0], 'INLINE_MATH_DELIMITERS', $hash2(["asciimath", "latexmath"], {"asciimath": ["\\$", "\\$"], "latexmath": ["\\(", "\\)"]}));
    Opal.const_set($nesting[0], 'FLEXIBLE_ATTRIBUTES', ["sectnums"]);
    if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      
      Opal.const_set($nesting[0], 'CC_ALPHA', "a-zA-Z");
      Opal.const_set($nesting[0], 'CG_ALPHA', "[a-zA-Z]");
      Opal.const_set($nesting[0], 'CC_ALNUM', "a-zA-Z0-9");
      Opal.const_set($nesting[0], 'CG_ALNUM', "[a-zA-Z0-9]");
      Opal.const_set($nesting[0], 'CG_BLANK', "[ \\t]");
      Opal.const_set($nesting[0], 'CC_EOL', "(?=\\n|$)");
      Opal.const_set($nesting[0], 'CG_GRAPH', "[\\x21-\\x7E]");
      Opal.const_set($nesting[0], 'CC_ALL', "[\\s\\S]");
      Opal.const_set($nesting[0], 'CC_WORD', "a-zA-Z0-9_");
      Opal.const_set($nesting[0], 'CG_WORD', "[a-zA-Z0-9_]");
      } else {
      nil
    };
    Opal.const_set($nesting[0], 'AuthorInfoLineRx', new RegExp("" + "^(" + (Opal.const_get_relative($nesting, 'CG_WORD')) + "[" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "\\-'.]*)(?: +(" + (Opal.const_get_relative($nesting, 'CG_WORD')) + "[" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "\\-'.]*))?(?: +(" + (Opal.const_get_relative($nesting, 'CG_WORD')) + "[" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "\\-'.]*))?(?: +<([^>]+)>)?$"));
    Opal.const_set($nesting[0], 'RevisionInfoLineRx', /^(?:\D*(.*?),)?(?:\s*(?!:)(.*?))(?:\s*(?!^):\s*(.*))?$/);
    Opal.const_set($nesting[0], 'ManpageTitleVolnumRx', /^(.*)\((.*)\)$/);
    Opal.const_set($nesting[0], 'ManpageNamePurposeRx', new RegExp("" + "^(.*?)" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+-" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*)$"));
    Opal.const_set($nesting[0], 'ConditionalDirectiveRx', /^\\?(ifdef|ifndef|ifeval|endif)::(\S*?(?:([,\+])\S+?)?)\[(.+)?\]$/);
    Opal.const_set($nesting[0], 'EvalExpressionRx', new RegExp("" + "^(\\S.*?)" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(==|!=|<=|>=|<|>)" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(\\S.*)$"));
    Opal.const_set($nesting[0], 'IncludeDirectiveRx', /^\\?include::([^\[]+)\[(.*?)\]$/);
    Opal.const_set($nesting[0], 'TagDirectiveRx', /\b(?:tag|end)::\S+\[\]$/);
    Opal.const_set($nesting[0], 'AttributeEntryRx', new RegExp("" + "^:(!?\\w.*?):(?:" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*))?$"));
    Opal.const_set($nesting[0], 'InvalidAttributeNameCharsRx', /[^\w\-]/);
    Opal.const_set($nesting[0], 'AttributeEntryPassMacroRx', /^pass:([a-z,]*)\[(.*)\]$/);
    Opal.const_set($nesting[0], 'AttributeReferenceRx', /(\\)?\{((set|counter2?):.+?|\w+(?:[\-]\w+)*)(\\)?\}/);
    Opal.const_set($nesting[0], 'BlockAnchorRx', new RegExp("" + "^\\[\\[(?:|([" + (Opal.const_get_relative($nesting, 'CC_ALPHA')) + ":_][" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ":.-]*)(?:," + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(\\S.*))?)\\]\\]$"));
    Opal.const_set($nesting[0], 'BlockAttributeListRx', new RegExp("" + "^\\[(|" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*[" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "\\{,.#\"'%].*)\\]$"));
    Opal.const_set($nesting[0], 'BlockAttributeLineRx', new RegExp("" + "^\\[(|" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*[" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "\\{,.#\"'%].*|\\[(?:|[" + (Opal.const_get_relative($nesting, 'CC_ALPHA')) + ":_][" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ":.-]*(?:," + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*\\S.*)?)\\])\\]$"));
    Opal.const_set($nesting[0], 'BlockTitleRx', /^\.([^\s.].*)$/);
    Opal.const_set($nesting[0], 'AdmonitionParagraphRx', new RegExp("" + "^(" + ($rb_times(Opal.const_get_relative($nesting, 'ADMONITION_STYLES').$to_a(), "|")) + "):" + (Opal.const_get_relative($nesting, 'CG_BLANK'))));
    Opal.const_set($nesting[0], 'LiteralParagraphRx', new RegExp("" + "^(" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+.*)$"));
    Opal.const_set($nesting[0], 'CommentBlockRx', /^\/{4,}$/);
    Opal.const_set($nesting[0], 'CommentLineRx', /^\/\/(?:[^\/]|$)/);
    Opal.const_set($nesting[0], 'AtxSectionRx', new RegExp("" + "^((?:=|#){1,6})" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(\\S.*?)(?:" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+\\1)?$"));
    Opal.const_set($nesting[0], 'SetextSectionTitleRx', new RegExp("" + "^((?=.*" + (Opal.const_get_relative($nesting, 'CG_WORD')) + "+.*)[^.].*?)$"));
    Opal.const_set($nesting[0], 'SetextSectionLineRx', /^(?:=|-|~|\^|\+)+$/);
    Opal.const_set($nesting[0], 'InlineSectionAnchorRx', new RegExp("" + "^(.*?)" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(\\\\)?\\[\\[([" + (Opal.const_get_relative($nesting, 'CC_ALPHA')) + ":_][" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ":.-]*)(?:," + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(\\S.*?))?\\]\\]$"));
    Opal.const_set($nesting[0], 'InvalidSectionIdCharsRx', new RegExp("" + "&(?:[a-zA-Z]{2,}|#\\d{2,6}|#x[a-fA-F0-9]{2,5});|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "]+?"));
    Opal.const_set($nesting[0], 'FloatingTitleStyleRx', /^(?:float|discrete)\b/);
    Opal.const_set($nesting[0], 'AnyListRx', new RegExp("" + "^(?:" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(?:-|([*.\\u2022])\\1{0,4}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "|" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*.*?(?::{2,4}|;;)(?:$|" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + ")|<?\\d+>" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + ")"));
    Opal.const_set($nesting[0], 'UnorderedListRx', new RegExp("" + "^" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(-|\\*{1,5}|\\u2022{1,5})" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*)$"));
    Opal.const_set($nesting[0], 'OrderedListRx', new RegExp("" + "^" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(\\.{1,5}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*)$"));
    Opal.const_set($nesting[0], 'OrderedListMarkerRxMap', $hash2(["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"], {"arabic": /\d+[.>]/, "loweralpha": /[a-z]\./, "lowerroman": /[ivx]+\)/, "upperalpha": /[A-Z]\./, "upperroman": /[IVX]+\)/}));
    Opal.const_set($nesting[0], 'DescriptionListRx', new RegExp("" + "^(?!//)" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(.*?)(:{2,4}|;;)(?:" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*))?$"));
    Opal.const_set($nesting[0], 'DescriptionListSiblingRx', $hash2(["::", ":::", "::::", ";;"], {"::": new RegExp("" + "^(?!//)" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*((?:.*[^:])?)(::)(?:" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*))?$"), ":::": new RegExp("" + "^(?!//)" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*((?:.*[^:])?)(:::)(?:" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*))?$"), "::::": new RegExp("" + "^(?!//)" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*((?:.*[^:])?)(::::)(?:" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*))?$"), ";;": new RegExp("" + "^(?!//)" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(.*)(;;)(?:" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*))?$")}));
    Opal.const_set($nesting[0], 'CalloutListRx', new RegExp("" + "^<?(\\d+)>" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(.*)$"));
    Opal.const_set($nesting[0], 'CalloutExtractRx', /(?:(?:\/\/|#|--|;;) ?)?(\\)?<!?(--|)(\d+)\2>(?=(?: ?\\?<!?\2\d+\2>)*$)/);
    Opal.const_set($nesting[0], 'CalloutExtractRxt', "(\\\\)?<()(\\d+)>(?=(?: ?\\\\?<\\d+>)*$)");
    Opal.const_set($nesting[0], 'CalloutQuickScanRx', new RegExp("" + "\\\\?<!?(--|)(\\d+)\\1>(?=(?: ?\\\\?<!?\\1\\d+\\1>)*" + (Opal.const_get_relative($nesting, 'CC_EOL')) + ")"));
    Opal.const_set($nesting[0], 'CalloutSourceRx', new RegExp("" + "(?:(?://|#|--|;;) ?)?(\\\\)?&lt;!?(--|)(\\d+)\\2&gt;(?=(?: ?\\\\?&lt;!?\\2\\d+\\2&gt;)*" + (Opal.const_get_relative($nesting, 'CC_EOL')) + ")"));
    Opal.const_set($nesting[0], 'CalloutSourceRxt', "" + "(\\\\)?&lt;()(\\d+)&gt;(?=(?: ?\\\\?&lt;\\d+&gt;)*" + (Opal.const_get_relative($nesting, 'CC_EOL')) + ")");
    Opal.const_set($nesting[0], 'ListRxMap', $hash2(["ulist", "olist", "dlist", "colist"], {"ulist": Opal.const_get_relative($nesting, 'UnorderedListRx'), "olist": Opal.const_get_relative($nesting, 'OrderedListRx'), "dlist": Opal.const_get_relative($nesting, 'DescriptionListRx'), "colist": Opal.const_get_relative($nesting, 'CalloutListRx')}));
    Opal.const_set($nesting[0], 'ColumnSpecRx', /^(?:(\d+)\*)?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?(\d+%?)?([a-z])?$/);
    Opal.const_set($nesting[0], 'CellSpecStartRx', new RegExp("" + "^" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$"));
    Opal.const_set($nesting[0], 'CellSpecEndRx', new RegExp("" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$"));
    Opal.const_set($nesting[0], 'GenericBlockMacroRx', new RegExp("" + "^(" + (Opal.const_get_relative($nesting, 'CG_WORD')) + "+)::(\\S*?)\\[((?:\\\\\\]|[^\\]])*?)\\]$"));
    Opal.const_set($nesting[0], 'MediaBlockMacroRx', /^(image|video|audio)::(\S+?)\[((?:\\\]|[^\]])*?)\]$/);
    Opal.const_set($nesting[0], 'TocBlockMacroRx', /^toc::\[(.*?)\]$/);
    Opal.const_set($nesting[0], 'InlineAnchorRx', new RegExp("" + "\\\\?(?:\\[\\[([" + (Opal.const_get_relative($nesting, 'CC_ALPHA')) + ":_][" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ":.-]*)(?:," + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(\\S.*?))?\\]\\]|anchor:(\\S+)\\[(.*?[^\\\\])?\\])"));
    Opal.const_set($nesting[0], 'InlineBiblioAnchorRx', new RegExp("" + "\\\\?\\[\\[\\[([" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ":][" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ":.-]*?)\\]\\]\\]"));
    Opal.const_set($nesting[0], 'EmailInlineMacroRx', new RegExp("" + "([\\\\>:/])?" + (Opal.const_get_relative($nesting, 'CG_WORD')) + "[" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ".%+-]*@" + (Opal.const_get_relative($nesting, 'CG_ALNUM')) + "[" + (Opal.const_get_relative($nesting, 'CC_ALNUM')) + ".-]*\\." + (Opal.const_get_relative($nesting, 'CG_ALPHA')) + "{2,4}\\b"));
    Opal.const_set($nesting[0], 'FootnoteInlineMacroRx', new RegExp("" + "\\\\?(footnote(?:ref)?):\\[(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?[^\\\\])\\]", 'm'));
    Opal.const_set($nesting[0], 'ImageInlineMacroRx', /\\?(?:image|icon):([^:\[][^\[]*)\[((?:\\\]|[^\]])*?)\]/);
    Opal.const_set($nesting[0], 'IndextermInlineMacroRx', new RegExp("" + "\\\\?(?:(indexterm2?):\\[(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?[^\\\\])\\]|\\(\\((" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "+?)\\)\\)(?!\\)))", 'm'));
    Opal.const_set($nesting[0], 'KbdBtnInlineMacroRx', /\\?(?:kbd|btn):\[((?:\\\]|[^\]])+?)\]/);
    Opal.const_set($nesting[0], 'KbdDelimiterRx', new RegExp("" + "(?:\\+|,)(?=" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*[^\\1])"));
    Opal.const_set($nesting[0], 'LinkInlineRx', /(^|link:|&lt;|[\s>\(\)\[\];])(\\?(?:https?|file|ftp|irc):\/\/[^\s\[\]<]*[^\s.,\[\]<])(?:\[((?:\\\]|[^\]])*?)\])?/);
    Opal.const_set($nesting[0], 'LinkInlineMacroRx', /\\?(?:link|mailto):([^\s\[]+)(?:\[((?:\\\]|[^\]])*?)\])/);
    Opal.const_set($nesting[0], 'StemInlineMacroRx', new RegExp("" + "\\\\?(stem|(?:latex|ascii)math):([a-z,]*)\\[(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?[^\\\\])\\]", 'm'));
    Opal.const_set($nesting[0], 'MenuInlineMacroRx', new RegExp("" + "\\\\?menu:(" + (Opal.const_get_relative($nesting, 'CG_WORD')) + "|" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ".*?\\S)\\[" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*(.+?)?\\]"));
    Opal.const_set($nesting[0], 'MenuInlineRx', new RegExp("" + "\\\\?\"(" + (Opal.const_get_relative($nesting, 'CG_WORD')) + "[^\"]*?" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*&gt;" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*[^\" \\t][^\"]*)\""));
    Opal.const_set($nesting[0], 'PassInlineRx', $hash(false, ["+", "`", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:])(?:\\[([^\\]]+?)\\])?(\\\\?(\\+|`)(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)\\4)(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')], true, ["`", nil, new RegExp("" + "(^|[^`" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "])(?:\\[([^\\]]+?)\\])?(\\\\?(`)([^`\\s]|[^`\\s]" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)\\4)(?![`" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "])", 'm')]));
    Opal.const_set($nesting[0], 'PassInlineMacroRx', new RegExp("" + "(?:(?:(\\\\?)\\[([^\\]]+?)\\])?(\\\\{0,2})(\\+{2,3}|\\${2})(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?)\\4|(\\\\?)pass:([a-z,]*)\\[(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?[^\\\\])\\])", 'm'));
    Opal.const_set($nesting[0], 'XrefInlineMacroRx', new RegExp("" + "\\\\?(?:&lt;&lt;([" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "\":./]" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?)&gt;&gt;|xref:([" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "\":./]" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?)\\[(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?)\\])", 'm'));
    if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      Opal.const_set($nesting[0], 'LineBreakRx', /^(.*)[ \t]\+$/m)
      } else {
      nil
    };
    Opal.const_set($nesting[0], 'LayoutBreakLineRx', /^('|<){3,}$/);
    Opal.const_set($nesting[0], 'LayoutBreakLinePlusRx', /^(?:'|<){3,}$|^ {0,3}([-\*_])( *)\1\2\1$/);
    Opal.const_set($nesting[0], 'BlankLineRx', new RegExp("" + "^" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "*\\n"));
    Opal.const_set($nesting[0], 'DataDelimiterRx', /,|;/);
    Opal.const_set($nesting[0], 'DoubleQuotedRx', /^("|)(.*)\1$/);
    Opal.const_set($nesting[0], 'DoubleQuotedMultiRx', new RegExp("" + "^(\"|)(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*)\\1$", 'm'));
    Opal.const_set($nesting[0], 'TrailingDigitsRx', /\d+$/);
    Opal.const_set($nesting[0], 'EscapedSpaceRx', new RegExp("" + "\\\\(" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + ")"));
    Opal.const_set($nesting[0], 'SpaceDelimiterRx', new RegExp("" + "([^\\\\])" + (Opal.const_get_relative($nesting, 'CG_BLANK')) + "+"));
    Opal.const_set($nesting[0], 'SubModifierSniffRx', /[+-]/);
    Opal.const_set($nesting[0], 'UnicodeCharScanRx', (function() {if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return nil
      } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'UriSniffRx', new RegExp("" + "^" + (Opal.const_get_relative($nesting, 'CG_ALPHA')) + "[" + (Opal.const_get_relative($nesting, 'CC_ALNUM')) + ".+-]+:/{0,2}"));
    Opal.const_set($nesting[0], 'UriTerminator', /[);:]$/);
    Opal.const_set($nesting[0], 'XmlSanitizeRx', /<[^>]+>/);
    Opal.const_set($nesting[0], 'INTRINSIC_ATTRIBUTES', $hash2(["startsb", "endsb", "vbar", "caret", "asterisk", "tilde", "plus", "backslash", "backtick", "blank", "empty", "sp", "two-colons", "two-semicolons", "nbsp", "deg", "zwsp", "quot", "apos", "lsquo", "rsquo", "ldquo", "rdquo", "wj", "brvbar", "cpp", "amp", "lt", "gt"], {"startsb": "[", "endsb": "]", "vbar": "|", "caret": "^", "asterisk": "*", "tilde": "~", "plus": "&#43;", "backslash": "\\", "backtick": "`", "blank": "", "empty": "", "sp": " ", "two-colons": "::", "two-semicolons": ";;", "nbsp": "&#160;", "deg": "&#176;", "zwsp": "&#8203;", "quot": "&#34;", "apos": "&#39;", "lsquo": "&#8216;", "rsquo": "&#8217;", "ldquo": "&#8220;", "rdquo": "&#8221;", "wj": "&#8288;", "brvbar": "&#166;", "cpp": "C++", "amp": "&", "lt": "<", "gt": ">"}));
    quote_subs = [["strong", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+?)\\])?\\*\\*(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "+?)\\*\\*", 'm')], ["strong", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+?)\\])?\\*(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)\\*(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')], ["double", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+?)\\])?\"`(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)`\"(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')], ["single", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:`}])(?:\\[([^\\]]+?)\\])?'`(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)`'(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')], ["monospaced", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+?)\\])?``(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "+?)``", 'm')], ["monospaced", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:\"'`}])(?:\\[([^\\]]+?)\\])?`(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)`(?![" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "\"'`])", 'm')], ["emphasis", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+?)\\])?__(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "+?)__", 'm')], ["emphasis", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+?)\\])?_(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)_(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')], ["mark", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+?)\\])?##(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "+?)##", 'm')], ["mark", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + "&;:}])(?:\\[([^\\]]+?)\\])?#(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)#(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')], ["superscript", "unconstrained", /\\?(?:\[([^\]]+?)\])?\^(\S+?)\^/], ["subscript", "unconstrained", /\\?(?:\[([^\]]+?)\])?~(\S+?)~/]];
    compat_quote_subs = quote_subs.$dup();
    
    $writer = [2, ["double", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+?)\\])?``(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)''(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')]];
    $send(compat_quote_subs, '[]=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    
    $writer = [3, ["single", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+?)\\])?`(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)'(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')]];
    $send(compat_quote_subs, '[]=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    
    $writer = [4, ["monospaced", "unconstrained", new RegExp("" + "\\\\?(?:\\[([^\\]]+?)\\])?\\+\\+(" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "+?)\\+\\+", 'm')]];
    $send(compat_quote_subs, '[]=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    
    $writer = [5, ["monospaced", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+?)\\])?\\+(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)\\+(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')]];
    $send(compat_quote_subs, '[]=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    compat_quote_subs.$insert(3, ["emphasis", "constrained", new RegExp("" + "(^|[^" + (Opal.const_get_relative($nesting, 'CC_WORD')) + ";:}])(?:\\[([^\\]]+?)\\])?'(\\S|\\S" + (Opal.const_get_relative($nesting, 'CC_ALL')) + "*?\\S)'(?!" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")", 'm')]);
    Opal.const_set($nesting[0], 'QUOTE_SUBS', $hash(false, quote_subs, true, compat_quote_subs));
    quote_subs = nil;
    compat_quote_subs = nil;
    Opal.const_set($nesting[0], 'REPLACEMENTS', [[/\\?\(C\)/, "&#169;", "none"], [/\\?\(R\)/, "&#174;", "none"], [/\\?\(TM\)/, "&#8482;", "none"], [/(^|\n| |\\)--( |\n|$)/, "&#8201;&#8212;&#8201;", "none"], [new RegExp("" + "(" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")\\\\?--(?=" + (Opal.const_get_relative($nesting, 'CG_WORD')) + ")"), "&#8212;&#8203;", "leading"], [/\\?\.\.\./, "&#8230;&#8203;", "leading"], [/\\?`'/, "&#8217;", "none"], [new RegExp("" + "(" + (Opal.const_get_relative($nesting, 'CG_ALNUM')) + ")\\\\?'(?=" + (Opal.const_get_relative($nesting, 'CG_ALPHA')) + ")"), "&#8217;", "leading"], [/\\?-&gt;/, "&#8594;", "none"], [/\\?=&gt;/, "&#8658;", "none"], [/\\?&lt;-/, "&#8592;", "none"], [/\\?&lt;=/, "&#8656;", "none"], [/\\?(&)amp;((?:[a-zA-Z]{2,}|#\d{2,6}|#x[a-fA-F0-9]{2,5});)/, "", "bounding"]]);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_load_6, TMP_load_file_7, TMP_convert_9, TMP_convert_file_10;

      
      
      Opal.defn(self, '$load', TMP_load_6 = function $$load(input, options) {
        var $a, $b, TMP_3, TMP_4, TMP_5, self = this, timings = nil, attributes = nil, $writer = nil, attrs = nil, capture_1 = nil, original_attrs = nil, lines = nil, input_path = nil, input_mtime = nil, docdate = nil, doctime = nil, doc = nil, ex = nil, context = nil, wrapped_ex = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        try {
          
          options = options.$dup();
          if ($truthy((timings = options['$[]']("timings")))) {
            timings.$start("read")};
          attributes = (($writer = ["attributes", (function() {if ($truthy((attrs = options['$[]']("attributes"))['$!']())) {
            return $hash2([], {})
          } else if ($truthy(($truthy($a = Opal.const_get_qualified('::', 'Hash')['$==='](attrs)) ? $a : ($truthy($b = Opal.const_get_qualified('::', 'RUBY_ENGINE_JRUBY')) ? Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Java'), 'JavaUtil'), 'Map')['$==='](attrs) : $b)))) {
            return attrs.$dup()
          } else if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](attrs))) {
            return $send(attrs, 'inject', [$hash2([], {})], (TMP_3 = function(accum, entry){var self = TMP_3.$$s || this, $c, $d, k = nil, v = nil;
if (accum == null) accum = nil;if (entry == null) entry = nil;
            
              $d = entry.$split("=", 2), $c = Opal.to_ary($d), (k = ($c[0] == null ? nil : $c[0])), (v = ($c[1] == null ? nil : $c[1])), $d;
              
              $writer = [k, ($truthy($c = v) ? $c : "")];
              $send(accum, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return accum;}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3))
          } else if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](attrs))) {
            
            capture_1 = "\\1";
            attrs = attrs.$gsub(Opal.const_get_relative($nesting, 'SpaceDelimiterRx'), "" + (capture_1) + (Opal.const_get_relative($nesting, 'NULL'))).$gsub(Opal.const_get_relative($nesting, 'EscapedSpaceRx'), capture_1);
            return $send(attrs.$split(Opal.const_get_relative($nesting, 'NULL')), 'inject', [$hash2([], {})], (TMP_4 = function(accum, entry){var self = TMP_4.$$s || this, $c, $d, k = nil, v = nil;
if (accum == null) accum = nil;if (entry == null) entry = nil;
            
              $d = entry.$split("=", 2), $c = Opal.to_ary($d), (k = ($c[0] == null ? nil : $c[0])), (v = ($c[1] == null ? nil : $c[1])), $d;
              
              $writer = [k, ($truthy($c = v) ? $c : "")];
              $send(accum, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return accum;}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4));
          } else if ($truthy(($truthy($a = attrs['$respond_to?']("keys")) ? attrs['$respond_to?']("[]") : $a))) {
            
            original_attrs = attrs;
            attrs = $hash2([], {});
            $send(original_attrs.$keys(), 'each', [], (TMP_5 = function(key){var self = TMP_5.$$s || this;
if (key == null) key = nil;
            
              $writer = [key, original_attrs['$[]'](key)];
              $send(attrs, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
            return attrs;
            } else {
            return self.$raise(Opal.const_get_qualified('::', 'ArgumentError'), "" + "illegal type for attributes option: " + (attrs.$class().$ancestors()))
          }; return nil; })()]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
          lines = nil;
          if ($truthy(Opal.const_get_qualified('::', 'File')['$==='](input))) {
            
            input_path = Opal.const_get_qualified('::', 'File').$expand_path(input.$path());
            input_mtime = (function() {if ($truthy(Opal.const_get_qualified('::', 'ENV')['$[]']("SOURCE_DATE_EPOCH"))) {
              return Opal.const_get_qualified('::', 'Time').$at(Opal.const_get_qualified('::', 'ENV')['$[]']("SOURCE_DATE_EPOCH").$to_i()).$utc()
              } else {
              return input.$mtime()
            }; return nil; })();
            lines = input.$readlines();
            
            $writer = ["docfile", input_path];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["docdir", Opal.const_get_qualified('::', 'File').$dirname(input_path)];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["docname", Opal.const_get_relative($nesting, 'Helpers').$basename(input_path, true)];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            docdate = ($truthy($a = attributes['$[]']("docdate")) ? $a : (($writer = ["docdate", input_mtime.$strftime("%Y-%m-%d")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            doctime = ($truthy($a = attributes['$[]']("doctime")) ? $a : (($writer = ["doctime", input_mtime.$strftime("%H:%M:%S %Z")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
            
            $writer = ["docdatetime", "" + (docdate) + " " + (doctime)];
            $send(attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          } else if ($truthy(input['$respond_to?']("readlines"))) {
            
            
            try {
              input.$rewind()
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  nil
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
            lines = input.$readlines();
          } else if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](input))) {
            lines = input.$lines().$entries()
          } else if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](input))) {
            lines = input.$dup()
            } else {
            self.$raise(Opal.const_get_qualified('::', 'ArgumentError'), "" + "unsupported input type: " + (input.$class()))
          };
          if ($truthy(timings)) {
            
            timings.$record("read");
            timings.$start("parse");};
          if (options['$[]']("parse")['$=='](false)) {
            doc = Opal.const_get_relative($nesting, 'Document').$new(lines, options)
            } else {
            doc = Opal.const_get_relative($nesting, 'Document').$new(lines, options).$parse()
          };
          if ($truthy(timings)) {
            timings.$record("parse")};
          return doc;
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {ex = $err;
            try {
              
              
              try {
                
                context = "" + "asciidoctor: FAILED: " + (($truthy($a = attributes['$[]']("docfile")) ? $a : "<stdin>")) + ": Failed to load AsciiDoc document";
                if ($truthy(ex['$respond_to?']("exception"))) {
                  
                  wrapped_ex = ex.$exception("" + (context) + " - " + (ex.$message()));
                  wrapped_ex.$set_backtrace(ex.$backtrace());
                  } else {
                  
                  wrapped_ex = ex.$class().$new(context, ex);
                  
                  $writer = [ex.$stack_trace()];
                  $send(wrapped_ex, 'stack_trace=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                };
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                  try {
                    wrapped_ex = ex
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };;
              return self.$raise(wrapped_ex);
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_load_6.$$arity = -2);
      
      Opal.defn(self, '$load_file', TMP_load_file_7 = function $$load_file(filename, options) {
        var $a, self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        return self.$load(Opal.const_get_qualified('::', 'File').$new(($truthy($a = filename) ? $a : "")), options)
      }, TMP_load_file_7.$$arity = -2);
      
      Opal.defn(self, '$convert', TMP_convert_9 = function $$convert(input, options) {
        var $a, $b, $c, $d, $e, TMP_8, self = this, to_file = nil, to_dir = nil, mkdirs = nil, timings = nil, $case = nil, write_to_same_dir = nil, stream_output = nil, write_to_target = nil, $writer = nil, input_path = nil, outdir = nil, doc = nil, outfile = nil, working_dir = nil, jail = nil, opts = nil, output = nil, stylesdir = nil, copy_asciidoctor_stylesheet = nil, copy_user_stylesheet = nil, stylesheet = nil, copy_coderay_stylesheet = nil, copy_pygments_stylesheet = nil, stylesoutdir = nil, stylesheet_src = nil, stylesheet_dst = nil, stylesheet_content = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        options = options.$dup();
        options.$delete("parse");
        to_file = options.$delete("to_file");
        to_dir = options.$delete("to_dir");
        mkdirs = ($truthy($a = options.$delete("mkdirs")) ? $a : false);
        timings = options['$[]']("timings");
        $case = to_file;
        if (true['$===']($case) || nil['$===']($case)) {
        write_to_same_dir = ($truthy($a = to_dir['$!']()) ? Opal.const_get_qualified('::', 'File')['$==='](input) : $a);
        stream_output = false;
        write_to_target = to_dir;
        to_file = nil;}
        else if (false['$===']($case)) {
        write_to_same_dir = false;
        stream_output = false;
        write_to_target = false;
        to_file = nil;}
        else if ("/dev/null"['$===']($case)) {return self.$load(input, options)}
        else {
        write_to_same_dir = false;
        stream_output = to_file['$respond_to?']("write");
        write_to_target = (function() {if ($truthy(stream_output)) {
          return false
          } else {
          return to_file
        }; return nil; })();};
        if ($truthy(options['$key?']("header_footer"))) {
        } else if ($truthy(($truthy($a = write_to_same_dir) ? $a : write_to_target))) {
          
          $writer = ["header_footer", true];
          $send(options, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(write_to_same_dir)) {
          
          input_path = Opal.const_get_qualified('::', 'File').$expand_path(input.$path());
          
          $writer = ["to_dir", (outdir = Opal.const_get_qualified('::', 'File').$dirname(input_path))];
          $send(options, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        } else if ($truthy(write_to_target)) {
          if ($truthy(to_dir)) {
            if ($truthy(to_file)) {
              
              $writer = ["to_dir", Opal.const_get_qualified('::', 'File').$dirname(Opal.const_get_qualified('::', 'File').$expand_path(Opal.const_get_qualified('::', 'File').$join(to_dir, to_file)))];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              } else {
              
              $writer = ["to_dir", Opal.const_get_qualified('::', 'File').$expand_path(to_dir)];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            }
          } else if ($truthy(to_file)) {
            
            $writer = ["to_dir", Opal.const_get_qualified('::', 'File').$dirname(Opal.const_get_qualified('::', 'File').$expand_path(to_file))];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];}
          } else {
          
          $writer = ["to_dir", nil];
          $send(options, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        doc = self.$load(input, options);
        if ($truthy(write_to_same_dir)) {
          
          outfile = Opal.const_get_qualified('::', 'File').$join(outdir, "" + (doc.$attributes()['$[]']("docname")) + (doc.$outfilesuffix()));
          if (outfile['$=='](input_path)) {
            self.$raise(Opal.const_get_qualified('::', 'IOError'), "" + "input file and output file cannot be the same: " + (outfile))};
        } else if ($truthy(write_to_target)) {
          
          working_dir = (function() {if ($truthy(options['$has_key?']("base_dir"))) {
            return Opal.const_get_qualified('::', 'File').$expand_path(options['$[]']("base_dir"))
            } else {
            return Opal.const_get_qualified('::', 'File').$expand_path(Opal.const_get_qualified('::', 'Dir').$pwd())
          }; return nil; })();
          jail = (function() {if ($truthy($rb_ge(doc.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SAFE')))) {
            return working_dir
            } else {
            return nil
          }; return nil; })();
          if ($truthy(to_dir)) {
            
            outdir = doc.$normalize_system_path(to_dir, working_dir, jail, $hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
            if ($truthy(to_file)) {
              
              outfile = doc.$normalize_system_path(to_file, outdir, nil, $hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
              outdir = Opal.const_get_qualified('::', 'File').$dirname(outfile);
              } else {
              outfile = Opal.const_get_qualified('::', 'File').$join(outdir, "" + (doc.$attributes()['$[]']("docname")) + (doc.$outfilesuffix()))
            };
          } else if ($truthy(to_file)) {
            
            outfile = doc.$normalize_system_path(to_file, working_dir, jail, $hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
            outdir = Opal.const_get_qualified('::', 'File').$dirname(outfile);};
          if ($truthy(Opal.const_get_qualified('::', 'File')['$directory?'](outdir))) {
          } else if ($truthy(mkdirs)) {
            Opal.const_get_relative($nesting, 'Helpers').$mkdir_p(outdir)
            } else {
            self.$raise(Opal.const_get_qualified('::', 'IOError'), "" + "target directory does not exist: " + (to_dir))
          };
          } else {
          
          outfile = to_file;
          outdir = nil;
        };
        if ($truthy(timings)) {
          timings.$start("convert")};
        opts = (function() {if ($truthy(($truthy($a = outfile) ? stream_output['$!']() : $a))) {
          return $hash2(["outfile", "outdir"], {"outfile": outfile, "outdir": outdir})
          } else {
          return $hash2([], {})
        }; return nil; })();
        output = doc.$convert(opts);
        if ($truthy(timings)) {
          timings.$record("convert")};
        if ($truthy(outfile)) {
          
          if ($truthy(timings)) {
            timings.$start("write")};
          doc.$write(output, outfile);
          if ($truthy(timings)) {
            timings.$record("write")};
          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = ($truthy($e = stream_output['$!']()) ? $rb_lt(doc.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE')) : $e)) ? doc['$attr?']("linkcss") : $d)) ? doc['$attr?']("copycss") : $c)) ? doc['$attr?']("basebackend-html") : $b)) ? ($truthy($b = (stylesdir = doc.$attr("stylesdir"))) ? Opal.const_get_relative($nesting, 'Helpers')['$uriish?'](stylesdir) : $b)['$!']() : $a))) {
            
            copy_asciidoctor_stylesheet = false;
            copy_user_stylesheet = false;
            if ($truthy((stylesheet = doc.$attr("stylesheet")))) {
              if ($truthy(Opal.const_get_relative($nesting, 'DEFAULT_STYLESHEET_KEYS')['$include?'](stylesheet))) {
                copy_asciidoctor_stylesheet = true
              } else if ($truthy(Opal.const_get_relative($nesting, 'Helpers')['$uriish?'](stylesheet)['$!']())) {
                copy_user_stylesheet = true}};
            copy_coderay_stylesheet = ($truthy($a = doc['$attr?']("source-highlighter", "coderay")) ? doc.$attr("coderay-css", "class")['$==']("class") : $a);
            copy_pygments_stylesheet = ($truthy($a = doc['$attr?']("source-highlighter", "pygments")) ? doc.$attr("pygments-css", "class")['$==']("class") : $a);
            if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = copy_asciidoctor_stylesheet) ? $c : copy_user_stylesheet)) ? $b : copy_coderay_stylesheet)) ? $a : copy_pygments_stylesheet))) {
              
              stylesoutdir = doc.$normalize_system_path(stylesdir, outdir, (function() {if ($truthy($rb_ge(doc.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SAFE')))) {
                return outdir
                } else {
                return nil
              }; return nil; })());
              if ($truthy(mkdirs)) {
                Opal.const_get_relative($nesting, 'Helpers').$mkdir_p(stylesoutdir)};
              if ($truthy(copy_asciidoctor_stylesheet)) {
                Opal.const_get_relative($nesting, 'Stylesheets').$instance().$write_primary_stylesheet(stylesoutdir)
              } else if ($truthy(copy_user_stylesheet)) {
                
                if ($truthy((stylesheet_src = doc.$attr("copycss"))['$empty?']())) {
                  stylesheet_src = doc.$normalize_system_path(stylesheet)
                  } else {
                  stylesheet_src = doc.$normalize_system_path(stylesheet_src)
                };
                stylesheet_dst = doc.$normalize_system_path(stylesheet, stylesoutdir, (function() {if ($truthy($rb_ge(doc.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SAFE')))) {
                  return outdir
                  } else {
                  return nil
                }; return nil; })());
                if ($truthy(($truthy($a = stylesheet_src['$=='](stylesheet_dst)) ? $a : (stylesheet_content = doc.$read_asset(stylesheet_src))['$nil?']()))) {
                  } else {
                  $send(Opal.const_get_qualified('::', 'File'), 'open', [stylesheet_dst, "w"], (TMP_8 = function(f){var self = TMP_8.$$s || this;
if (f == null) f = nil;
                  return f.$write(stylesheet_content)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
                };};
              if ($truthy(copy_coderay_stylesheet)) {
                Opal.const_get_relative($nesting, 'Stylesheets').$instance().$write_coderay_stylesheet(stylesoutdir)
              } else if ($truthy(copy_pygments_stylesheet)) {
                Opal.const_get_relative($nesting, 'Stylesheets').$instance().$write_pygments_stylesheet(stylesoutdir, doc.$attr("pygments-style"))};};};
          return doc;
          } else {
          return output
        };
      }, TMP_convert_9.$$arity = -2);
      Opal.alias(self, "render", "convert");
      
      Opal.defn(self, '$convert_file', TMP_convert_file_10 = function $$convert_file(filename, options) {
        var $a, self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        return self.$convert(Opal.const_get_qualified('::', 'File').$new(($truthy($a = filename) ? $a : "")), options)
      }, TMP_convert_file_10.$$arity = -2);
      return Opal.alias(self, "render_file", "convert_file");
    })(Opal.get_singleton_class(self), $nesting);
    if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      
      self.$require("asciidoctor/version");
      self.$require("asciidoctor/timings");
      } else {
      nil
    };
  })($nesting[0], $nesting);
  self.$require("asciidoctor/core_ext");
  self.$require("asciidoctor/helpers");
  self.$require("asciidoctor/substitutors");
  self.$require("asciidoctor/abstract_node");
  self.$require("asciidoctor/abstract_block");
  self.$require("asciidoctor/attribute_list");
  self.$require("asciidoctor/block");
  self.$require("asciidoctor/callouts");
  self.$require("asciidoctor/converter");
  if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE_OPAL'))) {
    self.$require("asciidoctor/converter/html5")};
  self.$require("asciidoctor/document");
  self.$require("asciidoctor/inline");
  self.$require("asciidoctor/list");
  self.$require("asciidoctor/parser");
  self.$require("asciidoctor/path_resolver");
  self.$require("asciidoctor/reader");
  self.$require("asciidoctor/section");
  self.$require("asciidoctor/stylesheets");
  return self.$require("asciidoctor/table");
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/css_doc_info"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$==', '$include', '$use_dsl', '$at_location', '$expand_path', '$attr?', '$handle_stylesheet', '$read_asset', '$*', '$chomp', '$attr', '$normalize_system_path', '$>=', '$safe', '$!=', '$<', '$open', '$write']);
  
  self.$require("asciidoctor");
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
    nil
  };
  self.$include(Opal.const_get_qualified('::', 'Asciidoctor'));
  return (function($base, $super, $parent_nesting) {
    function $CSSDocinfoProcessor(){};
    var self = $CSSDocinfoProcessor = $klass($base, $super, 'CSSDocinfoProcessor', $CSSDocinfoProcessor);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CSSDocinfoProcessor_process_1, TMP_CSSDocinfoProcessor_handle_stylesheet_3;

    
    self.$use_dsl();
    self.$at_location("header");
    
    Opal.defn(self, '$process', TMP_CSSDocinfoProcessor_process_1 = function $$process(doc) {
      var self = this, extdir = nil, stylesheet_name = nil, stylesheet_href = nil, content = nil;

      
      extdir = Opal.const_get_relative($nesting, 'File').$expand_path("../../../../data", "asciidoctor/latex/css_doc_info");
      stylesheet_name = "extras.css";
      if ($truthy(doc['$attr?']("linkcss"))) {
        
        stylesheet_href = self.$handle_stylesheet(doc, extdir, stylesheet_name);
        return "" + "<link rel=\"stylesheet\" href=\"" + (stylesheet_href) + "\">";
        } else {
        
        content = doc.$read_asset("" + (extdir) + "/" + (stylesheet_name));
        return $rb_times(["<style>", content.$chomp(), "</style>"], "\n");
      };
    }, TMP_CSSDocinfoProcessor_process_1.$$arity = 1);
    return (Opal.defn(self, '$handle_stylesheet', TMP_CSSDocinfoProcessor_handle_stylesheet_3 = function $$handle_stylesheet(doc, extdir, stylesheet_name) {
      var $a, $b, TMP_2, self = this, outdir = nil, stylesoutdir = nil, destination = nil, content = nil;

      
      outdir = (function() {if ($truthy(doc['$attr?']("outdir"))) {
        
        return doc.$attr("outdir");
        } else {
        
        return doc.$attr("docdir");
      }; return nil; })();
      stylesoutdir = doc.$normalize_system_path(doc.$attr("stylesdir"), outdir, (function() {if ($truthy($rb_ge(doc.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SAFE')))) {
        return outdir
        } else {
        return nil
      }; return nil; })());
      if ($truthy(($truthy($a = ($truthy($b = stylesoutdir['$!='](extdir)) ? $rb_lt(doc.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SECURE')) : $b)) ? doc['$attr?']("copycss") : $a))) {
        
        destination = doc.$normalize_system_path(stylesheet_name, stylesoutdir, (function() {if ($truthy($rb_ge(doc.$safe(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'SafeMode'), 'SAFE')))) {
          return outdir
          } else {
          return nil
        }; return nil; })());
        content = doc.$read_asset("" + (extdir) + "/" + (stylesheet_name));
        $send(Opal.const_get_qualified('::', 'File'), 'open', [destination, "w"], (TMP_2 = function(f){var self = TMP_2.$$s || this;
if (f == null) f = nil;
        return f.$write(content)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        return destination;
        } else {
        return "" + "./" + (stylesheet_name)
      };
    }, TMP_CSSDocinfoProcessor_handle_stylesheet_3.$$arity = 3), nil) && 'handle_stylesheet';
  })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'DocinfoProcessor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/core_ext/colored_string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_blue_1, TMP_String_green_2, TMP_String_red_3, TMP_String_yellow_4, TMP_String_magenta_5, TMP_String_cyan_6, TMP_String_white_7, TMP_String_black_8;

    
    
    Opal.defn(self, '$blue', TMP_String_blue_1 = function $$blue() {
      var self = this;

      return "" + "\e[1;34m" + (self) + "\e[0m"
    }, TMP_String_blue_1.$$arity = 0);
    
    Opal.defn(self, '$green', TMP_String_green_2 = function $$green() {
      var self = this;

      return "" + "\e[1;32m" + (self) + "\e[0m"
    }, TMP_String_green_2.$$arity = 0);
    
    Opal.defn(self, '$red', TMP_String_red_3 = function $$red() {
      var self = this;

      return "" + "\e[1;31m" + (self) + "\e[0m"
    }, TMP_String_red_3.$$arity = 0);
    
    Opal.defn(self, '$yellow', TMP_String_yellow_4 = function $$yellow() {
      var self = this;

      return "" + "\e[1;33m" + (self) + "\e[0m"
    }, TMP_String_yellow_4.$$arity = 0);
    
    Opal.defn(self, '$magenta', TMP_String_magenta_5 = function $$magenta() {
      var self = this;

      return "" + "\e[1;35m" + (self) + "\e[0m"
    }, TMP_String_magenta_5.$$arity = 0);
    
    Opal.defn(self, '$cyan', TMP_String_cyan_6 = function $$cyan() {
      var self = this;

      return "" + "\e[1;36m" + (self) + "\e[0m"
    }, TMP_String_cyan_6.$$arity = 0);
    
    Opal.defn(self, '$white', TMP_String_white_7 = function $$white() {
      var self = this;

      return "" + "\e[1;37m" + (self) + "\e[0m"
    }, TMP_String_white_7.$$arity = 0);
    return (Opal.defn(self, '$black', TMP_String_black_8 = function $$black() {
      var self = this;

      return "" + "\e[1;30m" + (self) + "\e[0m"
    }, TMP_String_black_8.$$arity = 0), nil) && 'black';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/inline_macros"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$use_dsl', '$named', '$values', '$[]', '$gsub', '$+', '$glossterm', '$pop', '$split', '$==', '$count']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  self.$require("asciidoctor/latex/core_ext/colored_string");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $ChemInlineMacro(){};
      var self = $ChemInlineMacro = $klass($base, $super, 'ChemInlineMacro', $ChemInlineMacro);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ChemInlineMacro_process_1;

      
      self.$use_dsl();
      self.$named("chem");
      return (Opal.defn(self, '$process', TMP_ChemInlineMacro_process_1 = function $$process(parent, target, attributes) {
        var self = this, array = nil;

        
        array = attributes.$values();
        return "" + "\\(\\ce{ " + (array['$[]'](0)) + " }\\)";
      }, TMP_ChemInlineMacro_process_1.$$arity = 3), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'InlineMacroProcessor'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $GlossInlineMacro(){};
      var self = $GlossInlineMacro = $klass($base, $super, 'GlossInlineMacro', $GlossInlineMacro);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_GlossInlineMacro_glossterm_2, TMP_GlossInlineMacro_process_3;

      
      self.$use_dsl();
      self.$named("glossterm");
      
      Opal.defn(self, '$glossterm', TMP_GlossInlineMacro_glossterm_2 = function $$glossterm(term) {
        var self = this, identifier = nil, id = nil, css_class = nil, href = nil;

        
        identifier = term.$gsub(" ", "_").$gsub(/\W/, "");
        id = $rb_plus("glossterm_", identifier);
        css_class = "glossterm";
        href = $rb_plus("#glossentry_", identifier);
        return "" + "<a href=" + (href) + " class=" + (css_class) + " id=" + (id) + " >" + (term) + "</a>";
      }, TMP_GlossInlineMacro_glossterm_2.$$arity = 1);
      return (Opal.defn(self, '$process', TMP_GlossInlineMacro_process_3 = function $$process(parent, target, attributes) {
        var self = this, term = nil;

        
        term = attributes.$values()['$[]'](0);
        return self.$glossterm(term);
      }, TMP_GlossInlineMacro_process_3.$$arity = 3), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'InlineMacroProcessor'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $IndexTermInlineMacro(){};
      var self = $IndexTermInlineMacro = $klass($base, $super, 'IndexTermInlineMacro', $IndexTermInlineMacro);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IndexTermInlineMacro_process_4;

      
      self.$use_dsl();
      self.$named("index_term");
      return (Opal.defn(self, '$process', TMP_IndexTermInlineMacro_process_4 = function $$process(parent, target, attributes) {
        var $a, self = this, array = nil, css = nil, index = nil, reference_array = nil, reference = nil;

        
        array = attributes.$values();
        css = array.$pop();
        index = array.$pop();
        reference_array = array.$pop().$split(",");
        if (reference_array.$count()['$=='](1)) {
          reference = reference_array.$pop()
          } else {
          reference = ""
        };
        reference = ($truthy($a = reference) ? $a : "");
        if (css['$==']("invisible")) {
          return "" + "<span class='invisible' id='index_term_" + (index) + "'>" + (reference) + "</span>"
          } else {
          return "" + "<span class='index_term' id='index_term_" + (index) + "'>" + (reference) + "</span>"
        };
      }, TMP_IndexTermInlineMacro_process_4.$$arity = 3), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'InlineMacroProcessor'), $nesting);
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/click_block"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$require', '$use_dsl', '$named', '$read', '$==', '$basebackend?', '$document', '$create_pass_block', '$on_context', '$[]', '$include?', '$[]=', '$-', '$+', '$capitalize', '$to_s', '$!=', '$create_block', '$lines']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  self.$require("asciidoctor/latex/core_ext/colored_string");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $IncludeLatexBlockMacro(){};
      var self = $IncludeLatexBlockMacro = $klass($base, $super, 'IncludeLatexBlockMacro', $IncludeLatexBlockMacro);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IncludeLatexBlockMacro_process_1;

      
      self.$use_dsl();
      self.$named("include_latex_macros");
      return (Opal.defn(self, '$process', TMP_IncludeLatexBlockMacro_process_1 = function $$process(parent, target, attrs) {
        var $a, self = this, file_contents = nil, content = nil;

        
        file_contents = Opal.const_get_relative($nesting, 'IO').$read(target);
        if (file_contents['$=='](nil)) {
          file_contents = Opal.const_get_relative($nesting, 'IO').$read("public/macros.tex")};
        if ($truthy(parent.$document()['$basebackend?']("html"))) {
          content = ($truthy($a = "" + "\n\\(\n" + (file_contents) + "\n\\)\n") ? $a : "")
          } else {
          content = ($truthy($a = "" + "\n" + (file_contents) + "\n") ? $a : "")
        };
        return self.$create_pass_block(parent, content, attrs, $hash2(["subs"], {"subs": nil}));
      }, TMP_IncludeLatexBlockMacro_process_1.$$arity = 3), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'BlockMacroProcessor'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ClickBlock(){};
      var self = $ClickBlock = $klass($base, $super, 'ClickBlock', $ClickBlock);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClickBlock_process_2;

      
      self.$use_dsl();
      self.$named("click");
      self.$on_context("open");
      $gvars.counter = $hash2([], {});
      return (Opal.defn(self, '$process', TMP_ClickBlock_process_2 = function $$process(parent, reader, attrs) {
        var $a, self = this, original_title = nil, original_role = nil, role = nil, numbered = nil, env_name = nil, $writer = nil, title = nil, block = nil;
        if ($gvars.counter == null) $gvars.counter = nil;

        
        original_title = attrs['$[]']("role");
        original_role = attrs['$[]']("role");
        if (attrs['$[]']("role")['$=='](nil)) {
          role = "item"
          } else {
          role = attrs['$[]']("role")
        };
        numbered = false;
        if ($truthy(($truthy($a = attrs['$[]']("options")) ? attrs['$[]']("options")['$include?']("number") : $a))) {
          numbered = true};
        if ($truthy(numbered)) {
          
          env_name = role;
          if ($gvars.counter['$[]'](env_name)['$=='](nil)) {
            
            $writer = [env_name, 1];
            $send($gvars.counter, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = [env_name, $rb_plus($gvars.counter['$[]'](env_name), 1)];
            $send($gvars.counter, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };};
        if (role['$==']("code")) {
          title = "Listing"
          } else {
          title = role.$capitalize()
        };
        if ($truthy(numbered)) {
          title = $rb_plus($rb_plus(title, " "), $gvars.counter['$[]'](env_name).$to_s())};
        if ($truthy(attrs['$[]']("title"))) {
          if ($truthy(numbered)) {
            title = $rb_plus($rb_plus(title, ". "), attrs['$[]']("title").$capitalize())
            } else {
            title = $rb_plus($rb_plus(title, ": "), attrs['$[]']("title").$capitalize())
          }};
        if (original_role['$=='](nil)) {
          title = original_title};
        if ($truthy(role['$!=']("equation"))) {
          
          $writer = ["title", title];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(numbered)) {
          
          $writer = ["equation_number", $gvars.counter['$[]'](env_name).$to_s()];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = ["title", title];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if (attrs['$[]']("role")['$==']("code")) {
          role = "listing"
          } else {
          role = "click"
        };
        
        $writer = ["role", "click"];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["original_title", original_title];
        $send(attrs, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if (role['$==']("listing")) {
          block = self.$create_block(parent, "listing", reader.$lines(), attrs)
          } else {
          block = self.$create_block(parent, "click", reader.$lines(), attrs)
        };
        return block;
      }, TMP_ClickBlock_process_2.$$arity = 3), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'BlockProcessor'), $nesting);
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/inject_html"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$sub']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  self.$require("asciidoctor/latex/core_ext/colored_string");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $InjectHTML(){};
      var self = $InjectHTML = $klass($base, $super, 'InjectHTML', $InjectHTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InjectHTML_process_1;

      return (Opal.defn(self, '$process', TMP_InjectHTML_process_1 = function $$process(document, output) {
        var self = this;
        if ($gvars.click_insertion == null) $gvars.click_insertion = nil;

        return output.$sub("</head>", $gvars.click_insertion)
      }, TMP_InjectHTML_process_1.$$arity = 2), nil) && 'process'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Postprocessor'), $nesting);
    $gvars.click_insertion = "" + "\n" + "<style>\n" + "  .click .title { color: blue; }\n" + "  .click {margin-top: 0.5em; margin-bottom: 0.5em;}\n" + "  .openblock { margin-top: 1em; margin-bottom: 1em; }\n" + "  .openblock>.box>.content { margin-top:1em;margin-bottom: 1em;margin-left:3em;margin-right:4em; }\n" + "</style>\n" + "\n" + "\n" + "<script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n" + "\n" + "<script>\n" + "\n" + "\n" + "\n" + "var ready2;\n" + "\n" + "ready2 = function() {\n" + "\n" + "    $(document).ready(function(){\n" + "\n" + "        $('.openblock.click').click( function()  { $(this).find('.content').slideToggle('200'); } )\n" + "        $('.openblock.click').find('.content').hide()\n" + "\n" + "\n" + "        $('.listingblock.click').click( function()  { $(this).find('.content').slideToggle('200') }  )\n" + "        $('.listingblock.click').find('.content').hide()\n" + "\n" + "    });\n" + "\n" + "}\n" + "\n" + "\n" + "\n" + "\n" + "$(document).ready(ready2);\n" + "$(document).on('page:load', ready2);\n" + "\n" + "\n" + "</script>\n" + "\n" + "</head>\n" + "\n";
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["htmlentities/flavors"] = function(Opal) {
  var TMP_1, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$each', '$require']);
  
  (function($base, $super, $parent_nesting) {
    function $HTMLEntities(){};
    var self = $HTMLEntities = $klass($base, $super, 'HTMLEntities', $HTMLEntities);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a, $b;

    
    Opal.const_set($nesting[0], 'FLAVORS', ["html4", "xhtml1", "expanded"]);
    if ($truthy((($a = Opal.const_get_relative($nesting, 'MAPPINGS', 'skip_raise')) ? 'constant' : nil))) {
      } else {
      Opal.const_set($nesting[0], 'MAPPINGS', $hash2([], {}))
    };
    if ($truthy((($b = Opal.const_get_relative($nesting, 'SKIP_DUP_ENCODINGS', 'skip_raise')) ? 'constant' : nil))) {
      return nil
      } else {
      return Opal.const_set($nesting[0], 'SKIP_DUP_ENCODINGS', $hash2([], {}))
    };
  })($nesting[0], null, $nesting);
  return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HTMLEntities'), 'FLAVORS'), 'each', [], (TMP_1 = function(flavor){var self = TMP_1.$$s || this;
if (flavor == null) flavor = nil;
  return self.$require("" + "htmlentities/mappings/" + (flavor))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["htmlentities/encoder"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$new', '$empty?', '$validate_instructions', '$build_basic_entity_encoder', '$build_extended_entity_encoder', '$minimize_encoding', '$replace_extended', '$replace_basic', '$prepare', '$private', '$encode', '$to_s', '$!=', '$encoding', '$contains_only_ascii?', '$match', '$==', '$<<', '$gsub', '$basic_entity_regexp', '$encode_basic', '$extended_entity_regexp', '$encode_extended', '$-', '$any?', '$raise', '$inspect', '$include?', '$instance_eval', '$&', '$join', '$map', '$[]', '$unpack', '$reverse_map', '$reject', '$invert']);
  return (function($base, $super, $parent_nesting) {
    function $HTMLEntities(){};
    var self = $HTMLEntities = $klass($base, $super, 'HTMLEntities', $HTMLEntities);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'InstructionError', Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'RuntimeError')));
    return (function($base, $super, $parent_nesting) {
      function $Encoder(){};
      var self = $Encoder = $klass($base, $super, 'Encoder', $Encoder);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Encoder_initialize_1, TMP_Encoder_encode_2, TMP_Encoder_prepare_3, TMP_Encoder_minimize_encoding_4, TMP_Encoder_contains_only_ascii$q_5, TMP_Encoder_basic_entity_regexp_6, TMP_Encoder_extended_entity_regexp_7, TMP_Encoder_replace_basic_9, TMP_Encoder_replace_extended_11, TMP_Encoder_validate_instructions_12, TMP_Encoder_build_basic_entity_encoder_13, TMP_Encoder_build_extended_entity_encoder_15, TMP_Encoder_encode_named_16, TMP_Encoder_encode_decimal_17, TMP_Encoder_encode_hexadecimal_18, TMP_Encoder_reverse_map_20;

      def.basic_entity_regexp = def.flavor = def.extended_entity_regexp = def.reverse_map = nil;
      
      Opal.const_set($nesting[0], 'INSTRUCTIONS', ["basic", "named", "decimal", "hexadecimal"]);
      
      Opal.defn(self, '$initialize', TMP_Encoder_initialize_1 = function $$initialize(flavor, instructions) {
        var self = this;

        
        self.flavor = flavor;
        if ($truthy(instructions['$empty?']())) {
          instructions = ["basic"]};
        self.$validate_instructions(instructions);
        self.$build_basic_entity_encoder(instructions);
        return self.$build_extended_entity_encoder(instructions);
      }, TMP_Encoder_initialize_1.$$arity = 2);
      
      Opal.defn(self, '$encode', TMP_Encoder_encode_2 = function $$encode(source) {
        var self = this;

        return self.$minimize_encoding(self.$replace_extended(self.$replace_basic(self.$prepare(source))))
      }, TMP_Encoder_encode_2.$$arity = 1);
      self.$private();
      
      Opal.defn(self, '$prepare', TMP_Encoder_prepare_3 = function $$prepare(string) {
        var self = this;

        return string.$to_s().$encode(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Encoding'), 'UTF_8'))
      }, TMP_Encoder_prepare_3.$$arity = 1);
      
      Opal.defn(self, '$minimize_encoding', TMP_Encoder_minimize_encoding_4 = function $$minimize_encoding(string) {
        var $a, self = this;

        if ($truthy(($truthy($a = string.$encoding()['$!='](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Encoding'), 'ASCII'))) ? self['$contains_only_ascii?'](string) : $a))) {
          return string.$encode(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Encoding'), 'ASCII'))
          } else {
          return string
        }
      }, TMP_Encoder_minimize_encoding_4.$$arity = 1);
      
      Opal.defn(self, '$contains_only_ascii?', TMP_Encoder_contains_only_ascii$q_5 = function(string) {
        var self = this;

        return string.$match(/^[\x01-\x7F]*$/)
      }, TMP_Encoder_contains_only_ascii$q_5.$$arity = 1);
      
      Opal.defn(self, '$basic_entity_regexp', TMP_Encoder_basic_entity_regexp_6 = function $$basic_entity_regexp() {
        var $a, self = this;

        return (self.basic_entity_regexp = ($truthy($a = self.basic_entity_regexp) ? $a : (function() {if ($truthy(self.flavor.$match(/^html/))) {
          return /[<>"&]/
          } else {
          return /[<>'"&]/
        }; return nil; })()))
      }, TMP_Encoder_basic_entity_regexp_6.$$arity = 0);
      
      Opal.defn(self, '$extended_entity_regexp', TMP_Encoder_extended_entity_regexp_7 = function $$extended_entity_regexp() {
        var $a, self = this, pattern = nil;

        return (self.extended_entity_regexp = ($truthy($a = self.extended_entity_regexp) ? $a : ((pattern = "[^\\u20-\\u{7E}]"), (function() {if (self.flavor['$==']("html4")) {
          return pattern['$<<']("|'")
          } else {
          return nil
        }; return nil; })(), Opal.const_get_relative($nesting, 'Regexp').$new(pattern))))
      }, TMP_Encoder_extended_entity_regexp_7.$$arity = 0);
      
      Opal.defn(self, '$replace_basic', TMP_Encoder_replace_basic_9 = function $$replace_basic(string) {
        var TMP_8, self = this;

        return $send(string, 'gsub', [self.$basic_entity_regexp()], (TMP_8 = function(match){var self = TMP_8.$$s || this;
if (match == null) match = nil;
        return self.$encode_basic(match)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
      }, TMP_Encoder_replace_basic_9.$$arity = 1);
      
      Opal.defn(self, '$replace_extended', TMP_Encoder_replace_extended_11 = function $$replace_extended(string) {
        var TMP_10, self = this;

        return $send(string, 'gsub', [self.$extended_entity_regexp()], (TMP_10 = function(match){var self = TMP_10.$$s || this;
if (match == null) match = nil;
        return self.$encode_extended(match)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10))
      }, TMP_Encoder_replace_extended_11.$$arity = 1);
      
      Opal.defn(self, '$validate_instructions', TMP_Encoder_validate_instructions_12 = function $$validate_instructions(instructions) {
        var $a, self = this, unknown_instructions = nil;

        
        unknown_instructions = $rb_minus(instructions, Opal.const_get_relative($nesting, 'INSTRUCTIONS'));
        if ($truthy(unknown_instructions['$any?']())) {
          self.$raise(Opal.const_get_relative($nesting, 'InstructionError'), "" + "unknown encode_entities command(s): " + (unknown_instructions.$inspect()))};
        if ($truthy(($truthy($a = instructions['$include?']("decimal")) ? instructions['$include?']("hexadecimal") : $a))) {
          return self.$raise(Opal.const_get_relative($nesting, 'InstructionError'), "hexadecimal and decimal encoding are mutually exclusive")
          } else {
          return nil
        };
      }, TMP_Encoder_validate_instructions_12.$$arity = 1);
      
      Opal.defn(self, '$build_basic_entity_encoder', TMP_Encoder_build_basic_entity_encoder_13 = function $$build_basic_entity_encoder(instructions) {
        var $a, self = this, method = nil;

        
        if ($truthy(($truthy($a = instructions['$include?']("basic")) ? $a : instructions['$include?']("named")))) {
          method = "encode_named"
        } else if ($truthy(instructions['$include?']("decimal"))) {
          method = "encode_decimal"
        } else if ($truthy(instructions['$include?']("hexadecimal"))) {
          method = "encode_hexadecimal"};
        return self.$instance_eval("" + "        def encode_basic(char)\n" + "          " + (method) + "(char)\n" + "        end\n");
      }, TMP_Encoder_build_basic_entity_encoder_13.$$arity = 1);
      
      Opal.defn(self, '$build_extended_entity_encoder', TMP_Encoder_build_extended_entity_encoder_15 = function $$build_extended_entity_encoder(instructions) {
        var TMP_14, self = this, operations = nil;

        
        operations = ["named", "decimal", "hexadecimal"]['$&'](instructions);
        return self.$instance_eval("" + "        def encode_extended(char)\n" + "          " + ($send(operations, 'map', [], (TMP_14 = function(encoder){var self = TMP_14.$$s || this;
if (encoder == null) encoder = nil;
        return "" + "\n" + "            encoded = encode_" + (encoder) + "(char)\n" + "            return encoded if encoded\n" + "          "}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14)).$join("\n")) + "\n" + "          char\n" + "        end\n");
      }, TMP_Encoder_build_extended_entity_encoder_15.$$arity = 1);
      
      Opal.defn(self, '$encode_named', TMP_Encoder_encode_named_16 = function $$encode_named(char$) {
        var $a, self = this, cp = nil, e = nil;

        
        cp = char$.$unpack("U")['$[]'](0);
        return ($truthy($a = (e = self.$reverse_map()['$[]'](cp))) ? "" + "&" + (e) + ";" : $a);
      }, TMP_Encoder_encode_named_16.$$arity = 1);
      
      Opal.defn(self, '$encode_decimal', TMP_Encoder_encode_decimal_17 = function $$encode_decimal(char$) {
        var self = this;

        return "" + "&#" + (char$.$unpack("U")['$[]'](0)) + ";"
      }, TMP_Encoder_encode_decimal_17.$$arity = 1);
      
      Opal.defn(self, '$encode_hexadecimal', TMP_Encoder_encode_hexadecimal_18 = function $$encode_hexadecimal(char$) {
        var self = this;

        return "" + "&#x" + (char$.$unpack("U")['$[]'](0).$to_s(16)) + ";"
      }, TMP_Encoder_encode_hexadecimal_18.$$arity = 1);
      return (Opal.defn(self, '$reverse_map', TMP_Encoder_reverse_map_20 = function $$reverse_map() {
        var $a, TMP_19, self = this, skips = nil, map = nil, uniqmap = nil;

        return (self.reverse_map = ($truthy($a = self.reverse_map) ? $a : ((skips = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HTMLEntities'), 'SKIP_DUP_ENCODINGS')['$[]'](self.flavor)), (map = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HTMLEntities'), 'MAPPINGS')['$[]'](self.flavor)), (uniqmap = (function() {if ($truthy(skips)) {
          return $send(map, 'reject', [], (TMP_19 = function(ent, hx){var self = TMP_19.$$s || this;
if (ent == null) ent = nil;if (hx == null) hx = nil;
          return skips['$include?'](ent)}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19))
          } else {
          return map
        }; return nil; })()), uniqmap.$invert())))
      }, TMP_Encoder_reverse_map_20.$$arity = 0), nil) && 'reverse_map';
    })($nesting[0], null, $nesting);
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["htmlentities/decoder"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$[]', '$entity_regexp', '$gsub', '$prepare', '$pack', '$to_i', '$private', '$encode', '$to_s', '$map', '$keys', '$length', '$==', '$-', '$min', '$max']);
  return (function($base, $super, $parent_nesting) {
    function $HTMLEntities(){};
    var self = $HTMLEntities = $klass($base, $super, 'HTMLEntities', $HTMLEntities);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Decoder(){};
      var self = $Decoder = $klass($base, $super, 'Decoder', $Decoder);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Decoder_initialize_1, TMP_Decoder_decode_3, TMP_Decoder_prepare_4, TMP_Decoder_entity_regexp_6;

      def.flavor = def.entity_regexp = def.map = nil;
      
      
      Opal.defn(self, '$initialize', TMP_Decoder_initialize_1 = function $$initialize(flavor) {
        var self = this;

        
        self.flavor = flavor;
        self.map = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HTMLEntities'), 'MAPPINGS')['$[]'](self.flavor);
        return (self.entity_regexp = self.$entity_regexp());
      }, TMP_Decoder_initialize_1.$$arity = 1);
      
      Opal.defn(self, '$decode', TMP_Decoder_decode_3 = function $$decode(source) {
        var TMP_2, self = this;

        return $send(self.$prepare(source), 'gsub', [self.entity_regexp], (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, codepoint = nil;
          if (self.map == null) self.map = nil;

        if ($truthy(($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))) ? (codepoint = self.map['$[]']((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)))) : $a))) {
            return [codepoint].$pack("U")
          } else if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {
            return [(($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i(10)].$pack("U")
          } else if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))) {
            return [(($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$to_i(16)].$pack("U")
            } else {
            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))
          }}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))
      }, TMP_Decoder_decode_3.$$arity = 1);
      self.$private();
      
      Opal.defn(self, '$prepare', TMP_Decoder_prepare_4 = function $$prepare(string) {
        var self = this;

        return string.$to_s().$encode(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Encoding'), 'UTF_8'))
      }, TMP_Decoder_prepare_4.$$arity = 1);
      return (Opal.defn(self, '$entity_regexp', TMP_Decoder_entity_regexp_6 = function $$entity_regexp() {
        var TMP_5, self = this, key_lengths = nil, entity_name_pattern = nil;

        
        key_lengths = $send(self.map.$keys(), 'map', [], (TMP_5 = function(k){var self = TMP_5.$$s || this;
if (k == null) k = nil;
        return k.$length()}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
        if (self.flavor['$==']("expanded")) {
          entity_name_pattern = "(?:b\\.)?[a-z][a-z0-9]"
          } else {
          entity_name_pattern = "[a-z][a-z0-9]"
        };
        return new RegExp("" + "&(?:(" + (entity_name_pattern) + "{" + ($rb_minus(key_lengths.$min(), 1)) + "," + ($rb_minus(key_lengths.$max(), 1)) + "})|#([0-9]{1,7})|#x([0-9a-f]{1,6}));", 'i');
      }, TMP_Decoder_entity_regexp_6.$$arity = 0), nil) && 'entity_regexp';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["htmlentities/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$join']);
  return (function($base, $super, $parent_nesting) {
    function $HTMLEntities(){};
    var self = $HTMLEntities = $klass($base, $super, 'HTMLEntities', $HTMLEntities);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var $VERSION, self = $VERSION = $module($base, 'VERSION');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      Opal.const_set($nesting[0], 'MAJOR', 4);
      Opal.const_set($nesting[0], 'MINOR', 3);
      Opal.const_set($nesting[0], 'TINY', 3);
      Opal.const_set($nesting[0], 'STRING', [Opal.const_get_relative($nesting, 'MAJOR'), Opal.const_get_relative($nesting, 'MINOR'), Opal.const_get_relative($nesting, 'TINY')].$join("."));
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["htmlentities"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new', '$downcase', '$to_s', '$include?', '$raise', '$decode', '$encode']);
  
  self.$require("htmlentities/flavors");
  self.$require("htmlentities/encoder");
  self.$require("htmlentities/decoder");
  self.$require("htmlentities/version");
  return (function($base, $super, $parent_nesting) {
    function $HTMLEntities(){};
    var self = $HTMLEntities = $klass($base, $super, 'HTMLEntities', $HTMLEntities);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HTMLEntities_initialize_1, TMP_HTMLEntities_decode_2, TMP_HTMLEntities_encode_3;

    def.flavor = def.decoder = nil;
    
    Opal.const_set($nesting[0], 'UnknownFlavor', Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'RuntimeError')));
    
    Opal.defn(self, '$initialize', TMP_HTMLEntities_initialize_1 = function $$initialize(flavor) {
      var self = this;

      if (flavor == null) {
        flavor = "xhtml1";
      }
      
      self.flavor = flavor.$to_s().$downcase();
      if ($truthy(Opal.const_get_relative($nesting, 'FLAVORS')['$include?'](self.flavor))) {
        return nil
        } else {
        return self.$raise(Opal.const_get_relative($nesting, 'UnknownFlavor'), "" + "Unknown flavor " + (flavor))
      };
    }, TMP_HTMLEntities_initialize_1.$$arity = -1);
    
    Opal.defn(self, '$decode', TMP_HTMLEntities_decode_2 = function $$decode(source) {
      var $a, self = this;

      return (self.decoder = ($truthy($a = self.decoder) ? $a : Opal.const_get_relative($nesting, 'Decoder').$new(self.flavor))).$decode(source)
    }, TMP_HTMLEntities_decode_2.$$arity = 1);
    return (Opal.defn(self, '$encode', TMP_HTMLEntities_encode_3 = function $$encode(source, $a_rest) {
      var self = this, instructions;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      instructions = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        instructions[$arg_idx - 1] = arguments[$arg_idx];
      }
      return Opal.const_get_relative($nesting, 'Encoder').$new(self.flavor, instructions).$encode(source)
    }, TMP_HTMLEntities_encode_3.$$arity = -2), nil) && 'encode';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/ent_to_uni"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new', '$decode']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  self.$require("htmlentities");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $EntToUni(){};
      var self = $EntToUni = $klass($base, $super, 'EntToUni', $EntToUni);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_EntToUni_process_1;

      return (Opal.defn(self, '$process', TMP_EntToUni_process_1 = function $$process(document, output) {
        var self = this, coder = nil;

        
        coder = Opal.const_get_relative($nesting, 'HTMLEntities').$new();
        return coder.$decode(output);
      }, TMP_EntToUni_process_1.$$arity = 2), nil) && 'process'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Postprocessor'), $nesting)
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/environment_block"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$use_dsl', '$named', '$on_context', '$parse_content_as', '$[]', '$[]=', '$-', '$==', '$=~', '$gsub', '$!', '$include?', '$capitalize', '$warn', '$cyan', '$create_block', '$lines', '$counter_increment', '$document', '$title=', '$empty?', '$assign_caption', '$delete', '$attributes']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  self.$require("asciidoctor/latex/core_ext/colored_string");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $EnvironmentBlock(){};
      var self = $EnvironmentBlock = $klass($base, $super, 'EnvironmentBlock', $EnvironmentBlock);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_EnvironmentBlock_process_1;

      
      self.$use_dsl();
      self.$named("env");
      self.$on_context("open");
      self.$parse_content_as("compound");
      return (Opal.defn(self, '$process', TMP_EnvironmentBlock_process_1 = function $$process(parent, reader, attrs) {
        var $a, self = this, original_title = nil, $writer = nil, role = nil, env_name = nil, env_title = nil, block = nil, env_ref_prefix = nil, caption_num = nil, caption = nil;

        
        original_title = (($writer = ["original_title", attrs['$[]']("title")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
        if (attrs['$[]']("role")['$=='](nil)) {
          role = "item"
          } else {
          role = attrs['$[]']("role")
        };
        if ($truthy(attrs['$[]']("role")['$=~'](/\\/))) {
          
          $writer = ["role", attrs['$[]']("role").$gsub(/\\/, "")];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(attrs['$[]']("options")['$=~'](/no_number|numbered/)['$!']())) {
          if ($truthy(["capsule", "box", "equation", "equationalign"]['$include?'](role))) {
            
            $writer = ["options", "no_number"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = ["options", "numbered"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }};
        if ($truthy(attrs['$[]']("id"))) {
          
          $writer = ["options", "numbered"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        env_name = role;
        if ($truthy(["equation", "equationalign", "chem"]['$include?'](role))) {
          
          $writer = ["title", env_name];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else if (role['$==']("code")) {
          if ($truthy(($truthy($a = attrs['$[]']("id")) ? $a : attrs['$[]']("title")))) {
            
            $writer = ["title", "Listing"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            
            $writer = ["title", ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["options", "no_number"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          }
        } else if (role['$==']("jsxgraph")) {
          
          $writer = ["title", "JSXGraph"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(($truthy($a = role['$==']("box")) ? $a : role['$==']("capsule")))) {
          
          $writer = ["title", ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = ["title", env_name.$capitalize()];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        env_title = attrs['$[]']("title");
        if (attrs['$[]']("role")['$==']("code")) {
          
          self.$warn((("" + "for rode = code, attrs = ") + (attrs)).$cyan());
          block = self.$create_block(parent, "listing", reader.$lines(), attrs);
          } else {
          block = self.$create_block(parent, "environment", reader.$lines(), attrs)
        };
        if ($truthy(attrs['$[]']("options")['$=~'](/numbered/))) {
          
          if (env_name['$==']("equationalign")) {
            env_ref_prefix = "equation"
            } else {
            env_ref_prefix = env_name
          };
          caption_num = parent.$document().$counter_increment("" + (env_ref_prefix) + "-number", block);
          
          $writer = ["caption-num", caption_num];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          caption = "" + (caption_num);
          if ($truthy(original_title)) {
            
            $writer = ["title", "" + (env_title) + " " + (caption_num) + ": " + (original_title)];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = ["title", "" + (env_title) + " " + (caption_num) + "."];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
        } else if ($truthy(original_title)) {
          if ($truthy(["box"]['$include?'](role))) {
            
            $writer = ["title", "" + (original_title)];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = ["title", "" + (env_title) + ": " + (original_title)];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }
          } else {
          
          $writer = ["title", "" + (env_title)];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if (attrs['$[]']("role")['$==']("code")) {
          caption = nil};
        if ($truthy(["equation", "equationalign", "chem"]['$include?'](role))) {
          
          $writer = ["" + (caption_num)];
          $send(block, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(attrs['$[]']("title")['$empty?']()['$!']())) {
          
          $writer = [attrs['$[]']("title")];
          $send(block, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        block.$assign_caption(caption);
        block.$attributes().$delete("title");
        return block;
      }, TMP_EnvironmentBlock_process_1.$$arity = 3), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'BlockProcessor'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $EnvironmentBlock2(){};
      var self = $EnvironmentBlock2 = $klass($base, $super, 'EnvironmentBlock2', $EnvironmentBlock2);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_EnvironmentBlock2_process_2;

      
      self.$use_dsl();
      self.$named("envv");
      self.$on_context("literal");
      self.$parse_content_as("compound");
      return (Opal.defn(self, '$process', TMP_EnvironmentBlock2_process_2 = function $$process(parent, reader, attrs) {
        var $a, self = this, original_title = nil, $writer = nil, role = nil, env_name = nil, env_title = nil, block = nil, env_ref_prefix = nil, caption_num = nil, caption = nil;

        
        original_title = (($writer = ["original_title", attrs['$[]']("title")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
        if (attrs['$[]']("role")['$=='](nil)) {
          role = "item"
          } else {
          role = attrs['$[]']("role")
        };
        if ($truthy(attrs['$[]']("role")['$=~'](/\\/))) {
          
          $writer = ["role", attrs['$[]']("role").$gsub(/\\/, "")];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(attrs['$[]']("options")['$=~'](/no_number|numbered/)['$!']())) {
          if ($truthy(["capsule", "box", "equation", "equationalign"]['$include?'](role))) {
            
            $writer = ["options", "no_number"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = ["options", "numbered"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }};
        if ($truthy(attrs['$[]']("id"))) {
          
          $writer = ["options", "numbered"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        env_name = role;
        if ($truthy(["equation", "equationalign", "chem"]['$include?'](role))) {
          
          $writer = ["title", env_name];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else if (role['$==']("code")) {
          if ($truthy(($truthy($a = attrs['$[]']("id")) ? $a : attrs['$[]']("title")))) {
            
            $writer = ["title", "Listing"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            
            $writer = ["title", ""];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["options", "no_number"];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          }
        } else if (role['$==']("jsxgraph")) {
          
          $writer = ["title", "JSXGraph"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(($truthy($a = role['$==']("box")) ? $a : role['$==']("capsule")))) {
          
          $writer = ["title", ""];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = ["title", env_name.$capitalize()];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        env_title = attrs['$[]']("title");
        if (attrs['$[]']("role")['$==']("code")) {
          
          self.$warn((("" + "for rode = code, attrs = ") + (attrs)).$cyan());
          block = self.$create_block(parent, "listing", reader.$lines(), attrs);
          } else {
          block = self.$create_block(parent, "environment_literal", reader.$lines(), attrs, $hash2(["subs"], {"subs": nil}))
        };
        if ($truthy(attrs['$[]']("options")['$=~'](/numbered/))) {
          
          if (env_name['$==']("equationalign")) {
            env_ref_prefix = "equation"
            } else {
            env_ref_prefix = env_name
          };
          caption_num = parent.$document().$counter_increment("" + (env_ref_prefix) + "-number", block);
          
          $writer = ["caption-num", caption_num];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          caption = "" + (caption_num);
          if ($truthy(original_title)) {
            
            $writer = ["title", "" + (env_title) + " " + (caption_num) + ": " + (original_title)];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = ["title", "" + (env_title) + " " + (caption_num) + "."];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
        } else if ($truthy(original_title)) {
          if ($truthy(["box"]['$include?'](role))) {
            
            $writer = ["title", "" + (original_title)];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = ["title", "" + (env_title) + ": " + (original_title)];
            $send(attrs, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }
          } else {
          
          $writer = ["title", "" + (env_title)];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if (attrs['$[]']("role")['$==']("code")) {
          caption = nil};
        if ($truthy(["equation", "equationalign", "chem"]['$include?'](role))) {
          
          $writer = ["" + (caption_num)];
          $send(block, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(attrs['$[]']("title")['$empty?']()['$!']())) {
          
          $writer = [attrs['$[]']("title")];
          $send(block, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        block.$assign_caption(caption);
        block.$attributes().$delete("title");
        return block;
      }, TMP_EnvironmentBlock2_process_2.$$arity = 3), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'BlockProcessor'), $nesting);
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/core_ext/utility"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$reverse', '$macro', '$gsub', '$==', '$[]', '$+']);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_macro_1, TMP_String_apply_macros_3, TMP_String_tex_normalize_4;

    
    
    Opal.defn(self, '$macro', TMP_String_macro_1 = function $$macro(macro) {
      var self = this;

      return "" + "\\" + (macro) + "{" + (self) + "}"
    }, TMP_String_macro_1.$$arity = 1);
    
    Opal.defn(self, '$apply_macros', TMP_String_apply_macros_3 = function $$apply_macros(macro_list) {
      var TMP_2, self = this, val = nil;

      
      val = self;
      $send(macro_list.$reverse(), 'each', [], (TMP_2 = function(macro_name){var self = TMP_2.$$s || this;
if (macro_name == null) macro_name = nil;
      return (val = val.$macro(macro_name))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
      return val;
    }, TMP_String_apply_macros_3.$$arity = 1);
    return (Opal.defn(self, '$tex_normalize', TMP_String_tex_normalize_4 = function $$tex_normalize() {
      var self = this, str = nil;

      
      str = self.$gsub("_", "-");
      if (str['$[]'](0)['$==']("-")) {
        return $rb_plus("x", str)
        } else {
        return str
      };
    }, TMP_String_tex_normalize_4.$$arity = 0), nil) && 'tex_normalize';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/node_processors"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$join', '$map', '$braces', '$each', '$reverse', '$macro', '$pop', '$begin', '$end', '$tex_normalize', '$include', '$embedded?', '$==', '$[]', '$attributes', '$document', '$<<', '$exist?', '$read', '$open', '$doctype', '$doctitle', '$author', '$revdate', '$process_environments', '$content', '$uniq', '$capitalize', '$write', '$level', '$numbered', '$gsub', '$downcase', '$title', '$hypertarget', '$sectname', '$+', '$node_name', '$===', '$dlist_process', '$ulist_process', '$olist_process', '$items', '$text', '$text?', '$blocks?', '$blockname', '$paragraph_process', '$stem_process', '$admonition_process', '$page_break_process', '$literal_process', '$pass_process', '$quote_process', '$open_process', '$environment_process', '$environment_literal_process', '$click_process', '$listing_process', '$example_process', '$floating_title_process', '$image_process', '$preamble_process', '$sidebar_process', '$verse_process', '$toc_process', '$title?', '$region', '$make_substitutions', '$role', '$include?', '$environment_type', '$stem_substitutions', '$style', '$id', '$env', '$attr?', '$attr', '$label', '$label_line', '$strip', '$options', '$env_title', '$rstrip', '$!', '$handle_listing', '$handle_eqalign', '$handle_equation', '$handle_chem', '$handle_box', '$handle_texmacro', '$handle_include_latex', '$handle_plain', '$puts', '$nil?', '$warn', '$magenta', '$cyan', '$yellow', '$green', '$red', '$split', '$/', '$to_f', '$nil_or_empty?', '$match', '$references', '$parent', '$inline_quoted_process', '$inline_anchor_process', '$inline_break_process', '$inline_footnote_process', '$inline_callout_process', '$inline_indexterm_process', '$type', '$convert', '$target', '$count', '$body', '$rows', '$columns', '$*', '$each_with_index', '$scan', '$make_substitutions1', '$match_inline', '$>', '$make_substitutions_in_matches', '$match_block', '$tr']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/latex/core_ext/colored_string");
  self.$require("asciidoctor/latex/core_ext/utility");
  (function($base, $parent_nesting) {
    var $TexUtilities, self = $TexUtilities = $module($base, 'TexUtilities');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TexUtilities_braces_2, TMP_TexUtilities_macro_3, TMP_TexUtilities_macro_opt_4, TMP_TexUtilities_region_5, TMP_TexUtilities_apply_macros_7, TMP_TexUtilities_begin_8, TMP_TexUtilities_end_9, TMP_TexUtilities_env_10, TMP_TexUtilities_env_opt_11, TMP_TexUtilities_hypertarget_12;

    
    Opal.defs(self, '$braces', TMP_TexUtilities_braces_2 = function $$braces($a_rest) {
      var TMP_1, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(args, 'map', [], (TMP_1 = function(arg){var self = TMP_1.$$s || this;
if (arg == null) arg = nil;
      return "" + "{" + (arg) + "}"}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1)).$join("")
    }, TMP_TexUtilities_braces_2.$$arity = -1);
    Opal.defs(self, '$macro', TMP_TexUtilities_macro_3 = function $$macro(name, $a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      return "" + "\\" + (name) + ($send(self, 'braces', Opal.to_a(args)))
    }, TMP_TexUtilities_macro_3.$$arity = -2);
    Opal.defs(self, '$macro_opt', TMP_TexUtilities_macro_opt_4 = function $$macro_opt(name, opt, $a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      return "" + "\\" + (name) + "[" + (opt) + "]" + ($send(self, 'braces', Opal.to_a(args)))
    }, TMP_TexUtilities_macro_opt_4.$$arity = -3);
    Opal.defs(self, '$region', TMP_TexUtilities_region_5 = function $$region(name, $a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      return "" + "{\\" + (name) + " " + (args.$join(" ")) + "}"
    }, TMP_TexUtilities_region_5.$$arity = -2);
    Opal.defs(self, '$apply_macros', TMP_TexUtilities_apply_macros_7 = function $$apply_macros(macro_list, arg) {
      var TMP_6, self = this, val = nil;

      
      val = arg;
      $send(macro_list.$reverse(), 'each', [], (TMP_6 = function(macro_name){var self = TMP_6.$$s || this;
if (macro_name == null) macro_name = nil;
      return (val = self.$macro(macro_name, val))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
      return val;
    }, TMP_TexUtilities_apply_macros_7.$$arity = 2);
    Opal.defs(self, '$begin', TMP_TexUtilities_begin_8 = function $$begin(arg) {
      var self = this;

      return self.$macro("begin", arg)
    }, TMP_TexUtilities_begin_8.$$arity = 1);
    Opal.defs(self, '$end', TMP_TexUtilities_end_9 = function $$end(arg) {
      var self = this;

      return self.$macro("end", arg)
    }, TMP_TexUtilities_end_9.$$arity = 1);
    Opal.defs(self, '$env', TMP_TexUtilities_env_10 = function $$env(env, $a_rest) {
      var self = this, args, body = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      body = args.$pop();
      return "" + (self.$begin(env)) + ($send(self, 'braces', Opal.to_a(args))) + "\n" + (body) + "\n" + (self.$end(env)) + "\n";
    }, TMP_TexUtilities_env_10.$$arity = -2);
    Opal.defs(self, '$env_opt', TMP_TexUtilities_env_opt_11 = function $$env_opt(env, opt, $a_rest) {
      var self = this, args, body = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      
      body = args.$pop();
      return "" + (self.$begin(env)) + "[" + (opt) + "]" + ($send(self, 'braces', Opal.to_a(args))) + "\n" + (body) + "\n" + (self.$end(env)) + "\n";
    }, TMP_TexUtilities_env_opt_11.$$arity = -3);
    Opal.defs(self, '$hypertarget', TMP_TexUtilities_hypertarget_12 = function $$hypertarget(name, text) {
      var self = this;

      
      if ($truthy(text)) {};
      if ($truthy(name)) {
        return "" + "\\hypertarget{" + (name.$tex_normalize()) + "}{" + (text) + "}"
        } else {
        return "" + "\\hypertarget{'NO-ID'}{" + (text) + "}"
      };
    }, TMP_TexUtilities_hypertarget_12.$$arity = 2);
  })($nesting[0], $nesting);
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    self.$include(Opal.const_get_relative($nesting, 'TexUtilities'));
    $gvars.tex = Opal.const_get_relative($nesting, 'TexUtilities');
    (function($base, $super, $parent_nesting) {
      function $Document(){};
      var self = $Document = $klass($base, $super, 'Document', $Document);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Document_tex_process_17;

      return (Opal.defn(self, '$tex_process', TMP_Document_tex_process_17 = function $$tex_process() {
        var $a, TMP_13, TMP_14, TMP_15, TMP_16, self = this, doc = nil, preamble = nil, macros = nil, processed_content = nil, definitions = nil;
        if ($gvars.latex_environment_names == null) $gvars.latex_environment_names = nil;

        
        doc = "";
        if ($truthy(($truthy($a = self['$embedded?']()) ? $a : self.$document().$attributes()['$[]']("header")['$==']("no")))) {
          } else {
          
          doc['$<<']("%% Preamble %%\n");
          if ($truthy(Opal.const_get_relative($nesting, 'File')['$exist?']("preamble.tex"))) {
            
            preamble = Opal.const_get_relative($nesting, 'IO').$read("preamble.tex");
            doc['$<<'](preamble)['$<<']("\n ");
            } else {
            doc['$<<']($send(Opal.const_get_relative($nesting, 'File'), 'open', [Opal.const_get_relative($nesting, 'File').$join(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'LaTeX'), 'DATA_DIR'), "" + "preamble_" + (self.$document().$doctype()) + ".tex"), "r"], (TMP_13 = function(f){var self = TMP_13.$$s || this;
if (f == null) f = nil;
            return f.$read()}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13)))
          };
          doc['$<<']("%% Asciidoc TeX Macros %%\n");
          doc['$<<']($send(Opal.const_get_relative($nesting, 'File'), 'open', [Opal.const_get_relative($nesting, 'File').$join(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'LaTeX'), 'DATA_DIR'), "asciidoc_tex_macros.tex"), "r"], (TMP_14 = function(f){var self = TMP_14.$$s || this;
if (f == null) f = nil;
          return f.$read()}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14)));
          doc['$<<']("%% User Macros %%\n");
          if ($truthy(Opal.const_get_relative($nesting, 'File')['$exist?']("macros.tex"))) {
            
            macros = Opal.const_get_relative($nesting, 'IO').$read("macros.tex");
            doc['$<<'](macros);};
          if ($truthy(Opal.const_get_relative($nesting, 'File')['$exist?']("myEnvironments.tex"))) {
            doc['$<<']("\\input myEnvironments.tex\n")};
          doc['$<<']("%% Front Matter %%");
          doc['$<<']("" + "\n\n\\title{" + (self.$doctitle()) + "}\n");
          doc['$<<']("" + "\\author{" + (self.$author()) + "}\n");
          doc['$<<']("" + "\\date{" + (self.$revdate()) + "}\n\n\n");
          doc['$<<']("%% Begin Document %%");
          doc['$<<']("\n\n\\begin{document}\n");
          doc['$<<']("\\maketitle\n");
          if (self.$attributes()['$[]']("toc-placement")['$==']("auto")) {
            doc['$<<']("\\tableofcontents\n")};
        };
        processed_content = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'LaTeX'), 'TeXBlock').$process_environments(self.$content());
        doc['$<<'](processed_content);
        if ($truthy(self['$embedded?']())) {
          } else {
          
          definitions = "";
          $send($gvars.latex_environment_names.$uniq(), 'each', [], (TMP_15 = function(name){var self = TMP_15.$$s || this;
if (name == null) name = nil;
          return definitions['$<<']("" + "\\newtheorem{" + (name) + "}{" + (name.$capitalize()) + "}")['$<<']("\n")}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15));
          $send(Opal.const_get_relative($nesting, 'File'), 'open', ["newEnvironments.tex", "w"], (TMP_16 = function(f){var self = TMP_16.$$s || this;
if (f == null) f = nil;
          return f.$write(definitions)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
          if (self.$document().$attributes()['$[]']("header")['$==']("no")) {
            } else {
            doc['$<<']("\n\\end{document}\n")
          };
        };
        return doc['$<<']("\n");
      }, TMP_Document_tex_process_17.$$arity = 0), nil) && 'tex_process'
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Section(){};
      var self = $Section = $klass($base, $super, 'Section', $Section);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Section_tex_process_18;

      return (Opal.defn(self, '$tex_process', TMP_Section_tex_process_18 = function $$tex_process() {
        var self = this, doctype = nil, tags = nil, tagname = nil, tagsuffix = nil, id = nil, heading = nil, value = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        doctype = self.$document().$doctype();
        tags = $hash2(["article", "book"], {"article": ["part", "section", "subsection", "subsubsection", "paragraph"], "book": ["part", "chapter", "section", "subsection", "subsubsection", "paragraph"]});
        tagname = tags['$[]'](doctype)['$[]'](self.$level());
        tagsuffix = (function() {if ($truthy(self.$numbered())) {
          return ""
          } else {
          return "*"
        }; return nil; })();
        id = "" + "_" + (self.$title().$downcase().$gsub(" ", "_"));
        heading = "" + "\\" + (tagname) + (tagsuffix) + "{" + (self.$title()) + "}";
        heading = $gvars.tex.$hypertarget(id, heading);
        if (self.$sectname()['$==']("index")) {
          
          value = $gvars.tex.$macro("renewcommand", "\\indexname", self.$title());
          value = $rb_plus(value, $gvars.tex.$hypertarget(id, "\\printindex"));
          } else {
          value = "" + (heading) + "\n" + (self.$content())
        };
        return value;
      }, TMP_Section_tex_process_18.$$arity = 0), nil) && 'tex_process'
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $List(){};
      var self = $List = $klass($base, $super, 'List', $List);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_List_tex_process_19, TMP_List_dlist_process_22, TMP_List_ulist_process_24, TMP_List_olist_process_26;

      
      
      Opal.defn(self, '$tex_process', TMP_List_tex_process_19 = function $$tex_process() {
        var self = this, $case = nil;

        return (function() {$case = self.$node_name();
        if ("dlist"['$===']($case)) {return self.$dlist_process()}
        else if ("ulist"['$===']($case)) {return self.$ulist_process()}
        else if ("olist"['$===']($case)) {return self.$olist_process()}
        else { return nil }})()
      }, TMP_List_tex_process_19.$$arity = 0);
      
      Opal.defn(self, '$dlist_process', TMP_List_dlist_process_22 = function $$dlist_process() {
        var TMP_20, self = this, list = nil;

        
        list = "\\begin{description}\n\n";
        $send(self.$items(), 'each', [], (TMP_20 = function(terms, dd){var self = TMP_20.$$s || this, TMP_21;
if (terms == null) terms = nil;if (dd == null) dd = nil;
        
          list['$<<']("\\item[");
          $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_21 = function(dt){var self = TMP_21.$$s || this;
if (dt == null) dt = nil;
          return list['$<<'](dt.$text())}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21));
          list['$<<']("]");
          if ($truthy(dd)) {
            
            if ($truthy(dd['$text?']())) {
              list['$<<'](dd.$text())['$<<']("\n\n")};
            if ($truthy(dd['$blocks?']())) {
              return list['$<<'](dd.$content())['$<<']("\n")
              } else {
              return nil
            };
            } else {
            return nil
          };}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20));
        return list['$<<']("\\end{description}\n\n");
      }, TMP_List_dlist_process_22.$$arity = 0);
      
      Opal.defn(self, '$ulist_process', TMP_List_ulist_process_24 = function $$ulist_process() {
        var TMP_23, self = this, list = nil;

        
        list = "\\begin{itemize}\n\n";
        $send(self.$content(), 'each', [], (TMP_23 = function(item){var self = TMP_23.$$s || this;
if (item == null) item = nil;
        
          list['$<<']("" + "\\item " + (item.$text()) + "\n\n");
          return list['$<<'](item.$content());}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));
        return list['$<<']("\\end{itemize}\n\n");
      }, TMP_List_ulist_process_24.$$arity = 0);
      return (Opal.defn(self, '$olist_process', TMP_List_olist_process_26 = function $$olist_process() {
        var TMP_25, self = this, list = nil;

        
        list = "\\begin{enumerate}\n\n";
        $send(self.$content(), 'each', [], (TMP_25 = function(item){var self = TMP_25.$$s || this;
if (item == null) item = nil;
        
          list['$<<'](item.$text().$macro("item"))['$<<']("\n\n");
          return list['$<<'](item.$content());}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25));
        return list['$<<']("\\end{enumerate}\n\n");
      }, TMP_List_olist_process_26.$$arity = 0), nil) && 'olist_process';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Block(){};
      var self = $Block = $klass($base, $super, 'Block', $Block);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Block_tex_process_27, TMP_Block_paragraph_process_28, TMP_Block_stem_process_29, TMP_Block_admonition_process_30, TMP_Block_page_break_process_31, TMP_Block_literal_process_32, TMP_Block_pass_process_33, TMP_Block_quote_process_34, TMP_Block_label_35, TMP_Block_options_36, TMP_Block_env_title_37, TMP_Block_label_line_38, TMP_Block_handle_listing_39, TMP_Block_handle_eqalign_40, TMP_Block_handle_equation_41, TMP_Block_handle_chem_42, TMP_Block_handle_plain_43, TMP_Block_environment_process_44, TMP_Block_environment_literal_process_45, TMP_Block_handle_texmacro_46, TMP_Block_handle_include_latex_47, TMP_Block_handle_box_48, TMP_Block_click_process_49, TMP_Block_toc_process_50, TMP_Block_report_51, TMP_Block_open_process_52, TMP_Block_listing_process_53, TMP_Block_example_process_54, TMP_Block_floating_title_process_55, TMP_Block_image_process_56, TMP_Block_preamble_process_57, TMP_Block_sidebar_process_58, TMP_Block_verse_process_59;

      
      Opal.const_set($nesting[0], 'STANDARD_ENVIRONMENT_NAMES', ["equation"]);
      
      Opal.defn(self, '$tex_process', TMP_Block_tex_process_27 = function $$tex_process() {
        var self = this, $case = nil;

        return (function() {$case = self.$blockname();
        if ("paragraph"['$===']($case)) {return self.$paragraph_process()}
        else if ("stem"['$===']($case)) {return self.$stem_process()}
        else if ("admonition"['$===']($case)) {return self.$admonition_process()}
        else if ("page_break"['$===']($case)) {return self.$page_break_process()}
        else if ("literal"['$===']($case)) {return self.$literal_process()}
        else if ("pass"['$===']($case)) {return self.$pass_process()}
        else if ("quote"['$===']($case)) {return self.$quote_process()}
        else if ("open"['$===']($case)) {return self.$open_process()}
        else if ("environment"['$===']($case)) {return self.$environment_process()}
        else if ("environment_literal"['$===']($case)) {return self.$environment_literal_process()}
        else if ("click"['$===']($case)) {return self.$click_process()}
        else if ("listing"['$===']($case)) {return self.$listing_process()}
        else if ("example"['$===']($case)) {return self.$example_process()}
        else if ("floating_title"['$===']($case)) {return self.$floating_title_process()}
        else if ("image"['$===']($case)) {return self.$image_process()}
        else if ("preamble"['$===']($case)) {return self.$preamble_process()}
        else if ("sidebar"['$===']($case)) {return self.$sidebar_process()}
        else if ("verse"['$===']($case)) {return self.$verse_process()}
        else if ("toc"['$===']($case)) {return self.$toc_process()}
        else {return ""}})()
      }, TMP_Block_tex_process_27.$$arity = 0);
      
      Opal.defn(self, '$paragraph_process', TMP_Block_paragraph_process_28 = function $$paragraph_process() {
        var $a, self = this, options = nil, out = nil, title = nil, content = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        options = self.$attributes()['$[]']("options");
        out = "";
        if ($truthy(self['$title?']())) {
          
          title = "" + (self.$title()) + ".";
          out['$<<']($rb_plus($gvars.tex.$region("bf", title), " "));};
        content = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'LaTeX'), 'TeXPostProcess').$make_substitutions(self.$content());
        if (self.$role()['$==']("red")) {
          content = content.$macro("rolered")
        } else if (self.$role()['$==']("blue")) {
          content = content.$macro("roleblue")};
        if ($truthy(($truthy($a = options) ? options['$include?']("hardbreaks") : $a))) {};
        return out['$<<'](content)['$<<']("\n\n");
      }, TMP_Block_paragraph_process_28.$$arity = 0);
      
      Opal.defn(self, '$stem_process', TMP_Block_stem_process_29 = function $$stem_process() {
        var self = this, environment = nil;

        
        environment = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'LaTeX'), 'TeXBlock').$environment_type(self.$content());
        if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'LaTeX'), 'TeXBlock'), 'INNER_TYPES')['$include?'](environment))) {
          return "" + "\\[\n" + (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'LaTeX'), 'TeXPostProcess').$stem_substitutions(self.$content())) + "\n\\]\n"
          } else {
          return self.$content()
        };
      }, TMP_Block_stem_process_29.$$arity = 0);
      
      Opal.defn(self, '$admonition_process', TMP_Block_admonition_process_30 = function $$admonition_process() {
        var self = this;
        if ($gvars.tex == null) $gvars.tex = nil;

        return $gvars.tex.$macro("admonition", self.$style(), self.$content())
      }, TMP_Block_admonition_process_30.$$arity = 0);
      
      Opal.defn(self, '$page_break_process', TMP_Block_page_break_process_31 = function $$page_break_process() {
        var self = this;

        return "\n\\vfill\\eject\n"
      }, TMP_Block_page_break_process_31.$$arity = 0);
      
      Opal.defn(self, '$literal_process', TMP_Block_literal_process_32 = function $$literal_process() {
        var $a, self = this, heading = nil, output = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        heading = "";
        if ($truthy(($truthy($a = self.$id()) ? self.$title() : $a))) {
          heading = $gvars.tex.$hypertarget(self.$id(), self.$title())
        } else if ($truthy(self.$title())) {
          heading = self.$title()};
        if (heading['$==']("")) {
          return $gvars.tex.$env("verbatim", self.$content())
          } else {
          
          output = $gvars.tex.$region("bf", heading);
          output['$<<']("\\vspace{-1\\baselineskip}\n");
          return output['$<<']($gvars.tex.$env("verbatim", self.$content()));
        };
      }, TMP_Block_literal_process_32.$$arity = 0);
      
      Opal.defn(self, '$pass_process', TMP_Block_pass_process_33 = function $$pass_process() {
        var self = this;

        return self.$content()
      }, TMP_Block_pass_process_33.$$arity = 0);
      
      Opal.defn(self, '$quote_process', TMP_Block_quote_process_34 = function $$quote_process() {
        var self = this, attribution = nil, citetitle = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        if ($truthy(self['$attr?']("attribution"))) {
          
          attribution = self.$attr("attribution");
          citetitle = (function() {if ($truthy(self['$attr?']("citetitle"))) {
            
            return self.$attr("citetitle");
            } else {
            return nil
          }; return nil; })();
          citetitle = (function() {if ($truthy(citetitle)) {
            return $rb_plus($gvars.tex.$region("bf", citetitle), " \\\\")
            } else {
            return ""
          }; return nil; })();
          return $gvars.tex.$env("aquote", attribution, citetitle, self.$content());
        } else if ($truthy(self.$title())) {
          return $gvars.tex.$env("tquote", self.$title(), self.$content())
          } else {
          return $gvars.tex.$env("quotation", self.$content())
        }
      }, TMP_Block_quote_process_34.$$arity = 0);
      
      Opal.defn(self, '$label', TMP_Block_label_35 = function $$label() {
        var self = this, label = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        if ($truthy(self.$id())) {
          label = $gvars.tex.$macro("label", self.$id())
          } else {
          label = ""
        };
        return label;
      }, TMP_Block_label_35.$$arity = 0);
      
      Opal.defn(self, '$options', TMP_Block_options_36 = function $$options() {
        var self = this;

        return self.$attributes()['$[]']("options")
      }, TMP_Block_options_36.$$arity = 0);
      
      Opal.defn(self, '$env_title', TMP_Block_env_title_37 = function $$env_title() {
        var self = this;

        if ($truthy(self.$attributes()['$[]']("original_title"))) {
          return "" + "{\\rm (" + (self.$attributes()['$[]']("original_title")) + ") }"
          } else {
          return ""
        }
      }, TMP_Block_env_title_37.$$arity = 0);
      
      Opal.defn(self, '$label_line', TMP_Block_label_line_38 = function $$label_line() {
        var self = this;

        if (self.$label()['$==']("")) {
          return ""
          } else {
          return $rb_plus(self.$label(), "\n")
        }
      }, TMP_Block_label_line_38.$$arity = 0);
      
      Opal.defn(self, '$handle_listing', TMP_Block_handle_listing_39 = function $$handle_listing() {
        var self = this, content = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        content = $gvars.tex.$env("verbatim", self.$content());
        return $gvars.tex.$env(self.$env(), self.$label(), content);
      }, TMP_Block_handle_listing_39.$$arity = 0);
      
      Opal.defn(self, '$handle_eqalign', TMP_Block_handle_eqalign_40 = function $$handle_eqalign() {
        var self = this, content = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        content = $gvars.tex.$env("aligned", "" + (self.$label_line()) + (self.$content().$strip()));
        if ($truthy(self.$options()['$include?']("numbered"))) {
          return $gvars.tex.$env("align", content)
          } else {
          return $gvars.tex.$env("align*", content)
        };
      }, TMP_Block_handle_eqalign_40.$$arity = 0);
      
      Opal.defn(self, '$handle_equation', TMP_Block_handle_equation_41 = function $$handle_equation() {
        var self = this, content = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        if ($truthy(self.$options()['$include?']("numbered"))) {
          
          content = $gvars.tex.$hypertarget(self.$id(), self.$content().$strip());
          return $gvars.tex.$env("equation", "" + (self.$label_line()) + (content));
          } else {
          return $gvars.tex.$env("equation*", "" + (self.$label_line()) + (self.$content().$strip()))
        }
      }, TMP_Block_handle_equation_41.$$arity = 0);
      
      Opal.defn(self, '$handle_chem', TMP_Block_handle_chem_42 = function $$handle_chem() {
        var self = this;
        if ($gvars.tex == null) $gvars.tex = nil;

        return $gvars.tex.$env("equation", "" + (self.$label_line()) + "\\ce{" + (self.$content().$strip()) + "}\n")
      }, TMP_Block_handle_chem_42.$$arity = 0);
      
      Opal.defn(self, '$handle_plain', TMP_Block_handle_plain_43 = function $$handle_plain(env) {
        var $a, self = this, _title = nil, content = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        if ($truthy(($truthy($a = self.$id()) ? self.$title() : $a))) {
          _title = $gvars.tex.$hypertarget(self.$id(), self.$env_title())
          } else {
          _title = self.$env_title()
        };
        if ($truthy(self.$attributes()['$[]']("plain-option"))) {
          content = $gvars.tex.$region("rm", self.$content().$rstrip())
          } else {
          content = self.$content().$rstrip()
        };
        return $gvars.tex.$env(env, "" + (_title) + (self.$label_line()) + (content) + "\n");
      }, TMP_Block_handle_plain_43.$$arity = 1);
      
      Opal.defn(self, '$environment_process', TMP_Block_environment_process_44 = function $$environment_process() {
        var $a, self = this, env = nil, $case = nil;
        if ($gvars.latex_environment_names == null) $gvars.latex_environment_names = nil;

        
        env = self.$attributes()['$[]']("role");
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'STANDARD_ENVIRONMENT_NAMES')['$include?'](env)['$!']()) ? $gvars.latex_environment_names['$include?'](env)['$!']() : $a))) {
          $gvars.latex_environment_names['$<<'](env)};
        return (function() {$case = env;
        if ("listing"['$===']($case)) {return self.$handle_listing()}
        else if ("equationalign"['$===']($case)) {return self.$handle_eqalign()}
        else if ("equation"['$===']($case)) {return self.$handle_equation()}
        else if ("chem"['$===']($case)) {return self.$handle_chem()}
        else if ("box"['$===']($case)) {return self.$handle_box()}
        else if ("texmacro"['$===']($case)) {return self.$handle_texmacro()}
        else if ("include_latex"['$===']($case)) {return self.$handle_include_latex()}
        else {return self.$handle_plain(env)}})();
      }, TMP_Block_environment_process_44.$$arity = 0);
      
      Opal.defn(self, '$environment_literal_process', TMP_Block_environment_literal_process_45 = function $$environment_literal_process() {
        var $a, self = this, env = nil, $case = nil;
        if ($gvars.latex_environment_names == null) $gvars.latex_environment_names = nil;

        
        env = self.$attributes()['$[]']("role");
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'STANDARD_ENVIRONMENT_NAMES')['$include?'](env)['$!']()) ? $gvars.latex_environment_names['$include?'](env)['$!']() : $a))) {
          $gvars.latex_environment_names['$<<'](env)};
        return (function() {$case = env;
        if ("equationalign"['$===']($case)) {return self.$handle_eqalign()}
        else if ("equation"['$===']($case)) {return self.$handle_equation()}
        else {return self.$handle_plain(env)}})();
      }, TMP_Block_environment_literal_process_45.$$arity = 0);
      
      Opal.defn(self, '$handle_texmacro', TMP_Block_handle_texmacro_46 = function $$handle_texmacro() {
        var self = this;

        return "" + "%% User tex macros:\n" + (self.$content()) + "\n%% end of user macros\n"
      }, TMP_Block_handle_texmacro_46.$$arity = 0);
      
      Opal.defn(self, '$handle_include_latex', TMP_Block_handle_include_latex_47 = function $$handle_include_latex() {
        var self = this;

        
        self.$puts("Hi Boss, it's me again!");
        self.$puts(self.$content());
        self.$puts("---------------");
        return self.$content();
      }, TMP_Block_handle_include_latex_47.$$arity = 0);
      
      Opal.defn(self, '$handle_box', TMP_Block_handle_box_48 = function $$handle_box() {
        var $a, self = this;
        if ($gvars.tex == null) $gvars.tex = nil;

        if ($truthy(($truthy($a = self.$title()['$nil?']()) ? $a : self.$title()['$==']("")))) {
          return $gvars.tex.$env("asciidocbox", self.$content())
          } else {
          return $gvars.tex.$env("titledasciidocbox", self.$title(), self.$content())
        }
      }, TMP_Block_handle_box_48.$$arity = 0);
      
      Opal.defn(self, '$click_process', TMP_Block_click_process_49 = function $$click_process() {
        var $a, self = this, attr = nil, click = nil, title = nil, content = nil, env = nil, label = nil;
        if ($gvars.latex_environment_names == null) $gvars.latex_environment_names = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        attr = self.$attributes();
        click = self.$attributes()['$[]']("role");
        if ($truthy(Opal.const_get_relative($nesting, 'STANDARD_ENVIRONMENT_NAMES')['$include?'](click)['$!']())) {
          $gvars.latex_environment_names['$<<'](click)};
        if ($truthy(self.$title())) {
          title = self.$title().$downcase()};
        if ($truthy(attr['$[]']("plain-option"))) {
          content = $gvars.tex.$region("rm", self.$content())
          } else {
          content = $gvars.tex.$region("it", self.$content())
        };
        if ($truthy(attr['$[]']("original_title"))) {
          if ($truthy(($truthy($a = attr['$[]']("options")) ? attr['$[]']("options")['$include?']("numbered") : $a))) {
            env = attr['$[]']("original_title").$downcase()
            } else {
            env = $rb_plus(attr['$[]']("original_title").$downcase(), "*")
          }
          } else {
          env = "click"
        };
        if (self.$id()['$=='](nil)) {
          return $gvars.tex.$env(env, content)
          } else {
          
          label = $gvars.tex.$macro("label", self.$id());
          return $gvars.tex.$env(env, "" + (label) + "\n" + (content));
        };
      }, TMP_Block_click_process_49.$$arity = 0);
      
      Opal.defn(self, '$toc_process', TMP_Block_toc_process_50 = function $$toc_process() {
        var self = this;
        if ($gvars.tex == null) $gvars.tex = nil;

        if (self.$document().$attributes()['$[]']("toc-placement")['$==']("macro")) {
          return $gvars.tex.$macro("tableofcontents")
          } else {
          return nil
        }
      }, TMP_Block_toc_process_50.$$arity = 0);
      
      Opal.defn(self, '$report', TMP_Block_report_51 = function $$report() {
        var self = this;

        
        self.$warn(["OPEN BLOCK:".$magenta(), "" + "id: " + (self.$id())].$join(" "));
        self.$warn(["Node:".$magenta(), ("" + (self.$blockname())).$cyan()].$join(" "));
        self.$warn(["Attributes:".$magenta(), ("" + (self.$attributes())).$cyan()].$join(" "));
        if ($truthy(self.$title())) {
          self.$warn(["Title: ".$magenta(), self.$title().$cyan(), "style:", self.$style()].$join(" "))};
        self.$warn(["Content:".$magenta(), ("" + (self.$content())).$yellow()].$join(" "));
        return self.$warn(["Style:".$green(), ("" + (self.$style())).$red()].$join(" "));
      }, TMP_Block_report_51.$$arity = 0);
      
      Opal.defn(self, '$open_process', TMP_Block_open_process_52 = function $$open_process() {
        var self = this, attr = nil, title = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        attr = self.$attributes();
        title = (function() {if ($truthy(self['$title?']())) {
          return self.$title()
          } else {
          return "Dummy"
        }; return nil; })();
        title = title.$gsub(/\{.*?\}/, "");
        title = title.$strip();
        if (attr['$[]']("role")['$==']("text-center")) {
          return $gvars.tex.$env("center", self.$content())
          } else {
          return self.$content()
        };
      }, TMP_Block_open_process_52.$$arity = 0);
      
      Opal.defn(self, '$listing_process', TMP_Block_listing_process_53 = function $$listing_process() {
        var self = this;

        return "" + "\\begin{verbatim}\n" + (self.$content()) + "\n\\end{verbatim}\n"
      }, TMP_Block_listing_process_53.$$arity = 0);
      
      Opal.defn(self, '$example_process', TMP_Block_example_process_54 = function $$example_process() {
        var self = this, id = nil, heading = nil, content = nil, hypertarget = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        id = self.$attributes()['$[]']("id");
        if ($truthy(self.$title())) {
          
          heading = $gvars.tex.$region("bf", self.$title());
          content = "" + "-- " + (heading) + ".\n" + (self.$content());
          } else {
          content = self.$content()
        };
        if ($truthy(id)) {
          
          hypertarget = $gvars.tex.$hypertarget(id, self.$content().$split("\n")['$[]'](0));
          if ($truthy(id)) {
            content = "" + (hypertarget) + "\n" + (content)};};
        return $gvars.tex.$env("example", content);
      }, TMP_Block_example_process_54.$$arity = 0);
      
      Opal.defn(self, '$floating_title_process', TMP_Block_floating_title_process_55 = function $$floating_title_process() {
        var self = this, doctype = nil, tags = nil, tagname = nil;

        
        doctype = self.$document().$doctype();
        tags = $hash2(["article", "book"], {"article": ["part", "section", "subsection", "subsubsection", "paragraph"], "book": ["part", "chapter", "section", "subsection", "subsubsection", "paragraph"]});
        tagname = tags['$[]'](doctype)['$[]'](self.$level());
        return "" + "\\" + (tagname) + "*{" + (self.$title()) + "}\n\n" + (self.$content()) + "\n\n";
      }, TMP_Block_floating_title_process_55.$$arity = 0);
      
      Opal.defn(self, '$image_process', TMP_Block_image_process_56 = function $$image_process() {
        var self = this, width = nil, raw_image = nil, imagesdir = nil, image_rx = nil, match_data = nil, image = nil, caption = nil, refs = nil, align = nil, float$ = nil, figure_type = nil, ftext_width = nil, text_width = nil, $case = nil, position = nil;

        
        if ($truthy(self.$attributes()['$[]']("width"))) {
          width = "" + ($rb_divide(self.$attributes()['$[]']("width").$to_f(), 100)) + "truein"
          } else {
          width = "2.5truein"
        };
        raw_image = self.$attributes()['$[]']("target");
        if ($truthy((imagesdir = self.$document().$attr("imagesdir"))['$nil_or_empty?']())) {
          } else {
          raw_image = Opal.const_get_qualified('::', 'File').$join(imagesdir, raw_image)
        };
        if (self.$document().$attributes()['$[]']("noteshare")['$==']("yes")) {
          
          image_rx = /image.*original\/(.*)\?/;
          match_data = raw_image.$match(image_rx);
          if ($truthy(match_data)) {
            image = match_data['$[]'](1)
            } else {
            image = "undefined"
          };
          } else {
          image = raw_image
        };
        if ($truthy(self['$title?']())) {
          caption = "" + "\\caption{" + (self.$title()) + "}"
          } else {
          caption = ""
        };
        refs = self.$parent().$document().$references();
        if (self.$attributes()['$[]']("align")['$==']("center")) {
          align = "\\centering"
          } else {
          align = ""
        };
        float$ = self.$attributes()['$[]']("float");
        if ($truthy(float$)) {
          
          figure_type = "wrapfigure";
          ftext_width = width;
          caption = "";
          } else {
          
          figure_type = "figure";
          text_width = "";
        };
        $case = float$;
        if ("left"['$===']($case)) {position = "{l}"}
        else if ("right"['$===']($case)) {position = "{r}"}
        else {position = "[h]"};
        return "" + "\\begin{" + (figure_type) + "}" + (position) + "{" + (ftext_width) + "}\n\\centering\\includegraphics[width=" + (width) + "]{" + (image) + "}\n" + (caption) + "\n" + (align) + "\n\\end{" + (figure_type) + "}\n";
      }, TMP_Block_image_process_56.$$arity = 0);
      
      Opal.defn(self, '$preamble_process', TMP_Block_preamble_process_57 = function $$preamble_process() {
        var self = this;

        return self.$content()
      }, TMP_Block_preamble_process_57.$$arity = 0);
      
      Opal.defn(self, '$sidebar_process', TMP_Block_sidebar_process_58 = function $$sidebar_process() {
        var self = this, title = nil, attr = nil, id = nil, content = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        title = self.$title();
        attr = self.$attributes();
        id = attr['$[]']("id");
        if ($truthy(id)) {
          content = "" + "\\hypertarget{" + (id) + "}{" + (self.$content().$rstrip()) + "}"
          } else {
          content = self.$content()
        };
        if ($truthy(title)) {
          
          title = $gvars.tex.$env("bf", title);
          return $gvars.tex.$env("sidebar", "" + (title) + "\n" + (content.$rstrip()));
          } else {
          return $gvars.tex.$env("sidebar", content)
        };
      }, TMP_Block_sidebar_process_58.$$arity = 0);
      return (Opal.defn(self, '$verse_process', TMP_Block_verse_process_59 = function $$verse_process() {
        var self = this;
        if ($gvars.tex == null) $gvars.tex = nil;

        return $gvars.tex.$env("verse", self.$content())
      }, TMP_Block_verse_process_59.$$arity = 0), nil) && 'verse_process';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Inline(){};
      var self = $Inline = $klass($base, $super, 'Inline', $Inline);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inline_tex_process_60, TMP_Inline_inline_quoted_process_61, TMP_Inline_inline_anchor_process_62, TMP_Inline_inline_break_process_63, TMP_Inline_inline_footnote_process_64, TMP_Inline_inline_callout_process_65, TMP_Inline_inline_indexterm_process_66;

      
      
      Opal.defn(self, '$tex_process', TMP_Inline_tex_process_60 = function $$tex_process() {
        var self = this, $case = nil;

        return (function() {$case = self.$node_name();
        if ("inline_quoted"['$===']($case)) {return self.$inline_quoted_process()}
        else if ("inline_anchor"['$===']($case)) {return self.$inline_anchor_process()}
        else if ("inline_break"['$===']($case)) {return self.$inline_break_process()}
        else if ("inline_footnote"['$===']($case)) {return self.$inline_footnote_process()}
        else if ("inline_callout"['$===']($case)) {return self.$inline_callout_process()}
        else if ("inline_indexterm"['$===']($case)) {return self.$inline_indexterm_process()}
        else {return ""}})()
      }, TMP_Inline_tex_process_60.$$arity = 0);
      
      Opal.defn(self, '$inline_quoted_process', TMP_Inline_inline_quoted_process_61 = function $$inline_quoted_process() {
        var self = this, $case = nil, output = nil, role = nil;

        return (function() {$case = self.$type();
        if ("strong"['$===']($case)) {return "" + "\\textbf{" + (self.$text()) + "}"}
        else if ("emphasis"['$===']($case)) {return "" + "\\emph{" + (self.$text()) + "}"}
        else if ("asciimath"['$===']($case)) {
        output = Opal.const_get_relative($nesting, 'Asciidoctor').$convert(self.$text(), $hash2(["backend"], {"backend": "html"}));
        return output;}
        else if ("monospaced"['$===']($case)) {return "" + "\\texttt{" + (self.$text()) + "}"}
        else if ("superscript"['$===']($case)) {return "" + "${}^{" + (self.$text()) + "}$"}
        else if ("subscript"['$===']($case)) {return "" + "${}_{" + (self.$text()) + "}$"}
        else if ("mark"['$===']($case)) {return "" + "\\colorbox{yellow}{ " + (self.$text()) + "}"}
        else if ("double"['$===']($case)) {return "" + "``" + (self.$text()) + "''"}
        else if ("single"['$===']($case)) {return "" + "`" + (self.$text()) + "'"}
        else if ("latexmath"['$===']($case)) {
        "" + "\\(" + (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'LaTeX'), 'TeXPostProcess').$stem_substitutions(self.$text())) + "\\)";
        return self.$text();}
        else if ("unquoted"['$===']($case)) {
        role = self.$attributes()['$[]']("role");
        if (role['$==']("red")) {
          return "" + "\\rolered{ " + (self.$text()) + "}"
        } else if (role['$==']("blue")) {
          return "" + "\\roleblue{ " + (self.$text()) + "}"
          } else {
          return nil
        };}
        else if ("literal"['$===']($case)) {return "" + "\\texttt{" + (self.$text()) + "}"}
        else if ("verse"['$===']($case)) {return "" + "\\texttt{" + (self.$text()) + "}"}
        else {return "" + "\\unknown:" + (self.$type()) + "\\{" + (self.$text()) + "\\}"}})()
      }, TMP_Inline_inline_quoted_process_61.$$arity = 0);
      
      Opal.defn(self, '$inline_anchor_process', TMP_Inline_inline_anchor_process_62 = function $$inline_anchor_process() {
        var $a, self = this, refid = nil, refs = nil, reftext = nil, m = nil, $case = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        
        refid = self.$attributes()['$[]']("refid");
        refs = self.$parent().$document().$references()['$[]']("ids");
        if ($truthy(($truthy($a = self.$text()['$!']()) ? refs['$[]'](refid) : $a))) {
          
          reftext = refs['$[]'](refid).$gsub(".", "");
          m = reftext.$match(/(\d*)/);
          if (m['$[]'](1)['$=='](reftext)) {
            reftext = "" + "(" + (reftext) + ")"};
          } else {
          reftext = self.$text()
        };
        return (function() {$case = self.$type();
        if ("link"['$===']($case)) {return $gvars.tex.$macro("href", self.$target(), self.$text())}
        else if ("ref"['$===']($case)) {return $gvars.tex.$macro("label", ($truthy($a = self.$id()) ? $a : self.$target()))}
        else if ("xref"['$===']($case)) {return $gvars.tex.$macro("hyperlink", refid.$tex_normalize(), reftext)}
        else { return nil }})();
      }, TMP_Inline_inline_anchor_process_62.$$arity = 0);
      
      Opal.defn(self, '$inline_break_process', TMP_Inline_inline_break_process_63 = function $$inline_break_process() {
        var self = this;

        return "" + (self.$text()) + " \\\\"
      }, TMP_Inline_inline_break_process_63.$$arity = 0);
      
      Opal.defn(self, '$inline_footnote_process', TMP_Inline_inline_footnote_process_64 = function $$inline_footnote_process() {
        var self = this;
        if ($gvars.tex == null) $gvars.tex = nil;

        return $gvars.tex.$macro("footnote", self.$text())
      }, TMP_Inline_inline_footnote_process_64.$$arity = 0);
      
      Opal.defn(self, '$inline_callout_process', TMP_Inline_inline_callout_process_65 = function $$inline_callout_process() {
        var self = this;

        return nil
      }, TMP_Inline_inline_callout_process_65.$$arity = 0);
      return (Opal.defn(self, '$inline_indexterm_process', TMP_Inline_inline_indexterm_process_66 = function $$inline_indexterm_process() {
        var self = this, $case = nil, output = nil;
        if ($gvars.tex == null) $gvars.tex = nil;

        return (function() {$case = self.$type();
        if ("visible"['$===']($case)) {
        output = $gvars.tex.$macro("index", self.$text());
        return (output = $rb_plus(output, self.$text()));}
        else {return $gvars.tex.$macro("index", self.$attributes()['$[]']("terms").$join("!"))}})()
      }, TMP_Inline_inline_indexterm_process_66.$$arity = 0), nil) && 'inline_indexterm_process';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Table(){};
      var self = $Table = $klass($base, $super, 'Table', $Table);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Table_tex_process_69;

      return (Opal.defn(self, '$tex_process', TMP_Table_tex_process_69 = function $$tex_process() {
        var TMP_67, self = this, n_rows = nil, n_columns = nil, alignment = nil, output = nil;

        
        n_rows = self.$rows().$body().$count();
        n_columns = self.$columns().$count();
        alignment = $rb_times(["c"], n_columns).$join("|");
        output = "\\begin{center}\n";
        output['$<<']("" + "\\begin{tabular}{|" + (alignment) + "|}\n");
        output['$<<']("\\hline\n");
        $send(self.$rows().$body(), 'each_with_index', [], (TMP_67 = function(row, index){var self = TMP_67.$$s || this, TMP_68, row_array = nil;
if (row == null) row = nil;if (index == null) index = nil;
        
          row_array = [];
          $send(row, 'each', [], (TMP_68 = function(cell){var self = TMP_68.$$s || this, cell_content = nil;
if (cell == null) cell = nil;
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$===']((cell_content = cell.$content())))) {
              return row_array['$<<'](cell_content.$join("\n"))
              } else {
              return row_array['$<<'](cell_content)
            }}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68));
          output['$<<'](row_array.$join(" & "));
          return output['$<<'](" \\\\ \n");}, TMP_67.$$s = self, TMP_67.$$arity = 2, TMP_67));
        output['$<<']("\\hline\n");
        output['$<<']("\\end{tabular}\n");
        output['$<<']("\\end{center}\n");
        return "" + (output);
      }, TMP_Table_tex_process_69.$$arity = 0), nil) && 'tex_process'
    })($nesting[0], null, $nesting);
    (function($base, $parent_nesting) {
      var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $TeXPostProcess, self = $TeXPostProcess = $module($base, 'TeXPostProcess');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TeXPostProcess_match_inline_70, TMP_TeXPostProcess_match_block_71, TMP_TeXPostProcess_make_substitutions1_72, TMP_TeXPostProcess_make_substitutions_in_matches_74, TMP_TeXPostProcess_make_substitutions_75, TMP_TeXPostProcess_stem_substitutions_76;

        
        Opal.defs(self, '$match_inline', TMP_TeXPostProcess_match_inline_70 = function $$match_inline(str) {
          var self = this, rx_tex_inline = nil;

          
          rx_tex_inline = /\$(.*?)\$/;
          return str.$scan(rx_tex_inline);
        }, TMP_TeXPostProcess_match_inline_70.$$arity = 1);
        Opal.defs(self, '$match_block', TMP_TeXPostProcess_match_block_71 = function $$match_block(str) {
          var self = this, rx_tex_block = nil;

          
          rx_tex_block = /\\\[(.*?)\\\]/m;
          return str.$scan(rx_tex_block);
        }, TMP_TeXPostProcess_match_block_71.$$arity = 1);
        Opal.defs(self, '$make_substitutions1', TMP_TeXPostProcess_make_substitutions1_72 = function $$make_substitutions1(str) {
          var self = this;

          
          str = str.$gsub("&amp;", "&");
          str = str.$gsub("&gt;", ">");
          return (str = str.$gsub("&lt;", "<"));
        }, TMP_TeXPostProcess_make_substitutions1_72.$$arity = 1);
        Opal.defs(self, '$make_substitutions_in_matches', TMP_TeXPostProcess_make_substitutions_in_matches_74 = function $$make_substitutions_in_matches(matches, str) {
          var TMP_73, self = this;

          
          $send(matches, 'each', [], (TMP_73 = function(m){var self = TMP_73.$$s || this, m_str = nil, m_transformed = nil;
if (m == null) m = nil;
          
            m_str = m['$[]'](0);
            m_transformed = self.$make_substitutions1(m_str);
            return (str = str.$gsub(m_str, m_transformed));}, TMP_73.$$s = self, TMP_73.$$arity = 1, TMP_73));
          return str;
        }, TMP_TeXPostProcess_make_substitutions_in_matches_74.$$arity = 2);
        Opal.defs(self, '$make_substitutions', TMP_TeXPostProcess_make_substitutions_75 = function $$make_substitutions(str) {
          var self = this, matches = nil;

          
          str = str.$gsub("\\\\", "@@");
          matches = self.$match_inline(str);
          if ($truthy($rb_gt(matches.$count(), 0))) {
            str = self.$make_substitutions_in_matches(matches, str)};
          matches = self.$match_block(str);
          if ($truthy($rb_gt(matches.$count(), 0))) {
            str = self.$make_substitutions_in_matches(matches, str)};
          str = str.$tr("@", "\\");
          return str;
        }, TMP_TeXPostProcess_make_substitutions_75.$$arity = 1);
        Opal.defs(self, '$stem_substitutions', TMP_TeXPostProcess_stem_substitutions_76 = function $$stem_substitutions(str) {
          var self = this;

          
          str = str.$gsub("\\\\", "@@");
          str = self.$make_substitutions1(str);
          str = str.$tr("@", "\\");
          return str;
        }, TMP_TeXPostProcess_stem_substitutions_76.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/prepend_processor"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$+', '$warn', '$magenta', '$eof?', '$putline', '$unshift_lines']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $ClickStyleInsert(){};
      var self = $ClickStyleInsert = $klass($base, $super, 'ClickStyleInsert', $ClickStyleInsert);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClickStyleInsert_putline_1, TMP_ClickStyleInsert_process_2;

      
      
      Opal.defn(self, '$putline', TMP_ClickStyleInsert_putline_1 = function $$putline(line) {
        var $a, self = this;

        return (Opal.class_variable_set($ClickStyleInsert, '@@line_array', $rb_plus((($a = $ClickStyleInsert.$$cvars['@@line_array']) == null ? nil : $a), [line, ""])))
      }, TMP_ClickStyleInsert_putline_1.$$arity = 1);
      return (Opal.defn(self, '$process', TMP_ClickStyleInsert_process_2 = function $$process(document, reader) {
        var $a, self = this;
        if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;

        
        if ($truthy($gvars.VERBOSE)) {
          self.$warn("Entering ClickStyleInsert".$magenta())};
        (Opal.class_variable_set($ClickStyleInsert, '@@line_array', []));
        if ($truthy(reader['$eof?']())) {
          return reader};
        self.$putline("++++");
        self.$putline("<style>");
        self.$putline(".click .title { color: blue; }");
        self.$putline("</style>");
        self.$putline("++++");
        reader.$unshift_lines((($a = $ClickStyleInsert.$$cvars['@@line_array']) == null ? nil : $a));
        return reader;
      }, TMP_ClickStyleInsert_process_2.$$arity = 2), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Preprocessor'), $nesting)
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/macro_insert"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$require', '$+', '$read', '$==', '$warn', '$yellow', '$length', '$eof?', '$putline', '$split', '$each', '$unshift_lines']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $MacroInsert(){};
      var self = $MacroInsert = $klass($base, $super, 'MacroInsert', $MacroInsert);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MacroInsert_putline_1, TMP_MacroInsert_process_3;

      
      
      Opal.defn(self, '$putline', TMP_MacroInsert_putline_1 = function $$putline(line) {
        var $a, self = this;

        return (Opal.class_variable_set($MacroInsert, '@@line_array', $rb_plus((($a = $MacroInsert.$$cvars['@@line_array']) == null ? nil : $a), [line, ""])))
      }, TMP_MacroInsert_putline_1.$$arity = 1);
      return (Opal.defn(self, '$process', TMP_MacroInsert_process_3 = function $$process(document, reader) {
        var TMP_2, $a, self = this, file_contents = nil, lines = nil;
        if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;

        
        file_contents = Opal.const_get_relative($nesting, 'IO').$read("macros.tex");
        if (file_contents['$=='](nil)) {
          file_contents = Opal.const_get_relative($nesting, 'IO').$read("public/macros.tex")};
        if ($truthy(file_contents)) {
          if ($truthy($gvars.VERBOSE)) {
            self.$warn(((("" + "In MacroInsert, file_contents: ") + (file_contents.$length())) + " chars read").$yellow())}
        } else if ($truthy($gvars.VERBOSE)) {
          self.$warn("In MacroInsert, file_contents: NIL".$yellow())};
        (Opal.class_variable_set($MacroInsert, '@@line_array', []));
        if ($truthy(reader['$eof?']())) {
          return reader};
        self.$putline("++++");
        self.$putline("<div class='hide'>");
        self.$putline("\\(");
        lines = file_contents.$split("\n");
        $send(lines, 'each', [], (TMP_2 = function(line){var self = TMP_2.$$s || this;
if (line == null) line = nil;
        return self.$putline(line)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        self.$putline("\\)");
        self.$putline("</div>");
        self.$putline("++++");
        reader.$unshift_lines((($a = $MacroInsert.$$cvars['@@line_array']) == null ? nil : $a));
        return reader;
      }, TMP_MacroInsert_process_3.$$arity = 2), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Preprocessor'), $nesting)
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/tex_block"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$scan', '$match', '$[]', '$environment_type', '$join', '$environmemt_type_of_match', '$include?', '$gsub', '$restore_match_data', '$strip_match_data', '$get_tex_blocks', '$each', '$process_tex_block']);
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $TeXBlock, self = $TeXBlock = $module($base, 'TeXBlock');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TeXBlock_get_tex_blocks_1, TMP_TeXBlock_environment_type_2, TMP_TeXBlock_environmemt_type_of_match_3, TMP_TeXBlock_restore_match_data_4, TMP_TeXBlock_strip_match_data_5, TMP_TeXBlock_process_tex_block_6, TMP_TeXBlock_process_environments_8;

      
      Opal.defs(self, '$get_tex_blocks', TMP_TeXBlock_get_tex_blocks_1 = function $$get_tex_blocks(str) {
        var self = this, rx_tex_block = nil;

        
        rx_tex_block = /(\\\[)(.*?)(\\\])/m;
        return str.$scan(rx_tex_block);
      }, TMP_TeXBlock_get_tex_blocks_1.$$arity = 1);
      Opal.defs(self, '$environment_type', TMP_TeXBlock_environment_type_2 = function $$environment_type(str) {
        var self = this, rx_env_block = nil, m = nil, env_type = nil;

        
        rx_env_block = /\\begin\{(.*?)\}/;
        m = str.$match(rx_env_block);
        if ($truthy(m)) {
          env_type = m['$[]'](1)
          } else {
          env_type = "none"
        };
        return env_type;
      }, TMP_TeXBlock_environment_type_2.$$arity = 1);
      Opal.defs(self, '$environmemt_type_of_match', TMP_TeXBlock_environmemt_type_of_match_3 = function $$environmemt_type_of_match(m) {
        var self = this;

        return self.$environment_type(m['$[]'](1))
      }, TMP_TeXBlock_environmemt_type_of_match_3.$$arity = 1);
      Opal.defs(self, '$restore_match_data', TMP_TeXBlock_restore_match_data_4 = function $$restore_match_data(m) {
        var self = this;

        return m.$join()
      }, TMP_TeXBlock_restore_match_data_4.$$arity = 1);
      Opal.defs(self, '$strip_match_data', TMP_TeXBlock_strip_match_data_5 = function $$strip_match_data(m) {
        var self = this;

        return m['$[]'](1)
      }, TMP_TeXBlock_strip_match_data_5.$$arity = 1);
      Opal.defs(self, '$process_tex_block', TMP_TeXBlock_process_tex_block_6 = function $$process_tex_block(m, str) {
        var self = this, block_type = nil, output = nil;

        
        block_type = self.$environmemt_type_of_match(m);
        if ($truthy(Opal.const_get_relative($nesting, 'INNER_TYPES')['$include?'](block_type))) {
          output = str
          } else {
          output = str.$gsub(self.$restore_match_data(m), self.$strip_match_data(m))
        };
        return output;
      }, TMP_TeXBlock_process_tex_block_6.$$arity = 2);
      Opal.defs(self, '$process_environments', TMP_TeXBlock_process_environments_8 = function $$process_environments(str) {
        var TMP_7, self = this, tbs = nil;

        
        tbs = self.$get_tex_blocks(str);
        $send(tbs, 'each', [], (TMP_7 = function(tb){var self = TMP_7.$$s || this;
if (tb == null) tb = nil;
        return (str = self.$process_tex_block(tb, str))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        return str;
      }, TMP_TeXBlock_process_environments_8.$$arity = 1);
      Opal.const_set($nesting[0], 'INNER_TYPES', ["array", "matrix", "none"]);
    })($nesting[0], $nesting)
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting)
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/tex_preprocessor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$eof?', '$map', '$read_lines', '$include?', '$basebackend?', '$gsub', '$=~', '$unshift_lines']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $TeXPreprocessor(){};
      var self = $TeXPreprocessor = $klass($base, $super, 'TeXPreprocessor', $TeXPreprocessor);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TeXPreprocessor_process_2;

      
      Opal.const_set($nesting[0], 'TEX_DOLLAR_RX', /\$(.*?)\$/);
      Opal.const_set($nesting[0], 'TEX_DOLLAR_SUB', "pass:[\\\\(\\1\\\\)]");
      return (Opal.defn(self, '$process', TMP_TeXPreprocessor_process_2 = function $$process(document, reader) {
        var TMP_1, self = this, replacement_lines = nil;

        
        if ($truthy(reader['$eof?']())) {
          return reader};
        replacement_lines = $send(reader.$read_lines(), 'map', [], (TMP_1 = function(line){var self = TMP_1.$$s || this, $a;
if (line == null) line = nil;
        
          if ($truthy(($truthy($a = line['$include?']("<-->")) ? document['$basebackend?']("tex") : $a))) {
            line = line.$gsub("<-->", "CHEMLEFTRIGHTARROW")};
          if ($truthy(($truthy($a = line['$include?']("->")) ? document['$basebackend?']("tex") : $a))) {
            line = line.$gsub("->", "CHEMRIGHTARROW")};
          if ($truthy(($truthy($a = line['$include?']("<-")) ? document['$basebackend?']("tex") : $a))) {
            line = line.$gsub("<-", "CHEMLEFTARROW")};
          if ($truthy(($truthy($a = line['$include?']("\\&")) ? document['$basebackend?']("html") : $a))) {
            line = line.$gsub("\\&", "ESCAMPERSAND")};
          if ($truthy(($truthy($a = line['$include?']("\\_")) ? document['$basebackend?']("html") : $a))) {
            line = line.$gsub("\\_", "ESCUNDERSCORE")};
          if ($truthy(($truthy($a = line['$include?']("\\")) ? document['$basebackend?']("html") : $a))) {
            line = line.$gsub("\\$", "ESCDOLLAR")};
          if ($truthy(line['$include?']("$"))) {
            line = line.$gsub(Opal.const_get_relative($nesting, 'TEX_DOLLAR_RX'), Opal.const_get_relative($nesting, 'TEX_DOLLAR_SUB'))};
          if ($truthy(line['$=~'](/^\\\[/))) {
            line = line.$gsub("\\[", "+++\n\\[")};
          if ($truthy(line['$=~'](/^\\\]/))) {
            line = line.$gsub("\\]", "\\]\n+++\n")};
          return line;}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        reader.$unshift_lines(replacement_lines);
        return reader;
      }, TMP_TeXPreprocessor_process_2.$$arity = 2), nil) && 'process';
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Preprocessor'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $DollarPreprocessor(){};
      var self = $DollarPreprocessor = $klass($base, $super, 'DollarPreprocessor', $DollarPreprocessor);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DollarPreprocessor_process_4;

      return (Opal.defn(self, '$process', TMP_DollarPreprocessor_process_4 = function $$process(document, reader) {
        var TMP_3, self = this, replacement_lines = nil;

        
        if ($truthy(reader['$eof?']())) {
          return reader};
        replacement_lines = $send(reader.$read_lines(), 'map', [], (TMP_3 = function(line){var self = TMP_3.$$s || this, $a;
if (line == null) line = nil;
        
          if ($truthy(($truthy($a = line['$include?']("$")) ? document['$basebackend?']("tex") : $a))) {
            line = line.$gsub("$", "\\$")};
          return line;}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
        reader.$unshift_lines(replacement_lines);
        return reader;
      }, TMP_DollarPreprocessor_process_4.$$arity = 2), nil) && 'process'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Preprocessor'), $nesting);
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/macro_preprocessor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$eof?', '$map', '$read_lines', '$include?', '$scan', '$each', '$[]', '$puts', '$red', '$gsub', '$unshift_lines']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $MacroPreprocessor(){};
      var self = $MacroPreprocessor = $klass($base, $super, 'MacroPreprocessor', $MacroPreprocessor);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MacroPreprocessor_process_3;

      return (Opal.defn(self, '$process', TMP_MacroPreprocessor_process_3 = function $$process(document, reader) {
        var TMP_1, self = this, regex = nil, replacement_lines = nil;

        
        regex = /{{(.*?)}}/;
        if ($truthy(reader['$eof?']())) {
          return reader};
        replacement_lines = $send(reader.$read_lines(), 'map', [], (TMP_1 = function(line){var self = TMP_1.$$s || this, TMP_2, scan = nil;
if (line == null) line = nil;
        
          if ($truthy(line['$include?']("{{"))) {
            
            scan = line.$scan(regex);
            $send(scan, 'each', [], (TMP_2 = function(match){var self = TMP_2.$$s || this, target = nil;
if (match == null) match = nil;
            
              target = match['$[]'](0);
              self.$puts((("" + "target: ") + (target)).$red());
              return (line = line.$gsub("" + "{{" + (target) + "}}", "" + "glossterm::[" + (target) + "]"));}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));};
          return line;}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        reader.$unshift_lines(replacement_lines);
        return reader;
      }, TMP_MacroPreprocessor_process_3.$$arity = 2), nil) && 'process'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Preprocessor'), $nesting)
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/dollar"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Dollar(){};
      var self = $Dollar = $klass($base, $super, 'Dollar', $Dollar);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Dollar_process_1;

      return (Opal.defn(self, '$process', TMP_Dollar_process_1 = function $$process(document, output) {
        var self = this;

        return (output = output.$gsub("DOLLOD", "$"))
      }, TMP_Dollar_process_1.$$arity = 2), nil) && 'process'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Postprocessor'), $nesting)
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/tex_postprocessor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $TexPostprocessor(){};
      var self = $TexPostprocessor = $klass($base, $super, 'TexPostprocessor', $TexPostprocessor);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TexPostprocessor_process_1;

      return (Opal.defn(self, '$process', TMP_TexPostprocessor_process_1 = function $$process(document, output) {
        var self = this;

        
        output = output.$gsub("ESCAMPERSAND", "\\&");
        output = output.$gsub("ESCUNDERSCORE", "\\_");
        output = output.$gsub("ESCDOLLAR", "\\$");
        output = output.$gsub("CHEMRIGHTARROW", "->").$gsub("CHEMLEFTARROW", "<-").$gsub("CHEMLEFTRIGHTARROW", "<-->");
        output = output.$gsub("\\(", "$").$gsub("\\)", "$");
        return output.$gsub("!!!BACKSLASH", "\\");
      }, TMP_TexPostprocessor_process_1.$$arity = 2), nil) && 'process'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Postprocessor'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $HTMLPostprocessor(){};
      var self = $HTMLPostprocessor = $klass($base, $super, 'HTMLPostprocessor', $HTMLPostprocessor);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HTMLPostprocessor_process_2;

      return (Opal.defn(self, '$process', TMP_HTMLPostprocessor_process_2 = function $$process(document, output) {
        var self = this;

        
        output = output.$gsub("ESCAMPERSAND", "&");
        output = output.$gsub("ESCUNDERSCORE", "_");
        output = output.$gsub("ESCDOLLAR", "$");
        output = output.$gsub("\\DOLLOD", "\\$");
        return output.$gsub("!!!BACKSLASH", "\\");
      }, TMP_HTMLPostprocessor_process_2.$$arity = 2), nil) && 'process'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Postprocessor'), $nesting);
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/chem"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub']);
  
  self.$require("asciidoctor");
  self.$require("asciidoctor/extensions");
  return (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Chem(){};
      var self = $Chem = $klass($base, $super, 'Chem', $Chem);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Chem_process_1;

      return (Opal.defn(self, '$process', TMP_Chem_process_1 = function $$process(document, output) {
        var self = this;

        return output.$gsub(Opal.const_get_relative($nesting, 'TEX_SNIPPET'), Opal.const_get_relative($nesting, 'CHEM_SNIPPET'))
      }, TMP_Chem_process_1.$$arity = 2), nil) && 'process'
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'Postprocessor'), $nesting);
    Opal.const_set($nesting[0], 'TEX_SNIPPET', "TeX: { equationNumbers: { autoNumber: \"none\" } }");
    Opal.const_set($nesting[0], 'CHEM_SNIPPET', "TeX: { extensions: [\"mhchem.js\"] }");
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/sectnumoffset-treeprocessor"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var TMP_1, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$include', '$register', '$treeprocessor', '$process', '$attr?', '$>', '$to_i', '$attr', '$warn', '$red', '$cyan', '$each', '$find_by', '$<=', '$level', '$+', '$number', '$number=', '$-']);
  
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
    nil
  };
  self.$include(Opal.const_get_qualified('::', 'Asciidoctor'));
  return $send(Opal.const_get_relative($nesting, 'Extensions'), 'register', [], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2;

  return $send(self, 'treeprocessor', [], (TMP_2 = function(){var self = TMP_2.$$s || this, TMP_3;

    return $send(self, 'process', [], (TMP_3 = function(document){var self = TMP_3.$$s || this, $a, TMP_4, sectnumoffset = nil, subsectnumoffset = nil, section_count = nil;
        if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
if (document == null) document = nil;
      
        if ($truthy(($truthy($a = document['$attr?']("sectnums")) ? $rb_gt((sectnumoffset = document.$attr("sectnumoffset", 0).$to_i()), 0) : $a))) {
          
          subsectnumoffset = document.$attr("subsectnumoffset", 0).$to_i();
          if ($truthy($gvars.VERBOSE)) {
            self.$warn((("" + "subsectnumoffset: ") + (subsectnumoffset)).$red())};
          section_count = 0;
          if ($truthy($rb_gt(subsectnumoffset, 0))) {
            if ($truthy($gvars.VERBOSE)) {
              self.$warn((("" + "Insert parent section at 'head' of document with offset ") + (sectnumoffset)).$cyan())}};
          $send(($truthy($a = document.$find_by($hash2(["context"], {"context": "section"}))) ? $a : []), 'each', [], (TMP_4 = function(sect){var self = TMP_4.$$s || this, $b, $writer = nil;
if (sect == null) sect = nil;
          
            if ($truthy($rb_le(sect.$level(), 2))) {
              } else {
              return nil;
            };
            if (sect.$level()['$=='](1)) {
              
              section_count = $rb_plus(section_count, 1);
              
              $writer = [$rb_plus(sect.$number(), sectnumoffset)];
              $send(sect, 'number=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            } else if ($truthy((($b = sect.$level()['$=='](2)) ? section_count['$=='](1) : sect.$level()['$=='](2)))) {
              
              $writer = [$rb_plus(sect.$number(), subsectnumoffset)];
              $send(sect, 'number=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              } else {
              return nil
            };}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));};
        return nil;}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex/converter"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$==', '$warn', '$red', '$node_name', '$attributes', '$blue', '$[]', '$===', '$handle_null', '$handle_code', '$handle_equation', '$handle_equation_align', '$handle_cd', '$handle_chem', '$handle_jsxgraph', '$handle_texmacro', '$handle_include_latex', '$handle_default', '$*', '$+', '$roles', '$[]=', '$-', '$open', '$handle_equation_literal', '$handle_equation_align_literal', '$title=', '$lines', '$lines=', '$target', '$type', '$text', '$references', '$document', '$id', '$<<', '$role', '$attr?', '$attr', '$join', '$inspect', '$to_s', '$parent', '$!', '$gsub', '$=~', '$old_inline_anchor', '$caption', '$include?', '$nil?', '$caption=', '$include', '$register_for', '$register', '$options', '$basebackend?', '$preprocessor', '$block', '$inline_macro', '$postprocessor', '$docinfo_processor', '$exist?', '$block_macro', '$basebackend', '$outfilesuffix', '$tex_process', '$magenta', '$class', '$respond_to?', '$prepend']);
  
  self.$require("asciidoctor");
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
    nil
  };
  self.$require("asciidoctor/converter/html5");
  self.$require("asciidoctor/latex/css_doc_info");
  self.$require("asciidoctor/latex/inline_macros");
  self.$require("asciidoctor/latex/core_ext/colored_string");
  self.$require("asciidoctor/latex/click_block");
  self.$require("asciidoctor/latex/inject_html");
  self.$require("asciidoctor/latex/ent_to_uni");
  self.$require("asciidoctor/latex/environment_block");
  self.$require("asciidoctor/latex/node_processors");
  self.$require("asciidoctor/latex/prepend_processor");
  self.$require("asciidoctor/latex/macro_insert");
  self.$require("asciidoctor/latex/tex_block");
  self.$require("asciidoctor/latex/tex_preprocessor");
  self.$require("asciidoctor/latex/macro_preprocessor");
  self.$require("asciidoctor/latex/dollar");
  self.$require("asciidoctor/latex/tex_postprocessor");
  self.$require("asciidoctor/latex/chem");
  self.$require("asciidoctor/latex/sectnumoffset-treeprocessor");
  $gvars.VERBOSE = false;
  (function($base, $parent_nesting) {
    var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      var $Html5ConverterExtensions, self = $Html5ConverterExtensions = $module($base, 'Html5ConverterExtensions');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Html5ConverterExtensions_info_1, TMP_Html5ConverterExtensions_environment_2, TMP_Html5ConverterExtensions_environment_literal_3, TMP_Html5ConverterExtensions_handle_texmacro_4, TMP_Html5ConverterExtensions_handle_include_latex_5, TMP_Html5ConverterExtensions_click_6, TMP_Html5ConverterExtensions_old_inline_anchor_7, TMP_Html5ConverterExtensions_inline_anchor_8, TMP_Html5ConverterExtensions_handle_equation_9, TMP_Html5ConverterExtensions_handle_equation_literal_10, TMP_Html5ConverterExtensions_handle_equation_align_11, TMP_Html5ConverterExtensions_handle_equation_align_literal_12, TMP_Html5ConverterExtensions_handle_cd_13, TMP_Html5ConverterExtensions_handle_chem_14, TMP_Html5ConverterExtensions_handle_jsxgraph_15, TMP_Html5ConverterExtensions_handle_null_16, TMP_Html5ConverterExtensions_handle_code_17, TMP_Html5ConverterExtensions_handle_default_18;

      
      Opal.const_set($nesting[0], 'ENV_CSS_OBLIQUE', "+++<div class='click_oblique'>+++");
      Opal.const_set($nesting[0], 'ENV_CSS_PLAIN', "+++<div class='click_plain'>+++");
      Opal.const_set($nesting[0], 'DIV_END', "+++</div>+++");
      Opal.const_set($nesting[0], 'TABLE_ROW_END', "+++</tr></table>+++");
      
      Opal.defn(self, '$info', TMP_Html5ConverterExtensions_info_1 = function $$info(node) {
        var self = this;
        if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;

        if ($truthy($gvars.VERBOSE)) {
          return self.$warn((("" + "\n   HTMLConverter, node: ") + (node.$node_name())).$red())
          } else {
          return nil
        }
      }, TMP_Html5ConverterExtensions_info_1.$$arity = 1);
      
      Opal.defn(self, '$environment', TMP_Html5ConverterExtensions_environment_2 = function $$environment(node) {
        var self = this, attrs = nil, $case = nil, $writer = nil;
        if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;

        
        if ($truthy($gvars.VERBOSE)) {
          self.$warn("entering environment(node)".$red())};
        attrs = node.$attributes();
        if ($truthy($gvars.VERBOSE)) {
          self.$warn((("" + "attrs['role'] = ") + (attrs['$[]']("role"))).$blue())};
        $case = attrs['$[]']("role");
        if ("box"['$===']($case) || "capsule"['$===']($case)) {self.$handle_null(node)}
        else if ("code"['$===']($case)) {self.$handle_code(node)}
        else if ("equation"['$===']($case)) {self.$handle_equation(node)}
        else if ("equationalign"['$===']($case)) {self.$handle_equation_align(node)}
        else if ("cd"['$===']($case)) {self.$handle_cd(node)}
        else if ("chem"['$===']($case)) {self.$handle_chem(node)}
        else if ("jsxgraph"['$===']($case)) {self.$handle_jsxgraph(node)}
        else if ("texmacro"['$===']($case)) {self.$handle_texmacro(node)}
        else if ("include_latex"['$===']($case)) {self.$handle_include_latex(node)}
        else {self.$handle_default(node)};
        
        $writer = ["roles", $rb_times($rb_plus(node.$roles(), ["environment"]), " ")];
        $send(node.$attributes(), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$open(node);
      }, TMP_Html5ConverterExtensions_environment_2.$$arity = 1);
      
      Opal.defn(self, '$environment_literal', TMP_Html5ConverterExtensions_environment_literal_3 = function $$environment_literal(node) {
        var self = this, attrs = nil, $case = nil, $writer = nil;
        if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;

        
        if ($truthy($gvars.VERBOSE)) {
          self.$warn("entering environment(node)".$red())};
        attrs = node.$attributes();
        if ($truthy($gvars.VERBOSE)) {
          self.$warn((("" + "attrs['role'] = ") + (attrs['$[]']("role"))).$blue())};
        $case = attrs['$[]']("role");
        if ("box"['$===']($case) || "capsule"['$===']($case)) {self.$handle_null(node)}
        else if ("code"['$===']($case)) {self.$handle_code(node)}
        else if ("equation"['$===']($case)) {self.$handle_equation_literal(node)}
        else if ("equationalign"['$===']($case)) {self.$handle_equation_align_literal(node)}
        else if ("cd"['$===']($case)) {self.$handle_cd(node)}
        else if ("chem"['$===']($case)) {self.$handle_chem(node)}
        else if ("jsxgraph"['$===']($case)) {self.$handle_jsxgraph(node)}
        else if ("texmacro"['$===']($case)) {self.$handle_texmacro(node)}
        else {self.$handle_default(node)};
        
        $writer = ["roles", $rb_times($rb_plus(node.$roles(), ["environment"]), " ")];
        $send(node.$attributes(), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$open(node);
      }, TMP_Html5ConverterExtensions_environment_literal_3.$$arity = 1);
      
      Opal.defn(self, '$handle_texmacro', TMP_Html5ConverterExtensions_handle_texmacro_4 = function $$handle_texmacro(node) {
        var self = this, $writer = nil;

        
        
        $writer = [nil];
        $send(node, 'title=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$rb_plus($rb_plus(["+++\n\\("], node.$lines()), ["\\)\n+++"])];
        $send(node, 'lines=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_Html5ConverterExtensions_handle_texmacro_4.$$arity = 1);
      
      Opal.defn(self, '$handle_include_latex', TMP_Html5ConverterExtensions_handle_include_latex_5 = function $$handle_include_latex(node) {
        var self = this, $writer = nil;

        
        
        $writer = [nil];
        $send(node, 'title=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [[]];
        $send(node, 'lines=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$open(node);
      }, TMP_Html5ConverterExtensions_handle_include_latex_5.$$arity = 1);
      
      Opal.defn(self, '$click', TMP_Html5ConverterExtensions_click_6 = function $$click(node) {
        var self = this, $writer = nil;

        
        if ($truthy(node.$attributes()['$[]']("plain-option"))) {
          
          $writer = [$rb_plus($rb_plus([Opal.const_get_relative($nesting, 'ENV_CSS_PLAIN')], node.$lines()), [Opal.const_get_relative($nesting, 'DIV_END')])];
          $send(node, 'lines=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = [$rb_plus($rb_plus([Opal.const_get_relative($nesting, 'ENV_CSS_OBLIQUE')], node.$lines()), [Opal.const_get_relative($nesting, 'DIV_END')])];
          $send(node, 'lines=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        
        $writer = ["roles", $rb_times($rb_plus(node.$roles(), ["click"]), " ")];
        $send(node.$attributes(), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$open(node);
      }, TMP_Html5ConverterExtensions_click_6.$$arity = 1);
      
      Opal.defn(self, '$old_inline_anchor', TMP_Html5ConverterExtensions_old_inline_anchor_7 = function $$old_inline_anchor(node) {
        var $a, $b, self = this, target = nil, $case = nil, refid = nil, text = nil, attrs = nil, role = nil;

        
        target = node.$target();
        return (function() {$case = node.$type();
        if ("xref"['$===']($case)) {
        refid = ($truthy($a = node.$attributes()['$[]']("refid")) ? $a : target);
        text = ($truthy($a = node.$text()) ? $a : ($truthy($b = node.$document().$references()['$[]']("ids")['$[]'](refid)) ? $b : "" + "[" + (refid) + "]"));
        return "" + "<a href=\"" + (target) + "\">" + (text) + "</a>";}
        else if ("ref"['$===']($case)) {return "" + "<a id=\"" + (target) + "\"></a>"}
        else if ("link"['$===']($case)) {
        attrs = [];
        if ($truthy(node.$id())) {
          attrs['$<<']("" + " id=\"" + (node.$id()) + "\"")};
        if ($truthy((role = node.$role()))) {
          attrs['$<<']("" + " class=\"" + (role) + "\"")};
        if ($truthy(node['$attr?']("title", nil, false))) {
          attrs['$<<']("" + " title=\"" + (node.$attr("title")) + "\"")};
        if ($truthy(node['$attr?']("window", nil, false))) {
          attrs['$<<']("" + " target=\"" + (node.$attr("window")) + "\"")};
        return "" + "<a href=\"" + (target) + "\"" + (attrs.$join()) + ">" + (node.$text()) + "</a>";}
        else if ("bibref"['$===']($case)) {return "" + "<a id=\"" + (target) + "\"></a>[" + (target) + "]"}
        else {return self.$warn("" + "asciidoctor: WARNING: unknown anchor type: " + (node.$type().$inspect()))}})();
      }, TMP_Html5ConverterExtensions_old_inline_anchor_7.$$arity = 1);
      
      Opal.defn(self, '$inline_anchor', TMP_Html5ConverterExtensions_inline_anchor_8 = function $$inline_anchor(node) {
        var $a, $b, self = this, $case = nil, refid = nil, refs = nil, reftext = nil, output = nil;

        
        $case = node.$type().$to_s();
        if ("xref"['$===']($case)) {
        refid = node.$attributes()['$[]']("refid");
        refs = node.$parent().$document().$references()['$[]']("ids");
        if ($truthy(($truthy($a = ($truthy($b = node.$text()['$!']()) ? refid : $b)) ? refs['$[]'](refid) : $a))) {
          
          reftext = refs['$[]'](refid).$gsub(".", "");
          reftext = reftext.$gsub(/:.*/, "");
          if ($truthy(refid['$=~'](/^eq-/))) {
            output = "" + "<span class='xref'><a href=#" + (refid) + ">equation " + (reftext) + "</a></span>"
          } else if ($truthy(refid['$=~'](/^formula-/))) {
            output = "" + "<span class='xref'><a href=#" + (refid) + ">formula " + (reftext) + "</a></span>"
          } else if ($truthy(refid['$=~'](/^reaction-/))) {
            output = "" + "<span class='xref'><a href=#" + (refid) + ">reaction " + (reftext) + "</a></span>"
            } else {
            output = "" + "<span class='xref'><a href=#" + (refid) + ">" + (reftext) + "</a></span>"
          };
          } else {
          output = $rb_plus($rb_plus("<span class='xref'>", self.$old_inline_anchor(node)), "</span>")
        };}
        else {output = self.$old_inline_anchor(node)};
        return output;
      }, TMP_Html5ConverterExtensions_inline_anchor_8.$$arity = 1);
      
      Opal.defn(self, '$handle_equation', TMP_Html5ConverterExtensions_handle_equation_9 = function $$handle_equation(node) {
        var self = this, attrs = nil, options = nil, $writer = nil, number_part = nil, equation_part = nil, table_style = nil, row_style = nil;

        
        attrs = node.$attributes();
        options = attrs['$[]']("options");
        
        $writer = [nil];
        $send(node, 'title=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        number_part = $rb_plus("<td class=\"equation_number_style\">", "" + "(" + (node.$caption()) + ") </td>");
        number_part = ["" + "+++ " + (number_part) + " +++"];
        equation_part = $rb_plus($rb_plus($rb_plus($rb_plus(["+++<td class=\"equation_content_style\";>+++"], ["\\["]), node.$lines()), ["\\]"]), ["+++</td>+++"]);
        table_style = "class=\"equation_table_style\"";
        row_style = "class=\"equation_row_style\"";
        if ($truthy(options['$include?']("numbered"))) {
          
          $writer = [$rb_plus($rb_plus($rb_plus(["" + "+++<table " + (table_style) + "><tr " + (row_style) + ">+++"], equation_part), number_part), [Opal.const_get_relative($nesting, 'TABLE_ROW_END')])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = [$rb_plus($rb_plus(["" + "+++<table " + (table_style) + "><tr " + (row_style) + ">+++"], equation_part), [Opal.const_get_relative($nesting, 'TABLE_ROW_END')])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };
      }, TMP_Html5ConverterExtensions_handle_equation_9.$$arity = 1);
      
      Opal.defn(self, '$handle_equation_literal', TMP_Html5ConverterExtensions_handle_equation_literal_10 = function $$handle_equation_literal(node) {
        var self = this, attrs = nil, options = nil, $writer = nil, number_part = nil, equation_part = nil, table_style = nil, row_style = nil;

        
        attrs = node.$attributes();
        options = attrs['$[]']("options");
        
        $writer = [nil];
        $send(node, 'title=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        number_part = $rb_plus("<td class=\"equation_number_style\">", "" + "(" + (node.$caption()) + ") </td>");
        equation_part = $rb_plus($rb_plus($rb_plus($rb_plus(["<td class=\"equation_content_style\";>"], ["\\["]), node.$lines()), ["\\]"]), ["</td>"]);
        table_style = "class=\"equation_table_style\"";
        row_style = "class=\"equation_row_style\"";
        if ($truthy(options['$include?']("numbered"))) {
          
          $writer = [$rb_plus($rb_plus($rb_plus(["" + "<table " + (table_style) + "><tr " + (row_style) + ">"], equation_part), number_part), ["</tr></table>"])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = [$rb_plus($rb_plus(["" + "<table " + (table_style) + "><tr " + (row_style) + ">"], equation_part), ["</tr></table>"])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };
      }, TMP_Html5ConverterExtensions_handle_equation_literal_10.$$arity = 1);
      
      Opal.defn(self, '$handle_equation_align', TMP_Html5ConverterExtensions_handle_equation_align_11 = function $$handle_equation_align(node) {
        var self = this, attrs = nil, options = nil, $writer = nil, number_part = nil, equation_part = nil, table_style = nil, row_style = nil;

        
        attrs = node.$attributes();
        options = attrs['$[]']("options");
        
        $writer = [nil];
        $send(node, 'title=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        number_part = $rb_plus("<td class=\"equation_number_style\">", "" + "(" + (node.$caption()) + ") </td>");
        number_part = ["" + "+++ " + (number_part) + " +++"];
        equation_part = $rb_plus($rb_plus($rb_plus($rb_plus(["+++<td class=\"equation_content_style\";>+++"], ["\\[\\begin{aligned}"]), node.$lines()), ["\\end{aligned}\\]"]), ["+++</td>+++"]);
        table_style = "class=\"equation_table_style\" ";
        row_style = "class=\"equation_row_style\"";
        if ($truthy(options['$include?']("numbered"))) {
          
          $writer = [$rb_plus($rb_plus($rb_plus(["" + "+++<table " + (table_style) + "><tr " + (row_style) + ">+++"], equation_part), number_part), [Opal.const_get_relative($nesting, 'TABLE_ROW_END')])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = [$rb_plus($rb_plus(["" + "+++<table " + (table_style) + "><tr " + (row_style) + ">+++"], equation_part), [Opal.const_get_relative($nesting, 'TABLE_ROW_END')])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };
      }, TMP_Html5ConverterExtensions_handle_equation_align_11.$$arity = 1);
      
      Opal.defn(self, '$handle_equation_align_literal', TMP_Html5ConverterExtensions_handle_equation_align_literal_12 = function $$handle_equation_align_literal(node) {
        var self = this, attrs = nil, options = nil, $writer = nil, number_part = nil, equation_part = nil, table_style = nil, row_style = nil;

        
        attrs = node.$attributes();
        options = attrs['$[]']("options");
        
        $writer = [nil];
        $send(node, 'title=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        number_part = $rb_plus("<td class=\"equation_number_style\">", "" + "(" + (node.$caption()) + ") </td>");
        number_part = ["" + (number_part)];
        equation_part = $rb_plus($rb_plus($rb_plus($rb_plus(["<td class=\"equation_content_style\";>"], ["\\[\\begin{split}"]), node.$lines()), ["\\end{split}\\]"]), ["</td>"]);
        table_style = "class=\"equation_table_style\" ";
        row_style = "class=\"equation_row_style\"";
        if ($truthy(options['$include?']("numbered"))) {
          
          $writer = [$rb_plus($rb_plus($rb_plus(["" + "<table " + (table_style) + "><tr " + (row_style) + ">"], equation_part), number_part), ["</tr></table>"])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = [$rb_plus($rb_plus(["" + "<table " + (table_style) + "><tr " + (row_style) + ">"], equation_part), ["</tr></table>"])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };
      }, TMP_Html5ConverterExtensions_handle_equation_align_literal_12.$$arity = 1);
      
      Opal.defn(self, '$handle_cd', TMP_Html5ConverterExtensions_handle_cd_13 = function $$handle_cd(node) {
        var self = this, $writer = nil;

        
        
        $writer = [nil];
        $send(node, 'title=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [["\\[", "\\require{AMScd}", "\\begin{CD}", node.$lines(), "\\end{CD}", "\\]"]];
        $send(node, 'lines=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_Html5ConverterExtensions_handle_cd_13.$$arity = 1);
      
      Opal.defn(self, '$handle_chem', TMP_Html5ConverterExtensions_handle_chem_14 = function $$handle_chem(node) {
        var self = this, $writer = nil, number_part = nil, equation_part = nil, table_style = nil, row_style = nil;

        
        
        $writer = [nil];
        $send(node, 'title=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        number_part = $rb_plus("<td class=\"equation_number_style\">", "" + "(" + (node.$caption()) + ") </td>");
        number_part = ["" + "+++ " + (number_part) + " +++"];
        equation_part = $rb_plus($rb_plus(["+++<td class=\"equation_content_style\">+++"], [$rb_plus($rb_plus(" \\[\\ce{", node.$lines()['$[]'](0)), "}\\] ")]), ["+++</td>+++"]);
        table_style = "class=\"equation_table_style\"";
        row_style = "class=\"equation_row_style\"";
        
        $writer = [$rb_plus($rb_plus($rb_plus(["" + "+++<table " + (table_style) + "><tr " + (row_style) + ">+++"], equation_part), number_part), ["+++</tr></table>+++"])];
        $send(node, 'lines=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_Html5ConverterExtensions_handle_chem_14.$$arity = 1);
      
      Opal.defn(self, '$handle_jsxgraph', TMP_Html5ConverterExtensions_handle_jsxgraph_15 = function $$handle_jsxgraph(node) {
        var self = this, attrs = nil, $writer = nil, line_array = nil;

        
        attrs = node.$attributes();
        if (attrs['$[]']("box")['$=='](nil)) {
          
          $writer = ["box", "box"];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if (attrs['$[]']("width")['$=='](nil)) {
          
          $writer = ["width", 450];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if (attrs['$[]']("height")['$=='](nil)) {
          
          $writer = ["height", 450];
          $send(attrs, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        line_array = ["\n+++\n"];
        line_array = $rb_plus(line_array, ["<link rel='stylesheet' type='text/css'  href='http://jsxgraph.uni-bayreuth.de/distrib/jsxgraph.css' />"]);
        line_array = $rb_plus(line_array, ["<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/jsxgraph/0.99.3/jsxgraphcore.js\"></script>"]);
        line_array = $rb_plus(line_array, ["<script src='http://jsxgraph.uni-bayreuth.de/distrib/GeonextReader.js' type='text/javascript'></script>"]);
        line_array = $rb_plus(line_array, [$rb_plus($rb_plus($rb_plus($rb_plus("" + "<div id='" + (attrs['$[]']("box")) + "' class='jxgbox' style='width:", "" + (attrs['$[]']("width"))), "px; height:"), "" + (attrs['$[]']("height"))), "px;'></div>")]);
        line_array = $rb_plus(line_array, ["<script type=\"text/javascript\">"]);
        line_array = $rb_plus(line_array, node.$lines());
        line_array = $rb_plus(line_array, ["</script>"]);
        line_array = $rb_plus(line_array, ["<br/>"]);
        line_array = $rb_plus(line_array, ["\n+++\n"]);
        
        $writer = [line_array];
        $send(node, 'lines=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_Html5ConverterExtensions_handle_jsxgraph_15.$$arity = 1);
      
      Opal.defn(self, '$handle_null', TMP_Html5ConverterExtensions_handle_null_16 = function $$handle_null(node) {
        var self = this;

        return nil
      }, TMP_Html5ConverterExtensions_handle_null_16.$$arity = 1);
      
      Opal.defn(self, '$handle_code', TMP_Html5ConverterExtensions_handle_code_17 = function $$handle_code(node) {
        var self = this, $writer = nil;
        if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;

        
        if ($truthy($gvars.VERBOSE)) {
          self.$warn("handle code".$red())};
        if ($truthy(node.$attributes()['$[]']("id")['$nil?']())) {
          
          
          $writer = ["FOO"];
          $send(node, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["666"];
          $send(node, 'caption=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
          } else {
          return nil
        };
      }, TMP_Html5ConverterExtensions_handle_code_17.$$arity = 1);
      
      Opal.defn(self, '$handle_default', TMP_Html5ConverterExtensions_handle_default_18 = function $$handle_default(node) {
        var self = this, $writer = nil;

        if ($truthy(node.$attributes()['$[]']("plain-option"))) {
          
          $writer = [$rb_plus($rb_plus([Opal.const_get_relative($nesting, 'ENV_CSS_PLAIN')], node.$lines()), [Opal.const_get_relative($nesting, 'DIV_END')])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = [$rb_plus($rb_plus([Opal.const_get_relative($nesting, 'ENV_CSS_OBLIQUE')], node.$lines()), [Opal.const_get_relative($nesting, 'DIV_END')])];
          $send(node, 'lines=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }
      }, TMP_Html5ConverterExtensions_handle_default_18.$$arity = 1);
    })($nesting[0], $nesting);
    (function($base, $super, $parent_nesting) {
      function $Converter(){};
      var self = $Converter = $klass($base, $super, 'Converter', $Converter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Converter_19, TMP_Converter_20, TMP_Converter_initialize_21, TMP_Converter_convert_22;

      
      self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Converter'));
      self.$register_for("latex");
      $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'register', [], (TMP_Converter_19 = function(){var self = TMP_Converter_19.$$s || this, $a, $b, dialect = nil;

      
        dialect = ($truthy($a = ($truthy($b = self.$document().$options()['$[]']("dialect")) ? $b : self.$document().$attributes()['$[]']("dialect"))) ? $a : "latex");
        if ($truthy(["asciidoc", "manuscript"]['$include?'](dialect))) {
          if ($truthy(self.$document()['$basebackend?']("tex"))) {
            self.$preprocessor(Opal.const_get_relative($nesting, 'DollarPreprocessor'))}};
        if ($truthy(["latex", "manuscript"]['$include?'](dialect))) {
          
          if (self.$document().$attributes()['$[]']("css_extras")['$==']("include")) {
            self.$preprocessor(Opal.const_get_relative($nesting, 'ClickStyleInsert'))};
          self.$preprocessor(Opal.const_get_relative($nesting, 'MacroPreprocessor'));
          self.$block(Opal.const_get_relative($nesting, 'EnvironmentBlock'));
          self.$block(Opal.const_get_relative($nesting, 'EnvironmentBlock2'));
          self.$block(Opal.const_get_relative($nesting, 'ClickBlock'));
          self.$inline_macro(Opal.const_get_relative($nesting, 'GlossInlineMacro'));
          self.$inline_macro(Opal.const_get_relative($nesting, 'IndexTermInlineMacro'));
          if (self.$document().$attributes()['$[]']("inject_javascript")['$==']("no")) {
            } else {
            self.$postprocessor(Opal.const_get_relative($nesting, 'InjectHTML'))
          };
          if (self.$document().$attributes()['$[]']("unicode")['$==']("no")) {
          } else if ($truthy(self.$document()['$basebackend?']("tex"))) {
            self.$postprocessor(Opal.const_get_relative($nesting, 'EntToUni'))};
          self.$docinfo_processor(Opal.const_get_relative($nesting, 'CSSDocinfoProcessor'));};
        if ($truthy(["latex"]['$include?'](dialect))) {
          
          if (self.$document().$attributes()['$[]']("preprocess")['$==']("no")) {
            } else {
            self.$preprocessor(Opal.const_get_relative($nesting, 'TeXPreprocessor'))
          };
          if ($truthy(Opal.const_get_relative($nesting, 'File')['$exist?']("macros.tex"))) {
            self.$preprocessor(Opal.const_get_relative($nesting, 'MacroInsert'))};
          self.$inline_macro(Opal.const_get_relative($nesting, 'ChemInlineMacro'));
          self.$block_macro(Opal.const_get_relative($nesting, 'IncludeLatexBlockMacro'));
          if ($truthy(self.$document()['$basebackend?']("html"))) {
            self.$postprocessor(Opal.const_get_relative($nesting, 'Chem'))};
          if ($truthy(self.$document()['$basebackend?']("html"))) {
            self.$postprocessor(Opal.const_get_relative($nesting, 'HTMLPostprocessor'))};
          if ($truthy(self.$document()['$basebackend?']("tex"))) {
            return self.$postprocessor(Opal.const_get_relative($nesting, 'TexPostprocessor'))
            } else {
            return nil
          };
          } else {
          return nil
        };}, TMP_Converter_19.$$s = self, TMP_Converter_19.$$arity = 0, TMP_Converter_19));
      $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Extensions'), 'register', ["latex"], (TMP_Converter_20 = function(){var self = TMP_Converter_20.$$s || this;

      return nil}, TMP_Converter_20.$$s = self, TMP_Converter_20.$$arity = 0, TMP_Converter_20));
      Opal.const_set($nesting[0], 'TOP_TYPES', ["document", "section"]);
      Opal.const_set($nesting[0], 'LIST_TYPES', ["dlist", "olist", "ulist"]);
      Opal.const_set($nesting[0], 'INLINE_TYPES', ["inline_anchor", "inline_break", "inline_footnote", "inline_quoted", "inline_callout", "inline_indexterm"]);
      Opal.const_set($nesting[0], 'BLOCK_TYPES', ["admonition", "listing", "literal", "page_break", "paragraph", "stem", "pass", "open", "quote", "\n", "example", "floating_title", "image", "click", "preamble", "sidebar", "verse", "toc"]);
      Opal.const_set($nesting[0], 'OTHER_TYPES', ["environment", "environment_literal", "table"]);
      Opal.const_set($nesting[0], 'NODE_TYPES', $rb_plus($rb_plus($rb_plus($rb_plus(Opal.const_get_relative($nesting, 'TOP_TYPES'), Opal.const_get_relative($nesting, 'LIST_TYPES')), Opal.const_get_relative($nesting, 'INLINE_TYPES')), Opal.const_get_relative($nesting, 'BLOCK_TYPES')), Opal.const_get_relative($nesting, 'OTHER_TYPES')));
      
      Opal.defn(self, '$initialize', TMP_Converter_initialize_21 = function $$initialize(backend, opts) {
        var self = this, $iter = TMP_Converter_initialize_21.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Converter_initialize_21.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Converter_initialize_21, false), $zuper, $iter);
        self.$basebackend("tex");
        return self.$outfilesuffix(".tex");
      }, TMP_Converter_initialize_21.$$arity = 2);
      $gvars.latex_environment_names = [];
      $gvars.label_counter = 0;
      return (Opal.defn(self, '$convert', TMP_Converter_convert_22 = function $$convert(node, transform) {
        var self = this;

        if (transform == null) {
          transform = nil;
        }
        if ($truthy(Opal.const_get_relative($nesting, 'NODE_TYPES')['$include?'](node.$node_name()))) {
          return node.$tex_process()
          } else {
          return self.$warn((((("" + "Node to implement: ") + (node.$node_name())) + ", class = ") + (node.$class())).$magenta())
        }
      }, TMP_Converter_convert_22.$$arity = -2), nil) && 'convert';
    })($nesting[0], null, $nesting);
  })(Opal.const_get_relative($nesting, 'Asciidoctor'), $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Html5Converter(){};
    var self = $Html5Converter = $klass($base, $super, 'Html5Converter', $Html5Converter);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    if ($truthy(self['$respond_to?']("prepend"))) {
      return self.$prepend(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'LaTeX'), 'Html5ConverterExtensions'))
      } else {
      return self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'LaTeX'), 'Html5ConverterExtensions'))
    }
  })(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Converter'), null, $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor/latex"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$+', '$dirname', '$expand_path', '$require']);
  
  (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $LaTeX, self = $LaTeX = $module($base, 'LaTeX');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'DATA_DIR', $rb_plus(Opal.const_get_qualified('::', 'File').$dirname(Opal.const_get_qualified('::', 'File').$dirname(Opal.const_get_qualified('::', 'File').$dirname(Opal.const_get_qualified('::', 'File').$expand_path("asciidoctor/latex")))), "/data"))
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  self.$require("asciidoctor/latex/version");
  return self.$require("asciidoctor/latex/converter");
};

/* Generated by Opal 0.11.0.rc1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("asciidoctor/latex")
})(Opal);


  return Opal.Asciidoctor;
}));
